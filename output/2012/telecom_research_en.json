{"rule_id": 38, "name": "telecom_research_en", "description": "-", "references": [], "File_Names": ["AES.new", "sys.argv", "LDVPTASK.OCX", "AkavMiqo.exe", "Dr.Web", "surfanny.com", "default.ini", "mdmslbv.inf", "CLNTCON.OCX", "SRVCON.OCX", "msrers.exe", "sti.dll", "clockinstall.tmp", "telecom.cfg", "l8t.net", "exp.name", "db.asp", "netcfg.dll", "globnewsline.com", "mscuicfg.dat", "youtubemail.club", "pefile.PE", "mcupdui.exe", "sultris.com", "firefox.exe", "prefs.js", "mcupdui.ini", "OneClock.exe", "TmDbgLog.dll", "TSC.dec", "wordmoss.com", "bksotw.inf", "rapi.dll", "f.read", "Tool.Frp", "McUiCfg.dll"], "MD5_Hashes": [], "SHA1_Hashes": ["a8bff99e1ea76d3de660ffdbd78ad04f81a8c659", "b1041acbe71d46891381f3834c387049cbbb0806", "b3ecb0ac5bebc87a3e31adc82fb6b8cc4fb66d63", "a5829ed81f59bebf35ffde10928c4bc54cadc93b", "20ad53e4bc4826dadb0da7d6fb86dd38f1d13255", "23873bf2670cf64c2440058130548d4e4da412dd", "16728655e5e91a46b16c3fe126d4d18054a570a1", "a6e9f5d8295d67ff0a5608bb45b8ba45a671d84c", "8b9e60735344f91146627213bd13c967c975a783", "635e3cf8fc165a3595bb9e25030875f94affe40f", "cc5bce8c91331f198bb080d364aed1d3301bfb0c", "4f0ea31a363cfe0d2bbb4a0b4c5d558a87d8683e", "abfd737b14413a7c6a21c8757aeb6e151701626a", "429357f91dfa514380f06ca014d3801e3175894d", "5a171b55b644188d81218d3f469cf0500f966bac", "46e999d88b76cae484455e568c2d39ad7c99e79f", "84d5f015d8b095d24738e45d2e541989e6221786", "595b5a7f25834df7a4af757a6f1c2838eea09f7b", "be4d8344669f73e9620b9060fd87bc519a05617a", "7412b13e27433db64b610f40232eb4f0bf2c8487", "36624dc9cd88540c67826d10b34bf09f46809da7", "ff82dcadb969307f93d73bbed1b1f46233da762f", "3d8a3fcfa2584c8b598836efb08e0c749d4c4aab", "f783fc5d3fc3f923c2b99ef3a15a38a015e2735a", "65f64cc7aaff29d4e62520afa83b621465a79823", "39c5459c920e7c0a325e053116713bfd8bc5ddaf", "1a4b8232237651881750911853cf22d570eada9e", "a3347d3dc5e7c3502d3832ce3a7dd0fc72e6ea49", "4F638B91E12390598F037E533C0AEA529AD1A371"], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings,\nkeys ProxyEnable and ProxyServer\n\n\u00b7 Reads proxy settings from Mozilla Firefox settings - %APPDATA%\n\n\\Mozilla\\Firefox\\<profile>\\prefs.js\n\n\u00b7 Checks for stored login:password from the proxy server in Mozilla Firefox and Internet\n\nExplorer\n\nControl server protocol\n\nEstablishing a connection to the server mimics the creation of a TLS1.0 connection between the\nclient and the server. Trojan body contains two buffers:\n\n1. Contains the TLS1.0 Client Hello package:\n\n2. Contains TLS 1.0 Client Key Exchange packets with key length 0x100 bytes, Change Cipher\n\nSpec, Client Handshake Finished:\n\n\f25\n\n25\n\nWhen sending a Client Hello packet, the trojan encrypts all bytes of the Client Random field,\nstarting from the 4th one, using the XOR method with random bytes. It also records the current\ntime in the first 4. The server's response to this message is accepted, but the data is ignored.\n\nWhen sending the second packet, the backdoor also encrypts the Client Key Exchange packet\u2019s\npublic key field using the XOR method with random bytes, and writes its 28-byte key into the\ndata of the Client Handshake Finished packet. That\u2019ll be used to encrypt and decrypt packets\nsent or received from the server. The backdoor encrypts the last 4 bytes of the Client Handshake\nFinished packet with random bytes. Then, it sends it to the command and control server. In\nresponse, the server sends its own key. That key is used to initialize the key shared with the client.\n\nAfter that, the backdoor enters the command processing cycle from the control server. The\ntraffic between the client and the server is encrypted using the RC4 algorithm.\n\nThe list of commands:\n\nopcode\n\nCommand\n\n0x01\n\n0x02\n\n0x03\n\nGathering information regarding the infected device\n\nRemote shell\n\nFile manager (see below for commands ending in 3)\n\n0x100\n\nKeep-Alive\n\n0x103\n\nOpen file for writing\n\n\f26\n\n26\n\n0x203\n\nDownload a file\n\n0x303\n\nData to be written\n\n0x400\n\nReconnect to server\n\n0x403\n\nObtain information about disk or directory listing;\n\n0x500\n\nTo finish work\n\n0x503\n\nMove a file\n\n0x600\n\nDelete proxy configuration ini file\n\n0x603\n\nDelete a file\n\n0x703\n\nRun a process\n\n0x700\n\nExecute a command during ShellExecute\n\n0x800\n\nRenew configuration\n\n\f27\n\n27\n\nTrojan.DownLoader43.44599\n\nAdded to the Dr.Web virus database: 2021-10-15\n\nVirus description added: 2021-10-20\n\nPacker: absent\n\nCompilation date: 2020-07-13\n\nSHA1 hash: 1a4b8232237651881750911853cf22d570eada9e\n\nDescription\n\nThe trojan is written in C++. It\u2019s used for unauthorized control of an infected computer.\n\nOperating principle\n\nIn the beginning, the trojan decrypts the C&C server\u2019s IP addresses and ports using the XOR\noperation:\n\nimport idaapi\n\naddress = 0x416200\n\nfor i in xrange(0x7c):\n\n    idaapi.patch_byte(address + i, idaapi.get_byte(address + i) ^ 0xEF)\n\nDecryption result:\n\n \n \n\f28\n\n28\n\nC&C server\u2014159.65.157.100:443\n\nCommunication with it occurs using sockets:\n\n\f29\n\n29\n\nDepending on the time, the connection to the required C&C server will be selected:\n\n\f30\n\n30\n\nThe trojan creates file tmp.0 in folder %tmp%, that it use as log.\n\n\f31\n\n31\n\nCollect information about the system:\n\n\f32\n\n32\n\n\f33\n\n33\n\n\f34\n\n34\n\nTrojan.DownLoader43.44599 pushes each value onto a stack before encrypting and sending the\ncollected data. The transferred data looks as follows:\n\nstruct computer_info {\n\n    string computer_name;\n\n    string user_name;\n\n    uint32_t major_version;\n\n    uint32_t minor_version;\n\n    uint32_t build_number;\n\n    uint32_t computer_bitness;\n\n    string March01;\n\n    uint32_t code_page_id;\n\n    uint32_t oem_code_page_id;\n\n};\n\nTo encrypt the information collected about the system, the AES128 algorithm is used in CBC\nmode.\n\nThe key and initialization vector are embedded inside:\n\n\f35\n\n35\n\nThe decryption method looks as follows:\n\nfrom Crypto.Cipher import AES\n\nkey = '\\x95\\x2B\\x2D\\xBF\\x09\\xC5\\x2F\\x80\\xB4\\xBC\\x47\\x27\\x29\\xB3\\x28\\x09'\n\niv = '\\x63\\x5F\\x72\\x2A\\xBB\\xE3\\xE8\\x95\\xF8\\xF9\\x32\\x87\\x53\\x6A\\x77\\xFB'\n\nenc = ...\n\ndecipher = AES.new(key, AES.MODE_CBC, iv)\n\nopen('dec', 'wb').write(decipher.decrypt(enc))\n\nThe command execution cycle received from the C&C server:\n\n \n \n\f36\n\n36\n\nTable of commands compiled from the results of this cycle:\n\nCommand ID\n\nCommand\n\n0x51\n\n0x52\n\n0x54\n\n0x60\n\nCreating cmd.exe process\n\nExecution command exit in cmd.exe\n\nExecute commands in the cmd.exe console;\n\nCreating the flow that reads, writes, and encrypts files.\n\n\f37\n\n37\n\nTrojan.Loader.891\n\nAdded to the Dr.Web virus database: 2021-10-15\n\nVirus description added: 2021-xx-xx\n\nPacker: absent\n\nCompilation date: 2021-09-03 12:04:44\n\nSHA1 hash: 595b5a7f25834df7a4af757a6f1c2838eea09f7b\n\nDescription\n\nThis trojan is written in C. The program contains several files, and the trojan uses each file\nsequentially. The trojan\u2019s main task is to decrypt the shellcode and execute it. The decrypted\nshellcode contains BackDoor.Whitebird.30, a module for bypassing UAC and backdoor\nconfiguration.\n\nOperating principle\n\nThe trojan folder contains the following files:\n\n\u00b7 mcupdui.exe \u2014 the executable file into which the malicious library is loaded using\n\nHijacking DLL has a valid McAfee signature:\n4F638B91E12390598F037E533C0AEA529AD1A371: CN=McAfee, Inc., OU=IIS,\nOU=Digital ID Class 3 - Microsoft Software Validation v2,\nO=McAfee, Inc., L=Santa Clara, S=California, C=US\n\n\u00b7 McUiCfg.dll \u2014 downloader\n\n\u00b7 mscuicfg.dat \u2014 encrypted shellcode\n\n\u00b7 mcupdui.ini \u2014 configuration of trojan\n\nTo move to the main malicious functionality, the trojan modifies the process memory:\n\nThe instruction following the malicious library\u2019s download library is modified:\n\n\f38\n\n38\n\nTrojan.Loader.891 finds all the functions it needs by hashes using the PEB (Process Environment\nBlock) structure.\n\nAt the same time, the names of libraries and functions are hashed differently: library names are\nhashed as Unicode strings converted to upper case. Function names are hashed as ASCII strings\nwithout changing the case. The resulting two hashes are added together and then compared\nwith the desired one.\n\nror = lambda val, r_bits, max_bits: \\\n\n    ((val & (2 ** max_bits - 1)) >> r_bits % max_bits) | \\\n\n    (val << (max_bits - (r_bits % max_bits)) & (2 ** max_bits - 1))\n\ndef hash_lib_whitebird(name: bytes) -> int:\n\n    a = name.upper() + b'\\x00'\n\n    c = 0\n\n    for i in range(0, len(a)):\n\n        c = (a[i] + ror(c, 13, 32)) & 0xffffffff\n\n        # library name is a unicode string\n\n        c = (0 + ror(c, 13, 32))\n\n    return c\n\n \n \n \n \n \n\f39\n\n39\n\ndef hash_func_whitebird(name: bytes) -> int:\n\n    a = name + b'\\x00'\n\n    c = 0\n\n    for i in range(0, len(a)):\n\n        c = (a[i] + ror(c, 13, 32)) & 0xffffffff\n\n    return c\n\nTrojan\u2019s main functions are encrypted. When the function is called, it decrypts its code, and when\nit exits, it encrypts it back.\n\nMain function:\n\nTrojan.Loader.891 obtains the MAC addresses of all network interfaces on the computer. The\ntrojan then reads data from the mscuicfg.dat file. If the last 6 bytes are zero, then it writes the\nfirst MAC address from the list into them and encrypts this file with the RC4 algorithm. In this\n\n \n \n\f40\n\n40\n\ncase, the key is equal to the MAC address written to the file, so the encrypted data is saved to\nthe file mscuicfg.dat.\n\nAfter that, in any way, the trojan reads the file again, sorting through each of the received MAC\naddresses until it finds the right one. The decryption\u2019s correctness is checked by matching the\nlast 6 decrypted bytes with the encryption key. Upon successful decryption, the trojan cuts them\noff and decrypts the file again using the RC4 algorithm, but takes the string mscuicfg.dat as\nthe key. The received data is a shellcode with a configuration and a payload.\n\nShellcode\n\nThe shellcode is obfuscated with a lot of JMP instructions and each value is computed with a lot\nof SUB, ADD, and XOR operations:\n\nThe shellcode\u2019s principle is to decrypt the payload and load it into memory for execution.\n\nThe last DWORD of the shellcode contains the OFFSET before the start of the payload.\n\nEncrypted data at this stage:\n\n\f41\n\n41\n\n\f42\n\n42\n\nFor decryption, XOR with a dynamic key is used:\n\nk = 0x37\n\ns = bytearray()\n\nfor i in range(len(d)):\n\n    c = d[i] ^ k\n\n    s.append(c)\n\n    k = (k + c) & 0xff\n\nThe decrypted data contains an MZPE file with signatures replaced:\n\n\f43\n\n43\n\nThe decoded module is BackDoor.Whitebird.30. In addition, the module overlay contains an\nencrypted configuration and a module for bypassing UAC:\n\n\f44\n\n44\n\n\f45\n\n45\n\nTrojan.Loader.896\n\nAdded to the Dr.Web virus database: 2021-11-03\n\nVirus description added: 2021-11-17\n\nPacker: absent\n\nCompilation date: 2020-14-10\n\nSHA1 hash: ff82dcadb969307f93d73bbed1b1f46233da762f\n\nDescription\n\nThe backdoors downloader, PlugX, is written in C.\n\nOperating principle\n\nAfter loading from the main module (msrers.exe) using the LoadLibraryW function, the\ntrojan loads the kernel32.dll library using the LoadLibraryA. Then, it gets the address of\nthe exported function GetModuleFileNameA:\n\nIt then obtains the name of the main module using the previously obtained function\nGetModuleFileNameA. It checks if the name contains the substring ", "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\InstallDate\n\nHKLM\\System\\ControlSet001\\Control\\ComputerName\\ComputerName\n\n16\n\n16\n\nThe shellcode is stored in the following registry keys:\n\nHKLM\\Software\\BINARY\n\nHKCU\\Software\\BINARY\n\n\f17\n\n17\n\nBefore running the shellcode, it\u2019ll be decrypted in 2 steps: first, using the RC4 algorithm:\n\nthen, with XOR:\n\n\f18\n\n18\n\nBackDoor.Siggen2.3622\n\nAdded to the Dr.Web virus database: 2021-11-03\n\nVirus description added: 2021-xx-xx\n\nPacker: UPX\n\nSHA1 hash: be4d8344669f73e9620b9060fd87bc519a05617a\n\nDescription\n\nA backdoor written in Go. It\u2019s packed by UPX. Investigated backdoor version V2.5.5 z 2021.7.19.\n\nOperating principle\n\nIn the beginning, the malicious code checks if another backdoor copy is running. The trojan\nchecks for the c:\\windows\\inf\\mdmslbv.inf file. If it exists, the trojan starts reading. You\ncan use the following script to decrypt:\n\nimport sys\n\nwith open(sys.argv[1], 'rb') as f:\n\n    d = f.read()\n\ns = bytearray()\n\nfor i in range(len(d)):\n\n    s.append(d[i])\n\nfor i in range(len(s)-2, 0, -1):\n\n    s[i] = (((s[i + 1] * s[i + 1]) ^ s[i]) & 0xff)\n\nwith open(sys.argv[1] + '.dec', 'wb') as f:\n\n    f.write(s)\n\nEncrypted file\u2019s length\n\nThe packet\u2019s structure:\n\n \n \n \n \n \n\f19\n\n19\n\n\u00b7 random string from 10 to 19 characters long\n\n\u00b7 between the <a>...</a> tags contains the backdoor process\u2019s PID\n\n\u00b7 between the <b>...</b> tags is the process\u2019s name\n\n\u00b7 random string from 10 to 19 characters long\n\nThe trojan checks for the existence of a process with the specified parameters. If it finds it, the\ntrojan terminates its work.\n\nIf it doesn\u2019t find a process with the specified parameters or the mdmslbv.inf file itself, the\ntrojan generates data as shown above. Then, it encrypts and writes to the c:\n\\windows\\inf\\mdmslbv.inf.\n\nCommunication with the command and control server\n\nThe trojan has command and control server: blog[.]globnewsline[.]com.\n\nThe trojan sends a GET request to the following URL: \nhxxps://blog.globnewsline.com:443/db/db.asp using User-Agent "], "URLs": ["https://blog.globnewsline.com:443/db/db.asp?m=w&n=", "https://github.com/cnsimo/BypassUAC/blob/master/BypassUAC_Dll/dllmain", "https://blog.globnewsline.com:443/db/A<macaddr>.c"], "weight": 0.0}