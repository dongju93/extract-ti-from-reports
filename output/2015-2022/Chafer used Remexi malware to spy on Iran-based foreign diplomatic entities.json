{"rule_id": 399, "name": "Chafer used Remexi malware to spy on Iran-based foreign diplomatic entities", "description": "-", "references": [], "File_Names": ["upSpecial.txt", "upLog.txt", "task.xml", "cde00.acf", "asp.asp", "HCK.cab", "XPTask.vbs", "events.exe", "key3.db", "Splitter.exe", "splitter.exe", "upSCRLog.txt", "upFile.txt", "Events.exe", "upMSLog.txt"], "MD5_Hashes": ["1ff40e79d673461cd33bd8b68f8bb5b8", "53e035273164f24c200262d61fa374ca", "d3a2b41b1cd953d254c0fc88071e5027", "c981273c32b581de824e1fd66a19a281", "4bf178f778255b6e72a317c2eb8f4103", "25469ddaeff0dd3edb0f39bbe1dcdc46", "028515d12e9d59d272a2538045d1f636", "03055149340b7a1fd218006c98b30482", "9f313e8ef91ac899a27575bc5af64051", "aa6246dc04e9089e366cc57a447fc3a4", "c6721344af76403e9a7d816502dca1c8", "12477223678e4a41020e66faebd3dd95", "460211f1c19f8b213ffaafcdda2a7295", "dcb0ea3a540205ad11f32b67030c1e5a", "7d1efce9c06a310627f47e7d70543aaf", "ecae141bb068131108c1cd826c82d88b", "41b2339950d50cf678c0e5b34e68f537", "1FF40E79D673461CD33BD8B68F8BB5B8"], "SHA1_Hashes": [], "SHA256_Hashes": ["b1fa803c19aa9f193b67232c9893ea57574a2055791b3de9f836411ce000ce31", "a77f9e441415dbc8a20ad66d4d00ae606faab370ffaee5604e93ed484983d3ff"], "Registry_Entries": ["HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Microsoft Activity Manager\n\nVictims\u2019 fingerprints stored in\n\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\PidRegData or\nHKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\PidRegData\n\nRC4 encrypted C2 commands stored in\n\nHKCU\\SOFTWARE\\Microsoft\\Fax\n\nHTTP requests template\n\nhttp:///asp.asp?ui=nrg--\nAnd bitsadmin.exe task to external network resources, addressed by IP addresses\n\n8/8\n\n\f", "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\n\nwhen it finds possible add values to the Winlogon subkey, and in\n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Microsoft Activity Manager.\nAll such indicators of comprometation are mentioned in correspondent appendix\nbelow.\n\nCommands\n\nAll the commands received from the C2 are first saved to an auxiliary file and then\nstored encrypted in the system registry. The standalone thread will decrypt and\nexecute them.\n\nCommand\n\nDescription\n\nsearch\n\nSearches for corresponding files\n\nsearch&upload Encrypts and adds the corresponding files to the upload directory with the\n\nprovided name\n\nuploadfile\n\nEncrypts and adds the specified file to the upload directory with the provided\nname\n\nuploadfolder\n\nEncrypts and adds the mentioned directory to the upload directory with the\nprovided name\n\nshellexecute\n\nSilently executes received command with cmd.exe\n\nwmic\n\nSilently executes received command with wmic.exe (for WMI commands)\n\nsendIEPass\n\nEncrypts and adds all gathered browser data into files for upload to C2\n\nuninstall\n\nRemoves files, directory and BITS tasks\n\nCryptography\n\nTo decrypt the configuration data, the malware uses XOR with 25-character keys such\nas \u201cwaEHleblxiQjoxFJQaIMLdHKz\u201d that are different for every sample. RC4 file\nencryption relies on the Windows 32 CryptoAPI, using the provided value\u2019s MD5 hash\nas an initial vector. Among all these random keys once the word \u201csalamati\u201d was also\nused, which means \u201chealth\u201d in Farsi.\n\nConfiguration\n\nConfig.ini is the file where the malware stores its encrypted configuration data. It\ncontains the following fields:\n\nField\n\nSample value\n\nDescription\n\n3/8\n\n\fdiskFullityCheckRatio\n\n1.4\n\ncaptureScreenTimeOut\n\n72\n\ncaptureActiveWindowTimeOut\n\n313\n\ncaptureScreenQC\n\ncaptureActiveQC\n\nCaptureSites\n\nimportant\n\n40\n\n40\n\nVPN*0,0\nLogin*0,0\nmail*0,0\nSecurity*0,0\n\nupLog.txt\nupSCRLog.txt\nupSpecial.txt\nupFile.txt\nupMSLog.txt\n\nMalware working directory size\nthreshold. It will be deleted if it\nbecomes as large as the free available\nspace multiplied by this ratio\n\nProbability of full and active window\nscreenshots being taken after mouse\nclick\n\nNot really used. Probably full and active\nwindow screenshot quality\n\nWindow titles of interest for\nscreenshots, using left mouse button\nand Enter keypress hook\n\nList of files to send to C2 using\nbitsadmin.exe from the dedicated\nthread\n\nmaxUpFileSizeKByte\n\n1000000\n\nMaximum size of file uploaded to C2\n\nServers\n\nZipPass\n\nhttp://108.61.189.174 Control server HTTP URL\n\nKtJvOXulgibfiHk\n\nPassword for uploaded zip archives\n\nbrowserPasswordCheckTimeout 300000\n\nMilliseconds to wait between gathering\nkey3.db, cookies.sqlite and other\nbrowser files in dedicated thread\n\nMost of the parameters are self-explanatory. However, captureScreenTimeOut and\ncaptureActiveWindowTimeOut are worth describing in more detail as their\nprogramming logic is not so intuitive.\n\nOne of the malware threads checks in an infinite loop if the mouse button was pressed\nand then also increments the integer iterator infinitely. If the mouse hooking function\nregisters a button hit, it lets the screenshotting thread know about it through a global\nvariable. After that, it checks if the iterator divided by\n(captureScreenTimeOut/captureActiveWindowTimeOut) has a remainder of 0. In that\ncase, it takes a screenshot.\n\nMain module (events.exe)\n\nSHA256\n\nb1fa803c19aa9f193b67232c9893ea57574a2055791b3de9f836411ce000ce31\n\nMD5\n\nc981273c32b581de824e1fd66a19a281\n\nCompiled GCC compiler in MinGW environment version 2.24, timestamp set to 1970 by\n\ncompiler\n\nType\n\nI386 Windows GUI EXE\n\n4/8\n\n\fSize\n\n68 608\n\nAfter checking that the malware is not already installed, it unpacks HCK.cab using the\nMicrosoft standard utility expand.exe with the following arguments:\n\n1 expand.exe -r \\"], "URLs": ["http://108.61.189.174", "http:///asp.asp?ui=nrg--"], "weight": 0.0}