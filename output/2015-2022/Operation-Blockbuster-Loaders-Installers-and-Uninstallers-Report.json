{"rule_id": 496, "name": "Operation-Blockbuster-Loaders-Installers-and-Uninstallers-Report", "description": "-", "references": [], "File_Names": ["vlt.bat", "hwp_vs6_com_dll.dll", "pmslog.msi", "setup_bobofile.exe", "cvrit000.bat", "nefficient.co", "rdmgr.dll", "winauc.dll", "tsc.bat", "PM0D4.bat", "rtdrvupr.exe", "abcdef.exe", "msgl.bat", "wmisecsvc.dll", "mcu.dll", "StartupInfo.cb", "dvi.bat", "netmonsvc.dll", "filecity.co", "d.bat", "dvpi.dna", "SBUpdate.exe", "wauserv.dll", "HwpFilePathCheck.dll", "Mwsagent.dll", "sharebox.co", "_ver.ini", "network.If", "tmscompg.ini", "tmscompg.msi", "a.dll", "AdobeArm.exe", "bobofile.co", "product2014vp_01.jsp", "screensaver.exe", "pmsconfig.msi", "userenv.dll", "abcdef.pdf", "AUTOEXEO.bat", "tl.cpl", "001pdm.bat", "ver.ini", "mcu.inf", "backSched.dll", "perfc010.dat", "altools.com", "ShareBoxC.dat", "winsec.dll", "kr.albn", "setup_filecity.exe"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": ["2b731d82b76f6d50a9d3fd72ac16e6fbb76779b57b114044bb61cd6e422f0cd0", "8fe806470914f9cdaaaa8448aa6317547c618efd65d15947767753fc88bc73d9", "a7622ad260db5e66939e6b571e410df7b6e86cb0b633d155a7e27550f50e9cb6"], "Registry_Entries": ["HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost for \n\nthe new service named Mwsagent\n\n2.  Call CreateServiceA to add the new service to the service\u2019s database\n3.  Call ChangeServiceConfig2A to set the service\u2019s description\n4.  Create a registry key at HKLM\\SYSTEM\\CurrentControlSet\\services\\Mwsagent\n5.  Set the Parameter\\ServiceDll value to point to the dropped LimaBravo binary\n6.  Call StartServiceA to activate the service\n\nNext, IndiaEcho-One attempts to purge itself from the victim\u2019s machine by generating and executing a suicide script. The \nsuicide script (Figure 6-4) is dropped as %TEMP%\\msgl.bat.\n\n:Repeat\ndel ", "HKLM\\SYSTEM\\\nCurrentControlSet\\Services\\ with the generated name of the new service. The Parameters\\ServiceDll \nvalue is set to point to the RomeoFoxtrot-Two binary on the victim\u2019s machine. A new service group is added to the registry \nunder HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost. The generated service name serves \nas both the new service group\u2019s name and its only member. The newly generated service is added to the Windows service \ndatabase by calling CreateServiceA which also adds the description of the service. Lastly, ChangeServiceConfig2A \nis called twice, once to add the description of the service and again to establish the behavior of the service in the \nevent of an error (which is to simply restart the service). Finally, IndiaCharlie-Two activates the service by calling \nStartServiceA (Task #6).\n\nRomeoFoxtrot-Two is a server-mode RAT, and so it requires a listening port on the victim\u2019s machine. In order to allow \nexternally originating network connections, the Windows firewall must be modified by IndiaCharlie-Two to allow \nincoming connections. IndiaCharlie-Two attempts to poke a hole in the victim\u2019s Windows firewall using two methods at \nthe same time (Figure 4-2).\n\ncmd.exe /c netsh advfirewall firewall add rule name=", "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost for \n\nthe new service \n\n2.  Call CreateServiceA to add the new service to the services database\n3.  Call ChangeServiceConfig2A to set the service\u2019s description\n4.  Create a registry key at HKLM\\SYSTEM\\CurrentControlSet\\services\\<name of new service> \n5.  Set Parameter\\ServiceDll value appropriately\n6.  Call StartServiceA to activate the service\n\nFollowing the installation and activation of RomeoMike, IndiaGolf will repeat the tasks again to drop, install, and activate \nDeltaAlfa. The only different between the installation and activation of DeltaAlfa in comparison to RomeoMike is the \neffort required to install the two necessary configuration files for DeltaAlfa (Task #1): an attack activation configuration \nand an attack targeting configuration. IndiaGolf supplies both of the configuration files. The attack targeting \nconfiguration is dropped (in its encrypted form) from a memory buffer within IndiaGolf\u2019s .data section while the attack \nactivation configuration is potentially modified prior to being dropped. If the current time is later than the hardcoded \nDeltaAlfa activation time, then the activation is adjusted to one day after the installation date. In other words, if the \nactivation time specified within IndiaGolf were March 6, 2011 at 9:30 AM, and IndiaGolf were executed on October 8, 2015 \nat noon, IndiaGolf would supply DeltaAlfa with an attack activation configuration specifying October 9, 2015 at noon. For \neach of the DeltaAlfa configuration files that IndiaGolf drops, IndiaGolf generates a new randomized timestamp to assign \nto the files.\n\nDepending on the particular files that an IndiaGolf variant may drop, the tasks for dropping the configuration, \ndecompressing the binary to drop, and installing another service with newly generated service details is repeated for \neach file that is dropped. Once all of the files that the IndiaGolf variant is tasked by the developer(s) to drop have been \nsuccessfully installed and activated, IndiaGolf\u2019s activation function will return and thus terminate the activity associated \nwith IndiaGolf.\n\n36\n\nOperation Blockbuster:  Loaders, Installers and Uninstallers Report\f8.1 IndiaGolf\u2011One\n\nThe activation function (which is exported as StartInstall) of IndiaGolf-One contains additional functionality \nbesides simply calling the installation function. The first operation that IndiaGolf-One performs is the modification \nof the victim\u2019s %SYSDIR%\\drivers\\etc\\hosts file in exactly the same way that TangoBravo performs the task. In \naddition, the functions within IndiaGolf-One responsible for the modification of the hosts file are the same as those \nfound in TangoBravo, indicating that TangoBravo may simply be an offshoot of IndiaGolf-One. The targeted domains \nfound in IndiaGolf-One are a subset of the targeted domains found in TangoBravo:\n\n\u2022  explicitupdate.alyac.co.kr\n\n\u2022  gms.ahnlab.com\n\n\u2022  ko-kr.albn.altools.com\n\n\u2022  ko-kr.alupdatealyac.altools.com\n\n\u2022  su.ahnlab.com\n\n\u2022  su3.ahnlab.com\n\n\u2022  update.ahnlab.com\n\n\u2022  ahnlab.nefficient.co.kr\n\nIndiaGolf-One drops three different malware families in the following order: RomeoMike, DeltaAlfa, and \nWhiskeyBravo-One. The task of dropping RomeoMike and DeltaAlfa occurs in the manner described previously. \nLikewise, the task of dropping, installing, and activating WhiskeyBravo-One follows the same pattern as the RomeoMike \nand DeltaAlfa installation and activation. IndiaGolf generates the configuration of WhiskeyBravo-One by setting the \ninstallation time field (offset 0) to the current system time on the victim\u2019s machine in VARIANTTIME form and the \nactivation delay (offset 8) to 7 days. \n\nIndiaGolf-One generates and executes a suicide script after its tasks are completed. The suicide script generation uses \nfprintf to write the entire script to disk as d.bat in the current working directory of IndiaGolf-One before calling \nCreateProcess to execute the script. The following code fragment illustrates the method of suicide script generation \nand type of suicide script generated for IndiaGolf-One:\n\nfp = fopen(", "HKLM\\SYSTEM\\CurrentControlSet\\services\\<name of new service>\n2.  Set the Description and Parameter\\ServiceDll values appropriately\n3.  Create a new service group under HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost for \n\nthe new service \n\n4.  Call CreateServiceW to add the new service to the services database\n5.  Call ChangeServiceConfig2W to ensure that the service will auto-restart after an error condition\n6.  Call StartServiceW to activate the service\n\nThe values for the service group, the Description and ServiceDll values, and the name of the service are all specific \nto each of the IndiaBravo variants. Table 3-1 shows each of the Description fields for the various IndiaBravo variants \nwith the unique elements in bold. What is particularly interesting about the Description strings is the extremely slight \nvariations between each variant. The similarities between the various Description values vary so little that the typo \nof the missing space in \u201cnetwork.If\u201d is found in all three variants of IndiaBravo. This commonality coupled with the \nfact that different IndiaBravo variants are being used to deliver different malware payloads adds additional support to the \nclaim that IndiaBravo is an installer framework that is customized for each type of dropped malware. \n\nIndiaBravo-RomeoBravo\n\nIndiaBravo-RomeoCharlie\n\nIndiaBravo-PapaAlfa\n\nLocal WMI Security Service provides performance library information from Windows \nManagement Instrumentation providers network. If the Service is not running Wmi \nSecurity log is not being saved.\n\nProvides performance library information from Windows Management Instrumentation \n(WMI) providers to clients on the network. If the Service is not running, Wmi Security log \nis not being saved.\n\nInternet Network Moniter provides performance library information from Windows \nManagement Instrumentation providers network. If the Service is not running, Wmi \nSecurity log is not being saved.\n\nTable 3\u20111: Description Values for the IndiaBravo Variants\n\n12\n\nOperation Blockbuster:  Loaders, Installers and Uninstallers Report\fOnce IndiaBravo completes its task of dropping the configuration for its malware, dropping the malware itself, and finally \ncreating and activating a service to ensure the malware\u2019s persistence, IndiaBravo then terminates. Console applications, \nsuch as IndiaBravo, return an exit code upon completion. While the return code for an application is usually set to 0 and \nsubsequently ignored by the calling application (such as cmd.exe), the exit code can provide status information about \na program to the caller, allowing the caller to determine success or failure of an application\u2019s task. This is a common \npractice for scriptable applications. IndiaBravo actively uses the exit code feature to signal the status of its operation, \nreturning a value of 0 to 4 depending on if an error occurred and, if so, what part of the framework experienced the error. \nTable 3-2 explains the meaning of each exit code:\n\nEXIT \nCODE\n\nDESCRIPTION\n\n0\n\n1\n\n2\n\n3\n\n4\n\nIndiaBravo successfully completed\n\n(variant dependent)\n\nWriteConfig failed\nExtractDll failed\nCreateSVC failed\n\nTable 3\u20112: IndiaBravo\u2019s Exit Codes\n\nBecause each of the IndiaBravo variants customizes the framework to fit the needs of the malware and the developer, the \nfollowing subsections explore the key variations between each of the IndiaBravo variants.\n\n13\n\nOperation Blockbuster:  Loaders, Installers and Uninstallers Report\f3.1 IndiaBravo\u2011RomeoBravo Variant\n\nIndiaBravo-RomeoBravo (IBRB) is the installer responsible for dropping the RomeoBravo malware. IBRB begins by dropping \nthe malware binary at %SYSDIR%\\wmisecsvc.dll. Compared to other IndiaBravo variants, the line of demarcation \nbetween IBRB\u2019s ExtractDll and WriteConfig functions is more blurred based on the fact that ExtractDll also \nextracts a configuration data blob of 456 bytes from the IBRB binary. The configuration data exists immediately before the \nRomeoBravo image and is stored in plaintext. ExtractDll loads the configuration blob into memory.\n\nOnce ExtractDll completes the file and configuration data extraction, WriteConfig modifies the configuration \ndata blob by assigning a 64-bit, randomly generated value to the qwIdentifier field of the RomeoBravo configuration. \nThe WriteConfig encrypts the configuration data using the DNSCALC-style encoding scheme, and the encrypted \nconfiguration is then dropped to disk at %SYSDIR%\\tmscompg.ini. \n\nThe CreateSVC function follows the general IndiaBravo method of establishing a new service, but, specifically, the \nfunction generates a new service group named LocalWmiSecurity after establishing the registry entries necessary to \ndefine the WmiSecSvc service. \n\nIBRB monitors the status of each of the installation tasks and, if any of the tasks fails, calls a suicide script (saved in the \n%TEMP% directory as cvrit000.bat) to remove its binary. The suicide script, Figure 3-2, only removes the IBRB binary \nand will not attempt to clean up any of the successful steps that may have occurred during the installation process. \n\n:L1\ndel ", "HKLM\\\nSYSTEM\\CurrentControlSet\\Control\\WMI\\Security\\xc123465-efff-87cc-37abcdef9 as a data blob. The \nWriteConfig function also stores the specified listening port, assigns a randomly generated 64-bit number as the victim \nmachine\u2019s unique identifier, and saves the selected name of the service in the configuration\u2019s data blob prior to setting the \nvalue in the registry. \n\nIBRC is unique among the observed IndiaBravo samples in that it does not use a suicide script to remove itself from a victim\u2019s \nmachine after execution. Also unique is the inclusion of the string RS_SDKInstaller and RS_SDKINSTALLER within \nthe resource section\u2019s String branch. This value is not found in the other IndiaBravo variants. \n\n16\n\nOperation Blockbuster:  Loaders, Installers and Uninstallers Report \n \n \n \n \n \n \n\f3.3 IndiaBravo\u2011PapaAlfa Variant\n\nIndiaBravo-PapaAlfa (IBPA) is responsible for installing the PapaAlfa proxy malware on a victim\u2019s machine. Using the \nsame method as IndiaBravo-RomeoCharlie, IBPA will record the state of each step of the installation process to STDOUT. \nWhen captured to file, the output from IBPA after a successful installation appears as seen in Figure 3-4.\n\n[2] - Extract Dll...\n[1] - WriteConfig...\n[3] - CreateSVC...\n[4] \u2013 Success\n\nFigure 3\u20114: IndiaBravo\u2011PapaAlfa\u2019s Output from STDOUT\n\nThe most notable attribute of IBPA\u2019s output is the reordering of operations. IBPA performs ExtractDll prior to \nWriteConfig. The WriteConfig function will record the listening port as a 32-bit value within the file stored at \n%SYSDIR%\\pmsconfig.msi. The listening port is specified by either supplying an optional command line argument or, if \nthe argument is missing, using the default port 443.\n\nThe ExtractDll function stores the PapaAlfa binary at %SYSDIR%\\netmonsvc.dll. The CreateSVC function will \ngenerate a new service named NetMonSvc and assign it to the newly created LocalMonNetwork service group before \nactivating the service.\n\nJust as IndiaBravo-RomeoBravo did, IBPA monitors the status of each of the installation tasks and, if any of the tasks fails, \nremoves its binary by calling the suicide script, saved to %TEMP% directory as cvrit000.bat. The suicide script, seen \nbelow and identical to the one used by IndiaBravo-RomeoBravo, only removes the IBPA binary and does not attempt to \nclean up any of the successful steps that may have occurred during the installation process. \n\n:L1\ndel ", "HKLM\\SYSTEM\\CurrentControlSet\\services\\<name of new service>\n4.  Set the Parameter\\ServiceDll value appropriately to point to the dropped RomeoWhiskey binary\n5.  Create a new service group under HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost for \n\nthe new service \n\n6.  Call StartServiceA to activate the service\n\n46\n\nOperation Blockbuster:  Loaders, Installers and Uninstallers Report\fThe description of the new service is variant-dependent, and, interestingly, the observed samples each have a misspelling \nas shown in Table 13-2 in bold. \n\nVARIANT\n\nSERVICE DESCRIPTION VALUE\n\nIndiaWhiskey-One\n\nIndiaWhiskey-Two\n\nAllows reporting for windows services and applictions running in standard environments. If \nthis service is disabled, any services that explicitly depend on it will fail to start.\n\nTrack system status such as Windows logon, network, and power events. Notifiy COM+ \nEvent System subscribers of these events.\n\nIndiaWhiskey-Three\n\nAllows reporting for windows services and applictions running in standard environments. If \nthis service is disabled, any services that explicitly depend on it will fail to start.\n\nTable 13\u20112: IndiaWhiskey Variants\u2019 Service Description Values with Misspelled Highlighted in Bold\n\nIndiaWhiskey concludes its life by generating and then executing a suicide script, saved as msvcrt.bat. An interesting \nartifact is the msvcrt.bat string: IndiaWhiskey-One and IndiaWhiskey-Three variants contain the string within the \nbinary\u2019s .data section, while IndiaWhiskey-Two constructs the string using stack strings. This is yet another example \nof the subtle differences between variants. Although IndiaWhiskey-Two appears to exist between IndiaWhiskey-One \nand IndiaWhiskey-Three, chronologically speaking, these changes may indicate that at least two different developers \ngenerated the IndiaWhiskey variants. As mentioned previously, while it is the scaffolding code that truly differentiates the \nIndiaWhiskey variants, these subtle code and text changes may point to the existence of more than one active user of the \nIndiaWhiskey code base.\n\n47\n\nOperation Blockbuster:  Loaders, Installers and Uninstallers Report\f13.1 IndiaWhiskey\u2011One\n\nOf the IndiaWhiskey variants, IndiaWhiskey-One is by far the most simplistic when tracing the execution of the \ninstaller. Given that it contains no unnecessary code, and in fact contains no scaffolding code at all, it is arguable that \nIndiaWhiskey-One is the baseline for the IndiaWhiskey family. The WinMain function for IndiaWhiskey-One, Figure \n13-2, is reused in all IndiaWhiskey variants nearly as-is. \n\nint WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int \nnShowCmd)\n{\n  LoadKernel32APIAndGenerateNames();\n  LoadAdvapi32();\n  LoadShlwapiAPIs();\n  if ( !DropFile() )\n  {\n    InstallService();\n    ActivateService();\n  }\n  Suicide();\n  return 0;\n}\n\nFigure 13\u20112: IndiaWhiskey\u2011One\u2019s WinMain Function\n\n48\n\nOperation Blockbuster:  Loaders, Installers and Uninstallers Report\f13.2 IndiaWhiskey\u2011Two\n\nThe outlier of the IndiaWhiskey variants, IndiaWhiskey-Two expands on the basic structure of IndiaWhiskey-One by \nadding an unnecessary chunk of code that displays two message boxes in case LoadShlwapiAPIs generates a Windows \nerror. It is unclear the intention of this additional code, as the first message box informs the user that no error has \noccurred, followed immediately by a message indicating that some error has occurred. Interestingly, the \u201cError Code\u201d \nvalue is set to 0, a condition that defines the variable to always be false. The additional code is superfluous at best.\n\nint WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int \nnShowCmd)\n{\n  DWORD lastError;\n  char String[260];\n  int v7;\n  LoadKernel32APIAndGenerateNames();\n  LoadAdvapiAPIs();\n  LoadShlwapiAPIs();\n  lastError = GetLastError();\n  memset(String, 0, 0x104);\n  if ( lastError && (v7 = lstrlenA(String)) != 0 )\n  {\n    lstrcpyA(String, ", "HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security by calling RegOpenKey. \nIf the RegOpenKey function returns an error, LimaCharlie terminates. However, the configuration data is stored under \na subkey for RomeoHotel (HKLM\\SYSTEM\\CurrentControlSet\\Control\\WMI\\Security\\zc62a465-efff-87cc-\n47cdcdefa) that LimaCharlie attempts to read into memory via RegQueryValueEx. LimaCharlie makes no attempt \nto determine if the RegQueryValueEx call fails, thereby providing no real verification that the configuration data truly \nexists. If the configuration data is available, LimaCharlie uses the data as the RomeoHotel configuration and produces a \nseries of calls to a nullsub function (a function that does nothing other than to return to the caller) with various fields \nfrom the configuration (Figure 16-1).\n\n  RegQueryValueExA(phkResult, lpValueName, 0, 0, &Data, &NumberOfBytesRead);\n  RegCloseKey(phkResult);\n  GetSystemDirectoryW(FileName, 0x104);\n  wcscat(FileName, L", "HKLM\\SYSTEM\\CurrentControlSet\\Services\\<name of service>. The registry entry \ncontains the path to the dropped binary (from Task 6) and little more else. \n\nWith the payload (IndiaKilo) dropped and the service configured, the remaining task for IndiaIndia prior to clean up is the \nactivation of the payload binary on the victim\u2019s computer. IndiaIndia calls StartService to activate the newly installed \nservice and thereby activate the next step of the infection.\n\nThe final act of IndiaIndia is the generation and execution of a suicide script named dvi.bat. IndiaIndia generates the \nsuicide script using a single wsprintfA call with the format string seen in Figure 10-1. The suicide script and its method \nof generation is identical to that found employed by IndiaHotel.\n\n@echo off\\r\\n:L1\\r\\ndel /a \\"], "URLs": ["http://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Destructive-Malware-Report.pdf", "https://www.virustotal.com/en/file/2b731d82b76f6d50a9d3f", "http://www.codeproject.com/Articles/7053/Pure-WIN-Self-Extract-EXE-Builder", "http://www.codeproject.com/Tips/430684/Loading-Win-DLLs-manually-without-LoadLibrary.", "https://github.com/fancycode/MemoryModule", "https://www.virustotal.com/en/file/8fe806470914f9cdaaaa8448aa6317547c618efd6", "http://www.hancom.com/en/product/product2014vp_01.jsp", "https://msdn.microsoft.com/en-us/library/windows/desktop/ms644927(v=vs.85).aspx"], "weight": 0.0}