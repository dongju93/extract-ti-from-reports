{"rule_id": 544, "name": "The North Korean Kimsuky APT keeps threatening South Korea evolving its TTPs", "description": "-", "references": [], "File_Names": ["\uc591\uc2dd.hwp", "tmp.db", "AutoUpdate.dll"], "MD5_Hashes": [], "SHA1_Hashes": ["caa24c46089c8953b2a5465457a6c202ecfa83ab"], "SHA256_Hashes": ["d21523b7b8f6584305a0a6a83cd65c8ce0777a42ab781c35aa06c46c91f504b4", "757dfeacabf4c2f771147159d26117818354af14050e6ba42cc00f4a3d58e51f", "caa24c46089c8953b2a5465457a6c202ecfa83abbce7a9d3299ade52ec8382c2", "bbad65136d73cbd5262bc88571677b5434ceb54fc1103f2133757dae2ec4b47b", "817ef0d9d3584977d1114b7e92012b653d339434a90967cbe8016899801f3751"], "Registry_Entries": ["HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\WindowsDefender\u201d. The name\nand the path used by the attacker is absolutely tricky, because they reference to Windows\nDefender:\n\nFigure 3: registry key set for persistence .\n\nFurthermore, exploring the content of the folder \u201c%AppData%\\Local\\Temp\u201d path, we observed\nanother temporary \ufb01le created and immediately removed dubbed \u201c<random_name>.tmp.bat\u201d. By\nanalyzing its contents, we noticed that it is used to delete the initial artifact (scr) and \ufb01le itself.\n\nFigure 4: Content of the bat script.\n\nIn order to hide the malicious operation and avoid raising suspicion, a legit document is created in\nthe same folder containing the \u201c.scr\u201d \ufb01le, the document is named \u201c\uc774\ub825\uc11c \uc591\uc2dd.hwp\u201d. Translating its\nname from Korean to English language, is possible to obtain the \u201cCV Form\u201d string. The name and\nother information about the document are the following:\n\nHash\n\nd21523b7b8f6584305a0a6a83cd65c8ce0777a42ab781c35aa06c46c91f504b4\n\nThreat Kimsuky legit document\n\nLegit document used to divert attention on the malware in \u201chwp\u201d extension\n\nBrief\nDe\u2010\nscrip\u2010\ntion\n\nSs\u2010\ndeep\n\n192:zXEKVs7kRvm+1FsO2ui/VpIkCnH5QVSV9VahhU:r3YkA+1aJuk\u2010\nWQVS9avU\n\nTable 3: Information about legit document with \u201c.hwp\u201d extension\n\nAs implied by the \ufb01le name (CV Form), the document contains a CV form with empty \ufb01elds, as\nshown in the following \ufb01gure.\n\nhttps://blog.yoroi.company/research/the-north-korean-kimsuky-apt-keeps-threatening-south-korea-evolving-its-ttps/\n\n3/12\n\n\f3/4/2020\n\nThe North Korean Kimsuky APT keeps threatening South Korea evolving its TTPs \u2013 Yoroi Blog\n\nFigure 6: Legit document overview\n\nBypassing AV Detection\n\nAn interesting behaviour is the \u201cexplorer.exe\u201d injection performed by the \u201cAutoUpdate.dll\u201d in order\nto avoid AVs detection. Digging in the malicious code, it is possible to see the methods used to\nperform this operation. First of all, the malware sets the right privileges, as reported in the\nfollowing image.\n\nhttps://blog.yoroi.company/research/the-north-korean-kimsuky-apt-keeps-threatening-south-korea-evolving-its-ttps/\n\n4/12\n\n\f3/4/2020\n\nThe North Korean Kimsuky APT keeps threatening South Korea evolving its TTPs \u2013 Yoroi Blog\n\nFigure 7: Privilege set for the correct injection\n\nOnce obtained the necessary privileges, the malware is able to proceed with the injection. As\ndescribed by the analysis published by elastic, the malware writes the path to its malicious DLL in\nthe virtual address space of another process through the \u201cVirtualAllocEx\u201d function. In this case,\nthe target process is \u201cexplorer.exe\u201d, it ensures the remote process loads it by creating a remote\nthread inside it.\u00a0\n\nhttps://blog.yoroi.company/research/the-north-korean-kimsuky-apt-keeps-threatening-south-korea-evolving-its-ttps/\n\n5/12\n\n\f3/4/2020\n\nThe North Korean Kimsuky APT keeps threatening South Korea evolving its TTPs \u2013 Yoroi Blog\n\nTo perform these operations, \ufb01rst of all the malware needs to know the Process ID of the target,\nthis is performed through the navigation of all processes tree. This task can be executed using\nthe Tool Help Library Windows API family using CreateToolhelp32Snapshot(), Process32First(),\nand Process32Next() API. Then, the malware calls VirtualAllocEx() to allocate a space to write\nthe path to the malicious DLL, then it calls WriteProcessMemory()\u00a0 to write the DLL path inside\nthe allocated memory.\u00a0\n\nAfter that, the malware calls the CreateRemoteThread() API to link the thread newly created to\nthe host process (explorer.exe). Parts of the described logic are shown in the below \ufb01gure:\n\nFigure 8: API used for injection\n\nTwo components are implanted in the \u201cexplorer.exe\u201d process. In the following tables are\npresented some information about the two DLLs extracted.\n\nhttps://blog.yoroi.company/research/the-north-korean-kimsuky-apt-keeps-threatening-south-korea-evolving-its-ttps/\n\n6/12\n\n\f3/4/2020\n\nThe North Korean Kimsuky APT keeps threatening South Korea evolving its TTPs \u2013 Yoroi Blog\n\nHash\n\nbbad65136d73cbd5262bc88571677b5434ceb54fc1103f2133757\u2010\ndae2ec4b47b\n\nThreat\n\nInjected DLL\n\nBrief\nDescrip\u2010\ntion\n\nSsdeep\n\nFirst injected DLL\n\n3072:AFSYAyju5JpkC7xfYZo9cPqvTV+ql4yFa+zB+K+H/kocFAQUG5R:\nAFJ0qC7xAZliT004+p10fkoefUG5\n\nTable 4: Information about \ufb01rst DLLinjected\u00a0 in explorer.exe process\n\nHash\n\n817e\u2010\nf0d9d3584977d1114b7e92012b653d339434a90967cbe8016899801f3751\n\nThreat\n\nInjected DLL\n\nBrief\nDescrip\u2010\ntion\n\nSsdeep\n\nSecond injected DLL\n\n3072:AFSYAyju5JpkC7xfYZo9cPqvTV+ql4yFa+zo+K+H/kocFAnRG5R:AF\nJ0qC7xAZliT004+p00fkoegRG5\n\nTable 5: Information about second DLL injected in explorer.exe process\u00a0\n\nComparing the ssdeep of the two DLLs is possible to notice several overlaps between the two\nlibraries, a circumstance that con\ufb01rms a high \u201csimilarity\u201d between them. Below are highlighted the\ndifferent portions of the hash:\n\n3072:AFSYAyju5JpkC7xfYZo9cPqvTV+ql4yFa+z *\n\n+K+H/kocFAnRG5R:AFJ0qC7xAZliT004+p * 0fkoe * RG5\n\nThere are tiny differences between the DLLs as shown below performing a simple binary dif\ufb01ng\nanalysis.\n\nDue to these differences between the two DLLs, we decided to continue the analysis on one of\nthem. Digging into the DLL, we notice that every time a function has to be performed by the\nmalware, it relies on a recurrent decryption routine, which decodes the strings containing the\nactual instruction and executes it. An example of the decryption routine is reported in the following\n\ufb01gure on top right:\n\nhttps://blog.yoroi.company/research/the-north-korean-kimsuky-apt-keeps-threatening-south-korea-evolving-its-ttps/\n\n7/12\n\n\f3/4/2020\n\nThe North Korean Kimsuky APT keeps threatening South Korea evolving its TTPs \u2013 Yoroi Blog\n\nFigure 10: Decryption \ufb02ow graph\n\nEvery 15 minutes, the malware contacts the C2\n(suzuki.]datastore.]pe.]hu) and sends back the\ninformation about the compromised machine, as reported\nin the previous \ufb01gure. In particular, three HTTP requests\nare made using different URLs paths and different User-\nAgent \ufb01elds for each request.\u00a0 An example of the C2\nregistration is the following:\n\nFigure 11: Parts of subroutines used to\nperform network communication\n\nhttps://blog.yoroi.company/research/the-north-korean-kimsuky-apt-keeps-threatening-south-korea-evolving-its-ttps/\n\n8/12\n\n\f3/4/2020\n\nThe North Korean Kimsuky APT keeps threatening South Korea evolving its TTPs \u2013 Yoroi Blog\n\nFigure 12: Network traf\ufb01c performed by the malware\u00a0\n\nConclusion\n\nDuring our Threat Intelligence activities, we discovered a new malware implant compatible with\nthe previous campaigns of Kimsuky APT actor. According to the ESTsecurity \ufb01rm, the initial\ndropper contains two malicious resources embedding the malicious DLLs, however, in our sample\nthere aren\u2019t.\n\nDespite these little differences, we can af\ufb01rm with good con\ufb01dence that the Threat Actor is\nKimsuky due to strong similarities with the TTPs.\n\nIndicator of Compromise\n\nHashes:\n\n757dfeacabf4c2f771147159d26117818354af14050e6ba42cc00f4a3d58e51f\ncaa24c46089c8953b2a5465457a6c202ecfa83abbce7a9d3299ade52ec8382c2\nbbad65136d73cbd5262bc88571677b5434ceb54fc1103f2133757dae2ec4b47b\n817ef0d9d3584977d1114b7e92012b653d339434a90967cbe8016899801f3751\n\nC2:\n\nsuzuki.]datastore.]pe.]hu\n\nPersistence:\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\\WindowsDefender\n\nhttps://blog.yoroi.company/research/the-north-korean-kimsuky-apt-keeps-threatening-south-korea-evolving-its-ttps/\n\n9/12\n\n\f3/4/2020\n\nThe North Korean Kimsuky APT keeps threatening South Korea evolving its TTPs \u2013 Yoroi Blog\n\nYara Rules\n\nhttps://blog.yoroi.company/research/the-north-korean-kimsuky-apt-keeps-threatening-south-korea-evolving-its-ttps/\n\n10/12\n\n\f3/4/2020\n\nThe North Korean Kimsuky APT keeps threatening South Korea evolving its TTPs \u2013 Yoroi Blog\n\nimport "], "URLs": ["https://blog.yoroi.company/research/the-north-korean-kimsuky-apt-keeps-threatening-south-korea-evolving-its-ttps/"], "weight": 0.0}