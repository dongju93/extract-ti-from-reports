{"rule_id": 369, "name": "Intezer - The Evolution of APT15's Codebase 2020", "description": "-", "references": [], "File_Names": ["RavAudio64.exe", "adult.sft"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": ["aacaf0d4729dd6fda2e452be763d209f92d107ecf24d8a341947c545de9b7311", "271384a078f2a2f58e14d7703febae8a28c6e2d7ddb00a3c8d3eead4ea87a0c0", "a142625512e5372a1728595be19dbee23eea50524b4827cb64ed5aaeaaa0270b"], "Registry_Entries": ["HKEY_CURRENT_USER\\Software\\Mi\u2010\ncrosoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders]\n\n\u274c\n\n\u2705\n\n\u2705\n\n\u274c\n\nThe response from the server is an HTTP page with backdoor commands and argu\u2010\nments included in the HTML \ufb01elds\n\n\u2705\n\n\u274c\n\nBackdoor commands are determined by a hashing value received from C2\n\nCommunication with the C&C server is hidden in the Cookie and Set-Cookie headers\nof HTTP requests\n\nImpersonate a logged in user\u2019s security context\n\nCreate a copy of cmd.exe in their working directory and use it to interpret backdoor\ncommands\n\n\u274c\n\n\u274c\n\n\u274c\n\n\u2705\n\n\u2705\n\n\u2705\n\n\u2705\n\n\u274c\n\nUsual Ke3chang backdoor functionalities \u2013 download, upload, execute \ufb01les/shell com\u2010\nmands and con\ufb01gure sleep time\n\n\u2705\n\n\u2705\n\nScreenshot-grabbing functionality\n\n\u274c\n\n\u274c\n\n\u2705\n\n\u2705\n\n\u274c\n\n\u274c\n\n\u2705\n\n\u2705\n\n\u2705\n\n\u2705\n\n\u2705\n\n\u2705\n\n\u2705\n\n\u2705\n\n\u274c\n\n\u274c\n\n\u274c\n\n\u274c\n\n\u2705\n\n\u274c\n\nTable 1\n\nKETRUM 1\n\nThe Ketrum 1 sample was uploaded to VirusTotal in December 2019. This version registers itself as a \u201cWMI Provider Host\u201d\nservice if it is able to obtain SeDebugPrivilege; otherwise it creates an entry in the startup directory.\n\nThis sample incorporates many features from Okrum as can be seen in the table above, however, it abandons more\nadvanced Okrum features such as offering a re\ufb02ective injection via an export and the use of hashes to receive command\nIDs.\n\nIn the past, APT15 has used the IWebBrowser2 COM interface to manage its network communications. This time, the\nKetrum developer abandoned this technique and used simple HTTP APIs:\n\nInterestingly, this sample also incorporates a screenshot-grabbing\ncommand.\n\nKETRUM 2\n\nKetrum 2 seems to have been built for minimalism. As can be seen\nin Table 1, many functionalities have been dropped.\n\nUnlike the Ketrican variant, Ketrum implants no longer try to weaken\nthe system\u2019s security con\ufb01gurations. In previous implants,\nPowershell was used for this end. Interestingly, a string still remains\nin Ketrum 2, which refers to this deleted feature\u2014perhaps an\nunintentional left-over from copy-pasting:\n\nSeveral other interesting unused \ufb01le names are included in the binary such as \u201c%s\\adult.sft\u201d and \u201c%s\\Message\u201d.\n\nThe malware \ufb01rst collects basic system information to track the infected endpoint and then sends it to the C2 server together\nwith a hash of the system info:\n\nhttps://www.intezer.com/blog/research/the-evolution-of-apt15s-codebase-2020/\n\n3/6\n\n\f5/22/2020\n\nIntezer - The Evolution of APT15's Codebase 2020\n\nAll incoming and outcoming payloads are fed through an RC4 encryption and base64 encoding. The RC4 encryption uses an\nunusual key:\n\nThese are actually constants used in the MD5 and SHA1 algorithms. The Ketrum developer most likely intended to confuse\nresearchers reversing this function.\n\nA command is then extracted from the HTML in the response:\n\nThis backdoor only supports a limited number of commands, which is typical of Okrum and Ketrican backdoors. Unlike\nKetrum 1, Ketrum 2 does not support screenshot grabbing. This is the list of possible backdoor commands:\n\nhttps://www.intezer.com/blog/research/the-evolution-of-apt15s-codebase-2020/\n\n4/6\n\n\f5/22/2020\n\nIntezer - The Evolution of APT15's Codebase 2020\n\nCommand ID\n\nDescription\n\n1\n\n2\n\n3\n\n4\n\n5\n\nAdjust sleep time\n\nExecute a shell command\n\nUpload a \ufb01le\n\nDownload a \ufb01le\n\nExecute a \ufb01le\n\n7 (there is no 6) Execute a shell command with adjusted sleep time\n\nAdjust execute shell sleep time\n\nDownload \u201cNotice\u201d \ufb01le to working directory \u2013 * it is unclear how this is used\n\n8\n\n9\n\nCODE REUSE\n\nBoth Ketrum samples resemble a similar layout to previous Ke3chang tools, apart from low level implementation and use of\nsystem APIs. Even in the two Ketrum samples, there are differences between the low-level APIs used to achieve the same\nfunctionality. For example, the \ufb01le upload feature is implemented using different APIs throughout the families; mostly using a\nconstant value of 0x20000 when reading \ufb01les:\n\nKetrum 1\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Ketrum 2\n\nhttps://www.intezer.com/blog/research/the-evolution-of-apt15s-codebase-2020/\n\n5/6\n\n\f5/22/2020\n\nIntezer - The Evolution of APT15's Codebase 2020\n\nKetrican 2018\n\nOkrum\n\nAs reported by FireEye and ESET, it\u2019s likely the Ke3chang cluster of malware is developed by multiple teams and the\ndevelopers of Ketrican/Okrum belong to a different team than the developers of Ketrum, albeit related. This could explain the\nhigh-level and \ufb02ow similarities but also the low-level differences.\n\nCONCLUSION\n\nKe3chang\u2019s numerous tools such as Okrum, Ketrican, TidePool, Mirage, Ketrum, and others all serve the same purpose,\ngive or take a few techniques or functionalities tailored for speci\ufb01c targets. We can regard these tools under the same\numbrella of BS2005 malware, distributed as different versions per operation. However, the distinction created by naming\nthem differently is useful for tracking the group\u2019s operations and different development cycles.\n\nThe Ke3chang\u2019s group tools have not deviated much from the same tools reported in FireEye\u2019s \ufb01rst Ke3chang report. The\ngroup continues to morph its code and switch basic functionalities in their various backdoors. This strategy has been working\nfor the group for years and there is no indication yet that it will deviate from this modus operandi.\n\nThe information security \ufb01eld has seen many improvements since the group\u2019s inception, however, surprisingly, this is not\nre\ufb02ected in the group\u2019s persistence to use the same old TTPs in their tools.\n\nIOCs\n\n271384a078f2a2f58e14d7703febae8a28c6e2d7ddb00a3c8d3eead4ea87a0c0\naacaf0d4729dd6fda2e452be763d209f92d107ecf24d8a341947c545de9b7311\na142625512e5372a1728595be19dbee23eea50524b4827cb64ed5aaeaaa0270b\nthehuguardian[.]com\n45.56.84[.]25\n\nPaul Litvak\nPaul is a malware analyst and reverse engineer at Intezer. He previously served as a developer in the Israel Defense Force\n(IDF) Intelligence Corps for three years\n\nhttps://www.intezer.com/blog/research/the-evolution-of-apt15s-codebase-2020/\n\n6/6\n\n\f"], "URLs": ["https://www.intezer.com/blog/research/the-evolution-of-apt15s-codebase-2020/"], "weight": 0.0}