{"rule_id": 197, "name": "Operation Spy Cloud_eng", "description": "-", "references": [], "File_Names": ["Application.Quit", "gamil.com", "clisve.exe", "daum.net", "invoice.sca", "kavsvc.exe"], "MD5_Hashes": ["392647675E8DFCD2602B4FFE38A19E2B"], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\(Version)\\Word\\Security\\AccessVBOM \n\nvalue with '1', which allows secure access to the VBA project object model in developer macro \n\nsettings. It also declares a specific encoding string to decode the obfuscated shellcode listed at \n\nthe bottom of the macro function. \n\n[Figure 4] Registering the registry key and shellcode decoding string declaration \n\n \n \n \n \n\fstr_on = abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 \n&*(),.#+= \n\n  str_en = 7JX9A)dwxBU+13rv&tC,uYz=Z0RS8aM4FqnD5h \n2WpQOGfbmNKPcLelj(kogHs.#yi*IET6V   \n\nThe 72 byte-string is replaced with a string that is symmetrical at each position and \n\nrearranged. The shellcode is one of the key areas in the following macro functions. \n\n[Figure 5] Encoded shellcode area \n\n \n \n \n\fThe analysis of the shellcode identifies the command attempting to connect to a specific \n\nGoogle Drive, which is used as a command control (C2) server. In this case, a security \n\ndetection system could determine it as a normal connection. \n\n[Figure 6] Access to Google Drive, the C2 server using the shellcode command \n\nGoogle Drive includes a file named 'invoice.sca' disguised as an invoice file. \n\nThe last modified time of the file is on the afternoon of March 10, 2020, and the file is \n\nencrypted with XOR algorithm. The owner who shared the file is using the Gmail account \n\n'godlemessy@gamil.com'. The analysis result shows that it was the G-mail account used by \n\nthe group behind the campaign, which has often seen in similar threat cases previously. \n\n \n \n \n \n\f[Figure 7] Attacker information and payload registered in Google Drive \n\nThe 'invoice.sca' file (0xbf 0x7a 0x79 0x51 4 bytes) is XOR-encrypted in iterative decoding \n\nscheme, then the malicious module inside will appear. \n\nFile Name \n  invoice.sca (decode) \n\n  Time Stamp (UTC) \n  2020-03-02 23:32:17 \n\n  MD5 \n  392647675E8DFCD2602B4FFE38A19E2B \n\n \n \n \n \n\f[Figure 8] Comparison of payload decoding \n\nThe decoded malicious code communicates to the cloud server using pCloud access token \n\ndata, steal the system information, and installs the additional backdoors according to the \n\nattacker's intention. The main functions of the spy module are not much different from the \n\ntools used by the 'Guemseong 121' group. \n\n \n \n \n \n\f[Figure 9] Access token for pCloud communication \n\nThe information such as the json file containing the account history and the email address \n\nthat the attacker used, and when the attacker signed up for the service have been identified \n\nby browsing the account of the attacker who registered the cloud service based on the API. \n\n"], "URLs": [], "weight": 0.0}