{"rule_id": 270, "name": "2020.10.05_-_MosaicRegressor_Lurking_in_the_Shadows_of_UEFI_Securelist_2020", "description": "-", "references": [], "File_Names": ["dfsadu.dll", "RepairD.dll", "wrtreg_64.dll", "HHDump.dll", "PayloadName.dll", "rfvtgb.dll", "Data.dll", "attach.dat", "msreg.exe", "vc9play.exe", "time.exe", "1206.doc", "DFileD.dll", "load.dll", "Hx102.tmp", "dwhost.exe", "msreg_32.dll", "netmgr.dll", "BeFileA.dll", "WebA.dll", "FileC.dll", "DFileC.dll", "WebC.dll", "WebB.dll", "exitUI.rs", "FileD.dll", "usk.rs", "LnkClass.dat", "Day_180326.exe", "mapisp.dll", "FileOutA.dat", "sppsvc.sep", "DFileA.dll", "tasken.exe", "wq2.exe", "user.rem", "cryptui.sep", "return.exe", "0927.doc", "ehlwapi.dll", "winlgon.exe", "OINFO11.OCX", "setupinf.log", "wrtreg_32.dll", "aeinv64.dll", "Load.rem", "MSI36C2.dat", "contract.doc", "FileB.dll", "ambeg.png", "load.rem", "RepairC.dll", "newplgs.dll", "capisp64.dll", "IntelUpdate.exe", "RepairB.dll", "store.exe", "msreg.dll", "msreg_64.dll", "Hx101.tmp", "FileA.dll", "cryptiu.sep", "myfirewall.org", "2.docx", "crss.exe", "sdfcvb.dll", "subst.sep", "pop.mail", "0612.doc", "remote.exe", "sppsvc.tbl", "cohost.exe", "capisp.dll", "RepairA.dll", "on.dat", "6.docx", "BeFileC.dll", "subst.tbl"], "MD5_Hashes": ["89527f932188bd73572e2974f4344d46", "7c3c4c4e7273c10dbbab628f6b2336d8", "4769891fccc26c1583e0f21b1a18d2ba", "3b58e122d9e17121416b146daab4db9d", "b53880397d331c6fe3493a9ef81cd76e", "1732357d3a0081a87d56ee1ae8b4d205", "449be89f939f5f909734c0e74a0b9751", "afc09deb7b205eadae4268f954444984", "a69205984849744c39cfb421d8e97b1f", "233b300a58d5236c355afd373dabc48b", "9f13636d5861066835ed5a79819aac28", "6dbb092e081c3e23d555c2a460b96187", "b23e1fe87ae049f46180091d643c0201", "67cf741e627986e97293a8f38de492a7", "cfb072d1b50425ff162f02846ed263f9", "7908b9935479081a6e0f681ccef2fdd9", "0d3da5adb9bb63c7fcb0185756601749", "7ac0189801242d5261ab5c0c43c7f8d3", "B53880397D331C6FE3493A9EF81CD76E", "7b213a6ce7ab30a62e84d81d455b4dea", "ae66ed2276336668e793b167b6950040", "bd393a70e44fdf175c5b428286bb890f", "33F21AC73AFF4DFF71316795282A3D06", "88750b4a3c5e80fd82cf0dd534903fc0", "DC14EE862DDA3BCC0D2445FDCB3EE5AE", "61b4e0b1f14d93d7b176981964388291", "dc14ee862dda3bcc0d2445fdcb3ee5ae", "1c5377a54cbaa1b86279f63ee226b1df", "91A473D3711C28C3C563284DFAFE926B", "08ecd8068617c86d7e3a3e810b106dce", "12b5fed367db92475b071b6d622e44cd", "F5B320F7E87CC6F9D02E28350BB87DE6", "c63d3c25abd49ee131004e6401af856c", "72c514c0b96e3a31f6f1a85d8f28403c", "13773bc34a47124743c9836c6ff80695", "df1b910626a380bffa22a757f419135c", "17a11d22e491acb8c84f8636c3a41637", "d273cd2b96e78def437d9c1e37155e00", "DD8D3718197A10097CD72A94ED223238", "9e182d30b070bb14a8922cff4837b94d", "92f6c00da977110200b5a3359f5e1462", "70def87d180616406e010051ed773749", "3d2835c35ba789bd86620f98cbfbf08b", "36b51d2c0d8f48a7dc834f4b9e477238", "6e949601ebdd5d50707c0af7d3f3c7a5", "a8516452fe7d4d5d2fd0685ccf8a64b2", "3b3bc0a2772641d2fc2e7cbc6dda33ec", "88750B4A3C5E80FD82CF0DD534903FC0", "0d386ebba1ccf1758a19fb0b25451afe", "C63D3C25ABD49EE131004E6401AF856C", "d848d4ec24e678727b63251e54a0a5de", "74db88b890054259d2f16ff22c79144d", "0efb785c75c3030c438698c77f6e960e", "e2f4914e38bb632e975cff14c39d8dcd", "fa0a874926453e452e3b6ced045d2206", "9aa47dceccb306a80101f47ab148578d", "d197648a3fb0d8ff6318db922552e49e", "328ad6468f6edb80b3abf97ac39a0721", "D273CD2B96E78DEF437D9C1E37155E00"], "SHA1_Hashes": [], "SHA256_Hashes": ["2826815873d90ad38c5aeeed57c09385d6ad9a3cebaa18757f557a698e9f92b6", "f31034fffec424d6e4505318400ecc3b00f8c2107c1823510a037b11a49f0741", "fa116cf9410f1613003ca423ad6ca92657a61b8e9eda1b05caf4f30ca650aee5", "b2982325d3231ba5959484b01f5b6492babd37f10a8736e6bf81b47253bc99eb", "7e2b1bbffa7f05e7bf57ee60d162ef1e6f83b2e3fb5aa0da985add67af517901", "e3d63dc50b6a477e0361e71f80e133337bab1d11e809387e8e3a058614780b21", "b47f8eda04def2df3d2c58199af5fdded338d08bee8fb3636f441a46bb3ff119", "0fdcea00a78e0263caa45205d09b107bd50a9696f59a66951e8b9afc42d54e02", "25da7cc807578394716925afd30a9cc9d543e2fa2a2b25ce8f52160b3b4bc073", "64eabfc0612ac82eb80b8e955549b6a01899b712a99243d116e087828ca9e070", "c2695ef5f3a400219caa2347f5b914c15d74a133efa24d96d121acfa7f95a67e", "bffe333c3470e6012924409b6aa48b20e9d12f181c0f6b03f50db64ddf7596a7", "f63ccdabade319cc73a3c5eb41a2877bdb70f4db8bf8414d49fd2f402845f27c", "b8425a5c05c01c1294ce75719049e1b4eab32c34cabe456c281f110976cf2ade", "5c7a75d30713bb6873529efebd8bf0a28f8c3720ef4300804703dd33e2086fd0", "14e48d3aa7b9058c56882eb61fa40cf1f52614fe8feb8a43658ad02a570147e0", "7eba9f6f9774c87fafc4aba403821fae73a50d387624d039d1b296cf0befca73", "aa9627a62eb193cc40f2a5ffd259035a43540b2abd634c80f0d988f7588fa23d", "4b03409184b3206f7e3a43ff9f7713722c9acd871dd961d918f66e65d92f43f9", "c093c3e366ef0d4bd759a467842868cb1dd974c17e5230499707ec5bee5af304", "19300fd4cf9dfa28d8d3331e9d48739c38d7151f330463ffe13d6809d5705f1a", "ab021048f3d2c61cfbef9d4fb54148e81b2f2c887589e3e6813eb8c1dba36468", "adb8bfa6e227847c2ffa6e1c97d08280081426480ed9b2ce6af26a23fbd1334c", "e1d1d5e1c91d0f4142247b45fb18c0c7dcc94719f4340cf6443100364802aeae", "2c0df314dcdc9fa161f5f31369037f747a794e26cee6f8835cc37eef3077f782", "230de38fc10b7c07af5aceb6ebbafa80c45c2b9123a7a167f85e8a05b5cf0db7", "fc189b913bfd5995a7ed5c4e8a811ad237f7b973e120a25baccffbf4ea1d3838", "eaa31ce8f9ec828e040801df9faa911e7b70f29f23a70f24504f6ec02f3504ff", "a651af2ce8338d979e6c9d7eed4b3f5c4500602565d36025b3079f9f05afcb33", "35a476a77218128bd797c04b27f53049998c0951833e47b32455091d83ff4f02", "2e7808e3cfebad45815b3de7b91ea39970e8d99c607c71cb70052cee0e140db4"], "Registry_Entries": ["HKEY_CURRENT_USER\\Software\\\nMicrosoft\\Windows\\CurrentVersion\\Run, value name qwinstd, to the location of its own executable. It also overwrites \nthe value if it is not equal to the location of the executable. This ensures the program\u2019s automatic startup. Also the program \nsets up a timer callback routine to be called every second. The routine looks for the file %APPDATA%\\Microsoft\\Internet \nExplorer\\usk.rs. When such a file is found it acts as a kill switch: the file deleted, the BITS Jobs are cancelled and the \nprogram exits.\n\nInstead of the %TEMP% directory this version uses the directory %APPDATA%\\Microsoft\\Internet Explorer to store its \ntemporary files.\n\n12\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n\fSystem information\nThe module creates a text file %APPDATA%\\Microsoft\\Internet Explorer\\%Computername%.dat and fills it with system \ninformation. Note the non-ASCII symbols 0xA3 and 0xBE used in the string literals. These were replaced with a colon \ncharacter (See \u201cLanguage artifacts\u201d).\n\nHost Infomation:\n EXE ID: %Unique ID, see table%\n Host Name: %Computername%\n Current User Name: %USERNAME%\n PRIVILEGE: %User privilege%\n OS: Windows NT %Major%.%Minor%\\t%Service pack string%\\t%Product type%\\tSystemMetrics: \n%Build number for Windows 5.2%\\tSuiteMask hex: %Suite mask%\n OS BITS: %32 or 64%\n Host Power ON Time: %04d-%02d-%02d %02d:%02d\n Power ON Time: %d Hours %2d Minutes %2d Seconds *or*Power ON Time: %2d Minutes %2d Seconds\n\n =======================================================================================\n=================\n\n Installed Programe List 32:\n\n *the following list is the contents of registry keys from HKLM\\SOFTWARE\\Microsoft\\Windows\\\nCurrentVersion\\Uninstall*\n *%Item number%* *%Registry key last write timestamp in format %04d-%02d-%02d %02d:%02d%*  \n%Display Name%\n\n *optional, when the program determines that it is running on a 64-bit OS, it disables \n64/32 registry reflection and enumerates the installed program list again, generating a \nsimilar list with a header \u201cInstalled Programe List 64\u201d*\n\nRemarks. The %User privilege% string is produced using the NetUserGetInfo API for the current user. Depending on \nthe returned result, it can be one of the strings: \u201cAdministrator\u201d, \u201cUser\u201d, \u201cGuest\u201d, \u201cACCESS_DENIED\u201d, \u201cCOMPUTER_\nNAME_ERROR\u201d, \u201cUSER_NAME_ERROR\u201d. The %Product type% string is one of \u201cVER_NT_SERVER\u201d,\u201cVER_NT_DOMAIN_\nCONTROLLER\u201d, \u201cVER_NT_WORKSTATION\u201d\n\nOnce the report file is ready, the program creates a BITS job to upload it to the C&C server. The upload location follows the \nformat: URL of the C&C server/%Computername%.dat The file is deleted if the upload succeeds.\n\n13\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n \n \n \n\fPayload\nWhen finished with uploading the system information report, the program then attempts to fetch the payload from the \nC&C server. The business logic is similar to the one of the \u201cBITS Downloader\u201d, with the following differences:\n\nFiles that are downloaded and executed in separate threads:\n\nFileA.dll fetched from %C&C URL%/%Computername%/FileA.z\n\nFileB.dll fetched from %C&C URL%/%Computername%/FileB.z\n\nFiles that are downloaded and executed in the current thread:\n\nFileC.dll fetched from %C&C URL%/%Computername%/FileC.z\n\nFileD.dll fetched from %C&C URL%/%Computername%/FileD.z\n\nEach DLL may have one or more exported functions named \u201cCallA\u201d, \u201cCallB\u201d, \u201cCallC\u201d, \u201cCallD\u201d, \u201cCallE\u201d, \u201cCallF\u201d, \u201cCallG\u201d, \u201cCallH\u201d, \n\u201cCallI\u201d, \u201cCallJ\u201d, \u201cCallK\u201d, \u201cCallL\u201d. Once finished, the program may delete the DLL file depending on the returned value.\n\nC&C URL:\n\nSample\n\nC&C URL\n\nDC14EE862DDA3BCC0D2445FDCB3EE5AE\n\nhttps://43.252.228.84/bits\n\n88750B4A3C5E80FD82CF0DD534903FC0\n\nhttps://103.243.24.171/bits\n\nC63D3C25ABD49EE131004E6401AF856C\n\nhttps://43.252.228.252/help\n\nD273CD2B96E78DEF437D9C1E37155E00\n\nhttps://103.30.40.39/bits\n\nUnique IDs (\u201cEXE ID\u201d in the report):\n\nSample\n\nUnique ID\n\nDC14EE862DDA3BCC0D2445FDCB3EE5AE\n\n88750B4A3C5E80FD82CF0DD534903FC0\n\nC63D3C25ABD49EE131004E6401AF856C\n\nD273CD2B96E78DEF437D9C1E37155E00\n\nC&C communication period: 15 minutes\n\nda\n\ntan\n\nt\n\n0115\n\n14\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n \n\fLanguage artifacts\nMany strings contain the sequence 0xA3, 0xBE (hexadecimal). This is an invalid sequence for a UTF8 string and the LATIN1 \nencoding translates these symbols to a pound sign followed by a \u201cmasculine ordinal indicator\u201d (\u201c\u00a3\u00ba\u201d).\n\n\u0414anguage artifacts\n\nAn attempt to iterate over all available iconv symbol tables trying to convert to UTF-8 produces possible candidates that \nproduce a more meaningful conversion for this byte sequence:\n\nCN-GB//, \u201c : \u201d # EF BC 9A\n CP936//, \u201c : \u201d # EF BC 9A\n CP949//, \u201c : \u201d # EF BC 9A\n CSEUCKR//, \u201c : \u201d # EF BC 9A\n CSGB2312//, \u201c : \u201d # EF BC 9A\n EUC-CN//, \u201c : \u201d # EF BC 9A\n EUC-KR//, \u201c : \u201d # EF BC 9A\n EUCCN//, \u201c : \u201d # EF BC 9A\n EUCKR//, \u201c : \u201d # EF BC 9A\n GB2312//, \u201c : \u201d # EF BC 9A\n GB13000//, \u201c : \u201d # EF BC 9A\n GB18030//, \u201c : \u201d # EF BC 9A\n GBK//, \u201c : \u201d # EF BC 9A\n ISIRI-3342//, \u201c!:\u201d # 21 3A\n ISIRI3342//, \u201c!:\u201d # 21 3A\n MS936//, \u201c : \u201d # EF BC 9A\n MSCP949//, \u201c : \u201d # EF BC 9A\n OSF0004000A//, \u201c : \u201d # EF BC 9A\n OSF100203B5//, \u201c : \u201d # EF BC 9A\n UHC//, \u201c : \u201d # EF BC 9A\n WINDOWS-936//, \u201c : \u201d # EF BC 9A\n\nGiven the context of the string preceding the symbol and line feed symbols following it, the best match is the \u201cFULLWIDTH \nCOLON\u201d Unicode character translated from one of the Chinese or Korean code pages (CP936 and CP949).\n\n15\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n \n\fBITS Downloader, extended, MSVC 10 version\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\n7eba9f6f9774c87fafc4aba403821fae73a50d387624d039d1b296cf0befca73\n\n72c514c0b96e3a31f6f1a85d8f28403c\n\n2017.10.07 12:12:33 (GMT), 10.0\n\nI386 Windows GUI EXE\n\n57344\n\nThis module is similar to the \u201cBITS Downloader, extended\u201d but was compiled with a more recent version of Visual Studio and \nbears minor differences.\n\nMutex name used: \u201cforegrounduu state\u201d\n\nPayloads downloaded and executed: \u201cFileA.z\u201d(\u201cFileA.dll\u201d), \u201cFileB.z\u201d(\u201cFileB.dll\u201d) and \u201cFileC.z\u201d(\u201cFileC.dll\u201d)\n\nExported function names executed from the payload DLLs: \u201cCallA\u201d, \u201cCallB\u201d, \u201cCallC\u201d, \u201cCallD\u201d, \u201cCallE\u201d.\n\nC&C URL\n\nhttps://103.39.109.252/insult\n\nUnique ID (\u201cEXE ID\u201d)\n\nNli\n\nBITS Downloader, \u201cHHDump.dll\u201d\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nInternal name\n\nb2982325d3231ba5959484b01f5b6492babd37f10a8736e6bf81b47253bc99eb\n\n9aa47dceccb306a80101f47ab148578d\n\n2011.01.03 07:36:03 (GMT), 9.0\n\nI386 Windows GUI DLL\n\n58368\n\nHHDump.dll\n\nThis module is a DLL version of a \u201cBITS Downloader\u201d. The library provides one exported function \u201cSetFormName\u201d that is \nempty; all the business logic is implemented in the DllMain function.\n\nThe DllMain function, when executed with the reason code of DLL_PROCESS_ATTACH, checks if the filename of the host \nprocess is equal to \u201cvc9play.exe\u201d. It then spawns its main thread if the filename matches.\n\nC&C URL\n\nhttps://43.252.228.84/quest\n\n16\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n \n\fLoad.rem\nThe module checks for the presence of the file %APPDATA%\\Microsoft\\Windows\\load.rem. If the file is present it follows in \na new thread: it copies it to %APPDATA%\\Microsoft\\Windows\\SendTo\\load.dll, then loads the copy as a regular DLL and \ncalls its function exported with the name \u201cLoad\u201d, if present. The copy is deleted if the module fails to load it as a DLL.\n\nMain thread\nThe module enumerates and cancels BITS jobs if their names contain a substring \u201cfirst job\u201d or \u201csecond job\u201d and the length \nof the name is either 9 or 10. This is an improvement over the original \u201cBITS Downloader\u201d that checked for a contradictory \ncondition that never becomes true.\n\nThe module creates a directory if it doesn\u2019t exist: %APPDATA%\\Microsoft\\Network. Due to a bug, it will not attempt to \ncreate the directory if a file exists with the same name, failing later when the directory is required. This directory is then \nused to store any temporary files, instead of %TEMP% in the original \u201cBITS Downloader\u201d.\n\nFiles that are downloaded and executed in separate threads:\n\nDFileA.dll fetched from %C&C URL%/%Computername%/DFileA.z\n\nDFileD.dll fetched from %C&C URL%/%Computername%/DFileD.z\n\nFiles that are downloaded and executed in the current thread:\n\nDFileC.dll fetched from %C&C URL%/%Computername%/DFileC.z\n\nExported function names executed from the payload DLLs: \u201cCallA\u201d, \u201cCallB\u201d, \u201cCallC\u201d, \u201cCallD\u201d, \u201cCallE\u201d, \u201cCallF\u201d, \u201cCallG\u201d, \u201cCallH\u201d, \n\u201cCallI\u201d, \u201cCallJ\u201d, \u201cCallK\u201d, \u201cCallL\u201d, \u201cCallM\u201d, \u201cCallN\u201d, \u201cCallO\u201d, \u201cCallP\u201d, \u201cFinal\u201d.\n\nThe signature of the function called \u201cFinal\u201d is different from the rest: it takes 21 arguments that not only contain those \npassed to other functions but also the return values of the previous (Call\u2026) functions called.\n\nC&C communication period: 30 minutes\n\nRemarks. \u201cvc9play.exe\u201d may refer to the component of software called \u201cVirtual CD 9\u201d.\n\nBITS Downloader, \u201ccryptui.sep\u201d\n\n2826815873d90ad38c5aeeed57c09385d6ad9a3cebaa18757f557a698e9f92b6 \n7e2b1bbffa7f05e7bf57ee60d162ef1e6f83b2e3fb5aa0da985add67af517901\n\n1c5377a54cbaa1b86279f63ee226b1df\n9f13636d5861066835ed5a79819aac28\n\n2008.01.01 11:56:50 (GMT), 9.0\n\nAMD64 Windows GUI DLL\n\n57856\n\naeinv64.dll\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nInternal name\n\n17\n\nMosaicRegressor: Lurking in the Shadows of UEFI\fThis module is supposed to be loaded by the payload of a BITS Downloader named \u201cFileA.dll\u201d and is in turn another variation \nof a BITS Downloader. It is very similar to \u201cHHDump.dll\u201d. The following description includes only the differences.\n\nThe library provides one exported function with the name \u201cRetrievePKCS7FromCA\u201d. The DllMain function is empty and the \nmodule doesn\u2019t have any checks for the name of the current executable.\n\nThe payload is loaded in the same way as \u201cHHDump.dll\u201d; the only difference is an additional optional call to the function \nexported with the name \u201cCallQ\u201d after the call to the function named \u201cFinal\u201d.\n\nC&C communication period: 15 minutes\n\nSample\n\nC&C URL\n\n1c5377a54cbaa1b86279f63ee226b1df\n\nhttps://103.243.26.211/bits\n\n9f13636d5861066835ed5a79819aac28\n\nhttps://103.39.109.239/requry\n\nBITS Downloader, 64-bit\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nbffe333c3470e6012924409b6aa48b20e9d12f181c0f6b03f50db64ddf7596a7\n\nafc09deb7b205eadae4268f954444984\n\n2010.01.02 06:40:26 (GMT), 9.0\n\nAMD64 Windows GUI EXE\n\n55808\n\nThis executable is based on the codebase of the \u201cBITS Downloader\u201d but also contains pieces of boilerplate code that later \nappeared in \u201cBITS Downloader, extended\u201d. It is worth noting that the part of the code that checks for, and cancels, the BITS \njob by name uses the same name lengths as the first \u201cBITS Downloader\u201d (5 and 6) but the correct substring literals \u201cfirst\u201d \nand \u201csecond\u201d.\n\nThis version does not create any mutex.\n\nC&C communication period: 15 minutes\n\nThis version uses the directory %APPDATA%\\Microsoft\\Internet Explorer to store its temporary files.\n\nThe module creates a text file %APPDATA%\\Microsoft\\Internet Explorer\\%Computername%.dat and writes a \nhardcoded string in there:\n\nLINE\n\nThe file is then uploaded to the C&C server using the same code that uploads the system information report in \u201cBITS \nDownloader, extended\u201d.\n\nThe names of payloads, filenames and exported function names that are executed from the payload DLLs is identical to the \none of \u201cBITS Downloader, extended\u201d.\n\n18\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n\fC&C URL\n\nUnique ID\n\nhttps://144.48.241.32/bits\n\ntnb\n\nCurl-based downloaders \n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\n230de38fc10b7c07af5aceb6ebbafa80c45c2b9123a7a167f85e8a05b5cf0db7 \nb8425a5c05c01c1294ce75719049e1b4eab32c34cabe456c281f110976cf2ade \n25da7cc807578394716925afd30a9cc9d543e2fa2a2b25ce8f52160b3b4bc073\n\n9e182d30b070bb14a8922cff4837b94d\n61b4e0b1f14d93d7b176981964388291\n3d2835c35ba789bd86620f98cbfbf08b\n\n2017.12.13 03:24:47 (GMT), 6.0\n\nI386 Windows GUI EXE\n\n208896\n\nThis is a standalone application built using a generic \u201cHello world\u201d template of a Win32 GUI application.\n\nAll string constants relevant to the business logic are stored in Base64-encoded form.\n\nThe program creates a hidden window with the name \u201ccurl_test\u201d and class name \u201cCURL_TEST\u201d. Then it follows into the C&C \ncommunication routine.\n\nC&C communication\nThe module downloads several files from its C&C server. The URL of the server is hardcoded and varies among the samples.\n\nIt may download modules specific to either 32-bit or 64-bit target systems, using the suffix \u201c32\u201d or \u201c64\u201d correspondingly. For \neach DLL file the download routine enters an infinite loop and continues to the next module only when the current file has \nbeen download without errors. Each attempt is followed by a predefined delay that is different for each sample.\n\nThe first file to download is the following:\n\nURL of the C&C server/msreg_32.dll or URL of the C&C server/msreg_64.dll\n\nThe file is saved to: %APPDATA%\\msreg.dll.\n\nNext, the module attempts to download the files:\n\nURL of the C&C server/wrtreg_32.dll, saved to %TEMP%\\wrtreg_32.dll\n\nURL of the C&C server/wrtreg_64.dll, saved to %TEMP%\\wrtreg_64.dll\n\nThis library is then loaded, unloaded and deleted. The latter two libraries are downloaded and executed only if the file \nmsreg.dll is is nnot present on disk.\n\n19\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n \n\fThen the module continuously attempts to download another file:\n\nURL of the C&C server/%Computername%/%PayloadName.dll, saved to %APPDATA%\\%PayloadName%.dll \n(%PayloadName% varies, see the list of names)\n\nThe previous version of the file, if present, is moved to a temporary filename with the prefix %TEMP%\\34F and then \ndeleted. Every time a new such file is successfully downloaded, the module starts a new thread to execute it.\n\nPayload ABI\nThe payload file is expected to be a regular Windows DLL. The code that interacts with the library is similar to the one used \nin BITS Downloader. The file is loaded using the standard LoadLibraryA API function. Then it resolves the addresses of \nfunctions exported with the names \u201cExpA\u201d, \u201cExpB\u201d,\u201cExpC\u201d, \u201cExpD\u201d, \u201cExpE\u201d, \u201cExpF\u201d, \u201cExpG\u201d. The functions, if present, are then \nconsequently called. Every function has to take five arguments passed on the stack by pointers.\n\nDepending on the returned values, the module can stop executing the exported functions, download files to disk or upload \ndata produced by the function to the C&C server. The data is uploaded with HTTP POST request to the URL:\n\nURL of the C&C server/upload.php\n\nThe POST request contains the part called \u201ctxt\u201d as a file attachment, with its filename and contents provided by the \nexported function.\n\nNotable file properties\nThe binary is statically linked with libcurl and contains the version string \u201clibcurl/7.49.1\u201d. According to the official Curl website, \nversion 7.49.1 was released on May 30 2016.\n\nThe language identifier of the file\u2019s resources is set to 2052 (\u201czh-CN\u201d). One of the resources is its version information \ncontaining the application name \u201ccurl_test\u201d.\n\nVariable parameters\n\nC&C URLs\n\nSample\n\n9e182d30b070bb14a8922cff4837b94d\n\n61b4e0b1f14d93d7b176981964388291\n\n3d2835c35ba789bd86620f98cbfbf08b\n\nPayload DLL names\n\nSample\n\n9e182d30b070bb14a8922cff4837b94d\n\n61b4e0b1f14d93d7b176981964388291\n\n3d2835c35ba789bd86620f98cbfbf08b\n\n20\n\nC&C URL\n\nhttps://43.252.230.180\n\nhttps://43.252.228.179\n\nhttps://103.39.110.193\n\nPayload DLL filename\n\nrfvtgb.dll\n\nsdfcvb.dll\n\nnewplgs.dll\n\nMosaicRegressor: Lurking in the Shadows of UEFI\fC&C communication delay\n\nSample\n\nC&C communication period, min\n\n9e182d30b070bb14a8922cff4837b94d\n\n61b4e0b1f14d93d7b176981964388291\n\n3d2835c35ba789bd86620f98cbfbf08b\n\nCurl-based downloader, extended\n\n11\n\n8\n\n15\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\n2c0df314dcdc9fa161f5f31369037f747a794e26cee6f8835cc37eef3077f782\n\n328ad6468f6edb80b3abf97ac39a0721\n\n2010.01.01 12:37:47 (GMT), 6.0\n\nI386 Windows GUI EXE\n\n208000\n\nThis module is built mostly from pieces of code found in the \u201cBITS Downloader, extended\u201d. However, the C&C \ncommunication routines are similar to those found in the \u201cCurl-based downloader\u201d.\n\nMutex name: \u201csingle UI\u201d\n\nSets the autorun registry location: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run,  \nvalue dsuiext=%location of the executable%.\n\nEvery second the module checks for the presence of a kill switch file %APPDATA%\\Microsoft\\exitUI.rs and terminates if it \nis present.\n\nThe module enters an infinite C&C communication loop with a preset delay between each attempt.\n\nC&C communication\nFirst, the module sends a test GET request using the URL of the C&C server and continues if the attempt succeeds. Then \nit collects system information and writes the results into a text file %APPDATA%\\%Computername%.dat. The code that \ncollects the system information is identical to the one found in the \u201cBITS Downloader\u201d. Then the resulting file with the system \ninformation is sent to the C&C server in a POST request to %URL of the C&C server/upload.php. The code also checks if \nthere is a file %APPDATA%dat present on the disk and if so the file is uploaded instead.\n\nThe URL of the C&C server and the unique identifier (\u201cEXE ID\u201d) are hardcoded in the binary and encrypted with a simple \none-byte XOR operation.\n\nPayload\nWhen it has finished uploading the system information report the program then attempts to fetch the payload from the \nC&C server. The business logic is similar to the one for \u201cBITS Downloader, extended\u201d, with the following differences:\n\nFiles that are downloaded and executed in separate threads:\n\n21\n\nMosaicRegressor: Lurking in the Shadows of UEFI\f%APPDATA%\\Microsoft\\WebA.dll fetched from %C&C URL%/%Computername%/WebA.z\n\n%APPDATA%\\Microsoft\\WebB.dll fetched from %C&C URL%/%Computername%/WebB.z\n\nFiles that are downloaded and executed in the current thread:\n\n%APPDATA%\\Microsoft\\WebC.dll fetched from %C&C URL%/%Computername%/WebC.z\n\nEach DLL may have one or more exported functions named \u201cFunA\u201d, \u201cFunB\u201d, \u201cFunC\u201d, \u201cFunD\u201d, \u201cFunE\u201d, \u201cFunF\u201d, \u201cFunG\u201d, \u201cFunH\u201d, \n\u201cFunI\u201d, \u201cFunJ\u201d. Once finished, the program may delete the DLL file depending on the returned value. Depending on the data \nreturned by the functions the module may upload or download the files from the C&C server.\n\nC&C URL\n\nhttps://117.18.4.6\n\nUnique ID (\u201cEXE ID\u201d)\n\no\n\nC&C communication period: 15 minutes\n\nCurl downloader, \u201cOINFO11.OCX\u201d\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nInternal name\n\n4b03409184b3206f7e3a43ff9f7713722c9acd871dd961d918f66e65d92f43f9\n\n7b213a6ce7ab30a62e84d81d455b4dea\n\n2010.01.01 12:27:15 (GMT), 9.0\n\nI386 Windows GUI DLL\n\n176128\n\nOINFO11.OCX\n\nThe module is a DLL based on the Curl-based downloader, extended. Only the differences are included in this description.\n\nMutex name: \u201cOffice Module\u201d\n\nThe kill switch file is monitored in a separate thread. When that file is found, the module not only terminates the current \nprocess but also deletes the autorun registry value.\n\nRich header dump\nThe 66 modules compiled with Visual Studio 6 are parts of the libcurl library identical to the one used in the \u201cCurl-based \ndownloader\u201d. The rest of the code was compiled with the more recent version 9 (VS 2008).\n\nRaw data\n\n0093 521E 00000002\n\n0096 4FBD 00000009\n\n0095 521E 00000009\n\nType\n\nsdk/imp\n\nunknown\n\nmasm\n\nCount\n\nProduced by\n\n2\n\n9\n\n9\n\nVS 2008 (build 21022)\n\n150 build 20413\n\nVS 2008 (build 21022)\n\n22\n\nMosaicRegressor: Lurking in the Shadows of UEFI\fRaw data\n\n0083 521E 0000000B\n\n000A 2636 00000042\n\n007B C627 0000000D\n\n0001 0000 000000A3\n\n0084 521E 00000004\n\n0092 521E 00000001\n\n0091 521E 00000001\n\nC&C URL:\n\nSample\n\n7b213a6ce7ab30a62e84d81d455b4dea\n\n17a11d22e491acb8c84f8636c3a41637\n\nUnique IDs (\u201cEXE ID\u201d in the report):\n\nSample\n\n7b213a6ce7ab30a62e84d81d455b4dea\n\n17a11d22e491acb8c84f8636c3a41637\n\nC&C communication period: 15 minutes\n\nPayload of the BITS Downloader, \u201cFileA.z\u201d\n\nType\n\ncobj\n\ncobj\n\nsdk/imp\n\nimports\n\nc++obj\n\nunknown\n\nlinker\n\nCount\n\nProduced by\n\n11\n\n66\n\n13\n\n163\n\n4\n\n1\n\n1\n\nVS 2008 (build 21022)\n\nVS 6 (build 9782)\n\nVS 2005 (build 50727)\n\nimports (build 0)\n\nVS 2008 (build 21022)\n\nVS 2008 (build 21022)\n\nVS 2008 (build 21022)\n\nC&C URL\n\nhttps://103.229.1.26\n\nhttps://103.30.40.116\n\nUnique ID\n\nmo\n\namb\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nInternal name\n\nc093c3e366ef0d4bd759a467842868cb1dd974c17e5230499707ec5bee5af304\n\n89527f932188bd73572e2974f4344d46\n\n2008.01.01 11:58:02 (GMT), 9.0\n\nI386 Windows GUI DLL\n\n46592\n\nFileA.z\n\nThis module is a DLL library that matches the prototype of the payload of the BITS Downloader, extended and was \ndiscovered along with one of the downloader samples.\n\nThe library has an empty DllMain function and three exported functions with the names \u201cCallA\u201d, \u201cCallB\u201d, \u201cCallC\u201d. The \ndescription of these functions follows.\n\n23\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n\fCallA\n\u2022  creates the directory %APPDATA%\\Microsoft\\Windows\n\u2022  deletes the file %APPDATA%\\Microsoft\\Windows\\mapisp.dll and, if this fails, renames the file to %TEMP%\\Hx101.tmp\n\u2022 \n\nreturns the values that result in the BITS Downloader, fetching the file \u201cSecondA.z\u201d from the C&C server to \n%APPDATA%\\Microsoft\\Windows\\mapisp.dll\n\nCallB\n\u2022  creates the directory %APPDATA%\\Microsoft\\Windows\\SendTo\n\u2022  deletes the file %APPDATA%\\Microsoft\\Windows\\SendTo\\cryptui.sep and, if this fails,renames the file to  \n\n\u2022 \n\n%TEMP%\\Hx102.tmp\nreturns the values that result in the BITS Downloader, fetching the file \u201cSecondB.z\u201d from the C&C server to \n%APPDATA%\\Microsoft\\Windows\\SendTo\\cryptui.sep\n\nCallC\n\u2022  sets an autorun registry value : HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run,  \n\nname mapisp to \u201crundll32.exe \u201c%APPDATA%\\Microsoft\\Windows\\mapisp.dll\u201d,CryptoSysPrep\n\n\u2022  checks if the files \u201cmapisp.dll\u201d (called \u201cfile a\u201d) and \u201ccryptiu.sep\u201d (\u201cfile b\u201d) are present\n\u2022  writes a log of operations into the file %APPDATA%\\Microsoft\\Internet Explorer\\FileOutA.dat and returns\n\nStrings written to the log depend on the results of the preceding operations:\n\n\u201csecond file successA\u201d\n \u201cfile a success\u201d or \u201cfile a error\u201d\n \u201cfile b success\u201d or \u201cfile b error\u201d\n \u201cregistry set success\u201d or \u201cregistry set error\u201d\n \u201cdo move file a\u201d or \u201cdo not move file a\u201d\n \u201cdo move file b\u201d or \u201cdo not move file b\u201d\n\nWinRAR wrapper \u201cload.rem\u201d\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nInternal name\n\nb47f8eda04def2df3d2c58199af5fdded338d08bee8fb3636f441a46bb3ff119\n\nfa0a874926453e452e3b6ced045d2206\n\n2011.01.02 07:00:22 (GMT), 9.0\n\nI386 Windows GUI DLL\n\n43008\n\nload.rem\n\nThis module is referenced and loaded by the downloader modules. It is a DLL with an empty DllMain function and one \nexported function with the name \u201cLoad\u201d.\n\nLoad\nThe function is an infinite loop. Every five minutes it checks if there is a file named  \n%APPDATA%\\Microsoft\\Windows\\LnkClass.dat. If the file is present, it then executes  \n\n24\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n\f\u201c%APPDATA%\\Microsoft\\Windows\\LnkClass.dat\u201d a -hpHFG5fv(*&# -r  \n\u201c%APPDATA%\\Microsoft\\Credentials\\MSI36C2.dat\u201d %CSIDL_RECENT%\n\nHere, %CSIDL_RECENT% is the location of the \u201cRecent documents\u201d folder. Although the original file named LnkClass.dat \nwas not recovered, the command line is valid for a popular archiver called WinRAR - it is a command to store the contents \nof the \u201cRecent Documents\u201d folder in the archive named MSI36C2.dat encrypted with the password \u201cHFG5fv(*&#\u201d.\n\nIntermediate DLL loader \u201cmapisp.dll\u201d\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nInternal name\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nInternal name\n\n2e7808e3cfebad45815b3de7b91ea39970e8d99c607c71cb70052cee0e140db4\n\n36b51d2c0d8f48a7dc834f4b9e477238\n\n2008.01.01 12:03:43 (GMT), 9.0\n\nAMD64 Windows GUI DLL\n\n41984\n\ncapisp64.dll\n\na651af2ce8338d979e6c9d7eed4b3f5c4500602565d36025b3079f9f05afcb33\n\ndf1b910626a380bffa22a757f419135c\n\n2017.10.07 00:02:20 (GMT), 9.0\n\nAMD64 Windows GUI DLL\n\n41984\n\ncapisp.dll\n\nThis module is referenced by \u201cFileA\u201d. It is a DLL with an empty DllMain function and one exported function with the name \n\u201cCryptoSysPrep\u201d.\n\nCryptoSysPrep\nThe function checks for the presence of additional DLL files and loads them in separate threads:\n\n%APPDATA%\\Microsoft\\Windows\\SendTo\\cryptui.sep, called by function RetrievePKCS7FromCA\n\n%APPDATA%\\Microsoft\\Network\\sppsvc.sep, copied to %APPDATA%\\Microsoft\\sppsvc.tbl, then loaded and called by \nfunction \u201cPlugA\u201d\n\n%APPDATA%\\Microsoft\\Network\\subst.sep, copied to %APPDATA%\\Microsoft\\subst.tbl, then loaded and called by \nfunction \u201cPlugB\u201d\n\nAny of these DLL files are deleted if the module fails to load them. The function never returns.\n\nThe sample df1b910626a380bffa22a757f419135c loads all libraries in place.\n\n25\n\nMosaicRegressor: Lurking in the Shadows of UEFI\fE-mail downloader, \u201cehlwapi.dll\u201d \n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nInternal name\n\ne3d63dc50b6a477e0361e71f80e133337bab1d11e809387e8e3a058614780b21\n\ne2f4914e38bb632e975cff14c39d8dcd\n\n2009.01.03 01:57:17 (GMT), 8.0\n\nAMD64 Windows GUI DLL\n\n556544\n\nnetmgr.dll\n\nThis creates the mutex: \u201cprocess attach Module\u201d\n\nIt exports two functions, \u201cConfig\u201d that just returns \u201c3\u201d and \u201cProcess\u201d that spawns a new thread.\n\n\u201cProcess\u201d function\nAll strings related to the business logic are encrypted with a homebrew algorithm similar to RC4 with a hardcoded extended \nS-Box of 1024 bytes.\n\nThe module checks if there is a file present at %COMMON_APPDATA%\\Microsoft\\Windows\\user.rem. If it is present, the \nfile is copied to %APPDATA\\Microsoft\\dfsadu.dll; then it is loaded and its export \u201cMediaA\u201d is called in a new thread.\n\nThen the function enters an infinite loop. Every 20 minutes it tries to connect to a POP3S server \u201cpop.mail.ru\u201d. The module \nuses the first of two pairs of hardcoded credentials that worked.\n\nLogin (password hardcoded but not shown)\n\nFeedback e-mail address\n\nthtgoolnc@mail.ru\n\nthbububugyhb85@mail.ru\n\nthgetmmun@mail.ru\n\nthyhujubnmtt67@mail.ru\n\nThe module attempts to download the first e-mail message from the mailbox into the %TEMP% directory using a temporary \nfilename with the prefix \u201cHt\u201d. If the download succeeds, it deletes the message via IMAPS using the same credentials.\n\nIt parses the MIME format using a code that appears to be similar to a widespread open-source class CMimeMessage \n(the class name is included in the RTTI information too). It extracts the message\u2019s subject and continues if it is equal to \n\u201cRepeatA\u201d, \u201cRepeatB\u201d, \u201cRepeatC\u201d, \u201cRepeatD\u201d. If the subject matches one of the names, the attachment from that message is \nsaved and decrypted and then copied with a DLL extension:\n\nSubject\n\nRepeatA\n\nRepeatB\n\nRepeatC\n\nRepeatD\n\n26\n\nTemporary DLL name\n\n%TEMP%\\RepairA.dll\n\n%TEMP%\\RepairB.dll\n\n%TEMP%\\RepairC.dll\n\n%TEMP%\\RepairD.dll\n\nMosaicRegressor: Lurking in the Shadows of UEFI\fThe DLL file is then loaded and called by export \u201cMediaA\u201d. Depending on the return value of that function, the DLL file may be \ndeleted or left on disk. Also, the module may encrypt a temporary file produced by the function, and send it as an attachment \nof type \u201capplication/x-msdownload\u201d with the name \u201cattach.dat\u201d, to the \u201cfeedback\u201d email address via SMTPS. The subject of \nthe message is set to \u201cMINE UPLOAD\u201d and the \u201cFrom\u201d field is set to the login used to retrieve the incoming messages.\n\nOLE2 Equation dropper \n\nMD5: 33F21AC73AFF4DFF71316795282A3D06 (OLE2 part)\n\nThis is a recovered part of a weaponized document. Since most related code and documents described in public reports \nare known to be RTF documents, this one could also have been embedded in an RTF document.\n\nThe OLE2 stream creation date for all the streams is 2019-02-02. It contains composite objects of types \u201cMicrosoft \nEquation 3.0\u201d and \u201cMicrosoft OLE 1.0 Native\u201d. The Equation object uses a well-known exploit CVE-2018-0802 and the OLE \n1.0 holds the EXE file that is decrypted by the shellcode of the exploit.\n\nSeveral notable findings:\n\nThe OLE 1.0 Native CompObj stream contains the name in Russian \u201c\u041f\u0430\u043a\u0435\u0442\u201d along with the English name \u201cPackage\u201d. It also has \na path inside \u201cC:\\Users\\ADMINI~1\\AppData\\Local\\Temp\\8.t\u201d that is used to drop the payload on disk.\n\nThe shellcode and the filename \u201c8.t\u201d are known to be produced by the \u201cRoyal Road / 8.t\u201d used by several malicious actors.\n\nThe payload of the document is a dropper for a Curl downloader; the description follows.\n\nPayload of the OLE2 dropper, \u201cData.dll\u201d\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nInternal name\n\nab021048f3d2c61cfbef9d4fb54148e81b2f2c887589e3e6813eb8c1dba36468\n\n6dbb092e081c3e23d555c2a460b96187\n\n2009.12.31 23:53:59 (GMT), 6.0\n\nI386 Windows GUI DLL\n\n253952\n\nData.dll\n\nThe file is a DLL with four empty exports:\n\n??0CData@@QAE@XZ\n\n??4CData@@QAEAAV0@ABV0@@Z\n\n?fnData@@YAHXZ\n\n?nData@@3HA\n\n27\n\nMosaicRegressor: Lurking in the Shadows of UEFI\fThe DllMain function decrypts (only the first 20 bytes are encrypted) and then drops an embedded EXE file to %TEMP%\\\nstore.exe and executes it. The EXE file is the \u201cCurl-based downloader, extended\u201d\n\nLauncher for the Curl downloader, \u201cmsreg.exe\u201d\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\n35a476a77218128bd797c04b27f53049998c0951833e47b32455091d83ff4f02\n\na8516452fe7d4d5d2fd0685ccf8a64b2\n\n2017.10.27 00:28:56 (GMT), 10.0\n\nAMD64 Windows GUI DLL\n\n58880\n\nThis library is a utility for launching the executable %APPDATA%.exe that is an instance of a Curl-based downloader. It just \nstarts the executable from its DllMain function and returns.\n\nWinhttp-based downloaders, extended\n\nThese samples seem to be based on the same code for collecting system information as the downloaders using BITS and \nCurl and use the same text messages with non-ASCII symbols. However the code in these files uses WinHTTP API for \nconnecting with the C&C servers and expects the payloads to be EXE files, not DLLs. The major differences follow.\n\nThe files contain RTTI information for two user-written classes called \u201cCGetInfo\u201d and \u201cMyWinHTTP\u201d.\n\nc2695ef5f3a400219caa2347f5b914c15d74a133efa24d96d121acfa7f95a67e \n64eabfc0612ac82eb80b8e955549b6a01899b712a99243d116e087828ca9e070 \nadb8bfa6e227847c2ffa6e1c97d08280081426480ed9b2ce6af26a23fbd1334c \n0fdcea00a78e0263caa45205d09b107bd50a9696f59a66951e8b9afc42d54e02\n\n08ecd8068617c86d7e3a3e810b106dce\n1732357d3a0081a87d56ee1ae8b4d205\n74db88b890054259d2f16ff22c79144d\n7c3c4c4e7273c10dbbab628f6b2336d8\n\n2017.05.11 08:33:49 (GMT), 11.0\n\nI386 Windows GUI EXE\n\n95744\n\n5c7a75d30713bb6873529efebd8bf0a28f8c3720ef4300804703dd33e2086fd0\n\n4769891fccc26c1583e0f21b1a18d2ba\n\n2017.05.04 13:34:51 (GMT), 6.0\n\nI386 Windows GUI EXE\n\n73728\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\n28\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n\fIt sets the autorun registry location: HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run,  \nvalue Media=%location of the executable%.\n\nThe program collects system information in a text file %APPDATA%%Computername%. The data is similar to the \none collected by other \u201cextended downloaders\u201d, but also includes the list of running processes (all samples except \n4769891fccc26c1583e0f21b1a18d2ba), installed services (4769891fccc26c1583e0f21b1a18d2ba only) and information about \nmounted disks and the listings of their root directories. The text file is uploaded to the C&C server with a POST request \nto\u00a0%C&C server%/upload.php.\n\nThe module downloads two executable files. The first file is saved in the %STARTUP% folder and the second one is saved \nin the folder named %APPDATA%\\Microsoft and started immediately. The URLs and names of the files vary. The code also \ncontains references to the file \u201crepeat\u201d but that file is never downloaded. Existing files, if they are present and are different \nin size, are moved into a temporary file with the prefix %TEMP%\\341 and then deleted.\n\nEach file is downloaded from the URL constructed according to the format:  \n%C&C server%/%Computername%/%filename%, \ni.e. \u201chttp://103.195.150.106/%Computername%/winword.exe\u201d.\n\nThe code uses WinHTTP API functions to communicate with its C&C server via HTTP. It uses the default system User-\nAgent string or \u201cMozilla/4.0\u201d.\n\nC&C addresses and file names\n\nMD5\n\nC&C server\n\nRemote \nname\n\nFolder name\n\nFilename\n\n08ecd8068617c86d7e3a3e810b106dce\n\n103.195.150.106\n\ntasken.exe\n\n%STARTUP%\n\ntasken.exe\n\n1732357d3a0081a87d56ee1ae8b4d205\n\n103.82.52.18\n\ncohost.exe\n\n%STARTUP%\n\ncohost.exe\n\nwinword.exe\n\n%APPDATA%\\Microsoft\n\nwinword.exe\n\nwinlogon.exe %APPDATA%\\Microsoft\n\nwinlogon.exe\n\n74db88b890054259d2f16ff22c79144d\n\n144.48.241.167\n\ncohost.exe\n\n%STARTUP%\n\nremote.exe\n\ntime.exe\n\n%APPDATA%\\Microsoft\n\ntime.exe\n\n7c3c4c4e7273c10dbbab628f6b2336d8\n\n103.82.52.18\n\ncohost.exe\n\n%STARTUP%\n\ncohost.exe\n\n103.195.150.106\n\nwinword.exe\n\n%APPDATA%\\Microsoft\n\nwinword.exe\n\n4769891fccc26c1583e0f21b1a18d2ba\n\n150.129.81.21\n\ncohost.exe\n\n%STARTUP%\n\ncohost.exe\n\nwinlogon.exe %APPDATA%\\Microsoft\n\nwinlogon.exe\n\n29\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n \n \n \n \n \n \n \n \n\fModification with the \u201cID\u201d field\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nSHA256\n\nMD5\n\nCompiled\n\nType\n\nSize\n\nf31034fffec424d6e4505318400ecc3b00f8c2107c1823510a037b11a49f0741 \nf63ccdabade319cc73a3c5eb41a2877bdb70f4db8bf8414d49fd2f402845f27c\n\n0d3da5adb9bb63c7fcb0185756601749 13773bc34a47124743c9836c6ff80695\n\n2018.01.29 02:57:16 (GMT), 10.0\n\nI386 Windows GUI EXE\n\n87040\n\neaa31ce8f9ec828e040801df9faa911e7b70f29f23a70f24504f6ec02f3504ff\n\n7ac0189801242d5261ab5c0c43c7f8d3\n\n2018.02.01 06:36:46 (GMT), 10.0\n\nI386 Windows GUI EXE\n\n87040\n\nfa116cf9410f1613003ca423ad6ca92657a61b8e9eda1b05caf4f30ca650aee5\n\nd848d4ec24e678727b63251e54a0a5de\n\n2017.07.21 03:01:45 (GMT), 6.0\n\nI386 Windows GUI EXE\n\n73728\n\nThis is a variant of a WinHTTP-based downloader that only collects basic system information and also \nreports a unique hardcoded \u201cID\u201d similar to the \u201cEXE ID\u201d string used in other types of downloaders. the sample \nd848d4ec24e678727b63251e54a0a5de also collects the information about installed system services.\n\nC&C addresses and file names\n\nMD5\n\n0d3da5adb9bb63c7fcb0185756601749 \n7ac0189801242d5261ab5c0c43c7f8d3\n\nID\n\nC&C \nserver\n\nRemote \nname\n\nFolder name\n\nFilename\n\nD01\n\n144.48.241.167\n\ntime.exe\n\n%STARTUP%\n\ntime.exe\n\ncohost.exe\n\n%APPDATA%\\Microsoft\n\ncohost.exe\n\n13773bc34a47124743c9836c6ff80695\n\nD01\n\n43.252.228.75\n\ncrss.exe\n\n%STARTUP%\n\ncrss.exe\n\nd848d4ec24e678727b63251e54a0a5de\n\nD02\n\n103.82.52.18\n\ncohost.exe\n\n%STARTUP%\n\ncohost.exe\n\nwinlgon.exe\n\n%APPDATA%\\Microsoft\n\nwinlgon.exe\n\nwinlogon.exe\n\n%APPDATA%\\Microsoft\n\nwinlogon.exe\n\n30\n\nMosaicRegressor: Lurking in the Shadows of UEFI \n \n \n \n \n \n \n \n \n \n\f"], "URLs": ["https://103.30.40.39/bits", "https://103.39.110.193", "https://103.243.24.171/bits", "https://43.252.230.180", "http://43.252.228.179/ambeg.png", "https://43.252.228.179", "https://43.252.228.84/quest", "https://117.18.4.6", "https://103.56.115.69/bisen", "https://103.39.109.239/requry", "http://103.195.150.106/%Computername%/winword.exe", "https://43.252.228.252/help", "https://144.48.241.32/bits", "https://menjitghyukl.myfirewall.org/thren", "https://103.39.109.252/insult", "https://103.243.26.211/bits", "https://103.30.40.116", "https://43.252.228.84/bits", "https://103.229.1.26"], "weight": 0.0}