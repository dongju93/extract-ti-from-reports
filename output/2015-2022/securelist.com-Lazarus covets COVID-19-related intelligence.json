{"rule_id": 339, "name": "securelist.com-Lazarus covets COVID-19-related intelligence", "description": "-", "references": [], "File_Names": ["access.jsp", "serial.jsp", "BD54EA8118AF46.TMP", "loading.jsp", "www.kne", "public.jsp", "scaccessservice.exe", "rasprocservice.exe", "reg_system.save", "default.jsp", "D94.tmp", "Functions.jsp", "notice_write.asp", "import.jsp", "F05990302ERA.jpg", "431F.tmp", "popup_left.asp", "system.jsp", "auth.jsp", "tomas.jsp", "exit.jsp", "svc.drv", "bytecortex.com", "ajax_Write.asp", "_ICEBIRD007.dat", "9DC9.tmp", "C_28705.NLS", "perf91nc.inf", "javac.io", "legacy.jsp", "local.jsp", "chooseIcon.jsp", "cache.jsp", "405A758FA9C3DD.TMP", "Policy.DAT", "cookie.jsp", "reg_sam.save", "ntlm.jsp", "WFRForms.jsp", "customZoom.jsp", "BBS.asp", "Customer_Session.asp", "masks.jsp", "najatelecom.com", "gmslogmgr.dat", "jenkins.jsp", "engtask.exe", "common.asp", "story.jsp", "helpform.jsp", "TMP739.TMP", "digital.jsp", "javac.dat"], "MD5_Hashes": ["dc3c2663bd9a991e0fbec791c20cbf92", "4814b06d056950749d07be2c799e8dc2", "5983db89609d0d94c3bcc88c6342b354", "26545f5abb70fc32ac62fdab6d0ea5b2", "4088946632e75498d9c478da782aa880", "9c6ba9678ff986bcf858de18a3114ef3", "0e44fcafab066abe99fe64ec6c46c84e"], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\eventlog\\Application\\Emulate \u2013 [random 2\ncharacters]svc\n\nIt also takes advantage of the Custom Security Support Provider by registering the created file path to the end of the\nexisting registry value. Thanks to this registry key, this DLL will be loaded by lsass.exe during the next startup.\n\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa \u2013 Security Packages : kerberos msv1_0\nschannel wdigest tspkg pku2u [random 2 characters]svc.drv\n\nFinally, the starter module starts the [random 2 characters]svc.drv file in a remote process. It searches for the first\nsvchost.exe process and performs DLL injection. The injected [random 2 characters]svc.drv malware contains a\nmalicious routine for decrypting and loading its embedded payload. The final payload is wAgent, which is responsible for\nfetching additional payloads from the C2, possibly a fully featured backdoor, and loading it in the memory.\n\nBookcode malware cluster\n\nThe pharmaceutical company targeted by Lazarus group\u2019s Bookcode malware is developing a COVID-19 vaccine and is\nauthorized to produce and distribute COVID-19 vaccines. We previously saw Lazarus attack a software company in South\nKorea with Bookcode malware, possibly targeting the source code or supply chain of that company. We have also\nwitnessed the Lazarus group carry out spear phishing or strategic website compromise in order to deliver Bookcode\nmalware in the past. However, we weren\u2019t able to identify the exact initial infection vector for this incident. The whole\ninfection procedure confirmed by our telemetry is very similar to the one described in ESET\u2019s latest publication on the\nsubject.\n\nBookcode infection procedure\n\n4/9\n\n\fAlthough we didn\u2019t find the piece of malware tasked with deploying the loader and its encrypted Bookcode payload, we\nwere able to identify a loader sample. This file is responsible for loading an encrypted payload named gmslogmgr.dat\nlocated in the system folder. After decrypting the payload, the loader finds the Service Host Process (svchost.exe) with\nwinmgmt, ProfSvc or Appinfo parameters and injects the payload into it. Unfortunately, we couldn\u2019t acquire the\nencrypted payload file, but we were able to reconstruct the malware actions on the victim machine and identify it as the\nBookcode malware we reported to our Threat Intelligence Report customers.\n\nUpon execution, the Bookcode malware reads a configuration file. While previous Bookcode samples used the file\nperf91nc.inf as a configuration file, this version reads its configuration from a file called C_28705.NLS. This Bookcode\nsample has almost identical functionality as the malware described in the comprehensive report recently published by\nKorea Internet & Security Agency (KISA). As described on page 57 of that report, once the malware is started it sends\ninformation about the victim to the attacker\u2019s infrastructure. After communicating with the C2 server, the malware\nprovides standard backdoor functionalities.\n\nPost-exploitation phase\n\nThe Lazarus group\u2019s campaign using the Bookcode cluster has its own unique TTPs, and the same modus operandi was\nused in this attack.\n\nExtracting infected host information, including password hashes, from the registry sam dump.\nUsing Windows commands in order to check network connectivity.\nUsing the WakeMeOnLan tool to scan hosts in the same network.\n\nAfter installing Bookcode on September 25, 2020, the malware operator started gathering system and network\ninformation from the victim. The malware operator also collected a registry sam dump containing password hashes:\n\nexe /c \u201creg.exe save hklm\\sam %temp%\\~reg_sam.save > \u201c%temp%\\BD54EA8118AF46.TMP~\u201d 2>&1\u2033\nexe /c \u201creg.exe save hklm\\system %temp%\\~reg_system.save > \u201c%temp%\\405A758FA9C3DD.TMP~\u201d 2>&1\u2033\n\nIn the lateral movement phase, the malware operator used well-known methodologies. After acquiring account\ninformation, they connected to another host with the \u201cnet\u201d command and executed a copied payload with the \u201cwmic\u201d\ncommand.\n\nexe /c \u201cnetstat -aon | find \u201cESTA\u201d > %temp%\\~431F.tmp\nexe /c \u201cnet use \\\\172.[redacted] \u201c[redacted]\u201d /u:[redacted] > %temp%\\~D94.tmp\u201d 2>&1\u2033\nwmic /node:172.[redacted] /user:[redacted] /password:\u201d[redacted]\u201d process call create \u201c%temp%\\engtask.exe\u201d >\n%temp%\\~9DC9.tmp\u201d 2>&1\u2033\n\nMoreover, Lazarus used ADfind in order to collect additional information from the Active Directory. Using this utility,\nthe threat actor extracted a list of the victim\u2019s users and computers.\n\nInfrastructure of Bookcode\n\nAs a result of closely working with the victim to help remediate this attack, we discovered an additional configuration file.\nIt contains four C2 servers, all of which are compromised web servers located in South Korea.\n\nhxxps://www.kne.co[.]kr/upload/Customer/BBS.asp\nhxxp://www.k-kiosk[.]com/bbs/notice_write.asp\nhxxps://www.gongim[.]com/board/ajax_Write.asp\nhxxp://www.cometnet[.]biz/framework/common/common.asp\n\nOne of those C2 servers had directory listing enabled, so we were able to gain insights as to how the attackers manage\ntheir C2 server:\n\nAttacker files listed on a compromised website\n\nWe discovered several log files and a script from the compromised server, which is a \u201cfirst-stage\u201d C2 server. It receives\nconnections from the backdoor, but only serves as a proxy to a \u201csecond-stage\u201d server where the operators actually store\norders.\n\n5/9\n\n\fFile name\n\nDescription\n\n_ICEBIRD007.dat\n\nA log file containing the identifier of victims and timestamps.\n\n~F05990302ERA.jpg\n\nSecond-stage C2 server address:\nhxxps://www.locknlockmall[.]com/common/popup_left.asp\n\nCustomer_Session.asp Malware control script.\n\nCustomer_Session.asp is a first-stage C2 script responsible for delivering commands from the next-stage C2 server and\ncommand execution results from the implant. In order to deliver proper commands to each victim, the bbs_code\nparameter from the implants is used as an identifier. The script uses this identifier to assign commands to the correct\nvictims. Here is how the process of sending an order for a particular victim works:\n\n1. The malware operator sets the corresponding flag([id]_208) of a specific implant and saves the command to the\n\nvariable([id]_210).\n\n2. The implant checks the corresponding flag([id]_208) and retrieves the command from the variable([id]_210) if it is\n\nset.\n\n3. After executing the command, the implant sends the result to the C2 server and sets the corresponding flag.\n4. The malware operator checks the flag and retrieves the result if the flag is set.\n\nLogic of the C2 script\n\nBesides implant control features, the C2 script has additional capabilities such as updating the next-stage C2 server\naddress, sending the identifier of the implant to the next-stage server or removing a log file.\n\ntable_nm value\n\nFunction\nname\n\nDescription\n\ntable_qna\n\nqnaview\n\nSet [id]_209 variable to TRUE and save the \u201ccontent\u201d parameter value to\n[id]_211.\n\ntable_recruit\n\nrecuritview\n\nIf [id]_209 is SET, send contents of [id]_211 and reset it, and set [ID]_209 to\nFALSE.\n\ntable_notice\n\nnotcieview\n\nSet [id]_208 and save the \u201ccontent\u201d parameter value to [id]_210.\n\ntable_bVoice\n\nvoiceview\n\nIf [id]_208 is SET, send contents of [id]_210 and reset it, and set [id]_208 to\nFALSE.\n\ntable_bProduct\n\nproductview\n\nUpdate the ~F05990302ERA.jpg file with the URL passed as the \u201ctarget_url\u201d\nparameter.\n\n6/9\n\n\ftable_community\n\ncommunityview Save the identifier of the implant to the log file. Read the second-stage URL from\n\n~F05990302ERA.jpg and send the current server URL and identifier to the next\nhop server using the following format:\nbbs_type=qnaboard&table_id=[base64ed identifier] &accept_identity=[base64\nencoded current server IP]&redirect_info=[base64ed current server URL]\n\ntable_free\n\nfreeview\n\nRead _ICEBIRD007.dat and send its contents, and delete it.\n\nAttribution\n\nWe assess with high confidence that the activity analyzed in this post is attributable to the Lazarus group. In our previous\nresearch, we already attributed the malware clusters used in both incidents described here to the Lazarus group. First of\nall, we observe that the wAgent malware used against the health ministry has the same infection scheme as the malware\nthat the Lazarus group used previously in attacks on cryptocurrency businesses.\n\nBoth cases used a similar malware naming scheme, generating two characters randomly and appending \u201csvc\u201d to it\nto generate the path where the payload is dropped.\nBoth malicious programs use a Security Support Provider as a persistence mechanism.\nBoth malicious programs have almost identical debugging messages.\n\nHere is a side-by-side comparison of the malware used in the ministry of health incident, and the malware\n(4088946632e75498d9c478da782aa880) used in the cryptocurrency business attack:\n\nDebugging log from ministry of health case\n\nDebugging log of cryptocurrency business case\n\n15:18:20 Extracted Dll : [random 2bytes]svc.drv\n15:59:32 Reg Config Success !\n\nExtracted Dll : [random 2bytes]svc.dll\nExtracted Injecter : [random 2bytes]proc.exe\n\n16:08:45 Register Svc Success !\n\nReg Config Success !\n\n16:24:53 Injection Success, Process ID : 544\n\nRegister Svc Success !\n\nStart Injecter Success !\n\nRegarding the pharmaceutical company incident, we previously concluded that Bookcode is exclusively used by the\nLazarus group. According to our Kaspersky Threat Attribution Engine (KTAE), one of the Bookcode malware samples\n(MD5 0e44fcafab066abe99fe64ec6c46c84e) contains lots of code overlaps with old Manuscrypt variants.\n\nKaspersky Threat Attribution Engine results for Bookcode\n\nMoreover, the same strategy was used in the post-exploitation phase, for example, the usage of ADFind in the attack\nagainst the health ministry to collect further information on the victim\u2019s environment. The same tool was deployed\nduring the pharmaceutical company case in order to extract the list of employees and computers from the Active\n\n7/9\n\n\fDirectory. Although ADfind is a common tool for the post-exploitation process, it is an additional data point that\nindicates that the attackers use shared tools and methodologies.\n\nConclusions\n\nThese two incidents reveal the Lazarus group\u2019s interest in intelligence related to COVID-19. While the group is mostly\nknown for its financial activities, it is a good reminder that it can go after strategic research as well. We believe that all\nentities currently involved in activities such as vaccine research or crisis handling should be on high alert for\ncyberattacks.\n\nIndicators of compromise\n\nwAgent\n\ndc3c2663bd9a991e0fbec791c20cbf92      %programdata%\\oracle\\javac.dat\n26545f5abb70fc32ac62fdab6d0ea5b2     %programdata%\\oracle\\javac.dat\n9c6ba9678ff986bcf858de18a3114ef3          %programdata%\\grouppolicy\\Policy.DAT\n\nwAgent Installer\n\n4814b06d056950749d07be2c799e8dc2    %programdata%\\oracle\\javac.io, %appdata%\\ntuser.dat\n\nwAgent compromised C2 servers\n\n1\n\n2\n\n3\n\n4\n\n5\n\nhttp://client.livesistemas[.]com/Live/posto/system.jsp@public.jsp@jenkins.jsp@tomas.jsp@story.jsp\n\nhxxps://iski.silogica[.]net/events/serial.jsp@WFRForms.jsp@import.jsp@view.jsp@cookie.jsp\n\nhxxp://sistema.celllab[.]com.br/webrun/Navbar/auth.jsp@cache.jsp@legacy.jsp@chooseIcon.jsp@customZoom.jsp\n\nhxxp://www.bytecortex.com[.]br/eletronicos/digital.jsp@exit.jsp@helpform.jsp@masks.jsp@Functions.jsp\n\nhxxps://sac.najatelecom.com[.]br/sac/Dados/ntlm.jsp@loading.jsp@access.jsp@local.jsp@default.jsp\n\nwAgent file path\n\n1 %SystemRoot%\\system32\\[random 2 characters]svc.drv\n\nwAgent registry path\n\n1 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\eventlog\\Application\\Emulate - [random 2\n\ncharacters]svc\n\nBookcode injector\n\n1 5983db89609d0d94c3bcc88c6342b354    %SystemRoot%\\system32\\scaccessservice.exe, rasprocservice.exe\n\nBookcode file path\n\n1\n\n2\n\n3\n\n%SystemRoot%\\system32\\C_28705.NLS\n\n%SystemRoot%\\system32\\gmslogmgr.dat\n\nBookcode compromised C2 servers\n\n8/9\n\n \n \n \n\f1\n\n2\n\n3\n\n4\n\n5\n\nhxxps://www.kne.co[.]kr/upload/Customer/BBS.asp\n\nhxxp://www.k-kiosk[.]com/bbs/notice_write.asp\n\nhxxps://www.gongim[.]com/board/ajax_Write.asp\n\nhxxp://www.cometnet[.]biz/framework/common/common.asp\n\nhxxps://www.locknlockmall[.]com/common/popup_left.asp\n\nMITRE ATT&CK Mapping.\n\nTactic\n\nTechnique. Technique Name.        \n\nExecution\n\nPersistence\n\nT1059.003\nT1569.002\n\nCommand and Scripting Interpreter: Windows Command Shell\nSystem Services: Service Execution\n\nT1547.005\nT1543.003\n\nBoot or Logon Autostart Execution: Security Support Provider\nCreate or Modify System Process: Windows Service\n\nPrivilege Escalation\n\nT1547.005\nT1543.003\n\nBoot or Logon Autostart Execution: Security Support Provider\nCreate or Modify System Process: Windows Service\n\nT1055.001\n\nProcess Injection: Dynamic-link Library Injection\n\nDefense Evasion\n\nT1070.006\nT1055.001\n\nIndicator Removal on Host: Timestomp\nProcess Injection: Dynamic-link Library Injection\n\nT1140\n\nDeobfuscate/Decode Files or Information\n\nT1027.001\n\nObfuscated Files or Information: Binary Padding\n\nCredential Access\n\nT1003.002 OS Credential Dumping: Security Account Manager\n\nDiscovery\n\nT1082\nT1033\n\nT1049\n\nSystem Information Discovery\nSystem Owner/User Discovery\n\nSystem Network Connections Discovery\n\nLateral Movement\n\nT1021.002\n\nSMB/Windows Admin Shares\n\nCommand and Control T1071.001\nT1132.001\n\nApplication Layer Protocol: Web Protocols\nData Encoding: Standard Encoding\n\nExfiltration\n\nT1041\n\nExfiltration Over C2 Channel\n\nLazarus covets COVID-19-related intelligence\n\nYour email address will not be published. Required fields are marked *\n\n9/9\n\n \n \n\f"], "URLs": ["http://client.livesistemas[.]com/Live/posto/system.jsp@public.jsp@jenkins.jsp@tomas.jsp@story.jsp"], "weight": 0.0}