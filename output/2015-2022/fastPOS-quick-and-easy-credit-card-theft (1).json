{"rule_id": 465, "name": "fastPOS-quick-and-easy-credit-card-theft (1)", "description": "-", "references": [], "File_Names": ["Hook.pdb", "Svchost.exe", "blank.pw", "Dwm.exe", "cdosys.php", "cssrs.exe", "winlogon_r.exe", "Firefox.exe"], "MD5_Hashes": [], "SHA1_Hashes": ["8292de8a2f7d5fc288b734a78868e8a18453581d", "9e7a22bfed0bc9f88673f204bbcf9d4b1dc1ab21", "f3fe5173600ee853fe01eb8d82a36230ef5068f9", "7c29a9822c6f498b2b4e632f5fcbb4b7daa25a7a", "01cdb9f7935434df31196660a7542e0b46bcf480", "f4074fddcd9491b72b94908a813564754f68f4ed", "299fabbeaa110f7e817d81861d8edc7ff19a2415", "7efc1618b74f1110d0481b434086dd08f2e75211", "9526438e93621a44325163c4dda22b142c7721dc", "a5384a2a6f3099912f3c6e5f6646c07ad7b3963b", "b56465347f234b9ddf07d153a9b493d0ffe54ae2"], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run \n\nAfter the initial execution, file invoking, and successful installation, this threat connects to a \ncommand-and-control (C&C) server that is predefined in the file itself. The complete list of C&C \nservers can be found at the Appendix. \n\n2 \n\n \n \n \n \n \n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nInformation theft routines \n\nFastPOS has three separate threads, pertaining to its notable capabilities:  \n\n\uf0b7  Keylogger \n\n\uf0b7  Main RAM scraper process \n\n(Note: The latest file set avoids several process names: Firefox.exe, Chrome.exe, \nSvchost.exe, Dwm.exe, and Skype.exe) \n\n\uf0b7  Self-updating mechanism \n\nThe first two threads, the keylogger and the main RAM scraper process, are for information theft \npurposes. We will tackle the third thread in the data exfiltration phase.  \n\nIn the first thread, FastPOS captures keystrokes and sends back the entire string to the C&C \nserver once the return key is pressed.  Keyloggers often go together with PoS threats as the \nformer enable the attackers to do reconnaissance and obtain other information aside from the \nstolen data from the credit card scrape. Stolen information from keyloggers may also vary \nbetween the products or services purchased and the card security code (unique card code/card \nidentification number) being asked in some establishments.  \n\nFastPOS implements a simple key-logging functionality similar to another PoS threat, \nNewPosThings, in that keylogged data are held in memory with no file written in disk.  As such, \nthis poses challenges to detection and removal of the malware from PoS systems.  Although, \nsuch routine may result to some level of network noise, there are relatively few instances of the \nreturn key being used.  This is also seen when you compare the normal operations of PoS \nterminal to that of a regular workstation.  \n\nThe main RAM scraping process handled by the second thread and a custom algorithm is \nimplemented in the following flow: \n\n1.  Check field separator ('=' or 'D') \n2.  Check first digit of the primary account number (aka, primary account number or \n\nPAN) (3,4,5,6) \n\n3.  Check expiry year (not later than 2040) \n4.  Check expiry month (no value above 12) \n5.  Service code should be 201 or 101 (magnetic stripe card/IC card, PIN not required) \n6.  Must pass Luhn validation \n7.  Data after service code should be digits from 0-9 up to 16 characters, and ends with \n\n'?'  \n\n3 \n\n \n \n \n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nThis process also checks if the number of digits is 16 numbers. The PAN checking indicates \nthat it allows cards from major players like American Express, Discover, JCB, MasterCard, and \nVISA among others. The steps taken by this RAM scraper is quite common, except to one \nprocedure where it checks the service code. Based on our analysis of one particular sample \n(sha1: 01cdb9f7935434df31196660a7542e0b46bcf480), FastPOS looks for a specific service \ncode 201 or 101, namely: \n\n\uf0b7  Position 1, value 1: International interchange OK \n\uf0b7  Position 1, value 2: International interchange, use IC (chip) where feasible \n\uf0b7  Position 2, value 0: Normal \n\uf0b7  Position 3, value 1: No Restrictions \n\nFigure 3: Service code checking \n\nThis filtering ensures that the credit card data that it searches for are international cards \n(position 1), unrestricted for authorization (position 2), and does not require a pin (position 3). A \nfull list of possible service code combinations can be read here.  \n\nData exfiltration \n\nThis RAM scraper has an unusual way of data exfiltration. It does not have any HTTP user-\nagent. Instead of HTTP POST, the HTTP GET verb is used. This implies that a server would \nhave to do post-processing on their server-side logs. GET method is usually employed to \nrequest data from a specific HTTP resource while POST is for submitting data to the specified \nHTTP resource. Analysis of the HTTP responses indicates that a positive HTTP 200 response is \ngiven by the C&C server \u2013 meaning that the HTTP GET request is processed correctly. \nHowever, no content is provided back to the client from the server.  \n\n4 \n\n \n \n \n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nFigure 4. HTTP GET request to C&C server \n\nFurthermore, because of the use of HTTP GET, the requests are cached on the infected \nendpoints and remain in web browser history. FastPOS either deletes the URL cache entry to \nhandle the cached content or when it attempts to update using the third thread for self-update.  \n\nAside from implementing HTTP GET (instead of HTTP POST) on the client-side, the command \nand control server does not implement HTTPS to encrypt the traffic. This makes the requests \nand responses, including the credit card data, exposed in the network traffic. In turn, this makes \nthe network traffic easy to spot as it exposes all gathered information from the endpoint in every \nHTTP transaction. However, this threat does so in a quick and easy manner, hence the name \nFastPOS.  \n\nTypically, PoS threats either log data locally or send it out to their respective C&C servers \nimmediately. In the case of FastPOS, it does not store any scraped information or status logs \nlocally but sends it to C&C server hard-coded in the malware. It does this using the following \ncommands/parameters: \n\nkey&log=TWND%sKWND%s \n\nadd&log=%s&foundin=%s  \n\nUsed to send the logged keystrokes. First \nstring is the window title; second string is the \nkey log \nUsed by the RAM Scraper thread during data \nexfiltration. First string is the card dump; \nsecond string is the process name.  \n\nTable 1. Commands for sending the stolen information \n\nIt also continuously sends status logs to the C&C server using the parameters listed below: \n\nnew&username=%s&computername=%s&os=%s&architecture=%s  Registers \n\nstatuslog&log=scanning-%s \n\nnew infected \nsystem with \nuser name, \ncomputer \nname, OS \nand \narchitecture \nIndicates \nprocesses \nbeing \n\n5 \n\n \n  \n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nupdate&username=%s \n\nstatuslog&log=CheckedForUpdate \n\nstatuslog=&log=GetLastError%d \n\nscanned for \ncredit card \ndata \nSends when \na software \nupdate is \nrequested \nSends after \nrequest for \nsoftware \nupdate \nReports \nencountered \nerror with an \nerror code \n\nTable 2. Parameters for sending logs \n\nFastPOS has implemented a functionality that indicates the process name where the credit card \nis found. This is usually used to pre-filter if the entry is valid or not. They can also reuse this \nlater for profiling purposes or for determining the PoS software running on the infected terminal.  \n\nOther research findings \n\nWe found interesting hints or clues regarding the perpetrators behind FastPOS and its possible \nusers. We spotted a forum site which has a code snippet with the exact mutex as FastPOS \nwhen configured to use.  \n\nFigure 5:  This forum site has the same mutex name \n\nThe error message (see figure 6) bears semblances to the pop-up box in our sample set.   \n\n6 \n\n \n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nFigure 6: Pop-up box when the mutex is duplicated \n\nWe surmise that the user who posted in the said forum, inquiring about the keylogger is actually \nthe creator of FastPOS. There\u2019s a possibility that he is employing the platform and its user base \nto refine his code.  The said code in question appears like the FastPOS keylogger thread.  \n\nFigure 7: Form post with code details \n\nThe existing sample set of FastPOS communicating back to the C&C server.  \n\nFigure 8: Example of a C&C communication matching exactly the code snippet in Fig 7. \n\n7 \n\n \n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nOur research also indicated that around January 24-25 of this year, there were advertisements \nof a site called SwipeIt[.]pw in some forums with this content.  \n\nFigure 9: SwipeIt[.]pw advertisement \n\nIronically, the IP address (5[.]100[.]156[.]107)of SwipeIt[.]pw is actually used as the C&C server \nof this threat. Perhaps, the operators behind FastPOS thought it would be simple as to make the \nforum as the C&C server where they can also sell their wares.  \n\nThis forum also provides information about the dumps available for purchase. It also allows the \nusers to add balance to their accounts, view and filter existing dumps, check the existing credit \ncard bins, view the FAQ page, and access chat-based technical support page. All transactions \nare done in bitcoin only.  \n\n8 \n\n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nFigure 10: Dump selection for purchase at SwipeIT[.]pw \n\nAs of posting, there\u2019s a total of 3,354 credit card numbers for purchase with the following prices: \n\nIssuing bank location \nSouth Korea \nBrazil \nUnited Kingdom \nJapan \nFrance \nPhilippines \nUnited States \n\nPrice \nUS $10 - $12 \nUS$12 \nUS $10 - $12 \nUS $40 \nUS $25 \nUS $25 \nUS $12 \n\nTable 3. Price range for credit cards up for purchasing in SwipeIT[.]pw  \n\nThe site also provides information regarding the current locations these cybercriminals are \nlooting. Our findings show that the current locations are South Korea, United Kingdom, and \nBrazil.  \n\nBased on our research findings, here\u2019s a rough timeline of the events related to this. \n\n9 \n\n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nFigure 11. Timeline of FastPOS-related events \n\n10 \n\n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nAlthough the two domains (aquaspa-oi[.]re and sabebien[.]cl) were registered some time ago, \nthese were just recently observed with FastPOS. \n\nAffected countries \n\nOur Smart Protection Network data shows the following countries have FastPOS-related \ninfections in the last five months.  \n\nFigure 12.  Country distribution of FastPOS-related infections \n\nTrend Micro has observed infections in small to medium-sized businesses (SMBs), as well as \nenterprises.  We also surmise that the locations which have FastPOS infections are sometimes \nthe remote offices with open remote VNC access. \n\nConclusion \n\nSome of the affected entities of FastPOS are based in locations with open remote VNC access.  \nIn certain instances, these organizations have DSL router as their primary separation between \nthe terminal (that processes credit card information) and the internet with just port-forward \nfunctionality enabled directly to the terminal itself. This introduces risks to the environment given \nthat there\u2019s only a thin line separating the terminal and external access. While remote access \nallows remote administration, the same channels have always been abused. A similar \nmethodology has been seen and documented early on with point-of-sale systems infected by \nBackoff with in this advisory from US-CERT almost 2 years ago which, as it stands to show, \nsimilar methodology are still being used on infections still persist today.  \n\n11 \n\n \n \n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nFurthermore, based on the design and behavior of FastPOS, it implies that the targeted \nterminals have bare internet access with installed endpoint security software as the only line of \ndefense. While complying with the bare minimum of having anti-malware software on systems, it \nis recommended to separate traffic and employ strict access controls on such terminals.  \nIn cases when an endpoint security solution is used to secure systems against PoS threats, it \nalso best to track and monitor activities within the endpoint. Implementing a context-aware \nendpoint security monitor that would speed up the discovery, investigation and response to \nsecurity incidents may be desired such as Trend Micro Endpoint Sensor.  \n\nFigure 13. Visual representation of the infection via Trend Micro Endpoint Sensor \n\nBusinesses should also consider another approach, such as implementing endpoint application \ncontrol or whitelisting technology that reduces attack exposure by ensuring only updates \nassociated with whitelisted applications can be installed. Endpoint solutions such  Trend \nMicro\u2122 Security,  Trend Micro\u2122 Smart Protection Suites, and  Trend Micro Worry-\nFree\u2122 Business Security can protect users systems have features that can help in combatting \nPoS threats such as FastPOS.  \n\n12 \n\n \n \n \n \n \n \n \n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\nAppendix: Example Indicators of Compromise \n\nSHA1 \n\nDetection \n\nTSPY_FASTPOS.SMZTDA  \n\n8292de8a2f7d5fc288b734a78868e8a18453581d \n\nb56465347f234b9ddf07d153a9b493d0ffe54ae2 \n\n9526438e93621a44325163c4dda22b142c7721dc \n\n7efc1618b74f1110d0481b434086dd08f2e75211 \n\nf4074fddcd9491b72b94908a813564754f68f4ed \n\n9e7a22bfed0bc9f88673f204bbcf9d4b1dc1ab21 \n\na5384a2a6f3099912f3c6e5f6646c07ad7b3963b \n\nf3fe5173600ee853fe01eb8d82a36230ef5068f9 \n\n7c29a9822c6f498b2b4e632f5fcbb4b7daa25a7a \n\n01cdb9f7935434df31196660a7542e0b46bcf480 \n\n299fabbeaa110f7e817d81861d8edc7ff19a2415 \n\nList of C&C servers: \n\n\uf0b7  hxxp://paseovalantiacom[.]com/cdosys.php?comdlg64= \n\n\uf0b7  hxxp://blank.pw/Neo/cdosys[.]php?comdlg64=statuslog \n\n\uf0b7  hxxp://103[.]195[.]185[.]94/berg/cdosys.php?comdlg64= \n\n\uf0b7  hxxp://103[.]195[.]185[.]94/legacy/cdosys.php?comdlg64= \n\n\uf0b7  hxxp://148[.]251[.]8[.]173/data/cdosys.php?comdlg64= \n\n\uf0b7  hxxp://sabebien[.]cl/data/cdosys.php?comdlg64= \n\n\uf0b7  hxxp://aquaspa-oi[.]re/data/cdosys.php?comdlg64= \n\nCompile \nTime  \n(GMT + 0) \n9/27/2015 \n4:08 \n9/27/2015 \n7:17 \n10/21/2015 \n21:58 \n1/4/2016 \n19:53 \n1/21/2016 \n9:38 \n1/23/2016 \n21:29 \n2/22/2016 \n15:49 \n3/5/2016 \n16:48 \n3/5/2016 \n16:49 \n3/11/2016 \n18:26 \n3/13/2016 \n9:42 \n\n13 \n\n \n \n \n \n \n \n \n \n \n \n \n \n\fTrend Micro | FastPOS: Quick and Easy Credit Card Theft \n\n\uf0b7  hxxp://5[.]100[.]156[.]107/star/cdosys.php?comdlg64= \n\n\uf0b7  hxxp://8[.]100[.]156[.]107/star/cdosys.php?comdlg64= \n\nYARA Rule: \n\nrule PoS_Malware_fastpos : FastPOS \n{ \nmeta: \n        author = "], "URLs": ["http://%s/cdosys.php"], "weight": 0.0}