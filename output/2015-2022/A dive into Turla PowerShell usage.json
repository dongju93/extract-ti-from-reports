{"rule_id": 1038, "name": "A dive into Turla PowerShell usage", "description": "-", "references": [], "File_Names": ["rpcrt4.dll", "Turla.BZ", "desktop.db", "Turla.BS", "WG731ff.Read", "amsi.dll", "Turla.BR", "pm.exe", "EN594ca.Mode", "Turla.BQ", "iCore.dat", "_.User", "RPCSpoofServerInstall.pdb", "TargetInstance.Hour", "thumbs.ini"], "MD5_Hashes": [], "SHA1_Hashes": ["B948E25D061039D64115CFDE74D2FF4372E83765", "9D1C563E5228B2572F5CA14F0EC33CA0DEDA3D57", "EC54EF8D79BF30B63C5249AF7A8A3C652595B923"], "SHA256_Hashes": [], "Registry_Entries": ["HKLM\\SYSTEM\\CurrentControlSet\\services\\LanmanServer\\Parameters\\NullSessionPipes contains \u201catctl\u201d. If\nso, the server sets the security descriptor on the pipe object to \u201cS:(ML;;NW;;;S-1-16-0)\u201d via the SetSecurityInfo\nfunction. This will make the pipe available to everyone (untrusted/anonymous integrity level).\n\nThe following image shows the corresponding MIDL stub descriptor and the similar syntax and interface ID.\n\nFigure 8. RPC backdoor client\u2019s MIDL on the left, server\u2019s on the right\n\nAs mentioned previously, this backdoor also supports loading plugins. The server creates a thread that searches for\n\ufb01les matching the following pattern lPH*.dll. If such a \ufb01le exists, it is loaded and its export function ModuleStart is\ncalled. Among the various plugins we have located so far, one is able to steal recent \ufb01les and \ufb01les from USB thumb\ndrives.\n\nhttps://www.welivesecurity.com/2019/05/29/turla-powershell-usage/\n\n6/11\n\n\f5/30/2019\n\nA dive into Turla PowerShell usage | WeLiveSecurity\n\nMany variants of this RPC backdoor are used in the wild. Among some of them, we have seen local proxies (using\nupnprpc as the endpoint and ncalrpc as the protocol sequence) and newer versions embedding PowerShellRunner\nto run scripts directly without using powershell.exe.\n\nRPC Spoof Server\n\nDuring our research, we also discovered a portable executable with the embedded pdb\npath\u00a0C:\\Users\\Devel\\source\\repos\\RPCSpoofer\\x64\\Release_Win2016_10\\RPCSpoofServerInstall.pdb (SHA-1:\n9D1C563E5228B2572F5CA14F0EC33CA0DEDA3D57).\n\nThe main purpose of this utility is to retrieve the RPC con\ufb01guration of a process that has registered an interface. In\norder to \ufb01nd that kind of process, it iterates through the TCP table (via the GetTcpTable2 function) until it either \ufb01nds\nthe PID of the process that has opened a speci\ufb01c port, or retrieves the PID of the process that has opened a speci\ufb01c\nnamed pipe. Once this PID is found, this utility reads the remote process\u2019 memory and tries to retrieve the registered\nRPC interface. The code for this, seen in Figure 9, seems ripped from this Github repository.\n\nFigure 9. Snippet of code searching for the .data section of rpcrt4.dll in a remote process (Hex-Rays screenshot)\n\nAt \ufb01rst we were unsure how the retrieved information was used but then another sample, (SHA-1:\nB948E25D061039D64115CFDE74D2FF4372E83765) helped us understand. As shown in Figure 10, this sample\nretrieves the RPC interface, unsets the \ufb02ag to RPC_IF_ALLOW_SECURE_ONLY, and patches the \u201cdispatch table\u201d\nin memory using the WriteProcessMemory function. Those operations would allow the sample to add its RPC\nfunctions to an already existing RPC interface. We believe it is stealthier to re-use an existing RPC interface than to\ncreate a custom one.\n\nhttps://www.welivesecurity.com/2019/05/29/turla-powershell-usage/\n\n7/11\n\n\f5/30/2019\n\nA dive into Turla PowerShell usage | WeLiveSecurity\n\nFigure 10. Snippet of code retrieving the RPC dispatch table of the current process (Hex-Rays screenshot)\n\nPowerStallion\n\nPowerStallion is a lightweight PowerShell backdoor using Microsoft OneDrive, a storage service in the cloud, as\nC&C server. The credentials are hardcoded at the beginning of the script, as shown in Figure 11.\n\nFigure 11. OneDrive credentials in PowerStallion script\n\nIt is interesting to note that Turla operators used the free email provider GMX again, as in the Outlook Backdoor and\nin LightNeuron. They also used the name of a real employee of the targeted organization in the email address.\n\nThen it uses a net use command to connect to the network drive. It then checks, in a loop, as shown in Figure 12, if a\ncommand is available. This backdoor can only execute additional PowerShell scripts. It writes the command results\nin another OneDrive subfolder and encrypts it with the XOR key 0xAA.\n\nhttps://www.welivesecurity.com/2019/05/29/turla-powershell-usage/\n\n8/11\n\n\f5/30/2019\n\nA dive into Turla PowerShell usage | WeLiveSecurity\n\nFigure 12. Main loop of the PowerStallion backdoor\n\nAnother interesting artefact is that the script modi\ufb01es the modi\ufb01cation, access and creation (MAC) times of the local\nlog \ufb01le to match the times of a legitimate \ufb01le \u2013 desktop.ini in that example, as shown in Figure 13.\n\nFigure 13. Modi\ufb01cation of MAC times of the local log \ufb01le\n\nWe believe this backdoor is a recovery access tool in case the main Turla backdoors, such as Carbon or Gazer, are\ncleaned and operators can no longer access the compromised computers. We have seen operators use this\nbackdoor for the following purposes:\n\nMonitoring antimalware logs.\nMonitoring the Windows process list.\n\nhttps://www.welivesecurity.com/2019/05/29/turla-powershell-usage/\n\n9/11\n\n\f5/30/2019\n\nA dive into Turla PowerShell usage | WeLiveSecurity\n\nInstalling ComRAT version 4, one of the Turla second-stage backdoors.\n\nConclusion\n\nIn a 2018 blogpost, we predicted that Turla would use more and more generic tools. This new research con\ufb01rms our\nforecast and shows that the Turla group does not hesitate to use open-source pen-testing frameworks to conduct\nintrusion.\n\nHowever, it does not prevent attributing such attacks to Turla. Attackers tend to con\ufb01gure or modify those open-\nsource tools to better suit their needs. Thus, it is still possible to separate different clusters of activities.\n\nFinally, the usage of open-source tools does not mean Turla has stopped using its custom tools. The payloads\ndelivered by the PowerShell scripts, the RPC backdoor and PowerStallion, are actually very customized. Our recent\nanalysis of Turla LightNeuron is additional proof that this group is still developing complex, custom malware.\n\nWe will continue monitoring new Turla activities and will publish relevant information on our blog. For any inquiries,\ncontact us as threatintel@eset.com. Indicators of Compromise can also be found on our GitHub.\n\nIndicators of Compromise (IoCs)\n\nHashes\n\n50C0BF9479EFC93FA9CF1AA99BD\u2010\nCA923273B71A1\n\nPowerShell loader with encrypted\npayload\n\nPowerShell/Turla.T\n\nEC54E\u2010\nF8D79BF30B63C5249AF7A8A3C652595B923\n\n9CD\u2010\nF6D5878FC3AECF10761FD72371A2877F270D0\n\nRPC backdoor (client)\n\nWin64/Turla.BQ\n\nRPC backdoor (server)\n\nWin64/Turla.BQ\n\nD3DF3F32716042404798E3E9D691ACED2F78BD\u2010\nD5\n\nFile ex\ufb01ltration RPC plugin\n\nWin32/Turla.BZ\n\n9D1C563E5228B2572F5CA14F0EC33\u2010\nCA0DEDA3D57\n\nRPCSpoofServerInstaller\n\nWin64/Turla.BS\n\nB948E25D061039D64115CFDE74D2FF4372E83765\n\nRPC interface patcher\n\nWin64/Turla.BR\n\nFilenames\n\nRPC components\n\n%PUBLIC%\\iCore.dat (log \ufb01le, one-byte XOR 0x55)\n\\\\pipe\\\\atctl (named pipe)\n\nPowerStallion\n\nmsctx.ps1\nC:\\Users\\Public\\Documents\\desktop.db\n\nRegistry keys\n\nRPC components\n\nHKLM\\SYSTEM\\CurrentControlSet\\services\\LanmanServer\\Parameters\\NullSessionPipes contains atctl\n\nMITRE ATT&CK\n\nExecution\n\nT1086 PowerShell\n\nThe loaders are written in PowerShell.\nSome RPC components can execute PowerShell\ncommands.\n\nhttps://www.welivesecurity.com/2019/05/29/turla-powershell-usage/\n\n10/11\n\n \n\f5/30/2019\n\nA dive into Turla PowerShell usage | WeLiveSecurity\n\nPersistence\n\nT1084 Windows Management Instrumenta\u2010\n\nThe PowerShell loaders use WMI for persistence.\n\ntion Event Subscription\n\nDefense\nEvasion\n\nT1027 Obfuscated Files or Information\n\nThe RPC backdoor and PowerStallion encrypt the log\n\ufb01le.\n\nT1140 Deobfuscate/Decode Files or\n\nInformation\n\nThe PowerShell loaders decrypt the embedded\npayload.\n\nT1055 Process Injection\n\nThe PowerShell loaders inject the payload into a re\u2010\nmote process.\n\nT1099 Timestomp\n\nPowerStallion modi\ufb01es the timestamps of its log \ufb01le.\n\nDiscovery\n\nT1083 File and Directory Discovery\n\nThe RPC plugin gathers \ufb01le and directory information.\n\nT1120 Peripheral Device Discovery\n\nThe RPC plugin monitors USB drives.\n\nT1012 Query Registry\n\nThe server component of the RPC backdoor queries\nthe registry for NullSessionPipes.\n\nT1057 Process Discovery\n\nPowerStallion sent the list of running processes.\n\nCollection\n\nT1005 Data from Local System\n\nThe RPC plugin collects recent \ufb01les from the local \ufb01le\nsystem.\n\nT1025 Data from Removable Media\n\nThe RPC plugin collects \ufb01les from USB drives.\n\nCommand\nand Control\n\nT1071 Standard Application Layer Protocol\n\nThe RPC backdoor uses RPC and PowerStallion uses\nOneDrive via SMB.\n\nEx\ufb01ltration\n\nT1041 Ex\ufb01ltration Over Command and\n\nControl Channel\n\nPowerStallion ex\ufb01ltrates information through the C&C\nchannel.\n\nMatthieu Faou and Romain Dumont 29 May 2019 - 11:30AM\n\nhttps://www.welivesecurity.com/2019/05/29/turla-powershell-usage/\n\n11/11\n\n \n \n\f"], "URLs": ["https://www.welivesecurity.com/2019/05/29/turla-powershell-usage/"], "weight": 0.0}