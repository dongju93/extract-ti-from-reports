{"rule_id": 289, "name": "spear_phishing_techn.html", "description": "-", "references": [], "File_Names": ["regsv32.exe"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\CurrentVersion\\Run\\SecurityUpdate to launch the encoded PowerShell payload stored in the HKCU:\n\n\\Console\\FontSecurity key. Figure 11 shows the code for these actions. This will execute the PowerShell\npayload when the user logs in to the system.\n\nFigure 11: PowerShell registry persistence\n\nThe HKCU\\Console\\FontSecurity registry contains the fourth stage PowerShell script, shown decoded in\n\nFigure 12. This script borrows from the publicly available Inject-LocalShellCode PowerShell script from\n\nPowerSploit to inject shellcode.\n\n\fFigure 12: Code to inject shellcode\n\nThe shellcode has a custom XOR based decryption loop that uses a single byte key (0xD4), as seen in Figure\n\n13.\n\n\fFigure 13: Decryption loop and call to decrypted shellcode\n\nAfter the shellcode is decrypted and run, it injects a Poison Ivy backdoor into the userinit.exe as shown in\n\nFigure 14.\n\n\fFigure 14: Code injection in userinit.exe and attempt to access Poison Ivy related DAT files\n\nIn the decrypted shellcode, we also observed content and configuration related to Poison Ivy.  Correlating\n\nthese bytes to the standard configuration of Poison Ivy, we can observe the following:\n\nActive setup \u2013 StubPath\n\nEncryption/Decryption key - version2013\n\nMutex name - 20160509                 \n\nThe Poison Ivy configuration dump is shown in Figure 15.\n\nFigure 15: Poison Ivy configuration dump\n\n\fAlthough Poison Ivy has been a proven threat for some time, the delivery mechanism for this backdoor uses\n\nrecent publicly available techniques that differ from previously observed campaigns. Through the use of\nPowerShell and publicly available security control bypasses and scripts, most steps in the attack are\n\nperformed exclusively in memory and leave few forensic artifacts on a compromised host.\n\nFireEye HX Exploit Guard is a behavior-based solution that is not affected by the tricks used here. It detects\nand blocks this threat at the initial level of the attack cycle when the malicious macro attempts to invoke the\n\nfirst stage PowerShell payload. HX also contains generic detections for the registry persistence, AppLocker\n\nbypasses and subsequent stages of PowerShell abuse used in this attack.\n\nThis entry was posted on Wed Feb 22 09:45:00 EST 2017 and filed under Advanced Malware, Ankit Anubhav\n\n, Blog, Dhanesh Kizhakkinan, Latest Blog Posts, Spear Phishing and Threat Research.\n\nFirst Name\n\nLast Name\n\nEmail Address\n\nExecutive Perspective Blog\n\nThreat Research Blog\n\nProducts and Services Blog\n\nSubscribe\nSubscribe\n\nStay Connected\n\n LinkedIn\n\n Twitter\n\n Facebook\n\n Google+\n\n YouTube\n\n\f Podcasts\n\n Glassdoor\n\nContact Us\n+1 888-227-2721 \n\nCompany\n\nAbout FireEye\n\nCustomer Stories\n\nCareers\n\nPartners\n\nInvestor Relations\n\nSupplier Documents\n\nNews & Events\n\nNewsroom\n\nPress Releases\n\nWebinars\n\nEvents\n\nBlogs\n\nCommunication Preferences\n\nTechnical Support\n\nIncident?\n\nReport Security Issue\n\nContact Support\n\nCustomer Portal\n\nCommunities\n\nDocumentation Portal\n\nCyber Threat Map\n\nCopyright \u00a9 2017 FireEye, Inc. All rights reserved. \n\n\fPrivacy & Cookies Policy | Privacy Shield | Legal Documentation\n\n\f"], "URLs": [], "weight": 0.0}