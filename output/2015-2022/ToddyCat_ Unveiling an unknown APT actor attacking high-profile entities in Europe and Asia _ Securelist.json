{"rule_id": 148, "name": "ToddyCat_ Unveiling an unknown APT actor attacking high-profile entities in Europe and Asia _ Securelist", "description": "-", "references": [], "File_Names": ["\u0410\u043a\u0440\u0430\u043c\u043e\u0432.exe", "wabext.dll", "googleup.log", "debug.exe", "Microsoft.NET", "chr.exe", "x64.exe", "mobile.pipe", "rundll.dll", "iiswmi.dll", "google.exe", "debug.xml", "Triedit.dll", "\u0440\u0435\u0433\u043b\u0430\u043c\u0435\u043d\u0442.exe", "rcdll.dll", "Util.dll", "web.xml", "\u0433.exe", "Backdoor.MSIL", "svchosts.exe", "System.Core", "logo.jpg", "1.dll", "fveapi.dll", "Samurai.gen", "\u0418\u0421.exe", "chrome.log", "HTTP.sys", "websvc.dll", "86.dll", "web.exe", "sbs_clrhost.dat", "cache.dat", "netfx.dat", "sbs_clrhost.dll", "\u0433.zip", "\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438.zip", "dw.exe", "git.exe", "Util.dat", "googleup.exe", "config.dll", "license.txt", "index.dat", "example.xyz", "reg.txt", "x86.dll", "\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438.exe", "svhost.dll", "mstacx.dll", "avps.exe", "acrobat.exe", "google.log"], "MD5_Hashes": ["5e721804f556e20bf9ddeec41ccf915d", "832bb747262fed7bd45d88f28775bca6", "f595edf293af9b5b83c5ffc2e4c0f14b", "33694faf25f95b4c7e81d52d82e27e7b", "bde2073dea3a0f447eeb072c7e568ee7", "1ad6dccb520893b3831a9cfe94786b82", "5a912beec77d465fc2a27f0ce9b4052b", "8fb70ba9b7e5038710b258976ea97c98", "5cfdb7340316abc5586448842c52aabc", "93c186c33e4bbe2abdcc6dfea86fbbff", "ae5d2cef136ac1994b63c7f8d95c9c84", "350313b5e1683429c9ffcbc0f7aebf3b", "5a531f237b8723396bcfd7c24885177f", "ee881e0e8b496bb62ed0b699f63ce7a6", "5c3bf5d7c3a113ee495e967f236ab614", "8a00d23192c4441c3ee3e56acebf64b0"], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKLM\\SOFTWARE\\Microsoft\\Windows\nNT\\CurrentVersion\\SvcHost\n\nValue name: httpsvc\n\nValue: WebUpdate\n\nhttps://securelist.com/toddycat/106799/\n\n5/28\n\n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\n7. After the service is created, the malware attempts to configure the second stage DLL\nand entry point within it to be executed when the service is started. This is done by\nsetting the corresponding registry keys with the following values:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\nRegistry Key: $HKLM\\System\\ControlSet\\Services\\WebUpdate\\Parameters\n\nValue name: ServiceDll\n\nValue: %ProgramFiles%\\Common Files\\microsoft shared\\WMI\\iiswmi.dll\n\nRegistry Key: $HKLM\\System\\ControlSet\\Services\\WebUpdate\\Parameters\n\nValue name: ServiceMain\n\nValue: INIT\n\n8. The malware drops the final payload in the infection chain as a compressed,\n\nencrypted and base64 encoded blob under the following registry key:\n\n1\n\n2\n\n3\n\nRegistry Key: $HKLM\\SOFTWARE\\Classes\\Interface\\{6FD0637B-85C6-D3A9-CCE9-\n65A3F73ADED9}\n\nValue name:\n\nValue: ILQ3Pz8/Pz87P9IFVEskWKpIeTB0jZx5SVXYXhh1fG...%encoded data%\n\nStage 2 \u2013 DLL Loader\n\nThe registry keys created during the previous step forced the svchost.exe process to load a\nmalicious library developed in C++, iiswmi.dll. The code used inside the library is quite\nsimilar to the dropper and it calls the Windows API using the same special resolution\nfunction observed in the dropper.\n\nThis component is merely a loader that attempts to get an encrypted payload from the\nregistry and pass it as an argument to another DLL manually loaded during runtime.\n\nThe malware attempts to read the contents of the previously written registry key\nSOFTWARE\\Classes\\Interface\\{6FD0637B-85C6-D3A9-CCE9-65A3F73ADED9}, and if\nit succeeds, loads the previously dropped DLL in the path\n%COMMONPROGRAMFILES%\\System\\websvc.dll.\n\nTo invoke the next stage, the malware calls the Init export in the loaded DLL (websvc.dll)\nwhile passing the contents of the former registry key as an argument.\n\nhttps://securelist.com/toddycat/106799/\n\n6/28\n\n \n \n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nCode snippet used to load and execute websvc.dll\n\nStage 3 \u2013 .NET Loader\n\nThe websvc.dll library was developed in C# and it is another loader that expects an\nencrypted payload as input argument. That input is comprised of two base64-encoded\nstrings separated by the pipe character (\u201c|\u201d). The first string contains the final stage and\nthe second an encrypted configuration that is used during the execution of the next stage.\n\nThe library decodes the first string and the resulting data are decrypted with a simple\nsingle XOR with the key 0x3F and decompressed using Gzip. The resulting payload is\nanother library written in C#, which is loaded in memory and executed by invoking a\nmethod named \u201cEquals\u201d from the class \u201cX\u201d defined in the loaded code. The second\nbase64-encoded string loaded from the registry is passed as argument to the new C#\nlibrary.\n\nCode snippet used to load and execute final stage\n\nSamurai backdoor\n\nhttps://securelist.com/toddycat/106799/\n\n7/28\n\n \n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nThe final stage is a formerly unknown modular backdoor that we dubbed Samurai, due to\na constant keyword used inside an important dictionary used by the malware to share\ndata between its modules.\n\nThe library was developed in C# and uses the .NET HTTPListener class to receive and\nhandle HTTP POST requests, looking for specially crafted requests that carry encrypted\nC# source code issued by the attackers. These programs will be in turn compiled and\nexecuted during runtime.\n\nThe malware is obfuscated with an algorithm developed to increase the difficulty of\nreverse engineering by making the code complicated to read. Multiple functions in the\ncode are assigned random names, while some perform very simple actions, like getting a\nproperty of an object passed as input.\n\nMoreover, the malware uses multiple while loops and switch cases to jump between\ninstructions, thus flattening the control flow and making it hard to track the order of\nactions in the code. The flow is controlled by modifying the switch case expression value\nand using break and goto statements to restart the loop, re-evaluate the switch expression\nand jump to the correct instruction.\n\nCode snippet with while loop and\nswitch case\n\nThe malware\u2019s logic starts by decrypting\nconfiguration data provided as an input\nargument. Those data are encoded with\nbase64 and encrypted with the DES\nalgorithm using the hardcoded key 90 EE\n0C E1 6C 0D C9 0C. The resulting payload\nis a configuration file, which is customized\nper victim, containing multiple lines with\nseveral parameters consumed by the\nbackdoor.\n\nBelow is an example of the configuration\nblock\u2019s structure:\n\n1\n\n2\n\n3\n\n4\n\nkeywordxyz\n\nC:\\Windows\\Temp\\\n\nhttp://*:80/owa/auth/sslauth/\n\nhttps://*:443/owa/auth/sslauth/\n\nhttps://securelist.com/toddycat/106799/\n\n8/28\n\n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nThe first line contains a keyword that needs to be included as a variable in the received\nPOST request, marking it as designated for processing by the backdoor and also used to\nspecify important session parameters like the AES session key and the list of variable\nnames that contain the data that should be processed.\n\nIn some variants, the second line is used as a directory path, whose value is used to\noverride the TEMP environment variable. All the other lines are URI prefixes that are\nused to configure the HTTPListener component, whereby each is a string composed of a\nscheme (HTTP or HTTPS), a host, an optional port, and an optional path defining which\nrequest will be processed by the HTTPListener object.\n\nIn several cases, the URL prefixes contained in the configuration included the victim\u2019s\ndomain, as in the following example:\nhttps://mail.%redacted%.gov.%redacted%/owa/auth/sslauth.\n\nOnce the configuration is successfully decrypted, the backdoor starts the listeners\naccording to the provided configuration and waits for incoming requests. The request\nmust to be structured as in the following example:\n\nPOST /owa/auth/sslauth/ HTTP/1.0\n\nHost: example.xyz\n\nHeaders...\n\nkeywordxyz={session_AES_key,variable2,variable3}&variable2=[C# source\n\ncode]&variable3=\n[argument_for_the_compiled_program\\r\\nassembly_reference1;assemb\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\nly_reference2]\n\nWhere:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n{} = encrypted with default AES key + base64 encoded\n\n[] = encrypted with session AES key + base64 encoded\n\n### Input config ###\n\nkeywordxyz\n\nC:\\Windows\\Temp\\\n\nhttp://*:80/owa/auth/sslauth/\n\nhttps://securelist.com/toddycat/106799/\n\n9/28\n\n \n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nThe request body should contain three values, one of which is equal to the keyword\nspecified in the configuration received as input. The related value should be encoded with\nbase64 and encrypted with AES, using a predefined key. The resulting string will contain\nthree values delimited by the comma character: the first value is another AES key that is\nused to decrypt the other POST values, the second is the name of the variable that\ncontains the C# source code, and the third contains the name of the variable that contains\nthe arguments and the list of assembly references that should be added to the compiled\nproject.\n\nOnce compiled, the backdoor tries to invoke a method named \u201crun\u201d from a class named\n\u201ccore\u201d that should be included in the received program. The invoked method receives two\narguments as input:\n\nThe first one is a dictionary containing a key named \u201csamurai\u201d holding the current\nworking directory path as a value.\nThe second is a value provided by the attacker in the third element of the POST\nrequest.\n\nIf the request is valid and the code is successfully executed, the backdoor replies with an\nHTTP 200 code, including the result generated by the invoked .NET assembly in the\nresponse body. The message will be encrypted with AES using the session key and it will\nbe encoded with Base64.\n\nUploaded modules\n\nDuring our investigation, we were able to discover some modules uploaded by the\nattackers and compiled by the Samurai backdoor:\n\nModule\n\nDescription\n\nRemote\nCommand\n\nExecute arbitrary commands using the Windows command line,\ncmd.exe.\n\nFile\nenumerator\n\nGet a list of files and directories in a specific path provided by the\nattacker as an argument.\n\nFile\nexfiltration\n\nProxy\nConnect\n\nDownload arbitrary files from the compromised machines.\n\nStart a connection to a remote IP address and TCP port specified in\nthe code.\n\nProxy Handler Forward the payload received with HTTP request to the remote IP\n\naddress and vice versa.\n\nIt is worth mentioning the arguments passed to the modules, which in some cases are\nstructures with specific formats. All modules must contain a \u201crun\u201d method, which expects\ntwo arguments, a dictionary that contains the \u201csamurai\u201d keyword with the current\n\nhttps://securelist.com/toddycat/106799/\n\n10/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nworking directory, and a string provided by the attacker. The string should include values\nseparated by the semi-colon character (\u201c;\u201d).\n\nFor example, the following is a valid string for the Remote Command module:\n\n1 Y21kLmV4ZQ==;ZGlyICVNQUxESVIlXCoubXdy;TUFMRElSPUM6XE1hbGRpcg==\n\nThe string contains three different fields, and each of them is encoded with base64. The\ndecoded value for this example is the following:\n\n1 cmd.exe;dir %MALDIR%\\*.mwr;MALDIR=C:\\Maldir\n\nThe first value is the program that will be executed, the second one is the argument that\nwill be passed to the new process and the last one is an environment variable.\n\nThe cumbersome administration of the Samurai backdoor using arguments in this\nstructure suggests that the Samurai backdoor is the server-side component of a bigger\nsolution that includes at least another client component providing an interface for the\noperators that can be used to automatically upload some predefined modules.\n\nFurther evidence that enhances this hypothesis is related to the proxy modules, two\ndifferent C# programs developed to forward TCP packets to arbitrary hosts. The attacker\nuses these modules to start a connection between a running instance of a Samurai\nbackdoor and a remote host and forward the packets using the backdoor as a proxy. It is\nprobably used to move laterally inside the compromised network. Most of the detected\nmodules were configured to communicate with internal IPs on standard ports, such as:\n135, 445, 389, 80 and 443.\n\nThe first program is used to initialize the connection and it embeds the remote IP and the\nremote port inside the code.\n\nhttps://securelist.com/toddycat/106799/\n\n11/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nCode snippet with the socket object creation\n\nWhen the connection is established, the socket object is added to the first argument\nreceived by the \u201crun\u201d method. This argument is usually a dictionary that contains the\nkeyword \u201csamurai\u201d.\n\nSo, the socket object is stored in the dictionary as the value of a unique key, whose name\nis composed by the word \u201cninja\u201d followed by an alphanumeric unique code. The same\nvalue is then embedded in the second program, which is used to handle the packets.\n\nCode snippet of socket object handling\n\nIt suggests that the C# source code is probably dynamically generated by a client-side\nprogram that keeps track of proxy sessions.\n\nNinja Trojan\n\nIn specific cases the Samurai backdoor was used to deploy another sophisticated malware\nthat we dubbed Ninja, a tool developed in C++, likely a part of an unknown post-\nexploitation toolkit developed by ToddyCat.\n\nThis tool was designed to take full control of a remote system and provide the attacker\nwith the ability to operate deeply within the targeted network. The attacker can use a\nnumber of different commands that provide the following capabilities:\n\nEnumerate and manage running processes;\nManage the file system;\nStart multiple reverse shell sessions;\nInject code in arbitrary processes;\nLoad additional modules (probably plugins) at runtime;\nProvide proxy functionalities to forward TCP packets between the C2 and a remote\nhost.\n\nMoreover, the tool can be configured to communicate using multiple protocols and it\nincludes features to evade detection, camouflaging its malicious traffic inside HTTP and\nHTTPS requests that try to appear legitimate by using popular hostname and URL path\n\nhttps://securelist.com/toddycat/106799/\n\n12/28\n\n \n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\ncombinations. The configuration is fully customizable and is similar to other features\nprovided by famous post-exploitation tools such as Cobalt Strike and its Malleable C2\nprofiles.\n\nThe attacker can configure the agent to work only in specific time frames, which can be\ndynamically configured using a specific command.\n\nLast, but not least, each agent can also work as a server component that receives packets\nfrom other agents, parses the requests and forwards them to another predefined C2. This\nfeature allows the attackers to create chains of servers and communicate with agents\nwithout a direct internet connection. It can also be used to avoid network detections, by\nforwarding all malicious traffic generated inside a targeted intranet through a unique\nnode instead of generating activities from all compromised machines.\n\nLoader\n\nWe have never observed Ninja stored on the file system; it is usually loaded in memory by\nanother component. The loader is usually an executable file, which shares many\nsimilarities with the iiswmi.dll library and Samurai installers such as the previously\nmentioned debug.exe.\n\nThe loader uses the same \u201cspecial resolution function\u201d to call the Windows API and\ndecrypts the file payload using 3DES (112-bit) and uncompress the decrypted data with\nthe LZSS algorithm.\n\nThe resulting payload is a library that will be mapped in memory by the loader without\nthe DOS header and it will be invoked calling an exported function \u201cDebug\u201d.\n\nWe observed multiple variants, and the tool evolved during the year. The first samples\nlacked some features, such as the ability to handle multiple sessions on the client side and\nthe ability to communicate with HTTP and HTTPS protocols. The embedded\nconfiguration structure was also a little different.\n\nIn this article we are going to describe the last detected version.\n\nConfig\n\nThe malware starts operations by retrieving configuration parameters from an encrypted\npayload embedded in the binary, which is XORed with the constant value \u201c0xAA\u201d and\ncompressed with the LZSS algorithm.\n\nThe analyzed configuration contains a list of 15 elements with the following values:\n\nParameter\n\nDescription\n\n2B847033-C95F-92E3-D847-\n29C6AE934CDC\n\nMutex name used to guarantee atomic\nexecution.\n\nhttps://securelist.com/toddycat/106799/\n\n13/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nC2_INFO\n\n/Collector/3.0/\n\nA structure that contains the information to\ncommunicate with the C2 servers.\n\nURL path used with HTTP and HTTPS\nprotocols.\n\nContent-Type: application/x-www-\nform-urlencoded\n\nHTTP header used with HTTP and HTTPS\nprotocols.\n\nHost:\nmobile.pipe.microsoft.com:8080\n\nHTTP header used with HTTP and HTTPS\nprotocols.\n\nMozilla/5.0 (Windows NT 6.3;\nTrident/7.0; rv 11.0) like Gecko\n\nUser-Agent used with HTTP and HTTPS\nprotocols.\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n0\n\n300\n\n0\n\nWorking hour Start.\n\nWorking minute Start.\n\nWorking second Start.\n\nWorking hour Stop.\n\nWorking minute Stop.\n\nWorking second Stop.\n\nTCP C2 communication interval.\n\nHTTP C2 communication interval.\n\nLocal Server port.\n\nThe first element is the mutex name, which could be any string, but usually looks like a\nGUID value. C2_INFO is a string that contains multiple values organized with a specific\nstructure.\n\nHTTP config\n\nThe attacker can also customize the HTTP URL path and headers to mimic legitimate\nservices and hide malicious traffic. The specific values in the example will generate\nrequests like the following.\n\nhttps://securelist.com/toddycat/106799/\n\n14/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\nPOST /Collector/3.0/ HTTP/1.1\n\nContent-Type: application/x-www-form-urlencoded\n\nHost: mobile.pipe.microsoft.com:8080\n\nUser-Agent: Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv 11.0) like Gecko\n\nContent-Length: 430\n\nCache-Control: no-cache\n\nWe may infer that the attacker was trying to emulate Microsoft Teams behavior, although\nthe \u201cUser-Agent\u201d and the \u201cHost\u201d headers are incorrect.\n\nC2 Info\n\nThe C2_INFO contains multiple information items specified with the following format:\n\n1 %Protocol% \\r %C2_Hostname% \\r %C2_Port% \\r %Proxy_Type% \\r Proxy_Info\n\nThe protocol is a numeric value that identify the communication protocol:\n\n1. HTTP\n2. HTTPS\n3. TCP\n\nThe C2 hostname and port are self-explanatory.\n\nThe \u201cProxy_Type\u201d is another integer that can have three different values:\n\n1. No Proxy. Connect to the C2 directly\n2. System Proxy\n3. Manual Proxy\n\nWhen the value is equal to \u201c3\u201d, the agent will try to decode a base64 string embedded in\n\u201cProxy_Info\u201d that contains different information, according to the specified protocol.\nWhen the protocol is HTTP or HTTPS, the following information must be specified:\n\n1 %Proxy_Address% : %Proxy_Port% \\t %Proxy Username% \\t %Proxy_Password%\n\nIf the protocol is TCP, the decoded strings could specify a proxy chain with up to 255\nhops.\n\nhttps://securelist.com/toddycat/106799/\n\n15/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n%Proxy_Address% \\t %Proxy_Port% \\t %Remote_Host% \\t %Remote_Port% \\r\n\n%Proxy_Address% \\t %Proxy_Port% \\t %Remote_Host% \\t %Remote_Port% \\r\n\n%Proxy_Address% \\t %Proxy_Port% \\t %Remote_Host% \\t %Remote_Port% \\r\n\n%Proxy_Address% \\t %Proxy_Port% \\t %Remote_Host% \\t %Remote_Port% \\r\n\n... up to 255\n\nThe information will be used by the agent to initialize the connection with the C2.\n\nWorking time config\n\nThe Ninja agent includes an interesting \u2018working time\u2019 feature that can be used to force\nthe malware to work only within a specific time frame. For example, it could configure the\nmalware to work only from 9am to 6pm, during typical working hours. This feature is\nuseful to avoid being detected by specific security solutions such as behavior-based\nintrusion detection systems. When the values are equal to zero, the feature is disabled and\nthe agent works at any time. The attacker can remotely configure these options with a\nspecific command.\n\nLocal server\n\nThe last value is the local server port. When the local server feature is enabled, the agent\nacts as the C2. It waits for agent connections, decodes the received requests and forwards\nthem to the remote C2. This feature is probably used for \u2018pivoting\u2019 and accessing other\ninternal systems from the compromised machine. Also, this value can be modified by the\nattacker with a specific command.\n\nCommunication protocol\n\nMalware communications are protected with a sequence of encryption and encoding\nalgorithms, with small differences between the HTTP and TCP protocols.\n\nBoth protocols use a message format as follows:\n\n1 Message_ID@Message_payload\n\nhttps://securelist.com/toddycat/106799/\n\n16/28\n\n \n \n \n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nThe \u201cMessage_ID\u201d changes according to the command type and the \u201cMessage_payload\u201d\ncontains the real payload compressed, XORed with the static value 0x3F and encoded\nwith base64 algorithm using a custom alphabet.\n\nThe resulting message is then encrypted with AES 256 using a session key generated by\nselecting two random characters from the custom base64 alphabet. The agent will use\nrandom characters to generate a SHA1 hash, which will be used for the AES encryption.\n\nThe encrypted data is then encoded again using the base64 algorithm and the resulting\nstring is appended to the previously generated random character to allow the server to\ndecrypt the information.\n\nWhen the agent is configured to use the HTTP/S protocol, the data are included in\nstandard POST requests.\n\nIf the C2 communicates using the TCP protocol, the agent will send a first packet with the\nconstant value 0x6CC8DF01 and then other packets with the generated payload. The\nserver should reply with a packet with the same constant value 0x6CC8DF01 and then\nwith other packets encrypted with the same algorithms. The constant value is not always\nthe same, but changes according to the variant.\n\nThe first message is sent using the \u201cMessage_ID\u201d 10001 and it contains information\nabout the infected system and the agent configuration.\n\nSystem info (collected with Kernel32.GetNativeSystemInfo function)\nOS info (collected with Ntdll.RtlGetVersion function)\nComputer name\nLocal IP address\nAgent file path\nAgent PID\nAgent Sleep Time\nAgent C2 configuration (C2 hostname, Port, Proxy Info)\n\nCommands\n\nThe server response usually has the following structure:\n\nMagic constant 0x887766\nNumber of commands\nList of commands\n\nThe \u201cMagic constant\u201d is an integer, the value of which changes according to the variants.\nThe list of commands is an array, and for each element the attacker could specify:\n\nCommandID\nArguments Size\nArguments\n\nhttps://securelist.com/toddycat/106799/\n\n17/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nThe argument values change according to the \u201cCommandID\u201d, but usually they are strings\nwith multiple values divided by the \u2018*\u2019 character.\n\nCommand\nID\n\nDescription\n\nResponse\nID\n\n20000\n\n20001\n\n20002\n\n20003\n\n20004\n\n20005\n\n20006\n\n20010\n\n20011\n\n20012\n\n20013\n\n20020\n\n20021\n\n20022\n\n20023\n\n20024\n\n20025\n\n20026\n\n20030\n\n20031\n\n20040\n\n20041\n\n20042\n\n20043\n\n20044\n\nEnable Session\n\nDisable Session\n\nUpdate sleep time\n\nKill Bot\n\nExecute program as user\n\nSet Local Server Port\n\nSafe Exit\n\nShell::Start new session\n\nShell::Handle Command\n\nShell::Close Session\n\nShell::Terminate Session Tree\n\nFile::Get Drives list\n\nFile::Get Directory content\n\nFile::Create directory\n\nFile::Delete file\n\nFile::Remove directory\n\nFile::Move file\n\nFile::Change Create\\Last access\\Last write Time\n\nFile::Read file\n\nFile::Write file\n\nProxy::Start Session\n\nProxy::Set socket as writeable\n\nProxy::Send Data\n\nProxy::Receive Data\n\nProxy::Close Session\n\n30010\n\n30011\n\n30012\n\n30013\n\n30020\n\n30021\n\n30022\n\n30023\n\n30024\n\n30025\n\n30026\n\n30030\n\n30031\n\n30040\n\n30041\n\n30042\n\n30043\n\n30044\n\nhttps://securelist.com/toddycat/106799/\n\n18/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\n20045\n\n20050\n\n20051\n\n20052\n\n20053\n\n20054\n\n20055\n\n20056\n\n20060\n\n20061\n\n20062\n\n20064\n\n20065\n\n20068\n\n21000\n\nProxy::Reconnect\n\n30045\n\nEnumerate Processes (filename|pid|number of threads)\n\n30050\n\nKill a list of processes\n\nProcess Injection\n\nPlugin::Load\n\nPlugin::Read Output\n\nPlugin::Unload\n\nEnumerate Processes\n(SessionID\\PID\\Domain\\Username)\n\nInjection::Start new session\n\nInjection::List active sessions\n\nInjection::Close session\n\nInjection::Inject code in a new process\n\nInjection::Read \u201cpobject\u201d\n\nInjection::Read \u201ccreate_object\u201d\n\nConfigure Working Time\n\n30052\n\n30053\n\n30054\n\n30055\n\n30056\n\n30060\n\n30061\n\n30062\n\n30064\n\n30065\n\n30068\n\n31000\n\nSome commands are self-explanatory, others aren\u2019t, and in some cases we are unable to\nfully understand them since we are still missing some information.\n\nThe Enable and Disable session commands are used to activate or deactivate the Agent.\nThe attacker should enable the bot before sending any other commands, which will be\ndropped by deactivated bots. The Enable command is also mandatory to enable the \u201cLocal\nserver\u201d feature.\n\nThe Shell, Proxy and Injection commands were designed to run multiple parallel sessions,\nwhich probably means that multiple operators can work on the target machine\nsimultaneously. The agent manages three structures, one for the Shell, one for the Proxy\nand the last one for the Injection commands.\n\nFor example, when the attacker wants to start a shell, they must use the command\n\u201c20010\u201d that will force the agent to create a new process and new pipes used to redirect\nthe standard input and the standard output. The \u201cShell session ID\u201d must be specified by\nthe attacker and this value will be stored in the local array, which contains the list of\nactive sessions. If the command succeeds, the agent will reply with a list of information\nlike new PID and pipe handles.\n\nhttps://securelist.com/toddycat/106799/\n\n19/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nThe command 20011 can be used to read or write data in the pipes. The attacker has to\nprovide a valid \u201cShell session id\u201d, an event ID and the pipe handles. Before processing the\ncommand, the agent will check if the provided ID is valid, by comparing the values with\nthose in the local structure.\n\nThe command 20012 is used to close an active session, remove the \u201cSession_ID\u201d from the\nlocal array, terminate the running process and close the pipe handles. A similar logic is\nused to manage the Proxy commands, which can be used to forward packets to other\nremote hosts using the TCP protocol.\n\nThe Plugin commands are used to load other unknown libraries in the agent process\naddress space. We don\u2019t have information about the other modules, but we presume they\nare additional plugins that can be used by the attacker to provide more features.\n\nBased on static analysis we know the libraries should export at least three functions: GET,\nRUN and CLOSE; and then share data with the main process by using a file mapping\nobject.\n\nThe \u201cProcess Injection\u201d (20052) command and the \u201cInjection\u201d set of commands could\ncause some confusion, but they are quite different. The first one is used to inject arbitrary\nshellcode in a running process. The second is used to inject another agent module in a\nnew process specified by the attack. The injected code is not an arbitrary shellcode, but\nsomething that should communicate with the main agent by using specific file mapping\nobjects.\n\nThe attacker uses command 20060 to start a new injection session, where the attacker\nbasically provides the shellcode that will be injected in a new program, and whose path\nwill be specified with command 20064.\n\nThe \u201cInjection::Inject code in a new process\u201d command will force the agent to start a\nprogram specified by the attacker. The specified program will be created as suspended\nand the agent will write the shellcode in a new section allocated in the created process.\n\nThe agent then gets the remote thread\u2019s context to obtain the instruction pointer address\nand replace the instruction in that offset with the following:\n\n1\n\n2\n\n3\n\n4\n\n5\n\ndec eax\n\nsub esp, 40h\n\ndec eax\n\nmov eax, %SHELLCODE_ADDRESS%\n\ncall eax\n\nFinally, the code will resume the remote process, which will execute the injected code.\n\nhttps://securelist.com/toddycat/106799/\n\n20/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nThe commands 20065 and 20068 are then used to read data from the file mapping\nobjects, which should contain information generated by the injected code.\n\nOther campaigns and variants\n\nOther variants\n\nDuring our investigations, we discovered several loader and installer variants that evolved\nduring 2021 and were used in different campaigns.\n\nInstallers\n\nAll the installers are quite similar in their logic: they load a payload from an external file,\nusually located in the same directory, with a name that differs according to the variant:\n\ndebug.xml\nweb.xml\naccess.log\ncache.dat\nreg.txt\nlogo.jpg\n\nThe files are always decrypted with the same algorithm, CALG_3DES_112, but the loaded\ndata are usually tailored for the victim.\n\nAll installers create a new service using a name and description specified in an encrypted\nfile. They also set a registry value (either httpsvc or w3esvc) in the following Windows\nregistry key:\n\n1 HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\n\nThese values cause svchost.exe to automatically start the malicious service and load the\ncode in its process address memory. The registry values contain the malicious service\nname. The main difference between the installer variants is related to the final payload.\nBased on initial investigations, we know that the first variants (from December 2020 to\nMay 2021) were configured to store their payload inside a registry key, such as:\n\n1\n\n2\n\n$HKLM\\SOFTWARE\\Classes\\Interface\\{6FD0637B-85C6-D3A9-CCE9-65A3F73ADED9}\n\n$HKLM\\SOFTWARE\\Classes\\Interface\\{AFDB6869-CAFA-25D2-C0E0-09B80690F21D}\n\nStarting from March we also observed new variants configured to store the final backdoor\ninside other encrypted files in the file system. The most common dropped the Stage 2\nloader in the following paths:\n\nhttps://securelist.com/toddycat/106799/\n\n21/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\n%System32%\\Triedit.dll\n%System32%\\fveapi.dll\n\nand the Stage 3 loader and encrypted payload in the following paths:\n\n%WINDIR%\\Microsoft.NET\\Framework\\sbs_clrhost.dll\n%WINDIR%\\Microsoft.NET\\Framework\\sbs_clrhost.dat\n%WINDIR%\\Microsoft.NET\\Framework\\Util.dll\n%WINDIR%\\Microsoft.NET\\Framework\\Util.dat\n\nStarting from September 2021, we observed new samples configured to once again store\nthe final payload in the Windows registry, but instead of relying on static registry key\nvalues, the malware was configured to create a dynamically generated key in\n$HKLM\\SOFTWARE\\Classes\\Interface\\, based on the disk drive\u2019s serial number:\n\nCode snippet to create a registry key based on the Volume Serial Number\n\nThe constants used to generate the final registry key name change for each sample.\n\nLoaders\n\nThe loaders are basic tools used to decrypt payloads from 3DES and load them into\nmemory. They were modified over time along with the installers to account for the\nchanges in how the final payload is stored.\n\nSome loaders, like those mentioned in the previous paragraph, were configured to load\nanother payload from an encrypted file and pass the resulting data as arguments for\nanother library, a Stage 3 loader, stored in a specific location.\n\nhttps://securelist.com/toddycat/106799/\n\n22/28\n\n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nOther loaders were configured to load the payload from the registry and pass it to the\nStage 3 library.\n\nSome variants included a function to directly run .NET code at runtime, without relying\non another external Stage 3 library.\n\nFinally, we observed other loaders that were mainly used on desktop systems to load the\nNinja Trojan.\n\nOther attacks against Desktop systems\n\nThe first waves of attacks exclusively targeted Microsoft Exchange servers, but starting\nfrom September 2021, we also observed a new set of loaders detected on desktop systems\nin Central Asia with filenames such as \u201c01.09.2021 \u0433..exe\u201d, \u201c03.09.2021 \u0433.exe\u201d, \u201c\u043d\u043e\u0442\u0430 \u043c\u0438\u0434\n\u043a\u0440 \u0440\u0435\u0433\u043b\u0430\u043c\u0435\u043d\u0442.exe\u201d and \u201c\u0422\u0435\u0445.\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438.exe\u201d.\n\nThe files were loaders configured to run the Ninja component, but they were distributed\nas executable files embedded in zip archives and sent through the popular messaging app\nTelegram.\n\nThe programs were configured to load a payload from another file, \u201clicense.txt\u201d, which\nshould be located in the same directory. The malware then uses the previously described\n\u201cspecial resolution function\u201d to call the Windows API and decrypts the file payload using\n3DES (112)-bit and uncompresses the decrypted data.\n\nThe resulting payload is the Ninja library that will be mapped in memory by the loader\nwithout the DOS header and it will be invoked calling an exported function \u201cDebug\u201d.\n\nHow to detect the Samurai backdoor\n\nThe whole infection scheme used to deploy and guarantee Samurai persistence, was\ndesigned to avoid forensic analysis and the most common superficial checks.\n\nAs we said, the malicious code is loaded by the legitimate svchosts.exe process, which\nmeans that the backdoor cannot be detected with a simple process enumeration.\n\nMoreover, the backdoor cannot be spotted by watching the open TCP ports, because it\nuses the .NET HTTPListener class, which is built on top of HTTP.sys and allows different\nprocesses to share the same ports. In the case of the Samurai backdoor, it uses ports 80 or\n443, which are also used by Microsoft Exchange.\n\nWe detect this backdoor as \u201cHEUR:Backdoor.MSIL.Samurai.gen\u201d, but in the absurd case\nthat you are not using our products, a simple way to check if the backdoor is running is to\ntry to find one of the IoCs shared in this blogpost or trying to execute the following\ncommand:\n\nhttps://securelist.com/toddycat/106799/\n\n23/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\n1 #>netsh http show servicestate verbose=yes\n\nAs described by Microsoft, this command will display a snapshot of the HTTP service, and\nyou can try to find suspicious registered URLs such as the following:\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\nServer session ID: ED00000020000013\n\n    Version: 2.0\n\n    State: Active\n\n    Properties:\n\n    ...\n\n            Max bandwidth: inherited\n\n            Max connections: inherited\n\n            Timeouts:\n\n                Timeout values inherited\n\n10\n\n            Number of registered URLs: 2\n\n11\n\n            Registered URLs:\n\n12\n\n                HTTP://*:80/OWA/AUTH/TOKEN/\n\n13\n\n                HTTPS://*:443/OWA/AUTH/TOKEN/\n\nVictims\n\nBased on our visibility we know that ToddyCat focused its attention on high-profile\ntargets; most of them were government organizations and military entities, as well as\nmilitary contractors.\n\nWe know the attacks launched before February 2021 targeted a very limited number of\ngovernment entities in:\n\nTaiwan\nVietnam\n\nAfter the ProxyLogon publication the number of detections rapidly increased around the\nworld, and we also observed victims in the following countries:\n\nAfghanistan\nIndia\nIran\n\nhttps://securelist.com/toddycat/106799/\n\n24/28\n\n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nMalaysia\nPakistan\nRussia\nSlovakia\nThailand\nUnited Kingdom\n\nAfter May 2021, we observed other variants and campaigns that we attributed to the same\ngroup and affected most of the previously mentioned countries in Asia and the following:\n\nKyrgyzstan\nUzbekistan\nIndonesia\n\nOverall affected victims map\n\nAttribution\n\nUnfortunately, we were not able to attribute the attacks to a known APT group; and for\nthis reason we dubbed this entity ToddyCat.\n\nDuring our investigations we noticed that ToddyCat victims are related to countries and\nsectors usually targeted by multiple Chinese-speaking groups. In fact, we observed three\ndifferent high-profile organizations compromised during a similar time frame by\nToddyCat and another Chinese-speaking APT group that used the FunnyDream backdoor.\n\nhttps://securelist.com/toddycat/106799/\n\n25/28\n\n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nThis overlap caught our attention, since the ToddyCat malware cluster is rarely seen as\nper our telemetry; and we observed the same targets compromised by both APTs in three\ndifferent countries. Moreover, in all the cases there was a proximity in the staging\nlocations and in one case they used the same directory.\n\nTarget 1\nC:\\ProgramData\\Microsoft\\DRM\\rundll.dll \u2013 FunnyDream related\nC:\\ProgramData\\Microsoft\\mf\\svchost.dll \u2013 ToddyCat\n\nTarget 2\nC:\\ProgramData\\adobe\\avps.exe \u2013 FunnyDream related\nC:\\ProgramData\\adobe\\2.dll \u2013 ToddyCat\n\nDespite the overlap, we do not feel confident merging ToddyCat with the FunnyDream\ncluster at the moment. Considering the high-profile nature of all the victims we\ndiscovered, it is likely they were of interest to several APT groups. Moreover, despite the\noccasional proximity in staging locations, we have no concrete evidence of the two\nmalware families directly interacting (for instance, one deploying the other), and the\nspecific directories are frequently used by multiple attackers.\n\nConclusions\n\nToddyCat is a sophisticated APT group that uses multiple techniques to avoid detection\nand thereby keeps a low profile. During our investigations we discovered dozens of\nsamples, but despite the number of files and the duration of their activities, we were\nunable to attribute the attacks to a known group; and there is also quite a bit of technical\ninformation about the operations that we don\u2019t have.\n\nThe affected organizations, both governmental and military, show that this group is\nfocused on very high-profile targets and is probably used to achieve critical goals, likely\nrelated to geopolitical interests.\n\nBased on our telemetry, the group shows a strong interest in targets in Southeast Asia,\nbut their activities also impact targets in the rest of Asia and Europe.\n\nWe\u2019ll continue to monitor this group and keep you updated.\n\nMore information, IoCs and YARA rules about ToddyCat are available to customers of the\nKaspersky Intelligence Reporting Service. Contact: intelreports@kaspersky.com.\n\nToddyCat\u2019s indicators of compromise\n\n5cfdb7340316abc5586448842c52aabc Dropper google.log\n93c186c33e4bbe2abdcc6dfea86fbbff Dropper\n5a912beec77d465fc2a27f0ce9b4052b Dll Loader Stage 2 iiswmi.dll\nf595edf293af9b5b83c5ffc2e4c0f14b Dll Loader Stage 3 websvc.dll\n\nhttps://securelist.com/toddycat/106799/\n\n26/28\n\n \n \n \n \n \n \n \n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\n5a531f237b8723396bcfd7c24885177f Dll Loader Stage 2 fveapi.dll\n1ad6dccb520893b3831a9cfe94786b82 Dll Loader Stage 2 fveapi.dll\nf595edf293af9b5b83c5ffc2e4c0f14b Dll Loader Stage 3 sbs_clrhost.dll\n8a00d23192c4441c3ee3e56acebf64b0 Samurai Backdoor\n5e721804f556e20bf9ddeec41ccf915d Ninja Trojan\n\nOther variants\n33694faf25f95b4c7e81d52d82e27e7b 1.dll \u2013 Installer\n832bb747262fed7bd45d88f28775bca6 \u0422\u0435\u0445\u0438\u043d\u0441\u0442\u0440 egov \u2013 \u0413\u0426\u041f \u2013 \u0410\u043a\u0440\u0430\u043c\u043e\u0432.exe \u2013 Loader\n8fb70ba9b7e5038710b258976ea97c98 28.09.2021. \u0423\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0418\u0420 \u0438 \u0418\u0421.exe \u2013 Loader\nee881e0e8b496bb62ed0b699f63ce7a6 Loader\nae5d2cef136ac1994b63c7f8d95c9c84 Loader\n5c3bf5d7c3a113ee495e967f236ab614 System.Core.dll \u2013 Loader\nbde2073dea3a0f447eeb072c7e568ee7 wabext.dll \u2013 Loader\n350313b5e1683429c9ffcbc0f7aebf3b rcdll.dll \u2013 Loader\n\nNinja C2\n149.28.28[.]159\neohsdnsaaojrhnqo.windowshost[.]us\n\nFile paths\nC:\\inetpub\\temp\\debug.exe\nC:\\Windows\\Temp\\debug.exe\nC:\\Windows\\Temp\\debug.xml\nC:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Temporary ASP.NET\nFiles\\web.exe\nC:\\Users\\Public\\Downloads\\dw.exe\nC:\\Users\\Public\\Downloads\\chrome.log\nC:\\Windows\\System32\\chr.exe\nC:\\googleup.exe\nC:\\Program Files\\microsoft\\exchange\nserver\\v15\\frontend\\httpproxy\\owa\\auth\\googleup.log\nC:\\google.exe\nC:\\Users\\Public\\Downloads\\x64.exe\nC:\\Users\\Public\\Downloads\\1.dll\nC:\\Program Files\\Common Files\\microsoft shared\\WMI\\iiswmi.dll\nC:\\Program Files\\Common Files\\microsoft shared\\Triedit\\Triedit.dll\nC:\\Program Files\\Common Files\\System\\websvc.dll\nC:\\Windows\\Microsoft.NET\\Framework\\sbs_clrhost.dll\nC:\\Windows\\Microsoft.NET\\Framework\\sbs_clrhost.dat\nC:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Temporary ASP.NET\nFiles\\web.xml\nC:\\Users\\Public\\Downloads\\debug.xml\nC:\\Users\\Public\\Downloads\\cache.dat\nC:\\Windows\\System32\\config\\index.dat\n\nhttps://securelist.com/toddycat/106799/\n\n27/28\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\f6/27/22, 3:49 PM\n\nToddyCat: Unveiling an unknown APT actor attacking high-pro\ufb01le entities in Europe and Asia | Securelist\n\nC:\\Windows\\Microsoft.NET\\Framework\\netfx.dat\n%ProgramData%\\adobe\\2.dll\n%ProgramData%\\adobe\\acrobat.exe\n%ProgramData%\\git\\git.exe\n%ProgramData%\\intel\\mstacx.dll\n%ProgramData%\\microsoft\\drm\\svchost.dll\n%ProgramData%\\microsoft\\mf\\svchost.dll\n%ProgramData%\\microsoft\\mf\\svhost.dll\n%program files%\\Common Files\\services\\System.Core.dll\n%public%\\Downloads\\1.dll\n%public%\\Downloads\\config.dll\n%system%\\Triedit.dll\n%userprofile%\\Downloads\\Telegram Desktop\\03.09.2021 \u0433.zip\n%userprofile%\\Downloads\\Telegram Desktop\\\u0422\u0435\u0445.\u0418\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438.zip\n%userprofile%\\libraries\\1.dll\n%userprofile%\\libraries\\chrome.exe\n%userprofile%\\libraries\\chrome.log\n%userprofile%\\libraries\\config.dll\nC:\\intel\\2.dll\nC:\\intel\\86.dll\nC:\\intel\\x86.dll\n\nRegistry Keys\n$HKLM\\System\\ControlSet\\Services\\WebUpdate\n$HKLM\\System\\ControlSet\\Services\\PowerService\n$HKLM\\SOFTWARE\\Classes\\Interface\\{6FD0637B-85C6-D3A9-CCE9-\n65A3F73ADED9}\n$HKLM\\SOFTWARE\\Classes\\Interface\\{AFDB6869-CAFA-25D2-C0E0-\n09B80690F21D}\n\nAPT ToddyCat\n\nYour email address will not be published. Required fields are marked *\n\nhttps://securelist.com/toddycat/106799/\n\n28/28\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\f"], "URLs": ["https://*:443/owa/auth/sslauth/", "http://*:80/owa/auth/sslauth/", "https://mail.%redacted%.gov.%redacted%/owa/auth/sslauth.", "https://securelist.com/toddycat/106799/"], "weight": 0.0}