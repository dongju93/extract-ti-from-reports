{"rule_id": 406, "name": "Operation ShadowHammer", "description": "-", "references": [], "File_Names": ["IPHLPAPI.dll", "logo2.jpg", "konkuk.ac", "last.php", "procexp64.exe", "link.exe", "procmon.exe", "requested.html", "procmon64.exe", "idx.ini", "AsusShellCode.pdb"], "MD5_Hashes": ["86a4cac227078b9c95c560c8f0370bf0", "de721e2f055f1b203ab561dda4377bab", "ef43b55353a34be9e93160bb1768b1a6", "f9d46bbffa1cbd106ab838ee0ccc5242", "98908ce6f80ecc48628c8d2bf5b2a50c", "63f2fe96de336b6097806b22b5ab941a", "88777aacd5f16599547926a4c9202862", "95b6adbcef914a4df092f4294473252f", "7d9d29c1c03461608bcab930fef2f568", "f0ba34be0486037913e005605301f3ce", "343ad9d459f4154d0d2de577519fb2d3", "c0116d877d048b1ba87c0de6fd7c3fb2", "a4b42c2c95d1f2ff12171a01c86cd64f", "3c0a0e95ccedaaafb4b3f6fd514fd087", "d07e6abebcf1f2119622c60ad0acf4fa", "b044cd0f6aae371acf2e349ef78ab39e", "86A4CAC227078B9C95C560C8F0370BF0", "b257f366a9f5a065130d4dc99152ee10", "6186b317c8b6a9da3ca4c166e68883ea", "cdb0a09067877f30189811c7aea3f253", "1e091d725b72aed432a03a505b8d617e", "496c224d10e1b39a22967a331f7de0a2", "063ff7cc1778e7073eacb5083738e6a2", "4b8d5ae0ad5750233dc1589828da130b", "17a36ac3e31f3a18936552aff2c80249", "dd792f9185860e1464b4346254b2101b", "aafe680feae55bb6226ece175282f068", "aac57bac5f849585ba265a6cd35fde67", "eb37c75369046fb1076450b3c34fb8ab", "c778fc8e816061420c537db2617e0297", "e8db4206c2c12df7f61118173be22c89", "6b38c772b2ffd7a7818780b29f51ccb2", "0e1cc8693478d84e0c5e9edb2dc8555c", "a17cb9df43b31bd3dad620559d434e53", "f2f879989d967e03b9ea0938399464ab", "1d05380f3425d54e4ddfc4bacc21d90e", "a9c750b7a3bbf975e69ef78850af0163", "1b8d2459d4441b8f4a691aec18d08751", "ecf865c95a9bec46aa9b97060c0e317d", "37e100dd8b2ad8b301b130c2bca3f1ea", "8578f0c7b0a14f129cc66ee236c58050", "fcfab508663d9ce519b51f767e902806", "fb1473e5423c8b82eb0e1a40a8baa118", "36dd195269979e01a29e37c488928497", "f4edc757e9917243ce513f22d0ccacf2", "eac3e3ece94bc84e922ec077efb15edd", "807d86da63f0db1fc746d1f0b05bc357", "1b95ac1443eb486924ac4d399371397c", "943db472b4fd0c43428bfc6542d11913", "abbb53e1b60ab7044dd379cf80042660", "87a8930e88e9564a30288572b54faa46", "5b6cd0a85996a7d47a8e9f8011d4ad3f", "dca86d2a9eb6dc53f549860f103486a9", "a283d5dea22e061c4ab721959e8f4a24", "8756bafa7f0a9764311d52bc792009f9", "6e94b8882fe5865df8c4d62d6cff5620", "e7dcfa8e75b0437975ce0b2cb123dc7b", "4fb4c6da73a0a380c6797e9640d7fa00", "9d86dff1a6b70bfdf44406417d3e068f", "092ae9ce61f6575344c424967bd79437", "d1ed421779c31df2a059fe0f91c24721", "0ff067d801f7daeeae842e9fe5f610ea", "55a7aa5f0e52ba4d78c145811c830107", "6ab5386b5ad294fc6ec4d5e47c9c2470", "915086d90596eb5903bcd5b02fd97e3e", "abbd7c949985748c353da68de9448538", "b96bd0bda90d3f28d3aa5a40816695ed", "53886c6ebd47a251f11b44869f67163d", "dc15e578401ad9b8f72c4d60b79fdf0f", "04fb0ccf3ef309b1cd587f609ab0e81e", "322cb39bc049aa69136925137906d855", "fa83ffde24f149f9f6d1d8bc05c0e023", "128cecc59c91c0d0574bc1075fe7cb40", "a96226b8c5599e3391c7b111860dd654", "8baa46d0e0faa2c6a3f20aeda2556b18", "02385ea5f8463a2845bfe362c6c659fa", "63606c861a63a8c60edcd80923b18f96", "5855ce7c4a3167f0e006310eb1c76313", "5eed18254d797ccea62d5b74d96b6795", "b042bc851cafd77e471fa0d90a082043", "7f05d410dc0d1b0e7a3fcc6cdda7a2ff", "fa96e56e7c26515875214eec743d2db5", "849a2b0dc80aeca3d175c139efe5221c", "8505484efde6a1009f90fa02ca42f011", "aa15eb28292321b586c27d8401703494", "05e6a0be5ac359c7ff11f4b467ab20fc", "d4c4813b21556dd478315734e1c7ae54", "8ef2d715f3a0a3d3ebc989b191682017", "a76a1fbfd45ad562e815668972267c70", "1a0752f14f89891655d746c07da4de01", "5d40e86b09e6fe1dedbc87457a086d95", "2ffc4f0e240ff62a8703e87030a96e39", "ea3b7770018a20fc7c4541c39ea271af", "5220c683de5b01a70487dac2440e0ecb", "05eacf843b716294ea759823d8f4ab23", "b572925a7286355ac9ebb12a9fc0cc79", "06c19cd73471f0db027ab9eb85edc607", "b4abe604916c04fe3dd8b9cb3d501d3f", "6cf305a34a71b40c60722b2b47689220", "128CECC59C91C0D0574BC1075FE7CB40", "0f49621b06f2cdaac8850c6e9581a594"], "SHA1_Hashes": ["6f8f43b6643fc36bae2e15025d533a1d53291b8a"], "SHA256_Hashes": ["1bb53937fa4cba70f61dc53f85e4e25551bc811bf9821fc47d25de1be9fd286a"], "Registry_Entries": ["HKCU\\SOFTWARE\\Microsoft\\Windows\\{0753-6681-BD59-8819}. If\nthe value exists and is non-zero, the payload does not run further. Otherwise, it starts a new thread with a\nmalicious intent.\n\nThe \ufb01le contains a hardcoded minicon\ufb01g\u2014an annotated example of the con\ufb01g is provided below.\n\nC2 URL: https://nw.infestexe[.]com/version/last.php\nSleep time: 240000\nTarget Tag: warz\nUnwanted processes:\nwireshark.exe;perfmon.exe;procmon64.exe;procmon.exe;procexp.exe;procexp64.exe;netmon.exe\n\nApparently, the backdoor was speci\ufb01cally created for this target, which is con\ufb01rmed by an internal tag (the\nprevious name of the game is \u201cThe War Z\u201d).\n\nIf any of the unwanted processes is running, or the system language ID is Simpli\ufb01ed Chinese or Russian,\nthe malware does not proceed. It also checks for the presence of a mutex named Windows-{0753-6681-\nBD59-8819}, which is also a sign to stop execution.\n\nAfter all checks are done, the malware gathers information about the system including:\n\nNetwork adapter MAC address\nSystem username\nSystem hostname and IP address\nWindows version\nCPU architecture\nCurrent host FQDN\nDomain name\nCurrent executable \ufb01le name\n\nhttps://securelist.com/operation-shadowhammer-a-high-pro\ufb01le-supply-chain-attack/90380/\n\n15/25\n\n\f4/24/2019\n\nOperation ShadowHammer: A High Pro\ufb01le Supply Chain Attack | Securelist\n\nDrive C: volume name and serial number\nScreen resolution\nSystem default language ID\n\nThis information is concatenated in one string using the following string template:\n\u201c%s|%s|%s|%s|%s|%s|%s|%dx%d|%04x|%08X|%s|%s\u201d.\n\nThen the malware crafts a host identi\ufb01er, which is made up of the C drive serial number string XOR-ed with\nthe hardcoded string \u201c*&b0i0rong2Y7un1\u201d and encoded with the Base64 algorithm. Later on, the C: serial\nnumber may be used by the attackers to craft unique backdoor code that runs only on a system with\nidentical properties.\n\nThe malware uses HTTP for communication with a C2 server and crafts HTTP headers on its own. It uses\nthe following hardcoded User-Agent string: \u201cMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36\n(KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36\u201d\n\nInterestingly, when the malware identi\ufb01es the Windows version, it uses a long list:\n\nMicrosoft Windows NT 4.0\nMicrosoft Windows 95\nMicrosoft Windows 98\nMicrosoft Windows Me\nMicrosoft Windows 2000e\nMicrosoft Windows XP\nMicrosoft Windows XP Professional x64 Edition\nMicrosoft Windows Server 2003\nMicrosoft Windows Server 2003 R2\nMicrosoft Windows Vista\nMicrosoft Windows Server 2008\nMicrosoft Windows 7\nMicrosoft Windows Server 2008 R2\nMicrosoft Windows 8\nMicrosoft Windows Server 2012\nMicrosoft Windows 8.1\nMicrosoft Windows Server 2012 R2\nMicrosoft Windows 10\nMicrosoft Windows Server 2016\n\nThe purpose of the code is to submit system information to the C2 server with a POST request and then\nsend another GET request to receive a command to execute.\n\nThe following commands were discovered:\n\nDownUrlFile \u2013 download URL data to \ufb01le\nDownRunUrlFile \u2013 download URL data to \ufb01le and execute it\nRunUrlBinInMem \u2013 download URL data and run as shellcode\nUnInstall \u2013 set registry \ufb02ag to prevent malware start\n\nhttps://securelist.com/operation-shadowhammer-a-high-pro\ufb01le-supply-chain-attack/90380/\n\n16/25\n\n\f4/24/2019\n\nOperation ShadowHammer: A High Pro\ufb01le Supply Chain Attack | Securelist\n\nThe UnInstall command sets the registry value HKCU\\SOFTWARE\\Microsoft\\Windows\\{0753-6681-\nBD59-8819} to 1, which prevents the malware from contacting the C2 again. No \ufb01les are deleted from the\ndisk, and the \ufb01les should be discoverable through forensic analysis.\n\nSimilarities between the ASUS attack and the non-ASUS-related cases\n\nAlthough the ASUS case and the videogame industry cases contain certain differences, they are very\nsimilar. Let us brie\ufb02y mention some of the similarities. For instance, the algorithm used to calculate API\nfunction hashes (in trojanized games) resembles the one used in the backdoored ASUS Updater tool.\n\nhash = 0\nfor c in string:\nhash = hash * 0x21\nhash = hash + c\nreturn hash\n\nhash = 0\nfor c in string:\nhash = hash * 0x83\nhash = hash + c\nreturn hash & 0x7FFFFFFF\n\nASUS case\n\nOther cases\n\nPseudocode of API hashing algorithm of ASUS vs. other cases\n\nBesides that, our behavior engine identi\ufb01ed that ASUS and other related samples are some of the only\ncases where the IPHLPAPI.dll was used from within a shellcode embedded into a PE \ufb01le.\n\nIn the case of ASUS, the function GetAdaptersAddresses\nfrom the IPHLPAPI.dll was used for calculating the\nhashes of MAC addresses. In the other cases, the\nfunction GetAdaptersInfo from the IPHLPAPI.dll was\nused to retrieve information about the MAC addresses of\nthe computer to pass to remote C&C servers.\n\nShadowPad connection\n\nLoading of IPHLPAPI.dll from within ASUS shellcode\n\nWhile investigating this case, we worked with several companies that had been abused in this wave of\nsupply chain attacks. Our joint investigation revealed that the attackers deployed several tools on an\nattacked network, including a trojanized linker and a powerful backdoor packed with a recent version of\nVMProtect.\n\nOur analysis of the sophisticated backdoor (md5: 37e100dd8b2ad8b301b130c2bca3f1ea) that was\ndeployed by the attackers on the company\u2019s internal network during the breach, revealed that it was an\nupdated version of the ShadowPad backdoor, which we reported on in 2017.\n\nThe ShadowPad backdoor used in these cases has a very high level of complexity, which makes it almost\nimpossible to reverse engineer:\n\nThe newly updated version of ShadowPad follows\nthe same principle as before. The backdoor\nunwraps multiple stages of code before activating a\nsystem of plugins responsible for bootstrapping the\nmain malicious functionality. As with ShadowPad,\n\n2018 version of ShadowPad used in the supply chain attacks\n\nhttps://securelist.com/operation-shadowhammer-a-high-pro\ufb01le-supply-chain-attack/90380/\n\n17/25\n\n \n \n \n \n \n \n \n \n\f4/24/2019\n\nOperation ShadowHammer: A High Pro\ufb01le Supply Chain Attack | Securelist\n\nthe attackers used at least two stages of C2\nservers, where the \ufb01rst stage would provide the\nbackdoor with an encrypted next-stage C2 domain.\n\nThe backdoor contains a hardcoded URL for C2\ncommunication, which points to a publicly editable\nonline Google document. Such online documents,\nwhich we extracted from several backdoors, were\ncreated by the same user under a name of Tom\nGiardino (hrsimon59@gmail[.]com), probably a\nreference to the spokesperson from Valve\nCorporation.\n\nThese online documents contained an ASCII block\nof text marked as an RSA private key during the\ntime of operation. We noticed that inside the private\nkey, normally encoded with base64, there was an\ninvalid character injection (the symbol \u201c$\u201d):\n\nMalware communication injected into Google document contents\n\nThe message between the two \u201c$\u201d characters in fact contained an encrypted second-stage C2 URL.\n\nWe managed to extract the history of changes and collected the following information indicating the time\nand C2 of ongoing operations in 2018:\n\nJul 31: UDP://103.19.3[.]17:443\nAug 13: UDP://103.19.3[.]17:443\n\nhttps://securelist.com/operation-shadowhammer-a-high-pro\ufb01le-supply-chain-attack/90380/\n\n18/25\n\n\f4/24/2019\n\nOperation ShadowHammer: A High Pro\ufb01le Supply Chain Attack | Securelist\n\nOct 08: UDP://103.19.3[.]17:443\nOct 09: UDP://103.19.3[.]17:443\nOct 22: UDP://117.16.142[.]9:443\nNov 20: HTTPS://23.236.77[.]177:443\nNov 21: UDP://117.16.142[.]9:443\nNov 22: UDP://117.16.142[.]9:443\nNov 23: UDP://117.16.142[.]9:443\nNov 27: UDP://117.16.142[.]9:443\nNov 27: HTTPS://103.19.3[.]44:443\nNov 27: TCP://103.19.3[.]44:443\nNov 27: UDP://103.19.3[.]44:1194\nNov 27: HTTPS://23.236.77[.]175:443\nNov 29: HTTPS://23.236.77[.]175:443\nNov 29: UDP://103.19.3[.]43:443\nNov 30: HTTPS://23.236.77[.]177:443\n\nThe IP address range 23.236.64.0-23.236.79.255 belongs to the Chinese hosting company Aoyouhost\nLLC, incorporated in Los Angeles, CA.\n\nAnother IP address (117.16.142[.]9) belongs to a range listed as the Korean Education Network and likely\nbelongs to Konkuk university (konkuk.ac.kr). This IP address range has been previously reported by Avast\nas one of those related to the ShadowPad activity linked to the CCleaner incident. It seems that the\nShadowPad attackers are still abusing the university\u2019s network to host their C2 infrastructure.\n\nThe last one, 103.19.3[.]44, is located in Japan but seems to belong to another Chinese ISP known as\n\u201cxTom Shanghai Limited\u201d. Connected to via the IP address, the server displays an error page from Chinese\nweb management software called BaoTa (\u201c\u5b9d\u5854\u201d in Chinese):\n\nhttps://securelist.com/operation-shadowhammer-a-high-pro\ufb01le-supply-chain-attack/90380/\n\n19/25\n\n\f4/24/2019\n\nOperation ShadowHammer: A High Pro\ufb01le Supply Chain Attack | Securelist\n\nScreenshots of server error pages\n\nPlugX connection\n\nhttps://securelist.com/operation-shadowhammer-a-high-pro\ufb01le-supply-chain-attack/90380/\n\n20/25\n\n\f4/24/2019\n\nOperation ShadowHammer: A High Pro\ufb01le Supply Chain Attack | Securelist\n\nWhile analyzing the malicious payload injected into the signed ASUS Live Updater binaries, we came\nacross a simple custom encryption algorithm used in the malware. We found that ShadowHammer reused\nalgorithms used in multiple malware samples, including many of PlugX. PlugX is a backdoor quite popular\namong Chinese-speaking hacker groups. It had previously been seen in the Codoso, MenuPass and Hikit\nattacks. Some of the samples we found (i.e. md5:5d40e86b09e6fe1dedbc87457a086d95) were created as\nearly as 2012 if the compilation timestamp is anything to trust.\n\nPlugX code from 2012 (on the left) and ShadowHammer (on the right)\n\nApparently, both pieces of code share the same constants (0x11111111, 0x22222222, 0x33333333,\n0x44444444), but also implement identical algorithms to decrypt data, summarized in the python function\nbelow.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\nfrom ctypes import c_uint32\nfrom struct import pack,unpack\ndef decrypt(data):\np1 = p2 = p3 = p4 = unpack("], "URLs": ["https://securelist.com/operation-shadowhammer-a-high-pro", "http://+/requested.html.", "https://asushot", "https://nw.infestexe[.]com/version/last.php"], "weight": 0.0}