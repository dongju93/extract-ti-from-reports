{"rule_id": 446, "name": "fox-it_mofang_threatreport_tlp-white", "description": "-", "references": [], "File_Names": ["logon.had", "goodlook.sg", "photo.tar", "wbmail.city", "micrdsoft.com", "psychologia.uni", "wroc.pl", "avgfree.us", "elogger.dat", "blanks.jpg", "samples.php", "AlphaZawgyl_font.exe", "uplogo.php", "logo.gif", "flymna.com", "mar.html", "helpservice.exe", "vmx.exe", "officeonlinetool.com", "gmgoogle.com", "lexplore.exe", "bm.php", "comindex.php", "cache.php", "domesky.com", "adventurelearning.me", "image.php", "myanmar.jpg", "proxy.seg", "library.com", "undpus.com", "sophosrv.com", "defexpoindia14.com", "msvcr110.dll", "upgoogle.com", "job.com", "cpgcorp.org", "msvcr110.dat", "livechat.exe", "elogger.dll", "ipacking.co", "shell.html", "www.go", "cpgcorp.com", "eloggerx64.dll", "gga.com", "font.exe", "tripmans.com", "tiontester.com", "SYSTEM.test", "logon.php", "ServiceApp.pdb", "photo.exe", "text.txt", "migwiz.exe", "nfkllyuisyahooapis.com", "sysmain.sdb", "citrixmeeting.com", "tinroofpopcorn.com", "commerce.gov", "blanks.php", "403.php", "InstallScript.pdb", "cache_check.php", "irrawaddy.com"], "MD5_Hashes": ["9a6167cf7c180f15d8ae13f48d549d2e", "cf883d04762b868b450275017ab3ccfa", "06cca5013175c5a1c8ff89a494e24245", "b43e5988bde7bb03133eec60daaf22d5", "a326e2abacc72c7a050ffe36e3d3d0eb", "f4b247a44be362898c4e587545c7653f", "663e54e686842eb8f8bae2472cf01ba1", "484c7f9e6c9233ba6ed4adb79b87ebce", "25e87e846bb969802e8db9b36d6cf67c", "916a2a20a447b10e379543a47a60b40f", "3dab6ff3719ff7fcb01080fc36fe97dc", "4e22e8bc3034d0df1e902413c9cfefc9", "582e4adddfd12f7d68035c3b8e2e3378", "a4da3b820883e9808bd3ca2e02437a25", "e79b2d2934e5525e7a40d74875f9d761", "0067bbd63db0a4f5662cdb1633d92444", "2cc5bc69e24a13bfc8ea3dc679ab0efc", "5c00ccf456135514c591478904b146e3", "fb80354303a0ff748696baae3d264af4", "2f14d8c3d4815436f806fc1a435e29e3", "5f287a8082df8ed7b081137507c03638", "2384febe404ef48d6585f050e3cd51a8", "d7a575895b07b007d0daf1f15bfb14a1", "36e057fa2020c65f2849d718f2bb90ad", "cacbdf48a61ee0999da003f090027598", "f9c14a8e9ceb143d959743ad8c09fdc4", "888cac09f613db4505c4ee8d01d4291b", "23a3f48df4b36e3d2e63cde4b85cf4fa", "ca41c19366bee737fe5bc5008250976a", "b281a2e1457cd5ca8c85700817018902", "1f330f00510866522f14790398a5be59"], "SHA1_Hashes": [], "SHA256_Hashes": ["36422e6ccaa50a9ecceb7fb709a9e383552732525cb579f8438237d87aaf8377", "ba0057a1b132ec16559efc832941455cc07f34c434da2a7434f73f1d2141bebf", "234d62ffd83c3972a32e89685787ff3aab4548cd16e4384c3c704a059ef731ce", "33b288455c12bf7678fb5fd028ff3d42fcaf33cf833a147cb7f0f89f7dad0d8f", "577622fbf0a7bebc60844df808e75eef81a3d62ec6943f80168ac0d5ef39de5c", "fa28559a4e0e920b70129cea95a98da9a409eaa093c63f341a7809692b31e723", "b7edbe6aee1896a952fcce2305c2bb7d8e77162bb45e305c64c7f8c9f63b3ab5", "7c8f962129f9d8fef6df7ca29ee7672c30286660298e0ef8b40f6a17f029187f", "1ca75e9b1761e15968d01a6e4f0a9f6ce47ba7ee4047d1533fb838f0f6ab28e2", "d2d4723f8c3bba910cade05c9ecea00cdcc647d42232bccc610d066792a95b15", "558461b6fb0441e7f70c4224963490ea49f44d40c5700a4c7fd19be4c62b3d6a", "dae17755e106be27ea4b97120906c46d4fcbb14cc8d9fc2c432f4c0cc74bb3fb", "ac3b42453fac93e575988ba73ab24311515b090d57b1ad9f27dcbae8363f2d99", "b53b27bb3e9d02e3ec5404cf3e67debb90d9337dbb570ca8b8cfce1054428466", "241c66bb54bd27afeb4805aa8a8045155b81c8cd7093dde7ef19273728f502eb", "2b111e287d356ac4561ba4f56135b7c1361b7da32e5825028a5e300e44b05579", "eb2d3c9e15b189dd02f753f805e90493254e17d40db6f1228a4e4095c5f260c1", "23132f4dfd4cb8abe11af1064e4930bc36a464d1235f43bad4ff20708babcc34", "5da5a5643e32d6200567768e6112d4d3161335d8d7a6dd48f02bf444fe98aab3", "a835baa7ffc265346443b5d6f4828d7221594bd91be8afc08152f3d68698b672", "7deb75e95e8e22c6abb3b33c00b47a93122b8c744e8f66affd9748292e5a177f", "006c74c6813a6efeabea860b2718ed548eed216a319d76ceb178fc38cba458d1", "e01aae93f68a84829fd8c0bc5ae923897d32af3a1d78623839fcfd18c99627cc", "3124fcb79da0bdf9d0d1995e37b06f7929d83c1c4b60e38c104743be71170efe", "0741a18bfd79dac1fb850a7d4fcc62098c43fb0c803df6cd9934e82a1362dd07", "722f41aa2c7d670364b7a9bb683a0025aef5893b34af67873972cdaf09490ad2", "286616a5124f57f165ba2a1aa540200e103e976ce181dd61fe39faf05cf5378d", "1922273bb36ab282e3b7846f1bb2802f5803bde66078fa996e44b84d0265675f", "33fff13b0d0e76a09100efa0b407fe8cdfd0758500dad7cc59722bf3b537de62", "6882664f1d0eb8c8cf61bdd16494380d34b6207455638342c6c3a7eef1ed9197", "029e735581c38d66f03aa0e9d1c22959b0bc8dfe298b9e91b127c42c7f904b5e", "2a1a0d8d81647c321759197a15f14091ab5e76b913eb2d7d28c6bb053166d882"], "Registry_Entries": ["HKCU\\Software\\microsoft\\windows\\CurrentVersion\\Run\n\n7.1.3  Persistence through a service\n\nShimRat will create a new service under Windows using the information from the instal-\n\nlation configuration shown in paragraph 7.1.1 above. This operation is performed through \nthe Windows api functions available for registering, updating and starting of services12.\n\nIt will start by stopping and removing any old service (if any exist). ShimRat will register \n\na new service using the information from the persistence configuration and start it, \n\n12 \n\n https://msdn.microsoft.\n\nafter checking and removing any old services.\n\ncom/en-us/library/\n\nwindows/desktop/\n\nms685141(v=vs.85).aspx\n\n7.1.4  Persistence through shims13 \nOver the years Microsoft has gone to extraordinary lengths to ensure backward \n\n13 \n\n https://technet.microsoft.\n\ncompatibility on its Windows platform. One of the outcomes of this process was the \n\ncom/en-us/en-en/library/\n\ncreation of the Application Compatibility Framework (acf) which helps ensure this \n\ndd837644%28v=ws.10%29.\n\ncompatibility. Through this framework, special fixes known as Microsoft Fix It\u2019s or just \n\naspx\n\nfixes can be run which can help mitigate security or compatibility problems.\n\n28 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016\n\n \n \n \n\fThe way the acf works is that when a process is started, it will determine if the \n\nnewly created process needs to be shimmed. If this is the case, a special flag is raised  \n\nto indicate this. Based on this flag the operating system will load the installed Shims \n\nand apply the required fixes. This means shims are simply hot patching processes on \n\nthe fly. Most predefined fixes released by Microsoft are stored in:\n\n%WINDIR%\\AppPatch\\sysmain.sdb\n\nAny fix not defined in this sdb file, is called a \u2018Custom Fix\u2019 and can be installed by anyone \n\nwith knowledge of the workings of this system. \n\nShimRat uses a shim to perform an application fix using an InjectDLL fix. An InjectDLL \n\nfix will inject a specified dll into a target process, this allows the code from the dll to \n\nrun in the context of the target process. ShimRat has implemented this shim for both \n\n32 and 64 bit platforms. In technical terms, the fix remains the same InjectDLL fix, but \n\nthe dll ShimRat injects is different.\n\nNormally when an official Fix It shim is installed it would be an official update or patch \n\nof some kind and this would be registered as being installed as an update. This means \n\nthe shim is visible in the software manager in Windows under the Windows component \n\nsection. ShimRat shims do not appear in the software manager due to the way it installs \n\nthe shims. Normally when a shim is installed, it is performed via the official installer \n\nwhich will register the Shim and place it in the correct location. ShimRat performs the \n\nregistration of the shim manually, bypassing the official installation and in turn making \n\nsure that it won\u2019t show up under the installed software in Windows.\n\nThe shim databases are installed in either of two locations:\n\n%WINDIR%\\AppPatch\\Custom\\ (32 bit)\n\n%WINDIR%\\AppPatch\\AppPatch64\\Custom\\ (64 bit)\n\nAfter placing the files on disk, ShimRat manually loads the shims into the shim database \n\nby first registering it in the registry at two specific locations as shown in Figure 13.\n\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\n\nHKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\n\n fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 29 \n\n\fFigure 13 An example of a 32-bit ShimRat infection with shims\n\nAfter filling the registry keys, ShimRat calls SdbRegisterDatabaseEx to register the \n\ndatabase and finally ShimFlushCache to flush the cache and enable the shim. From this \n\npoint on, every newly started instance of svchost.exe will be shimmed and ShimRat \n\nwill be. It locks itself with the use of mutexes, to ensure there aren\u2019t multiple copies \n\nof ShimRat running. ShimRat mutexes are a combination of the string Global\\\\qwe \n\nfollowed by one or more numbers.\n\n7.1.5  Built-in capabilities of ShimRat\n\nShimRat has a set of inbuilt capabilities to give the operators control over their victim. \n\nThe following is a list of capabilities seen in one of the most recent samples.\n\nThe operators are currently able to use ShimRat for among others:\n\n\u2022  Enumerate connected drives\n\u2022  List, create and modify directories\n\u2022  Upload and download files\n\u2022  Delete, move, copy and rename files\n\u2022  Execute programs\n\u2022  Execute commands\n\u2022  Uninstall itself\n\n7.1.6  Command and control communication\nShimRat communicates over HTTP to its C2 server. While versions since 2015 have seen \n\nthe introduction of HTTPS usage, ShimRat does not appear to verify the SSL certificate \n\nof C2 servers, which are generally self-signed certificates. ShimRat does have the ability \n\nto use pre-configured HTTP proxies, which is useful in situations where a victim has \n\nforced local proxies in the network with authentication.\n\n30 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016\n\n\fLike with persistence, ShimRat holds a C2 communication configuration internally. \n\nThe structure of the configuration looks as follows (see Table 4):\n\nConfiguration items\n\nPrimary C2 location\n\nSecondary C2 location\n\nCampaign ID\n\nC2 server password\n\nProxy\n\nProxy username\n\nProxy password\n\nTable 4: C2 communication configuration.\n\nShimRat communicates with its C2 server through a pull and push mechanism. ShimRat \n\nconstantly asks its C2 server for commands and once it has executed a command, \n\nit will send back the result. The structure of the commands exchanged with the  \n\nC2 server is quite simple:\n\n\u2022  Every command is encapsulated within two tags, currently these tags are the \nword \u2018Data\u2019 which is added in front of and at the end of the command string.  \n\nIn the past this used to be the string \u2018Yuok\u2019 as described in paragraph 2.1.\n\n\u2022  Every command has a unique \u2018ID\u2019. These IDs are notated as  $$<ID number>\n\u2022  The final structure of the commands send to and from the C2 server is:  \n\n<data tag><command ID><command data><data tag>\n\nFor example, when ShimRat first connects to a C2 server it registers itself. This initial \n\nregistration looks like this:\n\nData$$00#DEMO-PC-0800232979FD-SYSTEM.test.0.0.01.1#WinXP Professional SP3 (2600) (x86)Data\n\nThe aforementioned example shows the two Data tags at the start and at the end. The \n\ncommand id is 00, the registration command, followed by the associated data. In this \n\ncase, the data comprises basic information including the machine name, DEMO-PC, \n\nsystem information, 0800232979FD-SYSTEM, the C2 password, test, its version and the \n\noperating system version and whether it is a 32 or 64bit operating system in the last part.\n\nShimRat will continue sending the initial check-in data until the C2 server responds \n\nwith Data. Once it has received this response, which indicates it registered successfully, \n\nit will start polling for new commands to execute.\n\n fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 31 \n\n \n\fIt polls the C2 for commands by sending command id 02 in combination with its \n\nsystem information:\n\nData$$02#DEMO-PC-0800232979FD-SYSTEMData\n\nThe C2 server will respond with one of 3 possible tags:\n\n\u2022  Atad: returned when there is nothing to do for the malware. ShimRat will sleep \n\nfor a specified time period before polling again.\n\n\u2022  Aatd: returned when the C2 does not recognize the system information. It forces \n\nShimRat to register itself again. After registering itself again ShimRat will \n\ncontinue polling the C2 server for commands.\n\n\u2022  Data: returned when a command is available. The whole response string would \nactually be Data$$<command ID> where ShimRat would parse the command \n\nid, execute the desired command and send the result back to the C2. Details of \n\nwhich command ID maps to which command can be found in Table 5.\n\nTable 5 lists the possible command ids that a C2 server could send (the Initiating \n\ncommand id) and the corresponding responses by ShimRat (the Responding command \n\nid). Some commands will result in one or more different responding ids based on the \n\ndata ShimRat has to send back.\n\nPlease note, that there are checks when executing these commands where the key-\n\nwords Atad Aatd and Data are used to evaluate the outcome of the command. These \n\nstates are not described or shown in the table, nor does the table include command \n\nids 00 and 01 which are used for initial registration and command polling respectively.\n\nFunction\n\nInitiating command ID\n\nResponding command ID(s)\n\nEnumerate drives\n\nList directory\n\nDownload file\n\nUpload file\n\nDelete file\n\nCreate directory\n\nCopy file\n\nMove file\n\nRename file\n\nExecute file\n\nCommand shell\n\nUninstall\n\n03\n\n06\n\n09\n\n0c\n\n16 \n\n31\n\n29\n\n26\n\n28\n\n17\n\n11\n\n22\n\n04\n\n07\n\n0b, 24\n\n-\n\n-\n\n-\n\n32\n\n32\n\n-\n\n-\n\n12, 15\n\n-\n\nTable 5 Overview of ShimRat functions mapped to command IDs\n\n32 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016\n\n\f7.2  ShimRatReporter\n\n7.2.1  Summary\n\nShimRatReporter is a tool first seen in late 2014. The goal of this tool is to gather \n\nimportant information about the target infrastructure. More details about this are \n\navailable in paragraph 7.2.2.\n\nAdditionally the tool can be configured to download a 2nd stage payload from 1 or 2 \npreconfigured locations. The idea behind ShimRatReporter is to be able to deliver \n\ncustomized ShimRat builds. This can be seen in the preconfigured proxy configura-\n\ntion in some of the attacks. In these attacks, the ShimRat builds that were sent to the \n\ntarget machines were already configured with the credentials for the local proxy in \n\nthe target network.\n\n7.2.2  Report generation\n\nShimRatReporter generates a text based report to send out to its C2 server. The report \n\nis constructed with the following sections. \n\nSection\n\nContents\n\nReport header\n\nThe header contains a timestamp at which the report was made and the local computer name.\n\nNetwork information \n\nThe first section is titled IP-INFO and contains information about the Windows IP configuration. This includes \n\nlocal IP information, routing tables, mac address, gateway, dns servers and whether the network has dHcp \n\nenabled. The second section is titled Network-INFO and contains a list of all the tcp and udp endpoints \n\n(similar to the output of the Netstat command) by formatting the output of the GetExtendedUdpTable and \n\nGetExtendedUdpTable Windows api functions.\n\nOperating system  \n\nThis section is titled OS-INFO and contains the operating system name and specific windows version \n\ninformation\n\nincluding any service packs if they are installed.\n\nActive processes  \n\nThis section is titled Process-INFO and contains a list of all the running process on the machine including \n\ninformation\n\ntheir pid and parent pid.\n\nBrowser and proxy  \n\nThis section is titled Browser-INFO and contains the User-Agent of the default browser as well as any \n\nconfiguration\n\nproxy configurations set in the registry.\n\nActive user sessions \n\nThis section is titled QueryUser-INFO and contains a list of active sessions on the machine enumerated \n\nUser accounts \n\nThis section is titled Users-INFO and contains a list of the non-privileged and privileged accounts that \n\nwith the WTSEnumerateSessions Windows api function.\n\nare available on the machine.\n\nInstalled software \n\nThis section is titled Software-INFO and contains a list of all the installed software on the machine \n\nexcluding any Windows updates / components.\n\nReport footer \n\nThe footer of the report contains some additional information on whether the 2nd stage payloads,  \n\nif configured, were successfully downloaded and executed.\n\n fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 33 \n\n \n \n \n\f7.2.3  Command and control communication\n\nShimRatReporter communicates over HTTP with a preconfigured C2 server. The gener-\n\nated report is first compressed using lz compression applied with the RtlCompressBuffer \n\nWindows api function. After compression, the data is encrypted with a combination \n\nof shifting and xor using a static key. The key hardcoded in all versions seen in the \n\nwild is \u2018NetMeter\u2019.\n\nAfter a report is generated, the raw buffer with the data is taken and iterated through \n\nusing an index. If the index is divisible by two, the value in the buffer is xor-ed. If it\u2019s not \n\ndivisible by two, the value of the key is added to the value in the buffer. This is probably \n\nbest explained by showing the code for the decryption tool that fox-it has created:\n\nFor every element in the encrypted report data, the index is checked to be divisible \n\nby two, using the modulo operation to wrap the key. If this is true, the value in the \n\nencrypted report is xor-ed with a value from the static key. If it is not divisible, it will \n\nsubtract the ordinal key value from the current element in the encrypted report. In \n\nthe encryption process the subtraction is just an addition.\n\nThe report is then sent out in a post request to a preconfigured C2 server and a gate \n\npath. The url parameter filename is added to the post url. Its value is the computer \n\nname, also listed in the report, and an id. The C2 servers responds with a 200 ok when \n\nthe report has been successfully received.\n\nFigure 14 Example ShimRat report upload\n\n34 | fox-it | Mofang | A politically motivated information stealing adversary | May 2016\n\n\fAdditionally, ShimRatReporter can be configured to download a payload. Reporting \n\nis default but payload downloading is optional. Payloads are downloaded from  \n\npreconfigured locations. The payloads are encrypted in a similar way. Figure 15 shows \n\nan example payload download from the same campaign as shown in Figure 14.\n\nFigure 15 Example ShimRat payload download\n\n fox-it | Mofang | A politically motivated information stealing adversary | May 2016 | 35 \n\n\f8  Network based detection (IOCs)\n\nThe following sections contain iocs for infrastructure communication from the Mofang \n\ngroup from 2012 until the end of 2015. There are duplicate domains and ips in the list, \n\ndue to an overlap in domains for the ips and a domain having pointed at multiple ips.\n\n8.1  Snort signatures\nThe following Snort signatures provide coverage for the known HTTP based ShimRat \n\nand ShimRatReporter C2 communication protocols. One thing to keep in mind is that \n\nsome variants of ShimRat communicate over HTTPS, which these rules will not cover.\n\nThese IOCs are also available from our Github repository located at: https://github.\n\ncom/fox-it/mofang/\n\nalert tcp $HOME_NET any -> $EXTERNAL_NET $HTTP_PORTS (msg:"], "URLs": ["http://www.tinroofpopcorn.com/admin/fckeditor/_samples/_plugins/samples.php", "http://www.commerce.gov.mm/templates/css1/logon.php", "http://support.f--secure.com/cache/cache.php", "http://mail.upgoogle.com/image/image.php", "https://secure2.sophosrv.com/en-us/support/ms-cache_check.php", "https://secure2.sophosrv.com/en-us/support/blanks.jpg", "http://travel.tripmans.com/links/images/links.php", "http://www.ipacking.co.kr/ez/admin/data/403.php", "http://www.irrawaddy.com/", "http://wbmail.city-library.com/mm/news/info.php", "http://b.support.outlook-microsoft.net/en-us/b/index.php", "https://my.wikipedia.org/", "http://blog.cobaltstrike.", "http://library.cpgcorp.org/links/images/file/blanks.php", "http://dns.undpus.com/myanmar.jpg", "http://adventurelearning.me/wp-content/uploads/index.php", "http://www.psychologia.uni.wroc.pl/sites/default/bm.php", "http://www.labofapenetra-", "http://www.domesky.com/ez/admin/data/index.php", "http://images.defexpoindia14.com/se/index.php", "https://technet.microsoft.", "https://ie.update-windows-microsoft.com/my/js/index.php", "http://dns.undpus.com/info.php", "http://update.nfkllyuisyahooapis.com/js/js/js.php", "http://www.go-gga.com/ez/doc/company/log/logon.php", "https://ie.update-windows-microsoft.com/company/js/index.php", "http://www.avgfree.us/index.php", "http://www.citrixmeeting.com/download/", "https://api.officeonlinetool.comindex.php", "https://ie.update-windows-microsoft.com/update/index.php", "https://github.", "http://ie.update-windows-microsoft.com/load/uplogo.php", "http://update.micrdsoft.com/image/image.php", "http://consult-myanmar.", "https://msdn.microsoft.", "http://www.goodlook.sg/po/index.php", "http://store.outlook-microsoft.net/en-us/c/index.php", "http://library.cpgcorp.org/links/images/blanks.jpg", "http://ie.update-windows-microsoft.com/load/logo.gif", "http://thediplomat.", "http://video.today-nytimes.com/en-us/b/index.php", "http://dns.undpus.com/info.txt", "http://www.aseanbriefing.", "http://dns.undpus.com/index.php", "http://logon.had-one-job.com/2008/vcards/log/us/index.php"], "weight": 0.0}