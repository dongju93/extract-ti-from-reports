{"rule_id": 4, "name": "Introducing WhiteBear - Securelist", "description": "-", "references": [], "File_Names": ["\ufb01refox.exe", "iexplore.exe", "microsoft.com", "CVRG1A6B.tmp", "explorer.exe", "ntuser.dat", "safari.exe", "CVRG72B5.tmp", "DF1E05.tmp", "CVRG38D9.tmp", "outlook.exe", "yahoo.com", "KB943729.log", "2344.TID", "Agent.btz", "opera.exe", "chrome.exe"], "MD5_Hashes": ["19ce5c912768958aa3ee7bc19b2b032c", "06bd89448a10aa5c2f4ca46b4709a879", "b099b82acb860d9a9a571515024b35f0"], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\SOFTWARE\\Microsoft\\WindowsNT\\CurrentVersion\\Explorer\\Scr\n\neen Saver\u201d) \n\n110 \u2013 no information \n\n111 \u2013 8 zero bytes\n\nValues 104 \u2013 111 are encrypted with the RSA private key (resource 101)\n\nand compressed with bzip2.4. The RSA key is stored with header stripped\n\nin a format similar to Microsoft\u2019s PVK; the RSA PRIVATE KEY header is\n\nappended by the loader before reading the keys into the encryption code.\n\nResource 109 points to a registry location called \u201cexternal storage\u201d, built-\n\nin resources are called \u201cPE Storage\u201d.\n\nIn addition to storing code, crypto resources, and con\ufb01guration data in PE\n\nresources, WhiteBear copies much of this data to the victim host\u2019s\n\nregistry. Registry storage is located in the following keys. Subkeys and\n\nstored values listed below: \n\n[HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ScreenS\n\naver] [HKCU\\SOFTWARE\\Microsoft\\Windows\n\nNT\\CurrentVersion\\Explorer\\ScreenSaver]\n\nRegistry subkeys: \n\n{629336E3-58D6-633B-5182-576588CF702A} Contains the RSA private\n\nkey used to encrypt/decrypt other resources / resource 101 \n\n{3CDC155D-398A-646E-1021-23047D9B4366} Resource 105 \u2013 current\n\n\ufb01le location \n\n{81A03BF8-60AA-4A56-253C-449121D61CAF} Resource 106 \u2013 process\n\nnames \n\n{31AC34A1-2DE2-36AC-1F6E-86F43772841F} Contains the internet C&C\n\ntransport module / resource 107 \n\n{8E9810C5-3014-4678-27EE-3B7A7AC346AF} Resource 108 \u2013 C&C\n\ncon\ufb01g \n\n{28E74BDA-4327-31B0-17B9-56A66A818C1D} Resource 110 \u201cplugins\u201d \n\n{4A3130BD-2608-730F-31A7-86D16CE66100} Resource 111 \n\n{119D263D-68FC-1942-3CA3-46B23FA652A0} Unique Guid (\u201cObjectID\u201d) \n\n{1DC12691-2B24-2265-435D-735D3B118A70} \u201cTask Queue\u201d \n\n{6CEE6FE1-10A2-4C33-7E7F-855A51733C77} \u201cResult Queue\u201d \n\n\f{56594FEA-5774-746D-4496-6361266C40D0} \u00a0unknown \n\n{831511FA-190D-5D85-8A4A-279F2F592CC7} \u00a0unknown\n\nFinally, if the main WhiteBear module fails to use registry storage, it uses\n\n\u201cFS Storage\u201d in \ufb01le %TEMP%\\KB943729.log. The module reads all of its\n\ndata and binary components from one of the storages and then veri\ufb01es\n\nthe integrity of data (RSA+bzip2 compression+signature).\n\nThe module maintains functionality which is divided into a set of\n\nsubsystems that are loosely named by the developers: \n\n\u2022 result queue \n\n\u2022 task queue \n\n\u2022 message processing system \n\n\u2022 autorun manager \n\n\u2022 execution subsystem \n\n\u2022 inject manager \n\n\u2022 PEStorage \n\n\u2022 local transport manager/internal transport channel\n\nIt creates the following temporary \ufb01les: \n\n%TEMP%\\CVRG72B5.tmp.cvr \n\n%TEMP%\\CVRG1A6B.tmp.cvr \n\n%TEMP%\\CVRG38D9.tmp.cvr\n\n%TEMP%\\~DF1E05.tmp contains the updated body of the loader during\n\nan update.\n\nEvery day (as speci\ufb01ed by local time) the main module restarts the\n\ntransport subsystem which includes: \n\n\u2022 message processing \n\n\u2022 named pipe transport (\u201cNPTransport\u201d)\n\nIf the registry/\ufb01le storage is empty, the module performs a \u2018migration\u2019 of\n\nhardcoded modules and settings to the storage location. This data is\n\nencrypted with a new RSA key (which is also stored in the registry).\n\nThe data in the registry is prepended with a 0xC byte header. The\n\nmaximum size of each registry item is 921,600 bytes; if the maximum size\n\nis exceeded, it is split into several items. The format of the header is\n\nshown below: \n\n[4:service DWORD][4:chunk index][4:chunk size including header]\n\nEvery time the orchestrator module is loaded it validates that the storage\n\narea contains the appropriate data and that all of the components can be\n\ndecrypted and validated. If these checks fail the module reinstalls a\n\ncon\ufb01guration from the resource \u201cREINSTALL\u201d.\n\n\fPipe Transport\n\nThe module generates the pipe name (with the same pre\ufb01x as the loader);\n\nwaits for incoming connections; receives data and pushes it to the\n\n\u2018message processing system\u2019. The module generates the pipe name (with\n\nthe same pre\ufb01x as the loader); waits for incoming connections; receives\n\ndata and pushes it to the \u2018message processing system\u2019. Every packet is\n\nexpected to be at least 6 bytes and contain the following header: \u00a0 \u00a0 \u00a0[4:ID]\n\n[2:command]\n\nList of commands: \n\n1 : new task \n\n2 : update the loader + orchestrator \ufb01le \n\n4 : send task result \n\n5 : send settings \n\n6 : write results to registry/\ufb01le storage \n\n7 : enable / disable c2 transport / update status \n\n8 : uninstall \n\n9 : nop \n\n10 : \u201cCMessageProcessingSystem::Receive_NO_CONNECT_TO_GAYZER\u201d;\n\nwrite results to registry \n\n11: write the last connection data \u2018{56594FEA-5774-746D-4496-\n\n6361266C40D0}\u2019 aka \u201clast connection\u201d storage value \n\n12: \u201cgive cache\u201d \u2013 write cached commands from the C&C \n\n13: \u201ctake cache\u201d \u2013 append C&C commands to the cache\n\nDepending on the command, the module returns the results from\n\npreviously run tasks, the con\ufb01guration of the module, or a con\ufb01rmation\n\nmessage.\n\nAn example of these tasks is shown below: \n\n\u2022 write a \ufb01le and execute it with CreateProcess() capturing all of the\n\nstandard output \n\n\u2022 update C&C con\ufb01guration, plugin storage, etc \n\n\u2022 update autoruns \n\n\u2022 write arbitrary \ufb01les to the \ufb01lesystem (\u201cFile Upload\u201d) \n\n\u2022 read arbitrary \ufb01les from the \ufb01lesystem (\u201cFile Download\u201d) \n\n\u2022 update itself \n\n\u2022 uninstall \n\n\u2022 push task results to C2 servers\n\nThe \u201cLocalTransport manager\u201d handles named pipe communication and\n\nidenti\ufb01es if the packet received is designated to the current instance or to\n\nsomeone else (down the route). In the latter scenario the LocalTansport\n\nmanager re-encrypts the packet, serializes it (again), and pushes the\n\npacket via a named pipe on the local network to another hop,\n\n\f(NullSessionPipes). This e\ufb00ectively makes each infected node a packet\n\nrouter.\n\nThe Autorun manager subsystem is responsible for tracking the way that\n\nthe malicious module starts in the system and it maintains several\n\ndi\ufb00erent methods for starting automatically (shown below): \n\nLinkAutorun The subsystem searches for a LNK \ufb01le in the target directory,\n\nchanges the path to \u201ccmd.exe\u201d and the description to \u2018 /q /c start \u201c\u201d \u201c%s\u201d\n\n&& start \u201c\u201d \u201c%s\u201d \u2018 \n\nTaskScheduler20Autorun The subsystem creates the ITaskService (works\n\nonly on Windows Vista+) and uses the ITaskService interface to create a\n\nnew task with a logon trigger \n\nStartupAutorun The subsystem creates a LNK \ufb01le in %STARTUP% \n\nScreenSaverAutorun The subsystem installs as a current screensaver with\n\na hidden window \n\nHiddenTaskAutorun The subsystem creates the task ITaskScheduler\n\n(works only on pre-Vista NT). The task trigger start date is set to the\n\ncreation date of the Windows directory \n\nShellAutorun Winlogon registry [HKCU\\Software\\Microsoft\\Windows\n\nNT\\CurrentVersion\\Winlogon] Shell=\u201dexplorer.exe, \u2026\u201d\n\nFile Uninstallation is done in a discreet manner. The \ufb01le is \ufb01lled with\n\nzeroes, then renamed to a temporary \ufb01lename before being deleted\n\nWhiteBear Transport library (aka\n\u201cInternet Relations\u201d, \u201cPipe Relations\u201d)\n\nSample MD5: 19ce5c912768958aa3ee7bc19b2b032c \n\nType: PE DLL \n\nLinker timestamp: 2002.02.05 17:58:22 (GMT) \n\nLinker version: 10.0 \n\nSignature\u00a0\u201cSolid Loop Ldt\u201d UTCTime 15/10/2015 00:00:00 GMT \u2013\n\nUTCTime 14/10/2016 23:59:59 GMT\n\nThis transport library does not appear on disk in its PE format. It is\n\nmaintained as encrypted resource 107 in the orchestrator module, then\n\ndecrypted and loaded by the orchestrator directly into the memory of the\n\ntarget process. This C2 interaction module is independent, once started, it\n\ninteracts with the orchestrator using its local named pipe.\n\nTo communicate with its C2 server, the transport library uses the system\n\nuser agent or default \u201cMozilla/4.0 (compatible; MSIE 6.0)\u201d.\n\nBefore attempting a connection with its con\ufb01gured C2 server, the module\n\nchecks if the victim system is connected to Internet by sending HTTP 1.1\n\nGET / requests to the following servers (this process stops after the \ufb01rst\n\n\fsuccessful connection): \n\n\u2022 update.microsoft.com \n\n\u2022 microsoft.com \n\n\u2022 windowsupdate.microsoft.com \n\n\u2022 yahoo.com \n\n\u2022 google.com\n\nIf there is no Internet connection available, the module changes state to,\n\n\u201cCANNOT_WORK\u201d and noti\ufb01es the peer by sending command \u201c7\u201d over the\n\nlocal pipe.\n\nThe C2 con\ufb01guration is obtained from the main module with the\n\ncommand \u201c5\u201d. This checks whether the module complies with the\n\nschedule speci\ufb01ed in the C2 settings (which includes inactivity time and\n\nthe interval between connections). The C2 interaction stages have\n\ninteresting function names and an odd misspelling, indicating that the\n\ndeveloper may not be a native English speaker (or may have learned the\n\nEnglish language in a British setting): \n\n\u201cInternetRelations::GetInetConnectToGazer\u201d \n\n\u201cInternetRelations::ReceiveMessageFromCentre\u201d \n\n\u201cInternetRelations::SendMessageToCentre\u201d \n\n\u201cPipeRelations::CommunicationTpansportPipe\u201d\n\nThe module writes the encrypted log to %TEMP%\\CVRG38D9.tmp.cvr The\n\nmodule sends a HTTP 1.0 GET request through a randomly generated\n\npath to the C2 server. The server\u2019s reply is expected to have its MD5\n\nchecksum appended to the packet. If C2 interaction fails, the module\n\nsends the command \u201c10\u201d (\u201cNO_CONNECT_TO_GAYZER\u201d) to the\n\norchestrator.\n\nUnusual WhiteBear Encryption\n\nThe encryption implemented in the WhiteBear orchestrator is particularly\n\ninteresting. We note that the resource section is encrypted/decrypted and\n\npacked/decompressed with RSA+3DES+BZIP2. This implementation is\n\nunique and includes the format of the private key as stored in the\n\nresource section. 3DES is present in Sofacy and Duqu2 components,\n\nhowever they are missing in this Microsoft-centric RSA encryption\n\ntechnique. The private key format used in this schema and RSA crypto\n\ncombination with 3DES is (currently) unique to this threat actor.\n\nThe private key itself is stored as a raw binary blob, in a format similar to\n\nthe one Microsoft code uses in PVK format. This format is not o\ufb03cially\n\ndocumented, but its structures and handling are coded into OpenSSL.\n\nThis private key value is stored in the orchestrator resources without valid\n\nheaders. The orchestrator code prepends valid headers and passes the\n\nresults to OpenSSL functions that parse the blob.\n\n\fDigital Code-Signing Certi\ufb01cate \u2013\nFictional Corporation or Assumed\nIdentity?\n\nMost WhiteBear samples are signed with a valid code signing certi\ufb01cate\n\nissued for \u201cSolid Loop Ltd\u201d, a once-registered British organization. Solid\n\nLoop is likely a phony front organization or a defunct organization and\n\nactors assumed its identity to abuse the name and trust, in order to attain\n\ndeceptive code-signing digital certi\ufb01cates.\n\nWhiteBear Command and Control\n\nThe WhiteBear C2 servers are consistent with long standing Turla\n\ninfrastructure management practices, so the backdoors callback to a mix\n\nof compromised servers and hijacked destination satellite IP hosts. For\n\nexample, direct, hardcoded Turla satellite IP C2 addresses are shown\n\nbelow:\n\nC2 IP Address \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Geolocation \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0IP Space\n\nOwner \n\n169.255.137[.]203 \u00a0 \u00a0 \u00a0 \u00a0 South Sudan \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 IPTEC, VSAT \n\n217.171.86[.]137 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Congo \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Global\n\nBroadband Solution, Kinshasa VSAT \n\n66.178.107[.]140 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Unknown \u2013 Likely Africa \u00a0 \u00a0 \u00a0 \u00a0 \u00a0SES/New\n\nSkies Satellites\n\nTargeting and Victims\n\nWhiteBear targets over the course of a couple years are related to\n\ngovernment foreign a\ufb00airs, international organizations, and later, defense\n\norganizations. The geolocation of the incidents are below:\n\n\fEurope\n\nSouth Asia\n\nCentral Asia\n\nEast Asia\n\nSouth America\n\nConclusions\n\nWhiteBear activity reliant on this toolset seems to have diminished in June\n\n2017. But Turla e\ufb00orts continue to be run as multiple subgroups and\n\ncampaigns. This one started targeting diplomatic entities and later\n\nincluded defense related organizations. Infrastructure overlap with other\n\nTurla campaigns, code artifacts, and targeting are consistent with past\n\nTurla e\ufb00orts. With this subset of 2016-2017 WhiteBear activity, Turla\n\ncontinues to be one of the most proli\ufb01c, longstanding, and advanced APT\n\nwe have researched, and continues to be the subject of much of our\n\nresearch. Links to publicly reported research are below.\n\nReference Set \n\nFull IOC and powerful YARA rules delivered with\nprivate report subscription\n\nMd5 \n\nb099b82acb860d9a9a571515024b35f0 \n\n19ce5c912768958aa3ee7bc19b2b032c \n\n06bd89448a10aa5c2f4ca46b4709a879\n\nIP \n\n169.255.137[.]203 \n\n217.171.86[.]137 \n\n66.178.107[.]140\n\nDomain(s) \n\nsoligro[.]com \u2013 interesting because the domain is used in another Turla\n\noperation (KopiLuwak), and is the C2 server for the WhiteBear transport\n\nlibrary \n\nmydreamhoroscope[.]com\n\nExample log upon successful injection\n\n|01:58:10:216|.[0208|WinMain ].. \n\n|01:58:14:982|.[0209|WinMain\n\n].************************************************************************\n\n****************** \n\n|01:58:15:826|.[0212|WinMain ].DATE: 01.01.2017 \n\n\f|01:58:21:716|.[0215|WinMain ].PID=2344.TID=1433.Heaps=3 \n\n|01:58:22:701|.[0238|WinMain ].CreateMutex = {521555FA-170C-4AA7-\n\n8B2D-159C2F491AA4} \n\n|01:58:25:513|.[0286|GetCurrentUserSID ]._GETSID_METHOD_1_ \n\n|01:58:26:388|.[0425|GetUserSidByName ].22 15 1284404594 111 \n\n|01:58:27:404|.[0463|GetUserSidByName ].S-1-5-31-4261848827-\n\n3118844265-2233733001-1000 \n\n|01:58:28:263|.[0471|GetUserSidByName ]. \n\n|01:58:29:060|.[0165|GeneratePipeName\n\n].\\\\.\\pipe\\Winsock2\\CatalogChangeListener-5623-b \n\n|01:58:29:763|.[0275|WinMain ].PipeName =\n\n\\\\.\\pipe\\Winsock2\\CatalogChangeListener-5623-b \n\n|01:58:30:701|.[0277|WinMain ].Checking for existence\u2026 \n\n|01:58:31:419|.[0308|WinMain ].\u2014 Pipe is not installed yet \n\n|01:58:32:044|.[0286|GetCurrentUserSID ]._GETSID_METHOD_1_ \n\n|01:58:32:841|.[0425|GetUserSidByName ].22 15 1284404594 111 \n\n|01:58:33:701|.[0463|GetUserSidByName ].S-1-5-31-4261848827-\n\n3118844265-2233733001-1000 \n\n|01:58:34:419|.[0471|GetUserSidByName ]. \n\n|01:58:35:201|.[0318|WinMain ].Loading\u2026 \n\n|01:58:35:763|.[0026|KernelInjector::KernelInjector ].Address of marker:\n\n0x0025F96C and cProcName: 0x0025F860 \n\n|01:58:36:513|.[0031|KernelInjector::KernelInjector ].Value of marker =\n\n0xFFFFFEF4 \n\n|01:58:37:279|.[0088|KernelInjector::SetMethod ].m_bAntiDEPMethod = 1 \n\n|01:58:38:419|.[0564|QueryProcessesInformation ].OK \n\n|01:58:41:169|.[0286|GetCurrentUserSID ]._GETSID_METHOD_1_ \n\n|01:58:42:076|.[0425|GetUserSidByName ].22 15 1284404594 111 \n\n|01:58:42:748|.[0463|GetUserSidByName ].S-1-5-31-4261848827-\n\n3118844265-2233733001-1000 \n\n|01:58:43:169|.[0471|GetUserSidByName ]. \n\n|01:58:43:701|.[0309|FindProcesses ].dwPID[0] = 1260 \n\n|01:58:44:560|.[0345|WinMain ].try to load dll to process (pid=1260)) \n\n|01:58:45:013|.[0088|KernelInjector::SetMethod ].m_bAntiDEPMethod = 1 \n\n|01:58:45:873|.[0094|KernelInjector::LoadDllToProcess ].MethodToUse = 1 \n\n|01:58:46:544|.[0171|KernelInjector::GetProcHandle ].pid = 1260 \n\n|01:58:47:279|.[0314|KernelInjector::CopyDllFromBu\ufb00er ].Trying to\n\nallocate space at address 0x20020000 \n\n|01:58:48:404|.[0332|KernelInjector::CopyDllFromBu\ufb00er ].IMAGEBASE =\n\n0x20020000.ENTRYPOINT = 0x2002168B \n\n|01:58:48:763|.[0342|KernelInjector::CopyDllFromBu\ufb00er ].ANTIDEP\n\nINJECT \n\n|01:58:49:419|.[0345|KernelInjector::CopyDllFromBu\ufb00er ].Writing memory\n\nto target process\u2026. \n\n|01:58:49:935|.[0353|KernelInjector::CopyDllFromBu\ufb00er ].Calling to entry\n\npoint\u2026. \n\n|01:58:51:185|.[0598|KernelInjector::CallEntryPoint ].CODE =\n\n\f0x01FA0000, ENTRY = 0x2002168B, CURR = 0x77A465A5, TID = 1132 \n\n|01:58:55:544|.[0786|KernelInjector::CallEntryPoint ]._FINISH_ = 1 \n\n|01:58:56:654|.[0372|KernelInjector::CopyDllFromBu\ufb00er ].CTRLPROC = 0 \n\n|01:58:57:607|.[0375|KernelInjector::CopyDllFromBu\ufb00er ].+ INJECTED + \n\n|01:58:58:419|.[0351|WinMain ].+++ Load in 1260\n\nReferences \u2013 past Turla\nresearch \n\nThe Epic Turla Operation \n\nSatellite Turla: APT Command and Control in the Sky \n\nAgent.btz: a Source of Inspiration? \n\nThe \u2018Penquin\u2019 Turla \n\nPenquin\u2019s Moonlit Maze \n\nKopiLuwak: A New JavaScript Payload from Turla\n\nUroburos: the snake rootkit [pdf] \n\nThe Snake Campaign\n\nAPT   CYBER ESPIONAGE   TARGETED ATTACKS   TURLA\n\nShare post on:\n\n\uf09a \uf0d5 \uf099\n\nRelated Posts\n\nBad Rabbit\nransomware\n\nBlackOasis APT\nand new\ntargeted\nattacks\nleveraging\nzero-day\nexploit\n\nThe Festive\nComplexities\nof SIGINT-\nCapable Threat\nActors\n\n \n \n\f"], "URLs": [], "weight": 0.0}