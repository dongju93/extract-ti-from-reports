{"rule_id": 998, "name": "Study_of_the_ShadowPad_APT_backdoor_and_its_relation_to_PlugX_en (1)", "description": "-", "references": [], "File_Names": ["scom.exe", "ssck.ini", "skey.txt", "sck.ini", "Winmm.dll", "rapiexe.exe", "HistoryUrl3.db", "Psapi.dll", "SogouExplorer.exe", "08x.txt", "sreg.reg", "tmp.dll", "2345Explorer.exe", "1api.net", "ravmond.exe", "object__name_info.Name", "QQBrowser.exe", "Ole32.dll", "PcMain.exe", "BrowseHistory.db", "skey.dll", "config.name", "189.cn", "section_1.RVA", "ispapi.net", "install00.tmp", "e.cmd", "module_header.key", "reg.reg", "Parse.data", "360chrome.exe", "ky3log.dat", "dpx.dll", "com.exe", "TosBtKbdLayer.dll", "ctr.dll", "read.data", "sreg.dll", "winsafe.pdb", "MSVCRT.dll", "msgsvc.dll", "shellarg.mode", "register.json", "scpy.dll", "pneword.net", "config.url", "ARESTC.NET", "ICEFIREBEST.COM", "08x.exe", "IMM32.dll"], "MD5_Hashes": ["eb3816e69e6c007b96a09e2ecee968e5", "3f056c333f4f7ce015ec02f109454c54"], "SHA1_Hashes": ["1acc85504c94707ac9c56a0ec23b49c4ca671c8a", "4bba897ee81240b10f9cca41ec010a26586e8c09", "781831e8343d895aa4d9d95838eddda08a4673d8", "13dda1896509d5a27bce1e2b26fef51707c19503", "8638bcebe84be1982c430e05e6bcd72911f36e43", "8f386b29d8d458df67f0a67c4e155827dcee68c9", "a4c6d9eab106e46953f98008f72150e1e86323d6", "5c54429b219614627a925347fa5006935a70d9d7", "1d4a2acc73a7c6c83a2625efa8cc04d1f312325c", "6a1d928709f46d344f75936519c81137258e287c", "27e8474286382ff8e2de2c49398179f11936c3c5", "736d8e03e40e245d4c812b091b5743fce855a529", "6ad20dade4717656beed296ecd72e35c3c8e6721"], "SHA256_Hashes": [], "Registry_Entries": ["HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet003\\Services\\Messenger]\n\n", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet003\\Services\\Messenger\\Pa\nrameters]\n\n", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Messenger\\Pa\nrameters]\n\n", "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run] registry key or\n[HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run] if the first attempt was\nunsuccessful. \n\nNext, BackDoor.ShadowPad.4 tries to perform an inject. To do so, the trojan creates a\ndllhost.exe process with the CREATE_SUSPENDED flag and tries to inject a shellcode,\nresponsible for malicious module loading, into it. It also tries to inject the module itself, using\nthe strVirtualAllocEx -> WriteProcessMemory -> CreateRemoteThread\nscheme. To create a process, the following command line is used:\n\n%SystemRoot%\\system32\\dllhost.exe /Processid:{D54EEE56-AAAB-11D0-9E1D-\n00A0C922E6EC}\n\nIf the injection was successful, the current process is terminated. Otherwise, the trojan tries to\nperform the inject into the created process, using the current session token.\n\nWhen it runs in the context of a new process, BackDoor.ShadowPad.4 uses mutex to locate the\nparent process and terminates it. The name of the mutex is generated with the following\nfunction:\n\nNext, the trojan tries to inject its main module into the wmplayer.exe process created with the\nenvironment, obtained with the duplicate of the current session token. If it successful, it\nterminates the current process; if failed, it proceeds to its main functionality.\n\nWhen it runs in the context of wmplayer.exe, BackDoor.ShadowPad.4 proceeds to its main\nfunctionality immediately. Thus, it loads the TosBtKbdLayer.dll library into the memory and\nsends the ID of the infected computer to the \u0421&C server.\n\n\f74\n\n74\n\nThe main malicious functionality\n\nUsing the LoadLibrary function, BackDoor.ShadowPad.4 loads the TosBtKbdLayer.dll\nlibrary into the memory. It then generates the sequence of 16 random bytes that represents the\nID of the infected computer. If it has administrator rights, the trojan saves this ID in the ID1\nparameter of the [HKLM\\SOFTWARE\\WAD] registry key. If it doesn\u2019t have the appropriate rights,\nit saves it in the parameter of the [HKCU\\SOFTWARE\\WAD] registry key.\n\nAfter that, BackDoor.ShadowPad.4 creates the UDP socket and binds to it, but doesn\u2019t call the\nlisten function for it to listen to the connection. After that, it generates the\nwinhook\\tdzkd\\t<id>\\t<computer_name> string, where:\n\n\u00b7 <id> is the generated ID of the infected computer in the form of a hex string;\n\n\u00b7 <computer_name> is the name of the computer;\n\n\u00b7 \\t is the tabulation symbol (0x09);\n\n\u00b7 winhook and dzkd are the strings hardcoded in the trojan\u2019s code.\n\nThe resulted string is encrypted and sent to the C&C server located at the 125.65.40.163:\n\nThe string generation and its upload to the C&C server is repeated once every hour.\n\n\f75\n\n75\n\nCompared to other modifications of the family, all the necessary parameters of\nBackDoor.ShadowPad.4, such as the names of registry keys, services and the C&C server\naddress, are stored in the body of the trojan as separate strings. The encryption algorithm for\nthese strings is similar to the one used in BackDoor.ShadowPad.3. The code of this algorithm is\nmodified, but the result of its execution for both malicious apps is the same:\n\nStrings encryption algorithm in BackDoor.ShadowPad.3\n\n\fStrings encryption algorithm in BackDoor.ShadowPad.4\n\n76\n\n76\n\n\f77\n\n77\n\nBackDoor.Farfli.122\n\nA trojan library written in C++. It represents a dropper designed to deliver other malware to\ncomputers running 32-bit and 64-bit Microsoft Windows operating systems. The analyzed\nsample is used to load the main malicious module, hidden in the encrypted file, into the\nmemory.\n\n\f78\n\n78\n\nOperating routine\n\nThe library loads to the memory by the RasTls.exe tool using the DLL-hijacking mechanism.\nNext, it decrypts the shellcode from the RasTls.dat file stored in its body and transfers\ncontrol to it:\n\nIn turn, this shellcode uses an XOR operation with the 0xCC byte to decrypt the main payload\n(Dr.Web detects it as BackDoor.Farfli.125) and loads it into the memory. After that, it changes\nthe strings MZ and PE to BB and CC, respectively, in the signature header of an executable file.\n\nBackDoor.Farfli.125\n\nA malicious .DLL installed on targeted computers by the BackDoor.Farfli.122 trojan. It is written\nin C++ and supports 32-bit and 64-bit Microsoft Windows operating systems. This library\nrepresents a backdoor that receives commands from attackers and allows them to remotely\ncontrol the infected computers.\n\nOperating routine\n\nThe library is loaded into the memory by BackDoor.Farfli.122. It exports the mystart function\nthat contains the main malicious functionality. This library has a PcMain.exe name in the\nexporting table.\n\n\f79\n\n79\n\nmystart function\n\nUpon receiving control from the shellcode loaded by BackDoor.Farfli.122, BackDoor.Farfli.125\nperforms various checkups. At the beginning, the trojan determines if it has been launched\nthrough the Wow64 subsystem and runs in the 64-bit environment. With that, if the\nIsWow64Process function execution returns an error, it displays a MessageBox with the x1\ntext. Next, BackDoor.Farfli.125 checks whenever the module file name has \\explorer.exe or\n\\internet explorer\\iexplore.exe</\n\nIf the backdoor runs in the context of the explorer.exe or IE process, it creates a hidden\ndirectory C:\\Microsoft\\TEMP\\Networks\\Connections\\Pbksn. Next, it verifies the\nmodule file name has a nvdiassnx string and tries to create a nvdiassnx folder in the\ndirectory it created earlier. If the trojan does not run from the nvdiassnx folder, it creates a file\nwith the RasTls<rnd>.exe name, where <rnd> represents a result of the GetTickCount\nfunction execution in the %08x format.\n\nIf the backdoor does not run in the context of the explorer.exe or IE process, it creates a C:\n\\Microsoft\\TEMP\\Networks\\Connections\\Pbksn\\nvdiassnx\\ky3log.dat file.\n\nAnchoring in the system\n\nUpon completing the initial preparation, the trojan checks if it runs in the context of the\nexplorer.exe or iexplore.exe process and if it was launched from the ...\\nvdiassnx\ndirectory.\n\n\u00b7 Operation in the context of the explore.exe or iexplore.exe process\n\nIf it runs in the context of the explorer.exe or iexplore.exe process, BackDoor.Farfli.125\nimmediately proceeds to its main malicious functionality. Otherwise, it verifies if it runs from the\n...\\nvdiassnx.\n\n\u00b7 Operation from the nvdiassnx directory\n\nIf the trojan was not launched from the ...\\\\nvdiassnx directory, it checks if the Global\\\n\\vssafuyuhdw332kjgtts1 event is present. If it exists, it terminates its process to ensure\nonly one copy of the trojan is launched. Otherwise, the trojan moves its components\u2014\nRasTls.exe, RasTls.dll and RasTls.dat\u2014to the C:\n\\Microsoft\\TEMP\\Networks\\Connections\\Pbksn\\nvdiassnx directory.\n\nIts further actions depend on the operating system version.\n\nIf BackDoor.Farfli.125 is running on Windows Vista and later Windows versions, the RasTls.exe\nmodule is set to autorun through the\n[HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnce] registry\n\n\f80\n\n80\n\nkey. Next, the trojan launches the iexplore.exe process with the\nCREATE_SUSPENDED flag, reads the shellcode from the RasTls.dat file, decrypts and injects it\ninto the iexplore.exe process, launched earlier, continuously using the VirtualAllocEx,\nWriteProcessMemory and ResumeThread functions. Herewith, it patches the entry point of\nthe process so the injected shellcode will receive control.\n\nIf BackDoor.Farfli.125 is running on a Windows version below Windows Vista and not through\nthe Wow64 subsystem, the trojan performs the same actions but injects the shellcode into the\nexplorer.exe process.\n\nIf the trojan is launched from the ...\\\\nvdiassnx directory, it performs the same actions\ndescribed earlier, excluding the Global\\\\vssafuyuhdw332kjgtts1 event check and moving\nfiles.\n\nMain functionality\n\nBackDoor.Farfli.125 creates a Global\\\\vssafuyuhdw332kjgtts1 event and receives the\naddresses of the API functions it needs. To do so, it searches for the signature of two\nconsecutive DWORD 0x8776633 and 0x18776655, starting from the trojan module base. This\nsignature is located at the beginning of the last section of the module itself. With that, the\nsection is nameless and contains various service strings, including the API functions names, as\nwell as a compressed trojan configuration.\n\n\fThe section contains three blocks of compressed data. The first block has the strings, the second\nblock has the trojan configuration, and the third block remains empty. Herewith, the second and\nthird blocks are located at the end of the section:\n\n81\n\n81\n\nAfter the decompression, the second block represents a list of numbered strings listed below:\n\nPS_10001=ole32.dll\n\nPS_10002=CoCreateGuid\n\nPS_10003=Shlwapi.dll\n\nPS_10004=SHDeleteKeyA\n\nPS_10005=wininet.dll\n\nPS_10006=InternetOpenA\n\nPS_10007=InternetOpenUrlA\n\nPS_10008=InternetCloseHandle\n\nPS_10009=HttpQueryInfoA\n\nPS_10010=InternetReadFile\n\nPS_10011=IMM32.dll\n\nPS_10012=ImmReleaseContext\n\nPS_10013=ImmGetCompositionStringW\n\nPS_10014=ImmGetCompositionStringA\n\nPS_10015=ImmGetContext\n\nPS_10016=ADVAPI32.dll\n\nPS_10017=GetUserNameW\n\nPS_10018=RegCloseKey\n\nPS_10019=RegOpenKeyExA\n\nPS_10020=RegCreateKeyExA\n\n\f82\n\n82\n\nPS_10021=RegSetValueExA\n\nPS_10022=RegDeleteValueA\n\nPS_10023=AdjustTokenPrivileges\n\nPS_10024=LookupPrivilegeValueA\n\nPS_10025=OpenProcessToken\n\nPS_10026=StartServiceA\n\nPS_10027=CloseServiceHandle\n\nPS_10028=OpenServiceA\n\nPS_10029=OpenSCManagerA\n\nPS_10030=CreateServiceA\n\nPS_10031=DeleteService\n\nPS_10032=RegisterServiceCtrlHandlerA\n\nPS_10033=SetServiceStatus\n\nPS_10034=Shell32.dll\n\nPS_10035=ShellExecuteExW\n\nPS_10036=ShellExecuteA\n\nPS_10037=User32.dll\n\nPS_10038=PostThreadMessageA\n\nPS_10039=wsprintfW\n\nPS_10040=CharLowerA\n\nPS_10041=GetMessageA\n\nPS_10042=PostMessageA\n\nPS_10043=CallNextHookEx\n\nPS_10044=GetForegroundWindow\n\nPS_10045=GetWindowTextA\n\nPS_10046=GetWindowThreadProcessId\n\nPS_10047=GetActiveWindow\n\nPS_10048=UnhookWindowsHookEx\n\nPS_10049=SetWindowsHookExW\n\nPS_10050=SetThreadDesktop\n\nPS_10051=OpenDesktopA\n\nPS_10052=GetThreadDesktop\n\nPS_10053=Kernel32.dll\n\nPS_10054=GetModuleHandleA\n\nPS_10055=DeviceIoControl\n\n\f83\n\n83\n\nPS_10056=CreateMutexA\n\nPS_10057=OpenMutexA\n\nPS_10058=ReleaseMutex\n\nPS_10059=CreateEventA\n\nPS_10060=OpenEventA\n\nPS_10061=SetEvent\n\nPS_10062=WaitForSingleObject\n\nPS_10063=GetLocalTime\n\nPS_10064=GetTickCount\n\nPS_10065=lstrcpyW\n\nPS_10066=lstrcatW\n\nPS_10067=lstrlenW\n\nPS_10068=lstrcmpW\n\nPS_10069=CreateThread\n\nPS_10070=GetSystemDirectoryA\n\nPS_10071=GetCurrentProcess\n\nPS_10072=OpenProcess\n\nPS_10073=MultiByteToWideChar\n\nPS_10074=WideCharToMultiByte\n\nPS_10075=Sleep\n\nPS_10076=CreateFileA\n\nPS_10077=DeleteFileA\n\nPS_10078=WriteFile\n\nPS_10079=ReadFile\n\nPS_10080=CopyFileA\n\nPS_10081=SetFilePointer\n\nPS_10082=CloseHandle\n\nPS_10083=GetModuleFileNameA\n\nPS_10084=GetVersionExA\n\nPS_10085=GetVersion\n\nPS_10086=GetCurrentThreadId\n\nPS_10087=GetFileSize\n\nPS_10088=GetTempPathA\n\nPS_10089=Psapi.dll\n\nPS_10090=GetModuleFileNameExA\n\n\f84\n\n84\n\nPS_10091=EnumProcesses\n\nPS_10092=strstr\n\nPS_10093=strchr\n\nPS_10094=strcat\n\nPS_10095=atoi\n\nPS_10096=srand\n\nPS_10097=rand\n\nPS_10098=time\n\nPS_10099=strrchr\n\nPS_10100=strlen\n\nPS_10101=strcpy\n\nPS_10102=strcmp\n\nPS_10103=memset\n\nPS_10104=MSVCRT.dll\n\nPS_10105=sprintf\n\nPS_10106=memcmp\n\nPS_10107=memcpy\n\nPS_10108=GetLogicalDriveStringsA\n\nPS_10109=CreateDirectoryA\n\nPS_10110=MoveFileA\n\nPS_10111=GetVolumeInformationA\n\nPS_10112=FindNextFileA\n\nPS_10113=FindFirstFileA\n\nPS_10114=FindClose\n\nPS_10115=GetDriveTypeA\n\nPS_10116=GetFileAttributesExA\n\nPS_10117=GetLastError\n\nPS_10118=SHFileOperationA\n\nPS_10119=GetCurrentProcessId\n\nPS_10120=OpenInputDesktop\n\nPS_10121=CreateToolhelp32Snapshot\n\nPS_10122=Process32First\n\nPS_10123=Process32Next\n\nPS_10124=RegEnumValueA\n\nPS_10125=EnumWindows\n\n\f85\n\n85\n\nPS_10126=RegEnumKeyExA\n\nPS_10127=ControlService\n\nPS_10128=TerminateProcess\n\nPS_10129=ShowWindow\n\nPS_10130=BringWindowToTop\n\nPS_10131=UpdateWindow\n\nPS_10132=MessageBoxA\n\nPS_10133=Winmm.dll\n\nPS_10134=waveInOpen\n\nPS_10135=waveInClose\n\nPS_10136=waveInPrepareHeader\n\nPS_10137=waveInUnprepareHeader\n\nPS_10138=waveInAddBuffer\n\nPS_10139=waveInStart\n\nPS_10140=waveInStop\n\nPS_10141=GetFileSizeEx\n\nPS_10142=SetFilePointerEx\n\nPS_10143=RegQueryValueExA\n\nPS_10144=GetStdHandle\n\nPS_10145=CreatePipe\n\nPS_10146=SetStdHandle\n\nPS_10147=DuplicateHandle\n\nPS_10148=CreateProcessA\n\nPS_10149=GlobalFree\n\nPS_10150=GlobalAlloc\n\nPS_10151=GlobalLock\n\nPS_10152=ResetEvent\n\nPS_10153=Gdiplus.dll\n\nPS_10154=GdiplusStartup\n\nPS_10155=Ole32.dll\n\nPS_10156=CreateStreamOnHGlobal\n\nPS_10157=CoInitializeEx\n\nPS_10158=OpenWindowStationA\n\nPS_10159=SetProcessWindowStation\n\nPS_10160=ExitProcess\n\n\f86\n\n86\n\nPS_10161=Wtsapi32.dll\n\nPS_10162=WTSSendMessageA\n\nPS_10163=WTSQueryUserToken\n\nPS_10164=WTSGetActiveConsoleSessionId\n\nPS_10165=DuplicateTokenEx\n\nPS_10166=Userenv.dll\n\nPS_10167=CreateEnvironmentBlock\n\nPS_10168=DestroyEnvironmentBlock\n\nPS_10169=ExitWindowsEx\n\nPS_10170=CreateProcessAsUserA\n\nPS_10171=ImpersonateSelf\n\nPS_10172=OpenThreadToken\n\nPS_10173=GetComputerNameA\n\nPS_10174=GlobalMemoryStatusEx\n\nPS_10175=GetSystemInfo\n\nPS_10176=GetACP\n\nPS_10177=GetOEMCP\n\nPS_10178=Gdi32.dll\n\nPS_10179=DeleteDC\n\nPS_10180=CreateDCA\n\nPS_10181=DeleteObject\n\nPS_10182=BitBlt\n\nPS_10183=CreateCompatibleDC\n\nPS_10184=SelectObject\n\nPS_10185=GetDeviceCaps\n\nPS_10186=GetDIBits\n\nPS_10187=CreateCompatibleBitmap\n\nPS_10188=SetThreadAffinityMask\n\nPS_10189=SetCursorPos\n\nPS_10190=SendInput\n\nPS_10191=ChangeServiceConfigA\n\nPS_10192=EnumServicesStatusA\n\nPS_10193=QueryServiceConfigA\n\nPS_10194=GetCurrentThread\n\nPS_10195=GetDiskFreeSpaceExA\n\n\f87\n\n87\n\nPS_10196=GetEnvironmentVariableA\n\nPS_10197=%08x.exe\n\nPS_10198=ServiceMain\n\nPS_10199=%s.dll\n\nPS_10200=TWO\n\nPS_10201=runas\n\nPS_10202=%scom.exe\n\nPS_10203=http://%s\n\nPS_10204=%08x.txt\n\nPS_10205=200\n\nPS_10206=\\svchost.exe -k\n\nPS_10207=%SystemRoot%\\System32\n\nPS_10208=%ProgramFiles%\\Common Files\\Microsoft Shared\n\nPS_10209=\\Services\\\n\nPS_10210=ControlSet003\n\nPS_10211=ControlSet002\n\nPS_10212=ControlSet001\n\nPS_10213=CurrentControlSet\n\nPS_10214=SYSTEM\\\n\nPS_10215=%s%s%s%s\\Parameters\n\nPS_10216=%s%s%s%s\n\nPS_10217=SeDebugPrivilege\n\nPS_10218=ravmond.exe\n\nPS_10219=rstray.exe\n\nPS_10220=360tray.exe\n\nPS_10221=ServiceDll\n\nPS_10222=Start\n\nPS_10223=Description\n\nPS_10224=SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost\n\nPS_10225=Windows Registry Editor Version 5.00\n\nPS_10226=[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Messenger\\\nParameters]\n\nPS_10227=", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet002\\Services\\Messenger\\Pa\nrameters]\n\n", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Messenger]\n\nPS_10292=", "HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run] key\n\n\u00b7 2\u2014the trojan forms the file %TEMP%\\<config.name>reg.reg and imports it\n\ninto the Windows registry\n\n\u00b7 other value\u2014the trojan deletes the <config.name> value from the\n\n[HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SvcHost] key\n\nThe reg.reg file formed by the backdoor has the following contents:\n\nWindows Registry Editor Version 5.00\n\n[HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Messenger]\n\n\f97\n\n97\n\n", "HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet002\\Services\\Messenger]\n\n"], "URLs": ["http://%s", "http://wdprs[.]internic[.]net/", "http://www.1api.net", "http://www.icann.org/epp"], "weight": 0.0}