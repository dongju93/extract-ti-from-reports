{"rule_id": 953, "name": "Bitdefender-Business-2017-WhitePaper-PZCHAO-crea2452-en-EN-GenericUse", "description": "-", "references": [], "File_Names": ["mimidrv.sys", "pass.bat", "install.asp", "win32shell.bat", "centuriosa.info", "tnew.bat", "zll855.no", "mimilib.dll", "9527.exe", "8060.exe", "new.bat", "wmiapsrv.exe", "up.bat", "pzchao.com", "zl855.no", "Oracle.exe", "360.bat", "zll855.gicp", "Win32shell.bat", "shell.bat"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": ["da4f90ad50df05899bbcb7e9359da4541f989c57602ad2705eef1d561c99cfc3", "698db26e6f87e19dae93034fb9e1543e8675135e6da85120de20ab6ebbe9f30b", "a1ea427062bc9c497ed0660845c7e395500bf3d7f2f64c2a3f1137437d8ab6c9", "2234a0ecb268aa8a855b23ad0c12cf39d1a18768c857ff6b8cd7af5e2f694525", "7b33a8c1184683f94598b4bb558f5050d5512b2cb66efa27d58322b97cf5569c", "ba2ffb1ff4003db3fdf3cf48b38b3ba6c447844b4399781cbb930fc9e11c23a4", "81141007975251abadaa4c055f79999c0e61fb95724bfa4f98a91ced00534ebb", "d2591f4fe1c65e687c69cac007af27d24f656af5bc8eb8ff20064264fb71d56b", "fb602ff538f71c04b2c8271514b3923d72543ed92e717c046884f3eb1317e2af", "d26fb51be2d3db37fa37ba542365f616a1cecc3e4e0287e7a29a3a5a2dce7083", "19841507ccf88d717a09bbba06a36644f1a555d1a53a11a2dea384bfccb9749f", "5a28683ee05c11670e17639f4eb99609ac3d665c45d50746e5898d9efdfd4a83", "718f9ca7a38a15b0d34a29a0b8b50c88bea9d67501ca6e2ae96fbc79edecdb9d", "2b98d9c0d30d09e791ad4dc981a17fa3e48fda7f1dfd68fd037946531e2cf718", "0ccc0fec930917707cf8573f4c5d0845197b95e300f8692757060910e50a1de6", "d7c0d5f399cf3f6738373aa72a5624352ce9eec1d2420c2aa91f73c565b721fd", "97b69d8e0cf55708309c37d332137d10242a201c0dd93d6a513e5038dc139f57", "dca2e23324f7a740d431eef0083c0b795c63fb2f4ae4bc55bc236b12ea0510e2"], "Registry_Entries": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\u201d registry key.\n\nIt also registers itself as a system service by adding the following registry keys:\n\n\u201cHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Wsfbpy sahblabg\u201d\n\n\u201cHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Maobeu xqiyes\u201d\n\n\u201cHKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Wsfbpy sahblabg\n\nReleiceName = \u201eOracle.exe\u201d\u201d\n\n\u201cHKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Wsfbpy sahblabg\n[8]\n\n\fWhitepaper\n\nReleiceName = \u201eMaobeu xqiyes\u201d\u201d\n\n\u201cHKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Maobeu xqiyes\n\nConnectGroup = \u201e\u201d\u201d\n\n\u201cHKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Services\\Maobeu xqiyes\n\nMarkTime = \u201e2017-10-19 17:21\u201d\n\nThese steps that the dropper follows to install the RAT server are contained within a try-except block, which makes any potential error \n\nterminate the execution of the application.\n\nAlong with the server binary dropped on the system, a Visual Basic script (\u201cjingtisanmenxiachuanxiao.vbs\u201d) that is used for process clean-\n\nup is also written in the current folder.\n\nThe server\u2019s binary  gets extracted from its own resource section and is written to the \\Windows\\System32 folder with the name of the \n\ninstalled service (\u201cOracle.exe\u201d).\n\nFinally, it calls StartService() to execute the second component , namely the RAT server that will have total control over the compromised \n\nhost from now on. It starts to communicate with the C2 servers and await instructions.\n\nUntil it checks in with its C2 controller, the RAT server searches for the encrypted con\ufb01 guration buffer containing the C&Cs that will get \n\ndecrypted using an AES key derived from a hardcoded string \u201cMother360\u201d. The C&C servers revealed after decryption are:\n\n rat.pzchao.com \u2013 used for sending instructions\n\ncenturiosa.info \u2013 used for sending instructions\n\n zl855.no-ip.info \u2013 used for requesting new con\ufb01 guration \ufb01 le of the C2 servers\n\nIt will then set a Windows station, \ufb01 rst by saving the current station by calling GetProcessWindowStation() then  creating a new one named \n\nwinsta0 by calling OpenWindowStation(). This happens because, according to MSDN, \u201cKernel objects are securable, while user objects \n\nand  GDI  objects  are  not.  Therefore,  in  order  to  provide  additional  security,  user  interface  objects  are  managed  using  window  stations \n\nand desktops, which themselves are securable objects.\u201d. It veri\ufb01 es if an instance of this service is already running by checking if a global \n\ninstance variable is not \u201cnull\u201d.\n\nNext, the RAT calls a function that uses the decrypted con\ufb01 guration data to populate the following \ufb01 elds: lpszHost, dwPort, lpszProxyHost, \n\ndwProxyPort, lpszProxyUser, lpszProxyPass. If the proxy variables exist and are being populated, the socket used to connect to the C2 \n\nRAT client gets con\ufb01 gured to use the PROXY_SOCKS con\ufb01 g. To determine how long the server has been connected to the client, the return \n\nvalue of the function GetTickCount() gets saved. The \ufb01 rst check-in to the client consists of a login token (TOKEN_LOGIN) that is followed \n\nby the data encapsulated in a \u201cLOGINDATA\u201d structure. The attacker uses this initial information as a \ufb01 ngerprint of the system, which proves \nextremely useful in determining the importance of the infected target and its potential role on the network.\n\n[9]\n\n \n\fWhitepaper\n\nOnce the attacker receives the \ufb01 ngerprint packet, it is decrypted and parsed. A new row is then added to the Connections tab grid of the \n\nclient interface and the details of the server host are populated in the appropriate \ufb01 elds. The number of active connections displayed on \n\nthe Connections tab grid status bar is incremented by 1.\n\nOnce the handshake is completed successfully with the client (C2), the RAT waits for commands. When a user of the C2 client needs to \n\nperform an action on a server from a compromised host, a Command packet containing the highlighted capabilities is created and sent. \n\nAnother trick that helps the malware fly below the radar is to change the C2 address to localhost when the attacker is not using the \n\ninfrastructure.\n\nThe network communication between the Gh0st RAT C2 client and a compromised host (server) is AES encrypted using the same string \n\n\u201cMother360\u201d to derive the decryption key. The packets passed between the two endpoints consist of two \ufb01 elds, but lack the plaintext \nheader that was typical of Gh0st RAT in previous versions:\n\n1. A four-byte integer that contains the size in bytes of the entire packet.\n\n2. A variable-sized packet that contains the packet payload AES encrypted. \n\nThe client sends small requests - packets containing commands - and the server responds to those commands with the requested data.\n\nThe two endpoints communicate using a series of pre-de\ufb01 ned commands. After the four byte integer that represents the size, the \ufb01 rst \n\nbyte of the packet payload contains an operation code. There are three types of codes: Commands, Tokens, and Modes. In the source \n\ncode, these codes are contained in a large enum in a header \ufb01 le.\n\n\uf0d8 \n\nCommand codes are sent by the attacker instructing the victim what to do. Examples:\n\nCOMMAND_WEBCAM\n\nCOMMAND_SCREEN_SPY\n\nCOMMAND_KEYBOARD\n\n[10]\n\n \n\fWhitepaper\n\nCOMMAND_AUDIO\n\nCOMMAND_SCREEN_BLOCK_INPUT\n\nCOMMAND_PSLIST\n\n\uf0d8 \n\nToken codes that are passed between the two endpoints to ensure a clear protocol of the data being sent. Examples:\n\nTOKEN_LOGIN\n\nTOKEN_DRIVE_LIST\n\nTOKEN_FILE_LIST\n\nTOKEN_FIRST_SCREEN\n\nTOKEN_AUDIO_DATA\n\n\uf0d8 \n\nMode codes are used to determine in what circumstances the actions will be executed and to respond to speci\ufb01 c \n\naction settings accordingly. Examples:\n\nTRANSFER_MODE_NORMAL\n\nTRANSFER_MODE_UPDATE\n\nTRANSFER_MODE_CANCEL\n\nAll these capabilities leave no doubt about the tool\u2019s initial purpose and reach into the compromised device. It allows a remote attacker to \n\ntake full control of the system, spy on the victims and ex\ufb01 ltrate con\ufb01 dential information easily.\n\n3. \n\nThe malware hosting infrastructure     \n\n3.1. The HTTP File Server\n\nWhile analyzing the download URL  down.pzchao.com , we realized that it runs on a HTTP \ufb01 le server and we managed to obtain a list of \n\nall \ufb01 les hosted on it, including meta-information such as last modi\ufb01 cation timestamps and number of downloads. A partial list of \ufb01 les \n\nand the number of hits can be seen in the image below:\n\n[11]\n\n\fWhitepaper\n\nAnother interesting aspect is that attackers often reset the download counters along with the IP Logs that keep a record of the targeted \n\nvictims of different campaigns. As shown in the hit log above, the most-downloaded malicious modules are the SFX installer and the \n\nGh0st RAT backdoor. The statistics also show that the number of hits (and implicitly, the number of victims) is constantly increasing, as \n\nper the graphic below: \n\n3.1.1. \n\nBackdoors\n\nThe malware server also hosts \ufb01 ve payloads that act as backdoors on the targeted systems. All \ufb01 ve payloads are versions of the Gh0st \n\nRAT  tool.  Two  of  these  (8060.exe  and  8555-.exe)  communicate  with  the  same  main  C&C  server  rat.pzchao.com.  What  differs  is  that \n\nthe  packets  exchanged  between  the  client  and  the  server  begin  with  a  plaintext  header  \u201cSpidern\u201d,  followed  by  the  data  packet  that  is \n\ncompressed using zlib. \n\nThe other two samples (9527.exe and 8555++.exe) communicate with other two servers that are part of the infrastructure dll.pzchao.\n\ncom ; 455.pzchao.com.  These versions will download the RAT server from dll.pzchao.com.\n\n[12]\n\n\fWhitepaper\n\n3.1.2.  YPrat \n\nThe download server also contains a Remote Access Trojan developed in Python (both client and server). This server is used to listen \n\nfor connections on the same IP but on a different port (444). Our analysis revealed that it has extra features, such as downloading and \n\nuploading \ufb01 les on remote infected systems, as well as information harvesting. Judging by the small number of downloads, we presume \n\nthat this payload is currently undergoing testing.\n\n3.1.3 \n\nPort Scanning Tools\n\nAnother category of tools hosted on the same server is port scanning applications, complemented by a set of IP logs passed as an \n\nargument to the scanning tools. These logs feature a range of subnets, mainly located in Asia. They are contained within the IP logs, \n\nwhich means that, prior to an infection, the attackers \ufb01 rst search for vulnerabilities to exploit on the targeted systems.\n\nConclusions\n\nEven though the tools used in this particular attack are a few years old, they are battle-tested and more than suitable for future \n\nattacks. The ability to download most of these for free on certain underground hacking forums decreases the cost of attack without \n\ncompromising on stealth or effectiveness. Usually, threat actors are constantly modifying these tools to make them suitable for their \n\ntargets they have in their crosshairs: governments or strategic institutions such as education, telecommunication and so on. \n\nAs described in this paper, this remote access Torjan\u2019s espionage capabilities and extensive intelligence harvesting from victims turns it \n\ninto an extremely powerful tool that is very dif\ufb01 cult to identify. The C&C rotation during the Trojan\u2019s lifecycle also helps evade detection at \n\nthe network level, while the impersonation of legitimate, known applications takes care of the rest.\n\n[13]\n\n\fWhitepaper\n\n4. \n\nIndicators of compromise (IoC)\n\n718f9ca7a38a15b0d34a29a0b8b50c88bea9d67501ca6e2ae96fbc79edecdb9d\n\n2b98d9c0d30d09e791ad4dc981a17fa3e48fda7f1dfd68fd037946531e2cf718\n\nd26fb51be2d3db37fa37ba542365f616a1cecc3e4e0287e7a29a3a5a2dce7083\n\nd2591f4fe1c65e687c69cac007af27d24f656af5bc8eb8ff20064264fb71d56b\n\nda4f90ad50df05899bbcb7e9359da4541f989c57602ad2705eef1d561c99cfc3\n\ndca2e23324f7a740d431eef0083c0b795c63fb2f4ae4bc55bc236b12ea0510e2\n\nd26fb51be2d3db37fa37ba542365f616a1cecc3e4e0287e7a29a3a5a2dce7083\n\n2234a0ecb268aa8a855b23ad0c12cf39d1a18768c857ff6b8cd7af5e2f694525\n\nfb602ff538f71c04b2c8271514b3923d72543ed92e717c046884f3eb1317e2af\n\n97b69d8e0cf55708309c37d332137d10242a201c0dd93d6a513e5038dc139f57\n\n19841507ccf88d717a09bbba06a36644f1a555d1a53a11a2dea384bfccb9749f\n\n0ccc0fec930917707cf8573f4c5d0845197b95e300f8692757060910e50a1de6\n\n698db26e6f87e19dae93034fb9e1543e8675135e6da85120de20ab6ebbe9f30b\n\na1ea427062bc9c497ed0660845c7e395500bf3d7f2f64c2a3f1137437d8ab6c9\n\nd7c0d5f399cf3f6738373aa72a5624352ce9eec1d2420c2aa91f73c565b721fd\n\n5a28683ee05c11670e17639f4eb99609ac3d665c45d50746e5898d9efdfd4a83\n\nba2ffb1ff4003db3fdf3cf48b38b3ba6c447844b4399781cbb930fc9e11c23a4\n\n7b33a8c1184683f94598b4bb558f5050d5512b2cb66efa27d58322b97cf5569c\n\n81141007975251abadaa4c055f79999c0e61fb95724bfa4f98a91ced00534ebb\n\ndown.pzchao.com\n\nup.pzchao.com\n\ndll.pzchao.com\n\npzchao.com.445\n\nrat.pzchao.com\n\ncenturiosa.info\n\nzll855.no-ip.info\n\nzll855.gicp.net\n\nAuthor: Ivona Alexandra Chili \u2013 Forensics Engineer, Cyber Threat Intelligence Lab\n\n[14]\n\n\fNotes\n\n\fN\nE\n_\nn\ne\n-\n2\n5\n4\n2\na\ne\nr\nc\n-\nO\nA\nH\nC\nZ\nP\n-\nr\ne\np\na\nP\ne\nt\ni\nh\nW\n-\n7\n1\n0\n2\n-\ns\ns\ne\nn\ns\nu\nB\n-\nr\ne\nd\nn\ne\nf\ne\nd\nt\ni\nB\n\ni\n\n2\n5\n4\n2\n-\nA\nE\nR\nC\n\n:\n\n.\n\n.\n\n#\nk\nT\n-\n8\n1\n0\n2\n1\n0\nb\ne\nF\n-\ns\ns\ne\nn\ns\nu\nB\nD\nB\n\n-\n\ni\n\nBitdefender is a global security technology company that provides cutting edge end-to-end cyber security solutions and advanced threat protection to more than 500 million users in more than \n150 countries. Since 2001, Bitdefender has consistently produced award-winning business and consumer security technology, and is a provider of choice in both hybrid infrastructure security \nand endpoint protection. Through R&D, alliances and partnerships, Bitdefender is trusted to be ahead and deliver robust security you can rely on. More information is available at http://www.\nbitdefender.com.\n\n\u00a9 2018 Bitdefender. All rights reserved. All trademarks, trade names, and products referenced herein are property of their respective owners.\nFOR MORE INFORMATION VISIT: bitdefender.com/business\n\n\f"], "URLs": [], "weight": 0.0}