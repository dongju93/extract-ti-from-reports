{"rule_id": 836, "name": "Eset-Turla-Outlook-Backdoor", "description": "-", "references": [], "File_Names": ["sueddeutsche.de", "Uroburos_EN.pdf", "example.net", "TBPlugin.INI", "an_attachment.pdf", "scawrdot.db", "ritlabs.com", "Turla.AW", "flobcsnd.dat", "mapid.tlb", "last_presentation.pdf", "bb756926.aspx", "Turla.DA", "OLMAPI32.DLL", "gouv.fr"], "MD5_Hashes": [], "SHA1_Hashes": ["8A7E2399A61EC025C15D06ECDD9B7B37D6245EC2", "CF943895684C6FF8D1E922A76B71A188CFB371D7", "F992ABE8A67120667A01B88CD5BF11CA39D491A0", "851DFFA6CD611DC70C9A0D5B487FF00BC3853F30"], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\Software\\Classes\\CLSID\\{49CBB1C7-97D1-485A-9EC1-A26065633066} =\nMail Plugin\nHKCU\\Software\\Classes\\CLSID\\{49CBB1C7-97D1-485A-9EC1-A26065633066}\\InprocServer32  = \n[Path to the backdoor DLL]\nHKCU\\Software\\Classes\\CLSID\\{49CBB1C7-97D1-485A-9EC1-A26065633066}\\InprocServer32\\\nThreadingModel =\n Apartment\nHKCU\\Software\\Classes\\CLSID\\{84DA0A92-25E0-11D3-B9F7-00C04F4C8F5D}\\TreatAs = \n{49CBB1C7-97D1-485A-9EC1-A26065633066}\n\n{84DA0A92-25E0-11D3-B9F7-00C04F4C8F5D} is the hijacked CLSID. It corresponds to the  \n\u201cOutlook Protocol Manager\u201d and theoretically loads the legitimate Outlook DLL OLMAPI32.DLL.  \n{49CBB1C7-97D1-485A-9EC1-A26065633066} is not associated with any known software.  \nThis CLSID value is arbitrary and is only used as a placeholder for the COM redirection.\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor \n\f6\n\nOnce the modification is made, the backdoor DLL will be loaded every time Outlook loads this  \n\nCOM object. Based on our observations, it seems to happen during the launch of Outlook.\n\nThis COM redirection does not need administrative privileges as it only applies for the current user. \n\nSome protections exist to prevent these kinds of malicious redirections. According to MSDN [9]:\n\nBeginning with Windows Vista\u00ae and Windows Server\u00ae 2008, if the \n\nintegrity level of a process is higher than Medium, the COM runtime \n\nignores per-user COM configuration and accesses only per-machine \n\nCOM configuration.\n\nHowever, the Outlook process runs at medium integrity level, as shown in Figure 4.  \n\nThus, it is not protected against per-user COM redirections.\n\nFigure 4 // Integrity level of the Outlook process\n\nFinally, using COM hijacking allows the backdoor to remain stealthy, as the path to the backdoor,  \nC:\\Users\\User\\Documents\\mapid.tlb in this example, is not displayed in the plugin list as shown  \nin Figure 5.\n\nFigure 5 // Outlook list of plugins \u2013 mapid.tlb is not displayed\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f7\n\nEven if the malware is not displayed in the Add-Ins list, it uses a standard Microsoft API,  \n\ncalled MAPI (Messaging Application Programming Interface), to interact with Outlook.\n\nThe Bat!\n\nAs explained in the timeline in Section 2, recent versions of the backdoor no longer include the code  \n\nto register a The Bat! plugin. However, all the code for managing mailboxes and emails is still there. \n\nThus, it could be manually setup if needed.\n\nTo register as a plugin for The Bat!, the malware was modifying the file %appdata%\\The Bat!\\Mail\\\nTBPlugin.INI. This is the legitimate method to register a plugin for The Bat! and some plugins such  \nas anti-spam plugins also rely on it.\n\nAfter registration, each time The Bat! is launched, the backdoor DLL is called. Figure 6 shows  \n\nthat the DLL implements some exports needed for the plugins.\n\nFigure 6 // Standard exports for a The Bat! plugin\n\n3.2  Interaction with the mail client\n\nInteraction with the mail client varies according to which client is targeted.\n\nMicrosoft Outlook\n\nMicrosoft maintains an API, the Messaging Application Programming Interface (MAPI), which allows \n\napplications to interface with Outlook [10]. This Turla backdoor leverages this API to access and manage \n\nthe mailbox(es) of the person(s) using the compromised system.\n\nFirst, it connects to the messaging system using MAPILogonEx as shown in Figure 7. \n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f8\n\nFigure 7 // MAPI logon\n\nThe second parameter (lpszProfileName) is empty and the flag MAPI_USE_DEFAULT is set. According  \nto the documentation:\n\nMAPI_USE_DEFAULT\n\nThe messaging subsystem should substitute the profile name  \nof the default profile for the  lpszProfileName parameter. The MAPI_\nEXPLICIT_PROFILE flag is ignored unless lpszProfileName  \nis NULL or empty.\n\nOn the contrary, the flag MAPI_NEW_SESSION is not set. According to the documentation:\n\nMAPI_NEW_SESSION\n\nThe lpszProfileName parameter is ignored if there is an existing \nprevious session that called MapiLogonEx with the MAPI_ALLOW_\nOTHERS flag set and if the flag MAPI_NEW_SESSION is not set.\n\nWe believe Outlook opens the default session with the flag MAPI_ALLOW_OTHERS. Thus, the backdoor \nwill use this previously opened session to gain access to the default mailbox profile. This explains why \n\nthere is no prompt for a profile name and password when the backdoor plugin initializes. \n\nHaving done so, it has access to the full mailbox and can easily manage it using other MAPI functions.  \n\nIt will iterate through the various message stores, parse the emails and add callbacks on the inbox(es) \n\nand outbox(es). The log file summarizes this process:\n\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n ========= Analyzing msg store ( 1 / 1 ) =========\nService name:MSUPST MS\nPst path:C:\\Users\\[username]\\Documents\\Outlook Files\\[email address].pst\n    Wait main window before open current store\n     Loop count = 46\nThis is default message store\n PUSH store to list\n >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n _____________ FOLDERS _____________\n Setting sink on folders in 1 stores.\n ========Process msg store ( 1 / 1 ) =========\n Account: [email address]\n Successfull set sink on Outbox folder of current store.\nSuccessfull set sink on Inbox folder of current store.\n\nFigure 8 // Log file (Untouched except for the redacted username and email address)\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f9\n\nIt sets up callbacks on every inbox and outbox folder, using the function HrAllocAdviseSink,  \nas shown in Figure 9. \n\nFigure 9 // Callback registration on the outbox folder\n\nInbox callback\n\nThe inbox callback first logs metadata about the incoming email. This includes the sender, receiver(s), \n\nsubject, and attachment name. An example is shown below:\n\nRECIVE ->{\n  From: sender@example.com\n  To:   receiver@example.net\n  Cc:  \n  Bcc: \n  Subj: Mail subject\n  Att:  an_attachment.pdf\n}\n\nFigure 10 // Log for a new incoming email (English mistakes are those of the developer)\n\nIt then parses the email, and its attachment(s), to check if they contain commands from the attacker. \n\nThis functionality will be studied in detail in Section 3.3.\n\nFinally, it intercepts Non Delivery Report (NDR) emails by checking if the incoming email contains  \n\nthe operator\u2019s email address. Consequently, any email containing the operator\u2019s email address will  \n\nalso be discarded. This might cause a problem if victims become suspicious and contact their IT support, \n\nas the victims will not be able to see the replies.\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f10\n\nOutbox callback\n\nSimilar to the inbox callback, the outbox callback logs metadata of each outgoing email. It generates  \n\nthe same kind of log:\n\n21:57:56\nSEND <-{\n  From:\n  To:   recipient@example.com\n  Cc:\n  Bcc:\n  Subj: My title\n  Att:  [1] \u201clast_presentation.pdf\u201d\n}\n21:57:56 Sending data message\n21:57:56 Message ENTRYID: [Message ENTRYID]\n21:57:56 Data message was send. To: [redacted]@gmx[.]com From:  Subj: My title\n21:57:56 Set last time.\n21:57:56 Spawned thread for cleaning up outgoing messages (id 2848)\n21:58:34 Ending work, client: Outlook\n21:58:34 Number of messages to remove: 1\n21:58:34 Message ENTRYID: [Message ENTRYID]\n21:58:34 DeleteMessages executed successfully.\n21:58:34 Number of not removed messages: 0\n\nFigure 11 // Log for outgoing emails. The operator email address has been partially redacted.\n\nHowever, you may notice that it also forwards each outgoing email to the attacker\u2019s email address, \n[redacted]@gmx[.]com. GMX is a popular, free email service. Both characteristics explain why the \nattackers chose to register their email there, as it is very unlikely that an organization would routinely \n\nblock the gmx.com domain.\n\nThis email address is hardcoded in the sample we studied, as shown in Figure 12, but it can  \n\nbe updated via one of the backdoor functions. They seem to register at least one email address  \nper targeted organization using the format firstname.lastname@gmx[.]com, by impersonating  \nthe name of a real employee. This maintains stealth as it might be difficult to differentiate the illicit \n\naddress from the real private email address of the victim. In addition, the address was unreachable  \n\nwhen we analyzed the sample in June 2018.\n\nFigure 12 // Hardcoded operator email address\n\nAt regular intervals, the backdoor sends a report to the attacker\u2019s email address. It contains some \n\nunique identifiers such as the MAC address, the full log file and the command results, if any. Then,  \n\nit encrypts the data, using MISTY1 as described later in Section 3.3.2.2, and constructs a valid PDF \n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f11\n\ncontaining the encrypted content. Just before the encrypted blob of data, the document contains  \n\na white 1x1 jpeg image, which is hardcoded in the malware. It allows them to create a valid PDF  \n\ndocument which, when opened, display a single blank page only.\n\nFinally, it attaches the PDF and sends the email to the attacker\u2019s address. Figure 13 is an example  \n\nof a PDF created by the backdoor. \n\nFigure 13 // Beginning of the PDF generated by the backdoor for exfiltration purposes\n\nThis report is sent by the outbox callback function, meaning the email will be sent at the same time  \n\nas the user sends a legitimate email. In this way, it prevents the backdoor from sending exfiltration \n\nemails at unusual times, which could facilitate detection. This is a very stealthy Command & Control \n\nmechanism that can be hard to catch in the wild.\n\nHiding malicious behavior from the user\n\nAs the backdoor works at the same time as the user is using their computer and Outlook, efforts are \n\nmade to hide the various malicious behaviors that could appear on the screen, such as incoming emails \n\nfrom the attacker.\n\nFirst, the backdoor always deletes all the emails that are sent to or received from the attacker. As shown \n\nin Figure 14, it is possible to see for a few seconds that a new message arrived but it is not displayed  \n\nin the mailbox.\n\nFigure 14 // Unread email\n\nSecond, it hooks the CreateWindowsEx function as shown in Figure 15 and Figure 16. It prevents  \nthe creation of windows of type NetUIHWND, the type of windows used by Outlook for its notifications \n\ndisplayed at the bottom right of the screen. \n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f12\n\nFigure 15 // Setup of CreateWindowsEx hook\n\nFigure 16 // CreateWindowsEx hook\n\nFigure 17 is an example of a NetUIHWND window that is normally triggered in Outlook when  \na new message is received. As a result of the CreateWindowEx hook, no notification is displayed  \nto the user when the attacker sends an email to the backdoor.\n\nFigure 17 // New message notification\n\nThe Bat!\n\nEven though the installation function to register a plugin for The Bat! is no longer present,  \n\nthere is legacy code that implements the same functionality as for Outlook, but using The Bat! API. \n\nAs shown in Figure 18, it uses a pipe to communicate with The Bat! in order to fetch users\u2019 information, \n\nread and send emails. However, all the remaining functions, such as those used to log emails or execute \n\ncommands, are completely identical to Outlook.\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f13\n\nFigure 18 // The Bat! pipe\n\n3.3  Backdoor\n\nAs detailed in the previous section, this malware is able to manipulate and exfiltrate emails. This  \n\nis also a full-featured backdoor controlled by email, and which can work independently of any other \n\nTurla component. Therefore, the backdoor does not need a full-internet connection and can work on \n\nany computer able to send external emails. This could be very useful in strictly controlled environments \n\nwith, for example, a highly filtered internet connection. Moreover, even if the attackers\u2019 email address \n\nis disabled, they can still regain control of it by sending a command from another address. This email \n\nwould be hidden from the user too, as it would contain commands interpreted by the backdoor.  \n\nThus, this malware is almost as resilient as a rootkit inspecting the incoming network traffic.\n\nPDF format\n\nIn early 2018, multiple media claimed that Turla operators used mail attachments to control  \n\ninfected machines. \n\nIt turns out that this information is accurate. In-depth analysis of the Turla Outlook backdoor  \n\nenabled us to ascertain how the commands are sent and interpreted by the malware.\n\nThe commands are sent via email messages with specially crafted PDF attachments. We were not able \n\nto capture any real sample of PDFs containing commands but they are probably valid PDF documents, \n\nas are the PDFs generated by the backdoor for exfiltration purposes.\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f14\n\nFrom the PDF documents, the backdoor is able to recover what attackers call a container in the logs. \n\nThis is a binary blob with a special format that contains encrypted commands for the backdoor. Figure \n\n19 shows the routine responsible for extracting this container. Technically, the attachment does not \n\nhave to be a valid PDF document. The only requirement is that it includes a container in the right format.\n\nFigure 19 // Extraction of the command container from the PDF\n\nThe container has a very complex structure, with many different checks. While it could have been \n\ndesigned to prevent communication errors, we believe the structure was mostly created to hamper  \n\nthe reverse engineering process. Figure 20 summarizes the structure of the container.\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f15\n\nContainer\n\nInstruction descriptor\n\nWORD 0xD8FF\n\n687 bytes\n\nDWORD XOR key\n\nHeader\n\nDWORD magic (0x00DEDEDE)\n\nDWORD len\n\nDWORD srand init value\n\nDWORD checksum \n(0x00FACADE XORed)\n\nDWORD container version\n\nBatch of instruction descriptors\n\nHeader\n\nDWORD crc32\n\nDWORD len\n\nDWORD number of\ninstruction descriptors\n\nInstruction descriptor\n\n...\n\nIV (256 bytes) \n\nBatch of instructions\n\nHeader\n\nWORD id\n\nDWORD len\n\nLEN data\n\nInstruction\n\nArgument\n\nHeader\n\nWORD cmd id\n\nDWORD unused\n\nDWORD unused\n\nWORD number of arguments\n\nWORD arg id\n\nDWORD len\n\nLEN arg data\n\nWORD number of instructions\n\nList of arguments\n\nInstruction\n\n...\n\nArgument\n\n...\n\nFigure 20 // Structure of the command container\n\nJust before the initialization vector, there is a list of instruction descriptors. The following table describes \n\nthe different ID values:\n\nTable 1. Container: Description of the headers\n\nID\n\nDescription\n\n2\n\n3\n\n4\n\n6\n\n7\n\nOffset of the decryption function (should be 0x11)\n\nDecryption key ID (should be 0x1)\n\nOffset of the decompression function (should be 0x11)\n\nSize of encrypted data\n\nCRC32 of encrypted data\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoorXORed with the XOR keyXORed with the container version as seedEncrypted with MISTY1 and then compressed with bzip2\f16\n\nThe descriptors of IDs 2 and 4 are used to retrieve the encryption and decompression functions,  \n\nas shown in Figure 21. However, only one encryption algorithm and one compression algorithm  \n\nare implemented in the malware. Thus, the only objective of these fields is to complicate the analysis  \n\nof the backdoor.\n\nFigure 21 // Decompression and decryption function offsets\n\nThe commands are in the last part of the structure. They are encrypted using MISTY1 and compressed \n\nwith bzip2. In the same PDF, many different commands can be included, and each command can have \n\nmultiple arguments.\n\nCryptography\n\nHere we describe the encryption algorithms used.\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f17\n\nXOR encryption\n\nA part of the container (starting at the first CRC32) is XORed with a byte stream generated  \nby a custom function. It takes a seed, which is passed to srand, to generate a second seed by calling \nrand. This second seed is used in the function, shown in Figure 22, as an argument, with the data to XOR:\n\nint __usercall F_bytestream_xor@<eax>(unsigned int len@<edx>, int ciphertext@<ecx>, \nunsigned int seed)\n{\n  unsigned int v3; // ebx\n  int v4; // esi\n  unsigned int v5; // edi\n  int result; // eax\n  unsigned int v7; // ecx\n  char *v8; // edx\n  unsigned int v9; // esi\n  byte key[512]; // [esp+Ch] [ebp-204h]\n  char *v11; // [esp+20Ch] [ebp-4h]\n\n  v3 = len;\n  v11 = (char *)ciphertext;\n  srand(seed);\n  v4 = 0;\n  v5 = 0;\n  do\n  {\n\nresult = rand();\n*(_DWORD *)&key[4 * v5++] = result;\n\n  }\n  while ( v5 < 128 );\n  v7 = 0;\n  if ( !v3 )\n\nreturn result;\n\n  v8 = v11;\n  do\n  {\n\nv8[v7] ^= key[v4];\nv9 = v4 + 1;\nresult = -(v9 < 512);\nv4 = result & v9;\n++v7;\n\n  }\n  while ( v7 < v3 );\n  return result;\n}\n\nFigure 22 // XOR stream function (HexRay decompilation output)\n\nMISTY1\n\nTurla developers like to use less common or modified encryption algorithms in their backdoors:\n\n\u2022  For Carbon and Snake, they used CAST-128 [11]\n\n\u2022  For Gazer, they used a custom implementation of RSA [12]\n\n\u2022  For Mosquito, they used Blum Blum Shub as the random number generator for their XOR byte  \n\nstream [13]\n\n\u2022  For the Uroburos rootkit, they used a modified version of ThreeFish [14]\n\nIn the Outlook backdoor, they implemented MISTY1 [15], which is a symmetric encryption algorithm \n\ncreated by cryptographers from Mitsubishi Electric in 1995. It has the following properties:\n\n\u2022  Is Symmetric\n\n\u2022  Has a 128-bit key\n\n\u2022  Employs two pre-computed tables: s7 (128 bytes) and s9 (2048 bytes)\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor \n   \n   \n   \n   \n   \n   \n   \n   \n\f18\n\n\u2022  Uses three functions: FL, FO, FI\n\n\u2022 FL performs some XOR operations between the entry byte and the expanded key\n\n\u2022 FO also performs XOR operations between the entry and the expanded key, but also uses FI\n\n\u2022 FI performs a non-linear substitution using s7 and s9\n\n\u2022  Operates on blocks of 64 bits\n\n\u2022  Perform Eight rounds (a round is a call to the function FO)\n\n\u2022  Uses a Feistel cipher\n\nFigure 23 // MISTY1\n\nFigure 24 // Eight rounds to encrypt a block\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f19\n\nHowever, Turla developers have slightly modified the algorithm:\n\n\u2022  They added two XOR operations in the FI function, as shown in Figure 25\n\n\u2022  The 128\u2013bit key is generated from two hardcoded 1024\u2013bit keys plus a 2048\u2013bit Initialization Vector.\n\n\u2022  They changed the s7 and s9 tables. This breaks all the tools that recognize cryptographic algorithms \n\nbased on the s-table values. Both the modified and original s-tables contain the same values.  \n\nThey were simply shuffled.\n\nFigure 25 // Comparison of FI functions (Left: Original, Right: Turla implementation)\n\nFunctions\n\nThe backdoor implements many different commands, from file exfiltration to execution of commands. \n\nTable 2 shows the different functions:\n\nTable 2.\n\nList of backdoor commands\n\nID\n\n0x10\n\n0x11\n\n0x12\n\n0x20\n\n0x21\n\n0x22\n\n0x23\n\n0x24\n\n0x25\n\n0x26\n\n0x27\n\n0x28\n\n0x29\n\n0x2A\n\nDescription\n\nNot implemented\n\nDisplay a MessageBox\n\nSleep\n\nDelete file\n\nGet file\n\nSet operator email address (overriding the initial one hardcoded in the DLL)\n\nPut file\n\nRun shell command\n\nCreate process\n\nDelete directory\n\nCreate directory\n\nChange timeout (interval for emails sent to the operator)\n\nRun Powershell command (Empire PSInject) \u2013 2018 version of the backdoor\n\nSet answer mode \u2013 2018 version of the backdoor\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f20\n\nFor function 0x29, Turla developers copied code from the Empire project PSInject [16]. It allows  \n\nthem to run PowerShell code in a special executable called a PowerShell Runner, without calling  \npowershell.exe. The main advantage is that the malware is still able to execute PowerShell  \ncommands even if powershell.exe is blocked on the compromised computer.\n\nFollowing thorough analysis of the malware, we were able to craft a PDF that can be successfully  \n\ninterpreted by the backdoor. Figure 26 shows the execution of a MessageBox and the launch of a \ncalculator (calc.exe) after Outlook received an email containing that PDF document. It demonstrates \nthat this backdoor, apparently designed to receive commands via PDF email attachments, is functional \n\nand may be controlled by anybody who understands its custom format.\n\nFigure 26 // Execution of the commands specified in the PDF document\n\n3.4  Further features\n\nApart from its backdoor functionality implemented as an email client plugin, this malware has a couple \n\nof features worth describing further.\n\nVirtual File System\n\nThis malware does not use any configuration file but it maintains a small virtual file system in the \nwindows registry under the key HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Settings\\\nZonePolicy\\. Other Turla backdoors, such as Gazer [12], also keep a VFS in the Windows registry.  \nWe were able to identify the meaning some of the registry values, as shown in Table 3.\n\nTable 3.\n\nVirtual File System\n\nRegistry value name Description\n\n0\n\n1\n\n2\n\n9\n\n10\n\n11\n\n14\n\nA timestamp\n\nTemporary operator email address\n\nTimestamp (last email sent to operator)\n\nNumber of emails to clean.\n\nTime last command container processed\n\nExfiltration enabled\n\nAttachment filename of the last received messages\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f21\n\nLogs\n\nAs mentioned before, the program maintains a log that is regularly exfiltrated to the operator via  \na crafted PDF document attached to an email message. It is stored in %appdata%/Microsoft/Windows/ \nscawrdot.db and encrypted using a hardcoded 512-byte XOR key. The log file is cleaned each time  \nit is exfiltrated to the attackers. Thus, while performing forensic analysis, it might not be possible  \n\nto see all the past activities of the backdoor, but only the most recent. \n\nThe logs are particularly verbose and may allow the Turla operators to monitor in detail the activities  \n\nof the backdoor. Figure 27 is an example of a decrypted log.\n\nFigure 27 // Decrypted log file\n\n4. CONCLUSION\n\nThis report shows that the Turla developers never run out of ideas when it comes to developing stealthy \n\nbackdoors. To our knowledge, Turla is the only espionage group that currently uses a backdoor entirely \n\ncontrolled by emails, and more specifically via PDF attachments.\n\nWhile the Turla Backdoor is not the first backdoor that uses the real mailbox of the victim to receive \n\ncommands and exfiltrate data, it is the first publicly known backdoor using a standard API (MAPI) to in-\n\nteract with Microsoft Outlook. This is a substantial improvement over an older mail-controlled backdoor \n\nwe analyzed [17] which was using Outlook Express, just reading inbox files and writing in outbox ones. \n\nIn contrast, the Turla backdoor works even with recent versions of Outlook.\n\nThanks to its ability to be controlled by seemingly legitimate communication to and from the infected \n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f22\n\nmachine, and its non-dependence on any particular email address, the Turla backdoor is extremely \n\nstealthy and resilient. In this sense, this Outlook backdoor is similar to rootkits, such as Uroburos,  \n\nthat receive their commands from incoming network traffic.\n\nOur research shows that compromised organizations are at risk of not only being spied on by the Turla \n\ngroup who planted the backdoor, but also by other attackers. The backdoor simply executes any com-\n\nmands it receives, without being able to recognize the operator. Thus, it is possible that other attackers \n\nhave already reverse-engineered the backdoor and figured out how to control it - and are also spying \n\non victims using the backdoor. \n\nGiven the severity of this threat, we\u2019ve decided to document the format of PDF documents  \n\nthat can control the Turla backdoor to help defenders understand, monitor and mitigate its activity. \n\nESET researchers will continue to monitor Turla developments to help defenders to protect  \n\ntheir networks.\n\nIndicators of Compromise can also be found on GitHub. For any inquiries, or to make sample submissions related  \n\nto the subject, contact us at: threatintel@eset.com.\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f23\n\nREFERENCES\n\n  1  B. KNOWLTON, \u201cMilitary Computer Attack Confirmed,\u201d New York Times, 25 08 2010. [Online]. Available:  \nhttps://www.nytimes.com/2010/08/26/technology/26cyber.html?_r=1&ref=technology. [Accessed 09 04 2018].\n\n  2 \n\n\u201cRussian group behind 2013 Foreign Ministry hack,\u201d YLE, 13 01 2016. [Online]. Available:  \nhttps://yle.fi/uutiset/osasto/news/russian_group_behind_2013_foreign_ministry_hack/8591548.\n\n  3  MELANI, \u201c Technical Report about the Malware used in the Cyberespionage against RUAG,\u201d 23 05 2016. \n\n[Online]. Available: https://www.melani.admin.ch/melani/en/home/dokumentation/reports/technical-reports/technical-\nreport_apt_case_ruag.html.\n\n  4  P. Oltermann, \u201cGerman government intranet under \u2018ongoing attack\u2019,\u201d The Guardian, 01 03 2018. [Online]. \nAvailable: https://www.theguardian.com/world/2018/mar/01/german-government-intranet-under-ongoing-attack.\n\n  5  M. Schlee, \u201cHackers used Outlook for cyberattack on German government: \n\nreport,\u201d Politico, 06 03 2018. [Online]. Available: https://www.politico.eu/article/\nreport-hackers-used-outlook-for-cyberattack-on-german-government/.\n\n  6  R. Pinkert and H. Tanriverdi, \u201cHackerangriff gegen Regierung war Teil weltweiter Sp\u00e4haktion,\u201d \n\nS\u00fcddeutsche Zeitung, 02 03 2018. [Online]. Available: http://www.sueddeutsche.de/digital/\nit-sicherheit-hackerangriff-gegen-regierung-war-teil-weltweiter-spaehaktion-1.3890332.\n\n  7 \n\n\u201cThe Bat!,\u201d Ritlabs, [Online]. Available: https://www.ritlabs.com/en/products/thebat/.\n\n  8  P. Rascagneres, \u201cCOM Object hijacking: the discreet way of persistence,\u201d 30 10 2014. [Online]. Available:  \nhttps://www.gdatasoftware.com/blog/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence.\n\n  9 \n\n 10 \n\n\u201cApplication Compatibility: UAC: COM Per-User Configuration,\u201d Microsoft, [Online]. Available:  \nhttps://msdn.microsoft.com/en-us/library/bb756926.aspx.\n\n\u201cOutlook MAPI Reference,\u201d Microsoft, 04 04 2016. [Online]. Available:  \nhttps://docs.microsoft.com/en-us/office/client-developer/outlook/mapi/outlook-mapi-reference.\n\n 11  ESET Research, \u201cCarbon Paper: Peering into Turla\u2019s second stage backdoor,\u201d ESET, 30 03 2017. [Online]. \nAvailable: https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/.\n\n 12  ESET Research, \u201cGazing at Gazer - Turla\u2019s new second stage backdoor,\u201d ESET, 08 2017. [Online]. Available: \n\nhttps://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf.\n\n 13  ESET Research, \u201cDiplomats in Eastern Europe bitten by a Turla mosquito,\u201d ESET, 01 2018. [Online]. Available: \n\nhttps://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf.\n\n 14  S. L. Berre, \u201cHey Uroburos! What\u2019s up ?,\u201d [Online]. Available: https://exatrack.com/public/Uroburos_EN.pdf.\n\n 15  M. Matsui, \u201cNew block encryption algorithm MISTY,\u201d in Fast Software Encryption, 1997.\n\n 16 \n\n\u201c Inject PowerShell into any process,\u201d EmpireProject, [Online]. Available: https://github.com/EmpireProject/PSInject.\n\n 17  T. Gardo\u0148, \u201cEspionage toolkit targeting Central and Eastern Europe uncovered,\u201d 01 07 2016. [Online]. Available: \n\nhttps://www.welivesecurity.com/2016/07/01/espionage-toolkit-targeting-central-eastern-europe-uncovered/.\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f24\n\n5.  IOCS\n\nIndicators of Compromise are presented here as hashes, by filename, or according to registry key.\n\n5.1  Hashes\n\nSHA1 hash\n\nComponent\n\nCompilation \n\nESET Detection \n\nTime (GMT)\n\nName\n\n8A7E2399A61EC025C15D06ECDD9B7B37D6245EC2\n\nBackdoor\n\n2013-06-28 \n\nWin32/Turla.N\n\n14:15:54\n\nF992ABE8A67120667A01B88CD5BF11CA39D491A0\n\nDropper\n\n2014-12-03 \n\nWin32/Turla.AW\n\n20:50:08\n\nCF943895684C6FF8D1E922A76B71A188CFB371D7\n\nBackdoor\n\n2014-12-03 \n\nWin32/Turla.R\n\n20:44:27\n\n851DFFA6CD611DC70C9A0D5B487FF00BC3853F30\n\nBackdoor\n\n2016-09-15 \n\nWin32/Turla.DA\n\n08:14:47\n\n5.2  Filenames\n\n\u2022  %appdata%/Microsoft/Windows/scawrdot.db\n\n\u2022  %appdata%/Microsoft/Windows/flobcsnd.dat\n\n\u2022  mapid.tlb\n\n5.3  Registry Keys\n\n\u2022  HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Settings\\ZonePolicy\\\n\n\u2022  HKCU\\Software\\Classes\\CLSID\\{49CBB1C7-97D1-485A-9EC1-A26065633066}\n\n\u2022  HKCU\\Software\\Classes\\CLSID\\{84DA0A92-25E0-11D3-B9F7-00C04F4C8F5D}\n\nTurla Outlook Backdoor // Analysis of an unusual Turla backdoor\f"], "URLs": ["https://www.ritlabs.com/en/products/thebat/.", "https://docs.microsoft.com/en-us/office/client-developer/outlook/mapi/outlook-mapi-reference.", "https://github.com/EmpireProject/PSInject.", "https://www.politico.eu/article/", "https://www.welivesecurity.com/2016/07/01/espionage-toolkit-targeting-central-eastern-europe-uncovered/.", "https://www.welivesecurity.com/wp-content/uploads/2018/01/ESET_Turla_Mosquito.pdf.", "https://exatrack.com/public/Uroburos_EN.pdf.", "http://www.sueddeutsche.de/digital/", "https://msdn.microsoft.com/en-us/library/bb756926.aspx.", "https://yle.fi/uutiset/osasto/news/russian_group_behind_2013_foreign_ministry_hack/8591548.", "https://www.nytimes.com/2010/08/26/technology/26cyber.html?_r=1&ref=technology.", "https://www.melani.admin.ch/melani/en/home/dokumentation/reports/technical-reports/technical-", "https://www.theguardian.com/world/2018/mar/01/german-government-intranet-under-ongoing-attack."], "weight": 0.0}