{"rule_id": 526, "name": "ESET_Turla_Mosquito", "description": "-", "references": [], "File_Names": ["snake_whitepaper.pdf", "Turla.CT", "sendmessage.mooo", "kb6867.bin", "Turla.CS", "twilightparadox.com", "ntshrui.dll", "4irc.com", "google_update_checker.js", "InstructionerDLL.dll", "local_update_checker.js", "TrojanDownloader.CAM", "TrojanDownloader.DMU", "Agent.NWB", "smallcloud.ga", "flashplayer27_xa_install.exe", "Turla.CR", "AdobeSysFnt09.tlb", "artemonsecurity.com", "Turla.CQ", "Agent.REG", "game.com", "fleetwood.tk", "Turla.CV", "etowns.net", "EhStorShell.dll", "Turla.CX", "Turla.CU", "Turla.CP", "AdobeSysFnt09.pdb", "DebugParser.dll", "Turla.CW", "query.php", "bigpen.ga", "gazer.pdf"], "MD5_Hashes": ["2E244D33DD8EB70BD83EB38E029D39AC", "0AB62A3E02A036D81A64DAC9E6B53533", "B7FD4C5119867539E36E96DE1D07AF6E", "905B4E9A2159DAB45724333A0D99238F", "3C32E13162D884AB66E44902EDDB8EEE", "13B29C4840311A7BDB4C0681113598B0", "080B2CE7188547C1E9AD1B8089467261", "3E65A6D5658E6517C59D978DC159057A", "DFCA3FC4B7F4C637D7319219FCEC1876", "88F24B129E200C4F48852DCBB6E21DAF", "DFCE6F7D3A992DC2EE7FEDB8DEA58237", "137EB9B6EF122857BDE72F78962ED208", "CC3ADFE6079C1420A411B72F702E7DC7", "110E9BC680C9D5452C23722F42C385B3"], "SHA1_Hashes": ["04FB0667B4A4EB1831BE88958E6127CD7317638A", "E441CC1547B18BBA76D2A8BD4D0F644AD5388082", "F5ABFB972495FDE3D4FB3C825C3BBC437AAB6C3A", "E0788A0179FD3ECF7BC9E65C1C9F107D8F2C3142", "EC451F32110DE398781E3EDF27354E0425A51A23", "240D3473932E4D74C09FCC241CF6EC175FDCE49D", "4B5610AC5070A7D53041CC266630028D62935E3F", "24925A2E8DE38F2498906F8088CF2A8939E3CFD3", "CDE4D12EF9F70988C63B66BF019C379D59A0E61F", "C51D288469DF9F25E2FB7AC491918B3E579282EA", "BEE79383BCC73CF1E8E938131179223ADB39AC1D", "BA3519E62618B86D10830EF256CCE010014E401A", "48BCEC5A65401FBE9DF8626A780F831AD55060A1", "3DC74671768EB90463C0901570C0AAE24569B573"], "SHA256_Hashes": ["B362B235539B762734A1833C7E6C366C1B46474F05DC17B3A631B3BFF95A5EEC", "E7FD14CA45818044690CA67F201CC8CFB916CCC941A105927FC4C932C72B425D", "FC9961E78890F044C5FC769F74D8440FCECF71E0F72B4D33CE470E920A4A24C3", "443CD03B37FCA8A5DF1BBAA6320649B441CA50D1C1FCC4F5A7B94B95040C73D1", "244896995B6B83F11DF944CCDA41ED9F1F1D811EBF65D75FE4337FD692011886", "B79CDF929D4A340BDD5F29B3AECCD3C65E39540D4529B64E50EBEACD9CDEE5E9", "F6C9AE06DFC9C6898E62087CC7DBF1AC29CBD0A4BCDB12E58E0C467E11AD4F75", "F667680DF596631FBA58754C16C3041FAE12ED6BF25D6068E6981EE68A6C9D0A", "B295032919143F5B6B3C87AD22BCF8B55ECC9244AA9F6F88FC28F36F5AA2925E", "2A61B4D0A7C5D7DC13F4F1DD5E0E3117036A86638DBAFAEC6AE96DA507FB7624", "05254971FE3E1CA448844F8CFCFB2B0DE27E48ABD45EA2A3DF897074A419A3F4", "68C6E9DEA81F082601AE5AFC41870CEA3F71B22BFC19BCFBC61D84786E481CB4", "5D0973324B5B9492DDF252B56A9DF13C8953577BDB7450ED165ABBE4BF6E72D8", "26A1A42BC74E14887616F9D6048C17B1B4231466716A6426E7162426E1A08030"], "Registry_Entries": ["HKCU\\Software\\Run\\auto_update. \n\nOtherwise, it will replace the registry entry under HKCR\\CLSID\\{D9144DCD-E998-4ECA-AB \n6A-DCD83CCBA16D}\\InprocServer32 or HKCR\\CLSID\\{08244EE6-92F0-47F2-9FC9-929BA \nA2E7235}\\InprocServer32 with the path to the loader. These CLSIDs correspond respectively  \nto EhStorShell.dll and to ntshrui.dll. These DLLs are launched legitimately by a lot of processes,  \nincluding explorer.exe, the main windows GUI. Thus, the loader will be called each time \nexplorer.exe is started. Finally, it adds an entry in the registry to store the path to the original \nhijacked DLL and to the main backdoor, as shown in Figure 9.\n\n// Path to the loader\n\nHKCR\\CLSID\\{d9144dcd-e998-4eca-ab6a-dcd83ccba16d}\\ \nInprocServer32 \n> C:\\Users\\Administrator\\AppData\\Roaming\\Adobe\\Acrobat\\9.0\\ \nAdobeSysFnt09.tlb\n\n// the name of the above replaced dll\n\nHKCU\\Software\\Microsoft\\Windows\\OneDriveUpdate explorer.exe\n> %SystemRoot%\\system32\\EhStorShell.dll; \n{d9144dcd-e998-4eca-ab6a-dcd83ccba16d};new\n\n// Path to the main backdoor\n\nHKCU\\Software\\Microsoft\\Windows\\OneDriveUpdate (Default)\n> C:\\Users\\Administrator\\AppData\\Roaming\\Adobe\\Acrobat\\ \n9.0\\AdobeSysFnt09.pdb\n\nFigure 9 \n\nRegistry modifications to establish persistence\n\nOther CLSIDs are hardcoded in the binary but we have not seen any use made of them. The full list  \nis available in the IoCs section.\n\nAs explained in the previous section, the installer sends some information \u2014 such as the unique  \nid of the sample, the username or the ARP table \u2014 to a URL at an Adobe domain, get.adobe.com.  \nIt will also launch a real Adobe Flash installer, which is either downloaded from Google Drive  \nor embedded in the fake installer.\n\nBefore launching the main backdoor, the installer creates an administrative account HelpAssistant  \n(or HelpAsistant in some samples) with the password sysQ!123. Also, the LocalAccountToken \nFilterPolicy is set to 1, allowing remote administrative actions. We believe this account name \nwas used to remain stealthy as this is the name used when a legitimate Remote Assistance session  \nis run [10].\n\n14\n\nDiplomats in Eastern Europe bitten by a Turla mosquito \n \n \n \n \n \n \n \n \n \n \n \n\f4.2  DebugParser (launcher)\n\nThe launcher, named DebugParser.dll internally, is called when the hijacked COM\u00a0object  \nis loaded. It is responsible for launching the main backdoor and for loading the hijacked COM object. \nThe simplified pseudo-code of this component is provided in Figure 10.\n\nif (GetModuleFileNameW != \u201cexplorer.exe\u201d) {\n\nCreateMutexW(\u201cslma\u201d)\nCreateProcess(\u201crundll32 (from HKCU\\Software\\Microsoft\\Windows\\ \nOneDriveUpdate @=) StartRoutine\u201d)\n\n}\n//Load hijacked library\nLoadLibraryW (from HKCU\\Software\\Microsoft\\Windows\\OneDriveUpdate \n\u201cexplorer.exe\u201d=)\n\nFigure 10 \n\nPseudocode of the launcher\n\nHowever, it uses some tricks to load the hijacked library and to return to the correct address.  \nThe process is described below:\n\n1.  Retrieve the original return address after the legitimate call to LoadLibrary. At the beginning  \nof DllMain, it stores the value of the ESP register. Then it checks for FF 15 (a CALL opcode) \nat ESP - 6. If it is present, the register holds the original return address.\n\nFigure 11 \n\nSearch the address just after the LoadLibrary call\n\n2.  Allocate RWX memory containing the following values:\n\n3. \n\nJump to the hook function by modifying the return address of DllMain.\n\nPointer to HookLibrary \nloader \n\nOriginal return addr\n\nHinst DLL\n\nPointer to FreeLibrary\n\n0xCC\n\nHook \nfunction\n\nFigure 12 \n\nAllocated memory layout\n\n15\n\nDiplomats in Eastern Europe bitten by a Turla mosquito04812162448 \n \n \n \n \n \n \n\f4. \n\nIn the hook function:\n\na.  Call a function that is responsible for loading ntshrui.dll (or any other hijacked library)\n\nb.  Call FreeLibrary on the DebugParser.dll (backdoor loader) handle\n\nc. \n\nJump to the original return address before the hook.\n\nBecause the original DLL is loaded, the user is unlikely to notice that the backdoor was launched  \nat the same time.\n\nIn the case of older variants, with the loader and backdoor functions in one file, the DllMain chooses \nwhich code to execute, as shown in Figure 13.\n\nFigure 13 \n\nLoader and Backdoor in the same library\n\n16\n\nDiplomats in Eastern Europe bitten by a Turla mosquito \n \n \n \n\f4.3  Commander (main backdoor)\n\nThe main backdoor of this campaign, called CommanderDLL by its authors, is launched either  \nby the loader described above, or directly at startup if the chosen persistence mechanism is the Run \nregistry entry. In both cases, this library\u2019s StartRoutine export is called while, as shown in Figure 14, \nthis export is not present in the DLL\u2019s export table.\n\nFigure 14  DLL has no EXPORT Address Table in the .reloc section\n\nIn the DllMain function, an export table is built in order to expose this export:\n\n1. \n\n2. \n\n3. \n\nIt creates an IMAGE_EXPORT_DIRECTORY structure with StartRoutine as the name  \nof its only export\n\nIt copies this structure just after the relocation section, located at the end of the PE\u2019s  \nin-memory image\n\nIt changes the PE header field containing the Relative Virtual Address (RVA) of the export \ntable to the address of the newly-created export table\n\nWith these fix-ups, the memory-mapped library has an export called StartRoutine, as shown  \nin Figure 15 and Figure 16. Figure 17 is a screenshot from the Hex-Rays decompiler showing the code  \nfor the whole process to add this export.\n\nFigure 15  Newly-created export Table\n\n17\n\nDiplomats in Eastern Europe bitten by a Turla mosquito \n \n\fFigure 16  Name of the new export\n\nFigure 17 \n\nRoutine patching the export table\n\nSetup\n\nFirstly, the CommanderDLL module deletes the dropper (the fake Flash installer) file. The path  \nis received from the dropper via a named pipe called \\\\.\\pipe\\namedpipe. Then, in a new thread,  \nit creates a second named pipe, \\\\.\\pipe\\ms32loc, and waits until another process connects  \nto this pipe, at which point the program exits.\n\nSecondly, it sets up some internal structures and stores configuration values in the registry.  \nTable 1 describes the different registry values stored under HKCU\\Software\\Microsoft\\[dllname].\n\n18\n\nDiplomats in Eastern Europe bitten by a Turla mosquito \n \n\fTable 1 \n\nBackdoor registry values\n\nKey value\n\nFlags\n\nlayout\n\n[dllname]tr32\n\n[dllname]fgtb\n\n[dllname]fga\n\nDescription\n\nContains C&C server URLs\n\nMAC address padded with 0x0000 \n\nSimilar to Flags\n\nTemporary data\n\nNot seen\n\nAll the registry values, except the layout entry, are encrypted using a custom algorithm  \nthat is described in the next section. \n\nThird, an additional C&C server address is downloaded from a document hosted on Google Docs \n(https://docs.google[.]com/uc?authuser=0&id=0B_wY-Tu90pbjTDllRENWNkNma0k&export=download).  \nIt is also encrypted using the same algorithm described below.\n\nEncryption\n\nThis backdoor relies on a custom encryption algorithm. Each byte of the plaintext is XORed with  \na stream generated by a function that looks similar to the Blum Blum Shub algorithm [11]. To encrypt \nor decrypt, a key and a modulus are passed to the encryption function.\n\nDifferent keys and moduli are used in the different samples. Some are hardcoded while others are \ngenerated during execution. Table 2 describes the different keys and moduli used by this malware.\n\nTable 2 \n\nEncryption keys and moduli\n\nName\n\nFlags\n\nfgtb\n\ngoogle \n\ntr32\n\ntnl\n\nKey  \n(hexadecimal)\n\nModulus  \n(hexadecimal)\n\nDescription\n\n0x3EB13\n\n0x3EB13\n\n0x3EB13\n\n0x7DFDC101\n\n0x7DFDC101\n\nRegistry\n\nRegistry\n\n0x7DFDC101\n\nDownloaded C&C server URL\n\n[offset 0x0] of the data \n\n0x6581E8DD\n\n[offset 0x20] of the log file\n\n0x5DEE0b89\n\nRegistry\n\nLog file \n\nC&C reply\n\n[offset 0x0] of the reply\n\n0x7DFDC101\n\nC&C reply\n\nC&C request payload \n\n0x3EB13\n\n0x7DFDC101\n\nPayload structure  \nof the C&C request\n\nURL ID structure\n\nCookie\n\nPOST\n\n[offset 0x0] of the GET  \nid parameter\n[offset 0x0] of the GET  \nid parameter\n[offset 0x0] of the GET  \nid parameter\n\n0x7DFDC101\n\nC&C server request\n\n0x7DFDC101\n\nC&C server request\n\n0x7DFDC101\n\nC&C server request\n\n19\n\nDiplomats in Eastern Europe bitten by a Turla mosquito \n \n\fLog\n\nThe program maintains a comprehensive log file under the name [dllname].tnl. Interestingly,  \nit includes the timestamp of each log entry, allowing an easy retrace of the chain of events  \nthat happened on a compromised machine. This could be very helpful for forensic investigators.  \nIt is encrypted using the previously-described algorithm. The key is located at offset 0x20  \nin the header of the log file and the modulus is always 0x5DEE0B89. Figure 18 describes  \nthe structure of this file.\n\nFILETIME  SystemTime;\n\nDWORD \n\ntype1; //ex:0x5336,0x5337, ...\n\nDWORD \n\ntype2; //ex:0x734A,0x7344, ...\n\nDWORD  data_len;\n\nBYTE \n\ndata[];\n\nTNL log \ufb01le\n\nHeader\n\nData\n\nData\n\n...\n\nFigure 18 \n\nStructure of the log file\n\nEncrypted\n\nDWORD \n\nstrmA;\n\nDWORD \n\nstrmB;\n\nDWORD \n\nxor1_strmA;\n\nDWORD \n\nxor2_strmA;\n\nDWORD \n\nxor3_strmB;\n\nDWORD \n\nxor4_strmA;\n\nDWORD \n\nstrmA_xor_30750789h;\n\nDWORD \n\nrand_shift_xor;\n\nDWORD \n\nencryption_key;\n\nFigure 19 \n\nBeginning of the log file\n\nC&C server communications and backdoor commands\n\nThe backdoor\u2019s main loop is responsible for managing the communication with the C&C server  \nand executing the commands it sends. At the beginning of each round, it sleeps a random amount  \nof time \u2013 usually around 12 minutes.\n\nThe requests to the C&C server always use the same URL scheme: https://[C&C server  \ndomain]/scripts/m/query.php?id=[base64(encrypted data)]. The user-agent is hardcoded \nin the samples and cannot be changed: \n\nMozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/ \n41.0.2228.0 Safari/537.36 \n\nThis is the default value used by Google Chrome 41. The structure of the id parameter is described  \nin Figure 20.\n\n20\n\nDiplomats in Eastern Europe bitten by a Turla mosquito \n \n\fURL ID\n\nDWORD  KeyStart; //modulo is 0x7DFDC101\n\nBYTE \n\nID; //range from 0X85 to 0x89\n\nBYTE \n\nsome_lenght\n\nDATA\n\nHeader\n\nBYTE \n\nsome_string[]; //hardcoded to 4 bytes\n\n28 bytes - Unkown\n\nBYTES \n\nMAC[8]; //padded with 0x0000\n\nEncrypted \nwith \ufb01rst \n4 bytes\n\nDWORD  null;\n\nDWORD  data_len;\n\nBYTE \n\ndata[];\n\nBYTE \n\nrandom_junk;\n\nPayload\n\nEncrypted\n\nKey \n\n0x3EB13\n\nModulus  0x7DFDC101\n\nFigure 20 \n\nStructure of the requests to the C&C server \u2013 GET request with data  \nin the id parameter\n\nThe previous example is the case for which the id GET parameter contains the Data structure. \nHowever, data can also be put inside a cookie (with a null name) or in a POST request.  \nFigure 21 describes the various possibilities. \n\nIn all cases, the encryption key is the first DWORD of the URL id structure. This key, in combination \nwith the modulus 0x7DFDC101, can decrypt the URL id structure, the POST data and the cookie \nvalue. Then, the payload of the data structure is decrypted.\n\nREQUEST TO THE C&C\n\nData lenght\n\nPOST\n\nGET\n\nRandom\n\nFigure 21 \n\nSelection of the request\n\nData in GET\nparameter\n\nData in cookie\n\nThe initial request contains general information about the compromised machine, such as the result \nof the commands ipconfig, set, whoami and tasklist.\n\nThen, the C&C server replies with one of several batches of instructions. The structure of this reply \nis described in . The packet is fully encrypted (except the first four bytes), with the same algorithm, \nderived from Blum Blum Shub, described in section 4.3 using the first DWORD for the key  \nand 0x7DFDC101 for the modulus. Each batch of instructions is encrypted separately using  \n0x3EB13 for the key and 0x7DFDC101 for the modulus.\n\n21\n\nDiplomats in Eastern Europe bitten by a Turla mosquito \n \n\fC2C reply packet\n\nHeader\n\nDWORD \n\nencryption_key;\n\nDWORD \n\nresponse_code; //0x28 ok, 0x27 -> do nothing);\n\nDWORD  unknown1;\n\nDWORD  unknown2;\n\nDWORD  next_block_size;\n\nBatch of instructions\n\nHeader\n\nDWORD  unknown;\n\nDWORD  unknown;\n\nDWORD  unknown;\n\nInstruction\n\n...\n\n...\n\nInstruction\n\nHeader\n\nWORD \n\ninstruction_id // (0x3001 - 0x300B);\n\nDWORD  unknown_lenght;\n\nDWORD  payload_lenght;\n\nPayload\n\nDWORD \n\nstring_lenght // no trailling zero;\n\nBYTE \n\nunicode_string[];\n\nBYTE \n\ndata bin[];\n\nFigure 22 \n\nStructure of the C&C reply packet\n\nThe backdoor can execute certain predefined actions hardcoded in the binary. Table 3 is a summary  \nof the available commands.\n\nTable 3 \n\nDescription of the backdoor commands\n\nCommand ID\n\nDescription\n\n0x3001\n\n0x3002\n\n0x3003\n\n0x3004\n\n0x3005\n\n0x3006\n\n0x3007\n\n0x3008\n\n0x3009\n\n0x300A\n\n0x300B\n\nDownload file to the compromised machine. If there is .dll or .exe  \nin the filename, run it using LoadLibrary or CreateProcess.\n\nLaunch a process (or load a library if there is .dll in the filename)\n\nDelete a file using DeleteFileW.\n\nExfiltrate a file (max size sent = 104,857,600 bytes). The C&C server  \ncan also ask to delete the files and to flush data in the registry Flags.\n\nStore data to the registry Flags. The size of data should be \u2264 240 bytes.\n\nExecute cmd.exe /c [command]. The result is read using a pipe and sent back to the C&C.\n\nSame as 0x3005.\n\nSame as 0x3005.\n\nAdd a C&C server URL.\n\nDelete a C&C server URL.\n\nSame as 0x3009.\n\nIn some of the samples we have analyzed, the backdoor is also able to launch PowerShell scripts.\n\n22\n\nDiplomats in Eastern Europe bitten by a Turla mosquitoEach batch is encrypted separatelyEncrypted with \ufb01rst 4 bytes \n \n\f5.  analySIS of ThE JavaSCrIpT baCkDoor\n\nSome of the fake Flash installers deliver two JavaScript backdoors instead of Mosquito, the Win32 \nbackdoor. These files are dropped on the disk in the folder %APPDATA%\\Microsoft\\. They are named \ngoogle_update_checker.js and local_update_checker.js\n\nThe first one contacts a web app hosted on Google Apps Script with the following URL  \n(https://script.google[.]com/macros/s/AKfycbwF_VS5wHqlHmi4EQoljEtIsjmglLBO \n69n_2n_k2KtBqWXLk3w/exec) and expects a base64-encoded reply. Then, it executes the decoded \ncontent using eval. We don\u2019t know what the exact purpose of this additional backdoor is, but  \nit may be used to download additional malware or to execute malicious JavaScript code directly.  \nTo establish persistence, it adds a Shell value under HKCU\\Software\\Microsoft\\Windows  \nNT\\CurrentVersion\\Winlogon\\\n\nThe second JavaScript file reads %PROGRAMDATA%\\1.txt and executes its content using  \nthe eval function. To establish persistence, it adds a local_update_check value  \nin HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n\n23\n\nDiplomats in Eastern Europe bitten by a Turla mosquito\f6.  ConCluSIon\n\nThis campaign shows that Turla\u2019s operators have many ideas to trick the user and to hide  \ntheir malicious traffic as legitimate. Even an experienced user can be fooled by downloading  \na malicious file that is apparently from adobe.com, since the URL and the IP address correspond  \nto Adobe\u2019s legitimate infrastructure. However, the usage of HTTPs would significantly reduce  \nthe effectiveness of these kinds of attacks, as it is harder to intercept and modify encrypted traffic \non the path between a machine and a remote server. Similarly, a check of the file signature should \nquickly raise suspicion, as the files used in this campaign are not signed whereas installers  \nfrom Adobe are.\n\nIt also shows that Turla is still interested in consulates and embassies located in Eastern Europe  \nand they put a lot of effort into keeping their remote access to these important sources of information.\n\nFor any inquiries, or to make sample submissions related to the subject, contact us at: threatintel@eset.com\n\n24\n\nDiplomats in Eastern Europe bitten by a Turla mosquito\f7.  bIblIography\n\n  1 \n\n  2 \n\nESET Research, \u201cCarbon Paper: Peering into Turla\u2019s second stage backdoor,\u201d ESET, 30 03 2017. [Online].  \nAvailable: https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/.\n\nESET Research, \u201cGazing at Gazer \u2013 Turla\u2019s new second stage backdoor,\u201d ESET, 08 2017. [Online].  \nAvailable: https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf.\n\n  3  AlienVault, \u201cSatellite Turla infrastructure,\u201d 2016. [Online].  \n\nAvailable: https://otx.alienvault.com/indicator/hostname/ebay-global.publicvm.com.\n\n  4 \n\nKaspersky, \u201cThe Epic Turla Operation,\u201d 2014. [Online].  \nAvailable: https://securelist.com/the-epic-turla-operation/65545/.\n\n  5  BAE System, \u201cSNAKE CAMPAIGN & CYBER ESPIONAGE TOOLKIT,\u201d 2014. [Online].  \n\nAvailable: http://artemonsecurity.com/snake_whitepaper.pdf.\n\n  6 \n\nF. Kafka, \u201cNew FinFisher surveillance campaigns: Internet providers involved?,\u201d 21 09 2017. [Online].  \nAvailable: https://www.welivesecurity.com/2017/09/21/new-finfisher-surveillance-campaigns/.\n\n  7  RIPE, \u201cYouTube Hijacking: A RIPE NCC RIS case study,\u201d 17 03 2008. [Online]. Available:  \n\nhttps://www.ripe.net/publications/news/industry-developments/youtube-hijacking-a-ripe-ncc-ris-case-study.\n\n  8 \n\nFOX-IT, \u201cSnake: Coming soon in Mac OS X flavour,\u201d 03 05 2017. [Online].  \nAvailable: https://blog.fox-it.com/2017/05/03/snake-coming-soon-in-mac-os-x-flavour/.\n\n  9  GDATA, \u201cCOM Object hijacking: the discreet way of persistence,\u201d 10 2014. [Online]. Available:  \n\nhttps://www.gdatasoftware.com/blog/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence.\n\n 10  Microsoft, \u201cHelpAssistant account (installed by using a Remote Assistance session),\u201d 12 05 2014. [Online]. \nAvailable: https://technet.microsoft.com/en-us/library/dn745900(v=ws.11).aspx#SEC_HelpAssistant.\n\n 11  Wikipedia, \u201cBlum Blum Shub,\u201d 13 11 2017. [Online]. Available: https://en.wikipedia.org/wiki/Blum_Blum_Shub.\n\n25\n\nDiplomats in Eastern Europe bitten by a Turla mosquito\f8.  IoCS\n\n8.1  C&C server URLs\n\nYear\n\n2017\n\n2017\n\n2017\n\n2017\n\n2017\n\n2017\n\nURL\n\nsmallcloud.ga \n\nfleetwood.tk \n\ndocs.google.com/uc?authuser=0&id=0B_wY-Tu90pbjTDllRENW\nNkNma0k&export=download (adstore.twilightparadox.com)\n\nbigpen.ga \n\nhttps://script.google.com/macros/s/AKfycbxxPPyGP3Z5wgwbs\nmXDgaNcQ6DCDf63vih-Te_jKf9SMj8TkTie/exec \n\nhttps://script.google.com/macros/s/AKfycbwF_VS5wHqlH \nmi4EQoljEtIsjmglLBO69n_2n_k2KtBqWXLk3w/exec \n\n2017, 2016, \n2015 \n\n2017, 2016, \n2015, 2014 \n\nebay-global.publicvm.com \n\npsychology-blog.ezua.com \n\n2016\n\n2016\n\n2016\n\n2016\n\n2016\n\n2016\n\nagony.compress.to \n\ngallop.mefound.com \n\nauberdine.etowns.net \n\nskyrim.3d-game.com \n\nofficebuild.4irc.com \n\nsendmessage.mooo.com \n\n2016, 2014 \n\nrobot.wikaba.com \n\n2015\n\ntellmemore.4irc.com \n\n8.2  Fake adobe URLs\n\nhttp://get.adobe[.]com/stats/AbfFcBebD/?q=<base64-encoded data>\n\nhttp://get.adobe[.]com/flashplayer/download/update/x32\n\nhttp://get.adobe[.]com/flashplayer/download/update/x64\n\n8.3  Unofficial URLs for legitimate Flash installers\n\nhttps://drive.google[.]com/uc?authuser=0&id=0B_LlMiKUOIsteEtraEJYM0QxQVE&export=download\n\nhttps://drive.google[.]com/uc?authuser=0&id=0B_LlMiKUOIstM0RRekVEbnFfaXc&export=download\n\n26\n\nDiplomats in Eastern Europe bitten by a Turla mosquito\f8.4  Hashes\n\nComponent\n\nInstaller\n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\n2A61B4D0A7C5D7DC13F4F1DD5E0E3117036A86638DBAFAEC6AE96DA507FB7624\n\nE0788A0179FD3ECF7BC9E65C1C9F107D8F2C3142\n\n2E244D33DD8EB70BD83EB38E029D39AC\n\nComponent\n\nLoader (.tlb) \n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\nF6C9AE06DFC9C6898E62087CC7DBF1AC29CBD0A4BCDB12E58E0C467E11AD4F75\n\nF5ABFB972495FDE3D4FB3C825C3BBC437AAB6C3A\n\n13B29C4840311A7BDB4C0681113598B0\n\nComponent\n\nBackdoor (.pdb)\n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\nE7FD14CA45818044690CA67F201CC8CFB916CCC941A105927FC4C932C72B425D\n\n24925A2E8DE38F2498906F8088CF2A8939E3CFD3\n\n3C32E13162D884AB66E44902EDDB8EEE\n\nComponent\n\nInstaller\n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\nF667680DF596631FBA58754C16C3041FAE12ED6BF25D6068E6981EE68A6C9D0A\n\nCDE4D12EF9F70988C63B66BF019C379D59A0E61F\n\n 0AB62A3E02A036D81A64DAC9E6B53533\n\nComponent\n\nLoader (.tlb) \n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\n26A1A42BC74E14887616F9D6048C17B1B4231466716A6426E7162426E1A08030\n\nBEE79383BCC73CF1E8E938131179223ADB39AC1D\n\nDFCE6F7D3A992DC2EE7FEDB8DEA58237\n\nComponent\n\nBackdoor (.pdb) \n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\n05254971FE3E1CA448844F8CFCFB2B0DE27E48ABD45EA2A3DF897074A419A3F4\n\n48BCEC5A65401FBE9DF8626A780F831AD55060A1\n\n137EB9B6EF122857BDE72F78962ED208\n\nComponent\n\nInstaller\n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\nFC9961E78890F044C5FC769F74D8440FCECF71E0F72B4D33CE470E920A4A24C3\n\n04FB0667B4A4EB1831BE88958E6127CD7317638A\n\n3E65A6D5658E6517C59D978DC159057A\n\nComponent\n\nBackdoor\n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\n68C6E9DEA81F082601AE5AFC41870CEA3F71B22BFC19BCFBC61D84786E481CB4\n\nE441CC1547B18BBA76D2A8BD4D0F644AD5388082\n\n080B2CE7188547C1E9AD1B8089467261\n\nComponent\n\nInstaller (JS backdoor)\n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\nB295032919143F5B6B3C87AD22BCF8B55ECC9244AA9F6F88FC28F36F5AA2925E\n\nBA3519E62618B86D10830EF256CCE010014E401A\n\nCC3ADFE6079C1420A411B72F702E7DC7\n\nComponent\n\ngoogle_update_checker.js\n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\n244896995B6B83F11DF944CCDA41ED9F1F1D811EBF65D75FE4337FD692011886\n\nC51D288469DF9F25E2FB7AC491918B3E579282EA\n\n110E9BC680C9D5452C23722F42C385B3\n\n27\n\nDiplomats in Eastern Europe bitten by a Turla mosquito\fComponent\n\nlocal_update_checker.js\n\nCompilation Year\n\n2017\n\nSHA-256\n\nSHA-1\n\nMD5\n\nComponent\n\nSHA-256\n\nSHA-1\n\nMD5\n\n5D0973324B5B9492DDF252B56A9DF13C8953577BDB7450ED165ABBE4BF6E72D8\n\n3DC74671768EB90463C0901570C0AAE24569B573\n\n905B4E9A2159DAB45724333A0D99238F\n\nInstaller (Launch a PowerShell  \nto download an executable  \nat http://get.adobe[.]com/flashplayer/\ndownload/update/x32)\n\nCompilation Year\n\n2017\n\nB362B235539B762734A1833C7E6C366C1B46474F05DC17B3A631B3BFF95A5EEC\n\n4B5610AC5070A7D53041CC266630028D62935E3F\n\nDFCA3FC4B7F4C637D7319219FCEC1876\n\nComponent\n\nBackdoor\n\nCompilation Year\n\n2016\n\nSHA-256\n\nSHA-1\n\nMD5\n\nB79CDF929D4A340BDD5F29B3AECCD3C65E39540D4529B64E50EBEACD9CDEE5E9\n\n240D3473932E4D74C09FCC241CF6EC175FDCE49D\n\nB7FD4C5119867539E36E96DE1D07AF6E\n\nComponent\n\nOld Backdoor\n\nCompilation Year\n\n2015\n\nSHA-256\n\nSHA-1\n\nMD5\n\n443CD03B37FCA8A5DF1BBAA6320649B441CA50D1C1FCC4F5A7B94B95040C73D1\n\nEC451F32110DE398781E3EDF27354E0425A51A23\n\n88F24B129E200C4F48852DCBB6E21DAF\n\n8.5  Windows artefacts\n\nHijacked CLSIDs\n\n{D9144DCD-E998-4ECA-AB6A-DCD83CCBA16D}\n{08244EE6-92F0-47F2-9FC9-929BAA2E7235}\n{4E14FBA2-2E22-11D1-9964-00C04FBBB345}\n{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\n{603D3801-BD81-11D0-A3A5-00C04FD706EC}\n{F82B4EF1-93A9-4DDE-8015-F7950A1A6E31}\n{9207D8C7-E7C8-412E-87F8-2E61171BD291}\n{A3B3C46C-05D8-429B-BF66-87068B4CE563}\n{0997898B-0713-11D2-A4AA-00C04F8EEB3E}\n{603D3801-BD81-11D0-A3A5-00C04FD706EC}\n\n{1299CF18-C4F5-4B6A-BB0F-2299F0398E27}\n\nFiles\n\n\u2022\t Three files with the same name but a different extension (.tlb, .pdb and .tnl)  \n\nin a folder of %APPDATA%\n %APPDATA%\\kb6867.bin (simplified log file)\n\n\u2022\t\n\n28\n\nDiplomats in Eastern Europe bitten by a Turla mosquito\f8.6  ESET detection names\n\nRecent samples\n\nWin32/Turla.CQ\nWin32/Turla.CP\nWin32/Turla.CR\nWin32/Turla.CS\nWin32/Turla.CT\nWin32/Turla.CU\nWin32/Turla.CV\nWin32/Turla.CW\n\nWin32/Turla.CX\n\nOlder variants\n\nWin32/TrojanDownloader.CAM\n\nWin32/TrojanDownloader.DMU\n\nJavaScript backdoor\n\nJS/Agent.NWB\n\nJS/TrojanDownloader.Agent.REG\n\n29\n\nDiplomats in Eastern Europe bitten by a Turla mosquito\f"], "URLs": ["https://drive.google[.]com/uc?authuser=0&id=0B_LlMiKUOIsteEtraEJYM0QxQVE&export=download", "http://get.adobe[.]com/flashplayer/", "https://docs.google[.]com/uc?authuser=0&id=0B_wY-Tu90pbjTDllRENWNkNma0k&export=download).", "http://get.adobe.com/flashplayer/download/", "http://get.adobe.com/flashplayer/download/update/[x32", "http://artemonsecurity.com/snake_whitepaper.pdf.", "https://www.ripe.net/publications/news/industry-developments/youtube-hijacking-a-ripe-ncc-ris-case-study.", "https://script.google.com/macros/s/AKfycbxxPPyGP3Z5wgwbs", "http://get.adobe[.]com/stats/AbfFcBebD/?q=<base64-encoded", "https://www.welivesecurity.com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/.", "http://get.adobe[.]com/flashplayer/download/update/x64", "http://get.adobe[.]com/flashplayer/download/update/x32", "https://script.google.com/macros/s/AKfycbwF_VS5wHqlH", "https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf.", "https://drive.google[.]com/uc?authuser=0&id=0B_LlMiKUOIstM0RRekVEbnFfaXc&export=download", "https://script.google[.]com/macros/s/AKfycbwF_VS5wHqlHmi4EQoljEtIsjmglLBO", "https://[C&C", "https://otx.alienvault.com/indicator/hostname/ebay-global.publicvm.com.", "https://technet.microsoft.com/en-us/library/dn745900(v=ws.11).aspx", "https://en.wikipedia.org/wiki/Blum_Blum_Shub.", "https://www.welivesecurity.com/2017/09/21/new-finfisher-surveillance-campaigns/.", "https://drive.google[.]com/uc?authuser=0&id=0B_LlMiKUOIstM0R", "https://blog.fox-it.com/2017/05/03/snake-coming-soon-in-mac-os-x-flavour/.", "http://admdownload.adobe.com/", "https://securelist.com/the-epic-turla-operation/65545/.", "http://get.adobe.com/stats/AbfFcBebD/q=<base64-encoded", "https://www.gdatasoftware.com/blog/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence."], "weight": 0.0}