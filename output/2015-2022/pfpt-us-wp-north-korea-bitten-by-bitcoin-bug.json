{"rule_id": 619, "name": "pfpt-us-wp-north-korea-bitten-by-bitcoin-bug", "description": "-", "references": [], "File_Names": ["diff.vbs", "tmp001.xls", "doc.htm", "bitcoingold.exe", "mainls.cs", "top_bar.gif", "hkp.dll", "apps.got", "update.jsp", "electrum.org", "bar.gif", "top.gif", "falconcoin.js", "opt.vbs", "img.gif", "xplatform.exe", "hide.gif", "falconcoin.pdf", "SkypeSetup.exe", "transaction.js", "ProxyServer.vbs", "\ube44\ube44\ube44\ube44.xls", "run_32.vbs", "www.btc", "pdfviewer.php", "Bithumb.zip", "PowerOpt.vbs", "phishing.doc", "character.gif", "Electrum_backup.vbs", "2.pdf", "bithumb.zip", "irs.gov", "Proxy.vbs", "bithumb.pdf", "Bithumb.pdf", "installwizard.py", "ksnetadsl.dll", "Documents.zip", "theme.gif", "lndex.php", "appView.js", "KSNETADSL.dll", "falconcoin.zip", "bithumb.xls", "transaction.pdf", "PwdOpt.vbs", "log.tmp", "5_6283065828631904327.chm"], "MD5_Hashes": ["2B7E151628AED2A6ABF7158809CF4F3C", "000102030405060708090A0B0C0D0E0F"], "SHA1_Hashes": [], "SHA256_Hashes": ["41f155f039448edb42c3a566e7b8e150829b97d83109c0c394d199cdcfd20f9b", "db8163d054a35522d0dec35743cfd2c9872e0eb446467b573a79f84d61761471", "41ee2947356b26e4d8aca826ae392be932cd8800476840713e9b6c630972604f", "7975c09dd436fededd38acee9769ad367bfe07c769770bd152f33a10ed36529e", "85a263fc34883fc514be48da2d814f1b43525e63049c6b180c73c8ec00920f51", "97c6c69405ed721a64c158f18ab4386e3ade19841b0dea3dcce6b521faf3a660", "6d4415a2cbedc960c7c7055626c61842b3a3ca4718e2ac0e3d2ac0c7ef41b84d", "d844777dcafcde8622b9472b6cd442c50c3747579868a53a505ef2f5a4f0e26a", "5a162898a38601e41d538f067eaf81d6a038268bc52a86cf13c2e43ca2487c07", "d5f9a81df5061c69be9c0ed55fba7d796e1a8ebab7c609ae437c574bd7b30b48", "9ca3e56dcb2d1b92e88a0d09d8cab2207ee6d1f55bada744ef81e8b8cf155453", "bd7332bfbb6fe50a501988c3834a160cf2ad948091d83ef4de31758b27b2fb7f", "81617bd4fa5d6c1a703c40157fbe16c55c11260723b7f63de022fd5dd241bdbf", "e7581e1f112edc7e9fbb0383dd5780c4f2dd9923c4acc09b407f718ab6f7753d", "beecb33ef8adec99bbba3b64245c7230986c3c1a7f3246b0d26c641887387bfe", "772b9b873100375c9696d87724f8efa2c8c1484853d40b52c6dc6f7759f5db01", "9cc69d81613285352ce92ec3cb44227af5daa8ad4e483ecc59427fe23b122fce", "79a4b6329e35e23c3974960b2cecc68ee30ce803619158ef3fefcec5d4671c98", "3a856d8c835232fe81711680dc098ed2b21a4feda7761ed39405d453b4e949f6", "8ff100ca86cb62117f1290e71d5f9c0519661d6c955d9fcfb71f0bbdf75b51b3", "b66624ab8591c2b10730b7138cbf44703abec62bfc7774d626191468869bf21c", "b9cf1cba0f626668793b9624e55c76e2dab56893b21239523f2a2a0281844c6d", "6cb1e9850dd853880bbaf68ea23243bac9c430df576fa1e679d7f26d56785984", "01b047e0f3b49f8ab6ebf6795bc72ba7f63d7acbc68f65f1f8f66e34de827e49", "100c6400331fa1919958bed122b88f1599a61b3bb113d98b218a535443ebc3a7", "b265a5d984c4654ac0b25ddcf8048d0aabc28e36d3e2439d1c08468842857f46", "6c8c801bb71b2cd90a2c1595092358e46cbfe63e62ef6994345d6969993ea2d6", "9d10911a7bbf26f58b5e39342540761885422b878617f864bfdb16195b7cd0f5", "cbebafb2f4d77967ffb1a74aac09633b5af616046f31dddf899019ba78a55411", "eab612e333baaec0709f3f213f73388607e495d8af9a2851f352481e996283f1", "eb372423e4dcd4665cc03ffc384ff625ae4afd13f6d0589e4568354be271f86e", "b46530fa2bd5f9958f664e754ae392dc400bd3fcb1c5adc7130b7374e0409924", "030b4525558f2c411f972d91b144870b388380b59372e1798926cc2958242863", "1768f2e9cea5f8c97007c6f822531c1c9043c151187c54ebfb289980ff63d666", "25f13dca780bafb0001d521ea6e76a3bd4dd74ce137596b948d41794ece59a66", "f7f2dd674532056c0d67ef1fb7c8ae8dd0484768604b551ee9b6c4405008fe6b", "20f7e342a5f3224cab8f0439e2ba02bb051cd3e1afcd603142a60ac8af9699ba", "2b05a692518a6102c540e209cb4eb1391b28944fdb270aef7ea47e1ddeff5ae2", "b530de08530d1ba19a94bc075e74e2236c106466dedc92be3abdee9908e8cf7e", "8f0b83d4ff6d8720e134b467b34728c2823c4d75313ef6dce717b06f414bdf5c", "b3235a703026b2077ccfa20b3dabd82d65c6b5645f7f15e7bbad1ce8173c7960", "3cd0689b2bae5109caedeb2cf9dd4b3a975ab277fadbbb26065e489565470a5c", "99ad06cca4910c62e8d6b68801c6122137cf8458083bb58cbc767eebc220180d", "d334c40b42d2e6286f0553ae9e6e73e7e7aaec04a85df070b790738d66fd14fb", "972b598d709b66b35900dc21c5225e5f0d474f241fefa890b381089afd7d44ee", "4eb2dd5e90bda6da5efbd213c8472775bdd16e67bcf559f58802a8c371848212", "f2f6b4770718eed349fb7c77429938ac1deae7dd6bcc141ee6f5af9f4501a695"], "Registry_Entries": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\\nCurrentVersion\\Run\\igfxgpttray. It uses its own module file name for the registry key value. Next, it makes an HTTP request \nto a hardcoded URL hxxp://www[.]webkingston[.]com/update.jsp?action=need_update using a hardcoded User-Agent \n(UA) of \u201cNimo Software HTTP Retriever 1.0\u201d (Fig. 41) to request either instruction from the C&C to delete itself and remove \nthe persistence registry key or to download an updated implant with which to replace itself. If no response is returned from \nthe C&C, RatankbaPOS will begin the process injection search.\n\nFigure 41: RatankbaPOS dropper requesting and receiving update from C&C\n\n1  We acknowledge the excellent work from @ashley_shen_920, @051R15, and @kjkwak12 with their documentation of North Korean-related attacks on VANXATM \nwhich was targeting ATM devices and not directly POS.\n\nNorth Korea Bitten by Bitcoin Bug \n\n 23 \n\n\fThe process injection search begins by taking a snapshot of the process list using CreateToolhelp32Snapshot. The implant \ndropper/injector will then case-insensitive search for a process named xplatform.exe which we assess is likely associated \nwith Tobesoft\u2019s XPLATFORM UI/UX design software. If a process name match is found then a TH32CS_SNAPMODULE \nCreateToolhelp32Snapshot call is used to make a snapshot of xplatform.exe\u2019s running module list. Loaded modules \nare then iterated using Module32First and Module32Next while converting each result to lowercase by adding 0x20 to \nany uppercase letters and then finally comparing the string to ksnetadsl.dll (Fig. 42) that we assess is associated with \na KSNET POS framework . Finally, the filesize of ksnetadsl.dll is checked to make sure it is 98,304 bytes (Fig. 42). If a \nsuccessful match is found then the process ID (PID) of xplatform.exe is returned. Lastly, RatankbaPOS will be written to \ndisk as c:\\windows\\temp\\hkp.dll and the PID of xplatform.exe process will be used to inject hkp.dll into xplatform.exe using \nLoadLibraryA and CreateRemoteThread (Fig. 43).\n\nFigure 42: Dropper/injector searching for ksnetadsl.dll and correct filesize\n\nNorth Korea Bitten by Bitcoin Bug \n\n 24 \n\n\fFigure 43: Injecting RatankbaPOS into xplatform.exe\n\nRatankbaPOS will first hook the KSNETADSL.dll module at offset 0xB146 (Fig. 44). Interestingly there is code for \nRatankbaPOS to check KSNETADSL.dll for an exported function named 1000B146, which seems like an unusual export \nname for which to check, but this code will never be used because \u2018!strcmp(\u201c1000B146\u201d, \u201c1000B146\u201d)\u2019 will always be true. \nWe hypothesize that this feature was included either by mistake or was previously used for debugging. RatankbaPOS will \nalso log messages to a file stored in c:\\windows\\temp\\log.tmp.  \n\nFigure 44: RatankbaPOS \nsetting KSNETADSL.dll \ninjection offset\n\nAt this point in the reverse \nengineering process, we \nwould naturally begin \nreversing the KSNETADSL.\ndll module; however, we \nhave only been able to find \ntwo such modules with a \nfilesize of 98,304 bytes:\n\n\u2022 \n\nf2f6b4770718eed349fb7c77429938ac1deae7dd6bcc141ee6f5af9f4501a695\n\n\u2022  6c8c801bb71b2cd90a2c1595092358e46cbfe63e62ef6994345d6969993ea2d6\n\nNorth Korea Bitten by Bitcoin Bug \n\n 25 \n\n \n\fAfter analyzing both KSNETADSL.dll modules, our preliminary assessment is that neither of the modules are the correct \ntarget for RatankbaPOS. We can at least gain some insight into the purpose of KSNETADSL.dll, which appears to be the \nhandling of encrypted and decrypted credit card numbers for a KSNET-related POS framework system (Fig. 45). Further \nanalysis of RatankbaPOS focusing on the code used for C&C revealed the likely purpose of this implant\n\nFigure 45: Screenshot showing KSNET module interaction with CARD_NO registry key\n\nOnly one HTTP POST request is programmed in RatankbaPOS for the communication to a C&C that is called via \nCreateThread in the hook handler (DoC2, Fig. 46).\n\nFigure 46: Hook handler creating new thread for C&C then hooking KSNETADSL.dll\n\nOur analysis of the C&C communication revealed a number of clues as to what was being exfiltrated. Initially, the implant \nuses strchr to find the first occurrence of \u201c=\u201d in the string data that is received from the hook of KSNETADSL.dll. Next, \n37-bytes beginning at 16-bytes before the position of the \u201c=\u201d are copied to a buffer. Finally, that buffer is compared to a \nsubstitution buffer that was created at the beginning of RatankbaPOS\u2019 execution (Fig. 47). The substitution algorithm uses \nthe values starting at offset 0x30-0x39 in the \u201cE\u201d-filled buffer to substitute the ASCII values of \u201c0-9\u201d for \u201cZCKOADBLNX\u201d as \nwell as at offset 0x3D for substitution of ASCII \u201c=\u201d to \u201cY\u201d. Therefore, values \u201c0-9\u201d will be obfuscated to \u201cZCKOADBLNX\u201d \nwhile \u201c=\u201d will be obfuscated to \u201cY\u201d (Fig. 48).\n\nFigure 47: Obfuscation substitution buffer created in RatankbaPOS\n\nNorth Korea Bitten by Bitcoin Bug \n\n 26 \n\n \n\fFigure 48: Obfuscation substitution buffer in memory\n\nTo obfuscate the data, RatankbaPOS simply uses the hex value of the cleartext ASCII string to substitute itself for a value \nin the substitution buffer. For instance, a value of \u201c0\u201d would be substituted to \u201cZ\u201d while any equals signs (\u201c=\u201d) will be \nsubstituted for \u201cY\u201d. This method is used to likely obfuscate the data so it is harder to detect by simply glancing at network \ntraffic or through the use of heuristic-based detection of plaintext credit card data transmitted over the network. Once \nthe stolen data has been obfuscated, it is sent in a POST HTTP request to the URL /list.jsp?action=up using the same \nhardcoded UA as the injector: \u201cNimo Software HTTP Retriever 1.0\u201d (Fig. 49). So far we have observed the following C&C \ndomains: www.energydonate[.]com and online-help.serveftp[.]com.\n\nFigure 49: DoC2 function that obfuscates stolen data and exfiltrates to a C&C\n\nNorth Korea Bitten by Bitcoin Bug \n\n 27 \n\n\fBased on documentation we have found online, \nRatankbaPOS is possibly targeting plaintext track data in \nthe first 16 bytes followed by a \u201c=\u201d and finally followed by \nencrypted POS-related data beginning with \u201c99\u201d (Fig. 50). \nAccording to the document, this is an encrypted form of \nthe track data. Based on this, there is the possibility that \nthis campaign may be targeting a SoftCamp POS-related \nsoftware application, framework, or device. If we are correct \nand the values \u201c99\u201d always follow the \u201c=\u201d sign then one \ncould potentially find exfiltrated data in network traffic by \nsearching for the string \u201cYXX\u201d starting at offset 16 in the \nclient body of an HTTP POST request. However, more logic \nwill likely be necessary to reduce false positives but this \nopens up several options for detection.\n\nFigure 50: Documentation on South Korean POS \nsoftware depicting POS data that matches the pattern \nRatankbaPOS is searching for (markings not ours)\n\nRatankbaPOS Targeted Region\n\nBased on the fact that RatankbaPOS is targeting a South Korean software vendor\u2019s POS framework, including clues that \nthe length of exfiltrated data matches related POS data (document here, and another document here), we assess with high \nconfidence that this threat is primarily targeting devices in South Korea.\n\nAttribution to Lazarus Group\n\nAttribution is a controversial topic and arguably one of the most difficult tasks threat intelligence analysts face. However, \nbased on our research, we assess with a high level of confidence given the information available to us that the operations \nand activity discussed in this research are attributed to Lazarus Group and ultimately North Korea. \n\nIn consideration of the controversial and difficult task at hand, we are providing an above and beyond summary of just \nsome of the key pieces and overlaps to validate our assessment. Key reasons, discussed in detail below, are Encryption, \nObfuscation, Functionality, Code Overlap, Decoys, and C&C.\n\nEncryption\n\nIn October 2016 Lazarus Group pulled off a major operation that allegedly compromised at least 20 banks in Poland as \nwell as banks in other countries around the world. The attacks have been well documented by BAE, Kaspersky, ESET, \nTrendMicro, and Symantec. The attribution of this attack to Lazarus (aka, Bluenoroff) and ultimately North Korea is widely \naccepted across the industry. What has not been documented publicly, to our knowledge, are the specifics behind the \nimplementation of the Spritz encryption cipher utilized in some of the implants surrounding the banking incidents in late \n2016 and early 2017.\n\nSpritz is self-described as a spongy RC4-like stream cipher that was designed by Ronald Rivest and Jacob Schuldt. \nMultiple implementations of Spritz exist on Github in languages like C and Python. Anyone researching Lazarus Group\u2019s \nversion of Spritz will quickly find out that neither of the previously mentioned implementations will successfully decrypt \nhidden payloads in either banking related implants nor PowerSpritz\u2019s legitimate installer payload and malicious \nPowerShell commands.\n\nThe issue, or possibly feature, in Lazarus Group\u2019s implementation of Spritz can be found buried in a single paragraph on \npage five of the original Spritz publication (Fig. 51). It states that addition and subtraction may be substituted for exclusive-\nor (XOR) and is referred to Spritz-xor.\n\nNorth Korea Bitten by Bitcoin Bug \n\n 28 \n\n\fFigure 51: Excerpt from Spritz publication\nExamining Lazarus Group\u2019s implementation of Spritz in \none of the original implants utilized to compromise banks \nin late 2016 and 2017 via watering hole attacks, it quickly \nbecomes apparent that they have actually implemented \nSpritz-xor instead of the normal Spritz algorithm (Fig. 52).\n\nFigure 52: Spritz-xor decrypt implementation in Lazarus Group\u2019s implant from compromised banks\n\nPowerSpritz utilizes the same exact Spritz-xor implementation as the older Lazarus Group-attributed implant (Fig. 53). \nWe assess that due to how rare Spritz usage is ITW, in addition to the implemented deviation from the standard, that it is \nunlikely a different threat actor is also using this specific implementation. \n\nFigure 53: Spritz-xor decrypt implementation in PowerSpritz\n\nNorth Korea Bitten by Bitcoin Bug \n\n 29 \n\n\fObfuscation \n\nEarlier this year several watering hole attacks targeting South Korea utilized an ActiveX 0day exploit in M2Soft to deliver \nLazarus-connected FBI-RAT and Charon implants. Some of the techniques observed in these attacks overlap with the \nJS downloader and CHM PowerRatankba campaigns. One such overlap was through the usage of a well-known JS \nobfuscation technique in both the M2Soft exploit and PowerRatankba JS downloader campaigns. The method is a public \nand widely used technique of masking strings using their hexadecimal values and placing them in an array assigned to a \nvariable with a naming structure of _0x[a-f0-9]{4} (Fig. 54).\n\nFigure 54: ActiveX M2Soft exploit utilizing JS obfuscation also observed in a PowerRatankba campaign\n\nFunctionality\n\nSeveral features in the original Ratankba implants are similar or identical when compared to PowerRatankba and \nRatankbaPOS. Furthermore, the usage of a common directory c:\\windows\\temp\\ for the storage of implants and logs are \nseen across a wide array of Lazarus Group\u2019s toolset. A brief overview of similar features is shown in below (Table 3) while a \ndetailed description of each overlap may be found below.\n\nTable 3: Feature comparison table\n\nFeature\n\nRatankba\n\nPowerRatankba RatankbaPOS M2Soft Exploit FEIB Spreader\n\nJSP C&C similarities\n\nCommands: \nsuccess,killkill\n\nSleep 15 minutes loop\n\nc:\\windows\\temp\\\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nX\n\nFirst consider the C&C protocols utilized in all Ratankba, PowerRatankba, and RatankbaPOS. Ratankba\u2019s initial POST to \nC&C to divulge compromised system information uses the same BaseInfo parameter as PowerRatankba. Additionally, a \nRatankba sample (bd7332bfbb6fe50a501988c3834a160cf2ad948091d83ef4de31758b27b2fb7f) utilizes a C&C of list.jsp \nwhile RatankbaPOS utilizes an identical URIfile name for allegedly exfiltrating credit card information to a C&C. Second, \nRatankba\u2019s supported commands include success and killkill that function identically to the respective PowerRatankba \ncommands. Furthermore, a sleep loop of 900 seconds (15 minutes) is utilized in both Ratankba and RatankbaPOS\u2019 \ndropper (Fig. 56,56).\n\nFigure 55: Ratankba command loop sleep\n\nNorth Korea Bitten by Bitcoin Bug \n\n 30 \n\n\fFigure 56: RatankbaPOS dropper target process search loop\n\nLastly, while further analyzing the M2Soft exploit discussed in the Obfuscation section, a familiar destination directory of \nC:\\windows\\temp\\ was spotted in the deobfuscated JS (Fig. 57,58). This destination directory was also used during the \nPowerRatankba CHM campaign, by RatankbaPOS for log and implant storage, and by the FEIB spreader.\n\nFigure 57: Deobfuscated M2Soft exploit used to deliver Lazarus FBI-RAT implant\n\nFigure 58: Deobfuscated M2Soft exploit used to deliver Lazarus Charon implant\n\nCode Overlap\n\nOn or before October 3rd, 2017, the Far Eastern International Bank (FEIB) in Taiwan was \nhacked by Lazarus Group to steal money via the SWIFT system. One of the implants \n(9cc69d81613285352ce92ec3cb44227af5daa8ad4e483ecc59427fe23b122fce) utilized in that attack was a loader and \nspreader that writes itself to the Windows temp directory: c:\\windows\\temp\\. This directory is also used by numerous other \nLazarus Group implants including by the RatankbaPOS dropper for the payload drop location as well as for RatankbaPOS \nlogging. Additionally, there are several instances of code overlap between RatankbaPOS and the FEIB spreader implant. \nOne such overlap includes the way in which each implant sets up persistence in almost precisely the same way (Fig. 59).\n\nFigure 59: Registry key persistence. Left: FEIB spreader, Right: RatankbaPOS dropper\n\nNorth Korea Bitten by Bitcoin Bug \n\n 31 \n\n \n\fDecoys\n\nContent found in a PowerRatankba JS downloader decoy (transaction.pdf downloaded by transaction.js) was previously \nutilized in Lazarus campaigns using techniques that have more traditionally, to our knowledge, been used for espionage \nrather than for financial gain. The campaign occurred on August 4th, 2017, where Lazarus Group impersonated a National \npolice officer of South Korea along with a malicious Microsoft Office Excel document. The malicious Excel attachment \nutilized a macro-based VBScript XOR dropper technique that has been very well documented in public already.\n\nThe document used in this attack was named \ube44\ube44\ube44\ube44 \ube44\ube44\ube44\ube44.xls \n(b46530fa2bd5f9958f664e754ae392dc400bd3fcb1c5adc7130b7374e0409924), which roughly translates to \u201cBitcoin \ntransaction history.\u201d Using the macro-based VBScript XOR dropper technique a CoreDn downloader implant is dropped to \ndisk with a C&C of www.unsunozo[.]org. The interesting overlap with the PowerRatankba campaigns can be found in the \nlure used by the Excel spreadsheet (Fig. 60). The highlighted transactions, after the \u201cFinal bitcoin Address\u201d section match \nwith the beginning of the transactions used in the PowerRatankba decoy transaction.pdf.\n\nFigure 60: Excel CoreDn ~tmp001.xls decoy on the left, PowerRatankba transaction.pdf decoy on the right\n\nOn a final note for this aspect of the actor attribution, campaigns utilizing the VBScript XOR macro technique have \nhistorically been used for attacks more closely associated with espionage than for direct financial gain, as was the case \nwhen several campaigns targeted the personal accounts of employees at US defense contractors. This behavior may offer \na clue as to the desperation North Korea has for procuring currency through illicit means, possibly due to the economic \nsanctions imposed on the regime. This may indicate that there has been a significant shift in directives for the Lazarus \nteam(s) that historically conducted espionage campaigns. Furthermore, several of the campaigns utilizing the old VBScript \nXOR macro technique have direct or within-one-week overlap with PowerRatankba campaigns alluding to the possibility \nthat there is in fact more than one team working under the North Korean umbrella as other companies have suggested \n(e.g., Kaspersky\u2019s excellent write-up on Bluenoroff).\n\nC&C\n\nA report was found in a Facebook post from mickeyfintech that listed a domain \nutilized in several PowerRatankba campaigns as being associated with infrastructure \nutilized in the breach of the FEIB (Fig. 61). The domain, trade.publicvm[.]com, \nwas allegedly connected to the FEIB hack. That domain was also used by several \nPowerRatankba downloaders and payloads for hosting as well as C&C. This is a low \nconfidence indicator as we have been unable to corroborate if that domain was in \nfact utilized by Lazarus in the hacking of the FEIB.\n\nFigure 61: Facebook post listing PowerRatankba domain as being associated \nwith FEIB breach\n\nNorth Korea Bitten by Bitcoin Bug \n\n 32 \n\n \n\fConclusion\n\nThis report has introduced several new additions to Lazarus Group\u2019s ever-growing arsenal, including a variety of different \nattack vectors, a new PowerShell implant and Gh0st RAT variant, as well as an emerging point-of-sale threat targeting \nSouth Korean devices. In addition to insight into Lazarus\u2019 emerging toolset, there are two key takeaways from this research:\n\n\u2022 Analyzing a financially motivated arm of a state actor highlights an often overlooked or underestimated aspect of state-\n\nsponsored attacks; in this case, we were able to differentiate the actions of the financially motivated team within Lazarus \nfrom those of their espionage and disruption teams that have recently grabbed headlines.\n\n\u2022 This group now appears to be targeting individuals rather than just organizations: individuals are softer targets, often \n\nlacking resources and knowledge to defend themselves and providing new avenues of monetization for a state-\nsponsored threat actor\u2019s toolkit.\n\n\u2022 Moreover, both the explosive growth in cryptocurrency values and the emergence of new point-of-sale malware near the \npeak holiday shopping season provide an interesting example of how one state-sponsored actor is following the money, \nadding direct theft from individuals and organizations to the more \u201ctraditional\u201d approach of targeting financial institutions \nfor espionage that we often observe with other APT actors.\n\nResearch Contributions\n\nProofpoint\n\nKafeine (@kafeine)\n\nMatthew Mesa (@mesa_matt)\n\nKimberly (@StopMalvertisin)\n\nJames Emory (@sudosev)\n\nExternal\n\nMalc0de (@malc0de)\n\nAdam (@infosecatom)\n\nJacob Soo (@_jsoo_)\n\nSpecial Thanks\n\nWe would like to thank Yonathan Klijnsma (@ydklijnsma) and RisqIQ (@RiskIQ) for supporting \nthis research by sharing data and assisting with some of the infrastructure analysis.\n\nNorth Korea Bitten by Bitcoin Bug \n\n 33 \n\n\fIndicators of Compromise (IOCs) \n\nPowerSpritz ITW URLs\nhxxp://skype.2[.]vu/1\nhxxp://skype.2[.]vu/k\nhxxp://skypeupdate.2[.]vu/1\nhxxp://telegramupdate.2[.]vu/5\nhxxps://doc-00-64-docs.googleusercontent[.]com/docs/securesc/\nha0ro937gcuc7l7deffksulhg5h7mbp1/39cbphg8k5qve4q5rr6nonee\n1bueiu8o/1499428800000/13030420262846080952/*/0B63J1WTZC49h\nX1JnZUo4Y1pnRG8?e=download\n\nhxxps://drive.google[.]com/uc?export=download&id=0B63J1WTZC49hdDR0clR3cFpITVE\nhxxp://201.211.183[.]215:8080/update.php?t=Skype&r=update\nhxxp://122.248.34[.]23/lndex.php?t=SkypeSetup&r=mail_new\nhxxp://122.248.34[.]23/lndex.php?t=Telegram&r=1.1.9\n\nPowerSpritz Hashes\ncbebafb2f4d77967ffb1a74aac09633b5af616046f31dddf899019ba78a55411\n9ca3e56dcb2d1b92e88a0d09d8cab2207ee6d1f55bada744ef81e8b8cf155453\n5a162898a38601e41d538f067eaf81d6a038268bc52a86cf13c2e43ca2487c07\n\nPowerSpritz C&C\nhxxp://dogecoin.deaftone[.]com:8080/mainls.cs\nhxxp://macintosh[.]linkpc[.]net:8080/mainls.cs\n\nMicrosoft Compiled HTML Help (CHM) Hashes\n81617bd4fa5d6c1a703c40157fbe16c55c11260723b7f63de022fd5dd241bdbf\nd5f9a81df5061c69be9c0ed55fba7d796e1a8ebab7c609ae437c574bd7b30b48\n4eb2dd5e90bda6da5efbd213c8472775bdd16e67bcf559f58802a8c371848212\n01b047e0f3b49f8ab6ebf6795bc72ba7f63d7acbc68f65f1f8f66e34de827e49\nI3e91f399d207178a5aa6de3d680b58fc3f239004e541a8bff2cc3e851b76e8bb\n9d10911a7bbf26f58b5e39342540761885422b878617f864bfdb16195b7cd0f5\n85a263fc34883fc514be48da2d814f1b43525e63049c6b180c73c8ec00920f51\n6cb1e9850dd853880bbaf68ea23243bac9c430df576fa1e679d7f26d56785984\n772b9b873100375c9696d87724f8efa2c8c1484853d40b52c6dc6f7759f5db01\n6d4415a2cbedc960c7c7055626c61842b3a3ca4718e2ac0e3d2ac0c7ef41b84d\n030b4525558f2c411f972d91b144870b388380b59372e1798926cc2958242863\n\nMicrosoft Compiled HTML Help (CHM) C&C\nhxxp://92.222.106[.]229/theme.gif\nhxxp://www.businesshop[.]net/hide.gif \nMS Shortcut Link (LNK) Hashes\nbeecb33ef8adec99bbba3b64245c7230986c3c1a7f3246b0d26c641887387bfe\n8f0b83d4ff6d8720e134b467b34728c2823c4d75313ef6dce717b06f414bdf5c\n\nMS Shortcut Link (LNK) C&C\nhxxp://tinyurl[.]com/y9jbk8cg\nhxxp://201.211.183[.]215:8080/pdfviewer.php?o=0&t=report&m=0\n\nJavaScript Hashes\ne7581e1f112edc7e9fbb0383dd5780c4f2dd9923c4acc09b407f718ab6f7753d\n7975c09dd436fededd38acee9769ad367bfe07c769770bd152f33a10ed36529e\n100c6400331fa1919958bed122b88f1599a61b3bb113d98b218a535443ebc3a7\n8ff100ca86cb62117f1290e71d5f9c0519661d6c955d9fcfb71f0bbdf75b51b3\n97c6c69405ed721a64c158f18ab4386e3ade19841b0dea3dcce6b521faf3a660\n\n41ee2947356b26e4d8aca826ae392be932cd8800476840713e9b6c630972604f\n25f13dca780bafb0001d521ea6e76a3bd4dd74ce137596b948d41794ece59a66\n\nJavaScript C&C\nhxxp://51.255.219[.]82/files/download/falconcoin.zip\nhxxp://51.255.219[.]82/theme.gif\nhxxp://51.255.219[.].82/files/download/falconcoin.pdf\nhxxp://apps.got-game[.]org/images/character.gif\n\nNorth Korea Bitten by Bitcoin Bug \n\n 34 \n\n\fhxxp://apps.got-game[.]org/files/download/transaction.pdf\nhxxp://www.energydonate[.]com/files/download/bithumb.zip\nhxxp://www.energydonate[.]com/images/character.gif \nhxxp://www.energydonate[.]com/files/download/bithumb.pdf\n\nMS Office Docs Hashes\nb3235a703026b2077ccfa20b3dabd82d65c6b5645f7f15e7bbad1ce8173c7960\nb9cf1cba0f626668793b9624e55c76e2dab56893b21239523f2a2a0281844c6d\n972b598d709b66b35900dc21c5225e5f0d474f241fefa890b381089afd7d44ee\n\nMS Office Docs C&C\n198.100.157[.]239\nhxxp://www.energydonate[.]com/files/download/Bithumb.zip\nhxxp://www.energydonate[.]com/images/character.gif\n\nPyInstaller Hashes\nb530de08530d1ba19a94bc075e74e2236c106466dedc92be3abdee9908e8cf7e\neab612e333baaec0709f3f213f73388607e495d8af9a2851f352481e996283f1\neb372423e4dcd4665cc03ffc384ff625ae4afd13f6d0589e4568354be271f86e\n\nPyInstaller Hosting or Email IDNA\nxn--bitcin-zxa[.]org\nxn--electrm-s2a[.]org\nxn--bitcingold-hcb[.]org\nxn--bitcoigold-o1b[.]com\nxn--bitcoingld-lcb[.]com\nxn--bitcoingld-lcb[.]org\nxn--bitcoingod-8yb[.]com\nxn--btcongold-54ad[.]com\nxn--btcongold-g5ad[.]com\n\nLikely Related IDNA \nxn--6fgp[.]com\nxn--bitcingold-5bb.[]com\nxn--bitcingold-jbb[.]com\nxn--bitcingold-t3b[.]com\nxn--bitcoingol-4kb[.]com\nxn--bitoingold-1ib[.]com\nxn--btcoingold-v8a[.]com\nxn--bitcoingldwallet-twb[.]org\n\nPyInstaller C&C\nhxxp://www.btc-gold[.]us/images/top_bar.gif\nhxxp://trade.publicvm[.]com/images/top_bar.gif\n\nPowerRatankba Hashes\n41f155f039448edb42c3a566e7b8e150829b97d83109c0c394d199cdcfd20f9b\n20f7e342a5f3224cab8f0439e2ba02bb051cd3e1afcd603142a60ac8af9699ba\ndb8163d054a35522d0dec35743cfd2c9872e0eb446467b573a79f84d61761471\n3cd0689b2bae5109caedeb2cf9dd4b3a975ab277fadbbb26065e489565470a5c\nb265a5d984c4654ac0b25ddcf8048d0aabc28e36d3e2439d1c08468842857f46\n1768f2e9cea5f8c97007c6f822531c1c9043c151187c54ebfb289980ff63d666\n99ad06cca4910c62e8d6b68801c6122137cf8458083bb58cbc767eebc220180d\nf7f2dd674532056c0d67ef1fb7c8ae8dd0484768604b551ee9b6c4405008fe6b\nd844777dcafcde8622b9472b6cd442c50c3747579868a53a505ef2f5a4f0e26a\n\nNOTE: Several of these domains reflect themes and brands (only BTG) that are confirmed to have been used in phishing attacks. Additionally, they were \nregistered in the same timeframe, at the same registrar, with matching server characteristics that were observed in the confirmed IDNA infrastructure domains. \nThese domains in no way indicate that they have been used for attacks, nor that the themes utilized indicate that the entity in question has been targeted or \ncompromised. We simply assess that this infrastructure is related to Lazarus Group and currently do not know how or if it was utilized for campaigns.\n\nNorth Korea Bitten by Bitcoin Bug \n\n 35 \n\n\fPowerRatankba C&C\n51.255.219[.]82\n144.217.51[.]246\n158.69.57[.]135\n198.100.157[.]239\n201.139.226[.]67\n92.222.106[.]229\napps.got-game[.]org\ntrade.publicvm[.]com\nwww.businesshop[.]net\nvietcasino.linkpc[.]net\n\nRelated Unknown Purpose C&C\ncoinbases[.]org\nafricawebcast[.]com\nbitforex.linkpc[.]net\nmacintosh.linkpc[.]net\ncoinbroker.linkpc[.]net\nmoneymaker.publicvm[.]com\n\nRFC18 Gh0st RAT\n3a856d8c835232fe81711680dc098ed2b21a4feda7761ed39405d453b4e949f6\n\nRFC18 Gh0st RAT Download Locations\nhxxp://180.235.133[.]235/img.gif\nhxxp://180.235.133[.]121/images/img.gif\n\nRFC18 Gh0st RAT C&C\n180.235.133[.]235:443\n180.235.133[.]121:443\n51.255.219[.]82:443\n158.69.57[.]135:443\n\nRatankbaPOS ITW\nhxxp://www.webkingston[.]com/top.gif\n\nRatankbaPOS Hashes\nb66624ab8591c2b10730b7138cbf44703abec62bfc7774d626191468869bf21c\n79a4b6329e35e23c3974960b2cecc68ee30ce803619158ef3fefcec5d4671c98\nd334c40b42d2e6286f0553ae9e6e73e7e7aaec04a85df070b790738d66fd14fb\n2b05a692518a6102c540e209cb4eb1391b28944fdb270aef7ea47e1ddeff5ae2\n\nRatankbaPOS Loader C&C\nhxxp://www.webkingston[.]com/update.jsp?action=need_update\n\nRatankbaPOS Exfiltration C&C\nhxxp://www.energydonate[.]com/list.jsp?action=up\nhxxp://online-help[.]serveftp[.]com/list.jsp?action=up\n\nNorth Korea Bitten by Bitcoin Bug \n\n 36 \n\n\fET and ETPRO Suricata/Snort Signatures\n\n2824864,ETPRO TROJAN Ratankba Recon Backdoor/Module CnC Beacon 1\n\n2828904,ETPRO TROJAN RatankbaPOS Dropper CnC Checkin M1\n\n2828905,ETPRO TROJAN RatankbaPOS Dropper CnC Checkin M2\n\n2828906,ETPRO TROJAN RatankbaPOS CnC Checkin\n\n2828921,ETPRO TROJAN PowerRatankba DNS Lookup 1\n\n2828922,ETPRO TROJAN PowerRatankba DNS Lookup 2\n\n2828923,ETPRO TROJAN PowerRatankba DNS Lookup 3\n\n2828924,ETPRO TROJAN PowerRatankba DNS Lookup 4\n\n2828925,ETPRO TROJAN PowerRatankba DNS Lookup 5\n\n2828926,ETPRO TROJAN PowerRatankba DNS Lookup 6\n\n2828927,ETPRO TROJAN PowerRatankba DNS Lookup 7\n\n2828928,ETPRO TROJAN PowerRatankba DNS Lookup 8\n\n2828929,ETPRO TROJAN PowerRatankba DNS Lookup 9\n\n2828930,ETPRO TROJAN PowerRatankba DNS Lookup 10\n\n2828931,ETPRO TROJAN PowerRatankba DNS Lookup 11\n\n2828932,ETPRO TROJAN PowerRatankba DNS Lookup 12\n\n2828933,ETPRO TROJAN PowerRatankba DNS Lookup 13\n\n2828934,ETPRO TROJAN PowerRatankba DNS Lookup 14\n\n2828935,ETPRO TROJAN PowerRatankba DNS Lookup 15\n\n2828936,ETPRO TROJAN PowerRatankba DNS Lookup 16\n\n2828937,ETPRO TROJAN PowerRatankba DNS Lookup 17\n\n2828938,ETPRO TROJAN PowerRatankba DNS Lookup 18\n\n2828939,ETPRO TROJAN PowerRatankba DNS Lookup 19\n\n2828940,ETPRO TROJAN PowerRatankba DNS Lookup 20\n\n2828941,ETPRO TROJAN PowerRatankba DNS Lookup 21\n\n2828942,ETPRO TROJAN PowerRatankba DNS Lookup 22\n\n2828943,ETPRO TROJAN PowerRatankba DNS Lookup 23\n\n2828944,ETPRO TROJAN PowerRatankba DNS Lookup 24\n\n2828945,ETPRO TROJAN PowerRatankba DNS Lookup 25\n\n2828946,ETPRO TROJAN PowerRatankba DNS Lookup 26\n\n2828947,ETPRO TROJAN PowerRatankba DNS Lookup 27\n\n2828948,ETPRO TROJAN PowerRatankba DNS Lookup 28\n\n2828949,ETPRO TROJAN PowerRatankba DNS Lookup 29\n\n2828950,ETPRO TROJAN PowerRatankba DNS Lookup 30\n\n2828951,ETPRO TROJAN PowerRatankba DNS Lookup 31\n\n2828952,ETPRO TROJAN PowerRatankba DNS Lookup 32\n\n2828953,ETPRO TROJAN PowerRatankba DNS Lookup 33\n\n2828971,ETPRO TROJAN RatankbaPOS POS Exfiltration\n\nNorth Korea Bitten by Bitcoin Bug \n\n 37 \n\n\fwww.proofpoint.com\n\nABOUT PROOFPOINTProofpoint, Inc. (NASDAQ:PFPT), a next-generation cybersecurity company, enables organizations to protect the way their people work today from advanced threats and compliance risks. Proofpoint helps cybersecurity professionals protect their users from the advanced attacks that target them (via email, mobile apps, and social media), protect the critical information people create, and equip their teams with the right intelligence and tools to respond quickly when things go wrong. Leading organizations of all sizes, including over 50 percent  of the Fortune 100, rely on Proofpoint solutions, which are built for today\u2019s mobile and social-enabled IT environments and leverage both the power of the cloud and a big-data-driven analytics platform to combat modern advanced threats.\u00a9Proofpoint, Inc. Proofpoint is a trademark of Proofpoint, Inc. in the United States and other countries. All other trademarks contained herein are property of their respective owners. \f"], "URLs": [], "weight": 0.0}