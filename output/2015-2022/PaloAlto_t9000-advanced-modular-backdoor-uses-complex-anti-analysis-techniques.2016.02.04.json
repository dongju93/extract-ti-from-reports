{"rule_id": 793, "name": "PaloAlto_t9000-advanced-modular-backdoor-uses-complex-anti-analysis-techniques.2016.02.04", "description": "-", "references": [], "File_Names": ["Log.txt", "kplugin.dll", "hjwe.dat", "tyeu.dat", "Tasking.exe", "hccutils.pdb", "qhnj.dat", "QQMGr.dll", "dtl.dat", "Taskmgr.exe", "itfm.pro", "hccutils.inf", "igfxtray.exe", "Dbgview.exe", "hccutils.dll", "tmp.doc", "CaptureDLL.dll", "Taskhost.exe", "hccutil.dll", "QQMGR.inf", "QQMgr.inf", "drwtsn32.exe", "suerinit.exe", "FlashDiskThief.pdb", "ResN32.dll", "inetinfo.exe", "ResN32.dat", "ResN32.pdb", "vnkd.dat", "BypassUAC.pdb", "glp.uin", "QQMgr.dll", "Xnulleds.com", "wmiprvse.exe", "logonui.exe", "hqwe.dat"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": ["c61dbc7b51caab1d0353cbba9a8f51f65ef167459277c1c16f15eb6c7025cfe3", "5fc3dc25276b01d6cb2fb821b83aa596f1d64ae8430c5576b953e3220a01d9aa", "3dfc94605daf51ebd7bbccbb3a9049999f8d555db0999a6a7e6265a7e458cab9", "bb73261072d2ef220b8f87c6bb7488ad2da736790898d61f33a5fb7747abf48b", "7daf3c3dbecb60bee3d5eb3320b20f2648cf26bd9203564ce162c97dcb132569", "c22b40db7f9f8ebdbde4e5fc3a44e15449f75c40830c88932f9abd541cc78465", "157e0a9323eaaa911b3847d64ca0d08be8cd26b2573687be461627e410cb1b3f", "aa28db689f73d77babd1c763c53b3e63950f6a15b7c1a974c7481a216dda9afd", "ace7e3535f2f1fe32e693920a9f411eea21682c87a8e6661d3b67330cd221a2a", "bf1b00b7430899d33795ef3405142e880ef8dcbda8aab0b19d80875a14ed852f", "e52b5ed63719a2798314a9c49c42c0ed4eb22a1ac4a2ad30e8bfc899edcea926", "2b973adbb2addf62cf36cef9975cb0193a7ff0b960e2cff2c80560126bee6f37", "3fa05f2f73a0c44a5f51f28319c4dc5b8198fb25e1cfcbea5327c9f1b3a871d4", "1cea4e49bd785378d8beb863bb8eb662042dffd18c85b8c14c74a0367071d9a7", "d5fa43be20aa94baf1737289c5034e2235f1393890fb6f4e8d4104565be52d8c", "f05cd0353817bf6c2cab396181464c31c352d6dea07e2d688def261dd6542b27", "21a5818822a0b2d52a068d1e3339ed4c767f4d83b081bf17b837e9b6e112ee61", "00add5c817f89b9ec490885be39398f878fa64a5c3564eaca679226cf73d929e"], "Registry_Entries": ["HKLM\\Software\\\n\nregistry path:\n\nSophos\n\nINCAInternet\n\nDoctorWeb\n\nBaidu\n\nComodo\n\nTrustPortAntivirus\n\nGData\n\nAVG\n\nBitDefender\n\nVirusChaser\n\nMcAfee\n\nPanda\n\nTrend Micro\n\nKingsoft\n\nNorton\n\nMicropoint\n\nFilseclab\n\nAhnLab\n\nJiangMin\n\nTencent\n\nAvira\n\nKaspersky\n\nRising\n\n360\n\nThese security products are represented by a value that is binary AND-ed with any other\n\nproducts found. The following numbers represent each respective security product.\n\n0x08000000 : Sophos\n\n0x02000000 : INCAInternet\n\n0x04000000 : DoctorWeb\n\n0x00200000 : Baidu\n\n0x00100000 : Comodo\n\n0x00080000 : TrustPortAntivirus\n\n0x00040000 : GData\n\n0x00020000 : AVG\n\n0x00010000 : BitDefender\n\n0x00008000 : VirusChaser\n\n0x00002000 : McAfee\n\n0x00001000 : Panda\n\n0x00000800 : Trend Micro\n\n0x00000400 : Kingsoft\n\n0x00000200 : Norton\n\n0x00000100 : Micropoint\n\n0x00000080 : Filseclab\n\n0x00000040 : AhnLab\n\n0x00000020 : JiangMin\n\n0x00000010 : Tencent\n\n0x00000004 : Avira\n\n0x00000008 : Kaspersky\n\n0x00000002 : Rising\n\n0x00000001 : 360\n\nSo, for example, if both Trend Micro and Sophos were discovered on a victim machine, the\n\nresulting value would be 0x08000800. This numerical value is written to the following file:\n\n%APPDATA%\\Intel\\avinfo\n\nThe malware proceeds to drop the following files to the %APPDATA%\\Intel directory:\n\n\fAdditionally, the following two files are written to the Data directory:\n\nThe following table provides a description of each file dropped:\n\nFile Name\n\nDescription\n\n~1\n\nDebug information about files used by malware.\n\navinfo\n\nInstalled security products on victim.\n\nhccutils.dll\n\nMalicious DLL. Loads ResN32.dll.\n\nhccutils.inf\n\nMalicious INF file. Points to hccutils.dll.\n\nhjwe.dat\n\nEncrypted core of malware family.\n\nigfxtray.exe\n\nLegitimate Microsoft executable. Loads hccutils.dll.\n\nqhnj.dat\n\nEncrypted plugin. Hooks a number of functions and logs results.\n\nQQMgr.dll\n\nMalicious DLL. Sets persistence via Run registry key.\n\nQQMgr.inf\n\nMalicious INF file. Points to QQMgr.dll\n\nResN32.dat\n\nString pointing to path of encrypted core of malware.\n\nResN32.dll\n\nMalicious DLL. Decrypts, decompresses, and loads core malware.\n\ntyeu.dat\n\nEncrypted plugin. Takes screenshots and collects Skype information.\n\nvnkd.dat\n\nEncrypted plugin. Finds files on removable drives on victim machine.\n\ndtl.dat\n\nEncrypted configuration information.\n\nglp.uin\n\nPlugin configuration information.\n\nYou\u2019ll notice that QQMgr* files are not listed in the original malware execution flow diagram. In\n\nthe event the victim is running any of the following operating system versions, as well as either\n\nKingsoft, Filseclab, or Tencent security products, the malware will be installed using an\n\nalternative method.\n\nWindows 2008 R2\n\nWindows 7\n\nWindows 2012\n\nWindows 8\n\nIn such a situation, the malware will find and run the built-in Microsoft Windows\n\nInfDefaultInstall.exe program, which will install a DLL via an INF file. Should Tencent be\n\n\finstalled, the malware will execute the InfDefaultInstall.exe program with an argument of\n\n\u2018QQMgr.inf\u2019. Otherwise, it will use \u2018hccutils.inf\u2019 as an argument.\n\nQQMgr.inf will install the QQMgr.dll, while hccutils.inf will install the hccutils.dll library. QQMgr.dll\n\nwill set the following registry key:\n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Eupdate \u2013\n\n%APPDATA%\\Intel\\ResN32.dll\n\nThe QQMgr.dll file has the following debug string found within it:\n\nH:\\WORK\\PROJECT\\InfInstallBypassUAC\\Release\\BypassUAC.pdb\n\nThe hccutils.dll file is described later within this post.\n\nAfter the malware drops the required files, by default the malware will spawn\n\n%APPDATA%\\Intel\\igfxtray.exe in a new process, which begins the second stage of the\n\nmalware\u2019s execution.\n\nThe igfxtray.exe is a legitimate Microsoft Windows executable that sideloads the malicious\n\nhccutils.dll DLL file. This DLL has the following debug string embedded within it:\n\nD:\\WORK\\T9000\\hccutils_M4\\Release\\hccutils.pdb\n\nUpon loading this malicious DLL, the malware will initially perform the same queries for security\n\nproducts that were witnessed in stage 1.\n\nThree separate techniques for starting stage 3 are used depending on the properties of the\n\nvictim.\n\nThe first technique is used if the victim meets the following criteria:\n\nMicrosoft Windows 8 / Windows Server 2012 R2\n\nDoctorWeb security product installed\n\nFor this situation, the following registry key is set:\n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\update \u2013 %SYSTEM%\\rundll32.exe\n\n%APPDATA\\Intel\\ResN32.dll Run\n\nThis ensures that the ResN32.dll library will be run using the \u2018Run\u2019 exported function whenever\n\nthe machine is rebooted.\n\nThe second technique is used if the victim meets any of the following sets of criteria:\n\nMicrosoft Windows 8 / Windows Server 2012 R2\n\nNot running Kingsoft, Tencent, or DoctorWeb security products\n\nMicrosoft Windows XP or lower\n\nNo security products installed, or running any of the following:\n\nSophos\n\nGData\n\nTrendMicro\n\nAhnLab\n\nKaspersky\n\nIn these situations, the following persistence technique is used.\n\nHKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs \u2013\n\n%APPDATA%\\Intel\\ResN32.dll\n\nHKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\LoadAppInit_DLLs \u2013 0x1\n\nSetting these registry keys both enables the AppInit_DLL functionality, and ensures that every\n\nuser mode process that is spawned will load the ResN32.dll library. More information about this\n\ncan be found here.\n\nThe third technique is used in any other situation. When this occurs, the malware will first\n\nidentify the explorer.exe process identifier. It proceeds to inject the ResN32.dll library into this\n\nprocess.\n\nAt this point, the third stage of the malware family is loaded.\n\nThe third stage begins when the ResN32.dll file begins operating. This file contains the\n\nfollowing debug string:\n\n\fD:\\WORK\\T9000\\ResN_M2\\Release\\ResN32.pdb\n\nThe ResN32.dll library begins by spawning a new thread that is responsible for the majority of\n\nthe capabilities built into this sample. This thread begins by checking the operating system\n\nversion, and once again runs a query on the various security products installed on the victim\n\nmachine.\n\nUnder certain conditions, the following registry key is set, ensuring persistence across reboots:\n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\update \u2013\n\nc:\\windows\\system32\\rundll32.exe %APPDATA\\Intel\\ResN32.dll Run\n\nFollowing this, a new thread is created that is responsible for deleting previously written files.\n\nThis thread creates the following mutex:\n\nGlobal\\\\deletethread\n\nIt proceeds to attempt to delete the following files in an infinite loop until said files have been\n\ndeleted:\n\n%STARTUP%\\hccutils.dll\n\n%STARTUP%\\hccutil.dll\n\n%STARTUP%\\igfxtray.exe\n\nThe ResN32.dll malware proceeds to read in the ResN32.dat file that was previously written to\n\ndisk. This file contains a path to the hjwe.dat file, which is subsequently read in.\n\nThe data within the hjwe.dat file is decrypted using the RC4 algorithm, and subsequently\n\ndecompressed using the LZMA algorithm. The following script can be used to decrypt the\n\nhjwe.dat file, along with the plugins that will be discussed later.\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n\nimport sys, pylzma\nfrom base64 import *\nfrom binascii import *\nfrom struct import *\n\ndef rc4( data , key ):\n  S = range(256)\n  j = 0\n  out = []\n  for i in range(256):\n    j = (j + S[i] + ord( key[i % len(key)] )) % 256\n    S[i] , S[j] = S[j] , S[i]\n  i = j = 0\n  for char in data:\n    i = ( i + 1 ) % 256\n    j = ( j + S[i] ) % 256\n    S[i] , S[j] = S[j] , S[i]\n    out.append(chr(ord(char) ^ S[(S[i] + S[j]) % 256]))\n  return ''.join(out)\n\nf = open(sys.argv[1], 'rb')\nfd = f.read()\nf.close()\n\nbytes_0_4, bytes_4_8, bytes_8_12, bytes_12_16 = unpack(", "HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\Eupdate \u2013\n\n%APPDATA%\\Intel\\ResN32.dll\n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\update \u2013 %SYSTEM%\\rundll32.exe\n\n%APPDATA\\Intel\\ResN32.dll Run\n\nHKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\AppInit_DLLs \u2013\n\n%APPDATA%\\Intel\\ResN32.dll\n\nHKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\LoadAppInit_DLLs \u2013 0x1\n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\update \u2013\n\nc:\\windows\\system32\\rundll32.exe %APPDATA\\Intel\\ResN32.dll Run\n\nCommand and Control\n\n 198.55.120[.]143:8080\n\nFebruary 13, 2016 9:34 AM\nThis Trojan Malware Might Be Recording Your Skype Conversations Sell Ur Shit |\nMake Money Selling Your Shit online for Free | Sell Ur Shit | Make Money Selling\nYour Shit online for Free\n\nFebruary 13, 2016 9:36 AM\nThis Trojan Malware Might Be Recording Your Skype Conversations |\nXnulleds.com\n\nFebruary 13, 2016 11:23 AM\n\u0411\u044d\u043a\u0434\u043e\u0440 \u0434\u043b\u044f Skype \u043f\u043e\u0445\u0438\u0449\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 - itfm.pro\n\n\fFebruary 13, 2016 7:41 PM\nThis Trojan Malware Might Be Recording Your Skype Conversations \u2013 Tricks Here\n\nFebruary 13, 2016 9:59 PM\nThis Trojan Malware Might Be Recording Your Skype Conversations\n\nFebruary 13, 2016 10:46 PM\nSherman's Security Blog \u00bb T9000 Skype backdoor malware steals audio, video,\nchats, screenshots, documents\n\nFebruary 14, 2016 10:41 AM\n\u0411\u044d\u043a\u0434\u043e\u0440 \u0434\u043b\u044f Skype | \u0421\u0444\u0435\u0440\u0430 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n\nFebruary 14, 2016 9:06 PM\n\u0411\u042d\u041a\u0414\u041e\u0420 \u0414\u041b\u042f SKYPE \u041f\u041e\u0425\u0418\u0429\u0410\u0415\u0422 \u0414\u0410\u041d\u041d\u042b\u0415!!! \u2013 Defcon Azerbaijan\n\nFebruary 17, 2016 6:22 AM\nT9000 backdoor, malware that spies on Skype users - HackRaw\n\nFebruary 18, 2016 4:55 PM\nReHWolution | T9000 \u2013 Il Malware che non viene rilevato dagli antivirus\n\nFebruary 21, 2016 7:33 AM\nTrojaner T9000: Skype User werden ausgeschn\u00fcffelt - Datenschutz Agentur\n\nMarch 15, 2016 9:03 AM\nT9000 Trojan Can Compromise Skype and PC Security - Ophtek\n\nName *\n\nEmail *\n\nWebsite\n\nPost Comment\n\nPrivacy Policy   Legal Notices   Site Index   Subscriptions\n\nCopyright \u00a9 2007-2013 Palo Alto Networks\n\n\f"], "URLs": [], "weight": 0.0}