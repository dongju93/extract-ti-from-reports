{"rule_id": 542, "name": "DTL-12012015-01", "description": "-", "references": [], "File_Names": ["plug.exe", "lim.kiu", "clbcatq.dll", "z1.exe", "profapi.dll", "aoemvp.com", "clbcaiq.dll", "wuauclt.dat", "blogspot.hk"], "MD5_Hashes": ["ec532bbe9d0882d403473102e9724557", "a6a18c846e5179259eba9de238f67e41", "279ef79f904476ba0f9f44c87358bb1f", "cff25fe24a90ef63eaa168c07008c2bb", "f66b64ef984ac46ac7395358059979bc", "55f84d88d84c221437cd23cdbc541d2e", "42b76c0503a6bf21f1ea86e0b14d67ea", "ad17eff26994df824be36db246c8fb6a", "efd9dc39682312d6576468f5c0eb6236"], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\Software\\Microsoft\\Windows\\Current Version\\Run\u2019 to ensure that this file is executed upon \nuser-login. \n\nFinal stage (RAT \u2013 \u201cPCClient\u201d) \nFinally we are left with a full payload. Unsurprisingly the 3rd and final stage of this part of the attack \nis a fully fledged RAT (Remote Administration Tool), which is detected by anti-virus as PCClient. This \nRAT allows the attacker to control the infected workstation and perform a vast array of \nadministrative functions such as: \n\n\uf0b7  Downloading files to the infected workstation \n\uf0b7  Uploading from the infected workstation files to the attackers \n\uf0b7  Enumerate/list all connected drives such as network shares or external devices \n\uf0b7  Search the infected workstations hard drive for files \n\uf0b7  Deleting, copying and moving files on the infected workstation \n\uf0b7  Executing commands on the infected workstation \n\nA high-level view of the command structure gives us an idea as to how simple this functionality \ncan seem, but does not turn away from how damaging the affects can be: \n\nD r a g o n   T h r e a t   L a b s ,   H o n g   K o n g  \n\nPage 7 \n\n \n \n \n \n \n\fOnce the RAT has been loaded on the infected machine it begins calling out to the command and \ncontrol server (\u201cphoning home\u201d) and waits for the attackers to issue one of the above \ncommands to the victim. As we usually see with APT attacks the malware controllers use a \nspecific ID to code their attack campaign, which in this case is \u2018C00BBB\u2019. \nInformation about the victim system is collected and posted off to the command and control \nserver. This information gives the attacker a brief description about the machine. The \ninformation consists of: \n\n\uf0b7  Machine hostname \n\uf0b7  Total amount of RAM memory \n\uf0b7  Operating system and service pack level \n\uf0b7  Attack campaign code \n\nThis information is encoded using a simple bitwise operation and then sent to the command and \ncontrol server. For example: \n\nUnencoded data \n44 45 4C 4C 2D 31 37 38  DELL-178 \n44 33 43 00 00 00 00 00  D3C..... \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n35 31 32 4D 42 00 00 00  512MB... \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n57 69 6E 20 58 50 20 53  Win XP S \n50 33 20 28 42 75 69 6C  P3 (Buil \n\nEncoded data \nBA B9 B2 B2 51 4D 47 46  \u00ba\u00b9\u00b2\u00b2QMGF \nBA 4B BB 7E 7E 7E 7E 7E  \u00baK\u00bb~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n49 4D 4C B1 BC 7E 7E 7E  IML\u00b1\u00bc~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \nA7 95 90 5E A6 AE 5E AB  \u00a7\u2022(cid:144)^\u00a6\u00ae^\u00ab \nAE 4B 5E 56 BC 89 95 92  \u00aeK^V\u00bc\u2030\u2022\u2019 \n\nD r a g o n   T h r e a t   L a b s ,   H o n g   K o n g  \n\nPage 8 \n\n \n \n \n \n \n\f64 20 32 36 30 30 29 00  d 2600). \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n00 00 00 00 00 00 00 00  ........ \n43 30 30 42 42 42 00 00  C00BBB.. \n\n9A 5E 4C 48 4E 4E 55 7E  \u0161^LHNNU~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \n7E 7E 7E 7E 7E 7E 7E 7E  ~~~~~~~~ \nBB 4E 4E BC BC BC 7E 7E  \u00bbNN\u00bc\u00bc\u00bc~~ \n\nWhilst this may seem to make the data harder to recover it actually makes detection of the traffic \neasier. To decode the traffic a simple calculation can be performed by reversing the encoding \noperations. In this case the malware simply increases the initial encoding key by 1, then adds this \nvalue to each byte in the buffer and finally XOR\u2019s each byte. Once again, the following pseudo-code \ncan decode this data \n\nInfrastructure & associations \nDuring in the investigation we performed analysis of the infrastructure that this malware \ncommunicates with. On this occasion we have not been able to gain physical access to the command \nand control server as it is legitimate, but compromised production infrastructure. The graph below \nshows the flow in which various parts of the attack are loaded and how they chain together. \n\nD r a g o n   T h r e a t   L a b s ,   H o n g   K o n g  \n\nPage 9 \n\n \n \n \n \n \n \n\fD r a g o n   T h r e a t   L a b s ,   H o n g   K o n g  \n\nPage 10 \n\n \n \n \n \n\fDetection & mitigation \nThis attack can be detected and/or mitigated at each stage. In order to help organisations protect \nthemselves we have created a number of network IDS rules and disk-scan rules that can be used \nwith Snort and Yara. Rules are provided in a best-effort basis and we cannot vouch for their \nefficiency in your environment. \n\nWateringhole code \nrule apt_win_wateringhole { \nmeta: \n\nauthor = "], "URLs": ["http://dragonthreat.blogspot.hk"], "weight": 0.0}