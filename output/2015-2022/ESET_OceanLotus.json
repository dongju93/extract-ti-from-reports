{"rule_id": 563, "name": "ESET_OceanLotus", "description": "-", "references": [], "File_Names": ["mcscentr.adf", "Agent.RUI", "Salgorea.BD", "HTTPProv.dll", "rasltls.dll", "mcoemcpy.exe", "saigontel.exe", "RasTlsc.exe", "CV_LeHoangThing.doc", "_Sep_2017.exe", "Korplug.MK", "tmp.exe", "2018.exe", "Sep_2017.exe", "RobototFontUpdate.exe", "Regular.ttf", "RobotoSlab.ttf", "Grp.exe"], "MD5_Hashes": [], "SHA1_Hashes": ["fdcb35cd9cb8dc1474cbcdf1c9bb03200dcf3f18", "fe0161fb8a26a0bf4afad746c7ebf89499dcd3a7", "5689448b4b6260ec9c35f129df8b8f2622c66a45", "f96bcd875836da89800912de1e557891697c7cf4", "2a387d7d47a63d6e47d9cc92d3dc69a53816c2c0", "202fb56edb2fb542e05c845d62ffbdcfbebed9ec", "7105caa6d4fd8a2c67523d385277528e556ae4f6", "d35695f2366a43628231e73ffa83ca106306a8fa", "2616da1697f7c764ee7fb558887a6a3279861fac", "912895e6bb9e05af3a1e58a1da417e992a71a324", "032ef58b7978d079287874044dc516af624ae5f5", "c2eb1033bc01ab0fd732a7ba4967be02c0690bf0", "a40ee8ff313e59aa92d48592c494a4c3d81449af", "82e579bd49d69845133c9aa8585f8bd26736437b"], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\SOFTWARE\\Microsoft\\\nWindows\\CurrentVersion\\Run;DeviceAssociationService;rastlsc.exe).\n\nIf the dropper is executed with administrator privileges, then it tries to write the following files in \nthe C:\\Program Files\\Symantec\\Symantec Endpoint Protection\\12.1.671.4971.104a\\\nDeviceAssociationService\\ folder else it writes them in the %APPDATA%\\Symantec\\Symantec \nEndpoint Protection\\12.1.671.4971.104a\\DeviceAssociationService\\ folder:\n\n\u2022  rastlsc.exe (SHA1:2616da1697f7c764ee7fb558887a6a3279861fac, copy of legitimate \n\nSymantec Network Access Control application, dot1xtra.exe)\n\n\u2022  SyLog.bin (SHA1:5689448b4b6260ec9c35f129df8b8f2622c66a45, encrypted backdoor)\n\n\u2022  rastls.dll (SHA1:82e579bd49d69845133c9aa8585f8bd26736437b,malicious DLL side-\n\nloaded by rastlsc.exe)\n\nThe path changes from sample to sample but the pattern is similar. Depending on its privileges, the \nmalware drops the files in %ProgramFiles% or %appdata%. We\u2019ve also seen:\n\n\u2022  \\Symantec\\CNG Key Isolation\\\n\n\u2022  \\Symantec\\Connected User Experiences and Telemetry\\\n\n\u2022  \\Symantec\\DevQuery Background Discovery Broker Tasks\\\n\nThese paths are used by various Symantec products.\n\nAfter achieving persistence and dropping the executable, the legitimate Symantec executable, \nrastlsc.exe, is executed using CreateProcessW.\n\nWe\u2019ve also seen another version ({BB7BDEC9-B59D-492E-A4AF-4C7B1C9E646B}.dll),  \nwhich executes rastlsc.exe with the parameter krv. Its meaning is discussed below.\n\n10\n\nOceanLotusOld techniques, new backdoor\fBackdoor component: rastlsc.exe side-loading\nThe OceanLotus group uses an old and publicly known technique on one of the Symantec product\u2019s \nexecutable files. The trick, here, is to take advantage of the library loading process of a legitimate \nand signed executable by writing a malicious library inside the same folder. This way it will make \nmalicious behaviors look legitimate because these actions are made by the trusted executable process.\n\nAs mentioned earlier, the legitimate executable rastlsc.exe is dropped and executed.  \nThis executable imports the rastls.dll file, which in this case contains the malicious payload.\n\nFigure 7 \n\nSymantec rastlsc.exe digital signature\n\nSide loading was also observed using other legitimate, signed executables including mcoemcpy.exe \nfrom McAfee, which loads McUtil.dll. This technique has also been used by PlugX before. This also \ngot the attention of the Vietnam CERT (Vietnamese language).\n\nStage 1  Library side-loading, rastls.dll\nThe internal name of this dll is {7032F494-0562-4422-9C39-14230E095C52}.dll but we\u2019ve seen \nother versions like {5248F13C-85F0-42DF-860D-1723EEAA4F90}.dll. All exported functions lead \nto the execution of the same function.\n\n11\n\nOceanLotusOld techniques, new backdoor \n\fFigure 8 \n\nAll rasltls.dll exports lead to the same function\n\nThis export tries to read the SyLog.bin file located inside the same folder. Other versions tried  \nto open the file OUTLFLTR.DAT. If that file exists, it is decrypted using AES in CBC mode with  \na hardcoded, 256-bit key and then decompressed (LZMA compression).\n\nThe McUtil.dll variant uses a different technique. At first glance, it looks as if like the main function \ndoes nothing malicious, but in fact it replaces the .text section of the legitimate mcoemcpy.exe,  \na side-loaded binary. It generates shellcode whose purpose is to call the function reading the encrypted  \nstage-two  shellcode in the mcscentr.adf file.\n\n12\n\nOceanLotusOld techniques, new backdoor \n\fThe following pseudocode is used to create the shellcode:\n\nx = False\ni = 0\nbuff = genRandom()\nopc1 = [0x58,0x59,0x5a,0x5b]\nopc2 = [0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57]\nopc3 = [0x90,0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48, \n\n  0x49,0x4a,0x4b]\n\nwhile i < len(buff):\n\ncurrentChar = buff[i]\nif currentChar < 0xc8:\n\nbuff[i] = opc1[currentChar % len(opc1)]\n\nelse:\n\nif x:\n\nelse:\n\nbuff[i] = opc2[currentChar % len(opc2)]\n\nbuff[i] = opc3[currentChar % len(opc3)]\n\nx = x == False\n\ni+=1\n\nThe result is the following assembly listing:\n\nFigure 9 \n\nGenerated shellcode\n\nStage 2 to Stage 4  Shellcode, Launcher and Shellcode again\n\nThe shellcode decrypts and loads the library {E1E4CBED-5690-4749-819D-24FB660DF55F}.dll. \nThe library retrieves its resource and tries to start the service \u201cDeviceAssociationService\u201d.  \nThe decrypted data also contains shellcode. The latter decrypts the final layer: the backdoor.\n\n13\n\nOceanLotusOld techniques, new backdoor \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fThe variant {92BA1818-0119-4F79-874E-E3BF79C355B8}.dll checks whether rastlsc.exe \nwas executed with krv as the first parameter. If so, then a job is created and rastlsc.exe  \nis executed again, but without the parameter.\n\nStage 5  The backdoor, {A96B020F-0000-466F-A96D-A91BBF8EAC96}.dll\nThe malware first tries to retrieve its resource and decrypt it using RC4. The decrypted resource \ncontains an interesting piece of information, used to configure the backdoor. The format of this \nconfiguration is straightforward to reverse. Using Kaitai struct and its structure dumper,  \nthe following representation can be displayed:\n\nFigure 10 \n\nConfiguration structure\n\nNOTES: except for the string domain_encoding_str and the httpprov library, all these data  \nchange from one sample to another. The registry keys are almost the same but they follow a similar pattern:  \n\\HKCU\\SOFTWARE\\Classes\\AppX[a-f0-9]{32}, which is quite generic.\n\nThe malware retrieves the first 10 bytes of the username (UTF-16), XORs it with the 3-letter  \nUTF-16 mutex_encoding_str string, and encodes it in hex. The result is used as a mutex name.  \nFor instance, for a user whose name starts with abc and the key being vwx, the following mutex  \nwill be created: \\Sessions\\1\\BaseNamedObjects\\170015001b.\n\nThe backdoor includes a PE loader that loads the library HTTPProv.dll in memory, calls its entry-\npoint and then calls the export function named CreateInstance.\n\n14\n\nOceanLotusOld techniques, new backdoor \n\fCommunication\n\nThe backdoor uses a classic TCP communication protocol over port 25123. In order to retrieve  \nthe server IP address, the backdoor first creates a particular DNS query.\n\nThe malware chooses between one of the three domains from the configuration and adds a custom \nsub-domain generated using two values. The first value is the computer name up to a length  \nof 16 bytes. The second value is the 4-byte version ID. The following Python 2 code implements  \nthe encoding algorithm :\n\nletters=domain_encoding_str # \u201cghijklmnop\u201d\nhex_pc_name=pc_name.encode(\u201cUTF-16LE\u201d).encode(\u201chex\u201d)\ns=\u2019\u2019\nfor c in hex_pc_name:\nif 0x2f < ord(c) < 0x3a:\n\ns+=letters[ord(c) - 0x30]\n\nelse:\n\ns+=c\n\nFor instance, if the computer name is random-pc and the version ID is 0x0a841523 then the following \ndomain could be created:\n\nniggmhggmeggmkggmfggmdggidggngggmjgg.ijhlokga.dwarduong[.]com\n\nThe following regular expression could be used to flag a C&C server for this backdoor:\n\n[ghijklmnopabcdef]{4-60}\\.[ghijklmnopabcdef]{8}\\.[a-z]+\\.[a-z]+\n\nIf an IP address is resolved for this particular domain, then the malware tries to establish a \nconnection on TCP port 25123. Each sample has three different domain names it can use to find its \nC&C server.\n\nAll communication is encrypted using RC4 and compressed with LZMA. It is possible to decrypt the \ntraffic because the key is prepended to the packets. The format is:\n\n[RC4 key (4 bytes)][encrypted data]\n\nEach byte of the key is generated using the rand function. Once the packet is decrypted and \ndecompressed, the data follow the format:\n\n[dw:unknown][dw:unknown][dw:command number][dw:size of data][dw:unknown]\n[dw:data]\n\nThe first time the client connects to the server, a UUID is returned and used as a session \nID. The latter is stored in the registry key as binary data: HKCU\\SOFTWARE\\Classes\\\nAppXc52346ec40fb4061ad96be0e6cb7d16a\\DefaultIcon\n\nAs mentioned earlier, the backdoor also contains a library called HTTPprov. This library is an \nalternative way, as a backup, to communicate with the server as a backup. This DLL sends a POST \nrequest over the HTTP protocol to communicate. It also supports HTTPS and the usage of a SOCKS5, \nSOCKS4a or SOCKS4 proxy. The library is statically linked with libcurl.\n\nOnce its initialization is done, the following registry key is created to instruct the backdoor \nto use HTTP in future communication with the C&C server: HKCU\\SOFTWARE\\Classes\\\nCLSID{E3517E26-8E93-458D-A6DF-8030BC80528B}.\n\nA generic user agent is used: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; \nTrident/4.0).\n\n15\n\nOceanLotusOld techniques, new backdoor \n \n \n \n\fThe most distinctive characteristic of this library is the custom URI encoding algorithm. The resource \npart of the URI is created using the following pseudocode:\n\nbuffEnd = ((DWORD)genRand(4) % 20) + 10 + buff;\nwhile (buff < buffEnd){\n\nb=genRand(16);\nif (b[0] - 0x50 > 0x50)\n\nt=0;\n\nelse\n\n*buf++= UPPER(vowels[b[1] % 5]);\n\nv=consonants[b[1]%21]);\nif (!t)\n\nv=UPPER(v);\n\n*buff++= v;\nif (v!=\u2019h\u2019 && b[2] - 0x50 < 0x50)\n\n*buff++= \u2018h\u2019;\n*buff++= vowels[b[4] % 5];\nif (b[5] < 0x60)\n\n*buff++= vowels[b[6] % 5];\n\n*buff++= consonants[b[7] % 21];\nif (b[8] < 0x50)\n\n*buff++= vowels[b[9] % 5];\n\n*buff++= \u2018-\u2019;\n\n};\n*buff=\u2019\\0\u2019;\n\nNOTE: For clarity, the length-checking part has been removed from the snippet.\n\nFrom this generated string, two numbers are computed based on the custom checksum to obtain a URI:\n\nchecksum=crc32(buff)\nnum2=(checksum >> 16) + (checksum & 0xffff) * 2\nnum1=(num2 ^ 1) & 0xf\nURL=GENERATED_DOMAIN+ \u201c/\u201d + num1 + \u201c/\u201d + num2 + \u201c-\u201d + buff\n\nBy adding the URI generator of the HTTPprov library, the following URL could be generated:\n\nhXXp://niggmhggmeggmkggmfggmdggidggngggmjgg.ijhlokga.aisicoin[.]com/ \n13/139756-Ses-Ufali-L\n\n16\n\nOceanLotusOld techniques, new backdoor \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fCommands\n\nAfter receiving its SESSIONID, the backdoor does a fingerprint of the system. The packet is built  \nin this fashion:\n\nOffset in the \npacket\n\nDescription\n\n0x000\n\n0x001\n\n0x002\n\n0x003\n\n0x007\n\n0x027\n\n0x079\n\n0x179\n\n0x279\n\n0x379\n\n0x3f9\n\n0x400\n\n0x401\n\nbyte: value varies in each version\n\n0x01: hardcoded byte\n\nbool: is elevation token present\n\ndword: version ID\n\nstring (UTF-16), computer name (0x20 bytes max)\n\nstring (UTF-16), user name\n\nregistry query result of the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\\nCurrentVersion values:ProductName, CSDVersion, CurrentVersion, \nReleaseId, CurrentBuildNumber and the result of the call to \nIsWow64Process (x86|x64) \n\nFollowing format string \u201c%s(%s);\u201d replaced with \n(GetVolumeInformationW:VolumeNameBuffer),VolumePathNames\nPhysicalDrive deviceIOControl 0x2D1400 (IOCTL_STORAGE_QUERY_\nPROPERTY) (VolSerialNumber)\n\nwmi SELECT SerialNumber FROM Win32_BaseBoard\nGetSystemTimeAsFileTime\n\nbool: unknown\n\ndword: obtained from the decryption of the resource\n\nHere\u2019s an example of a fingerprint of a system:\n\nFigure 11 \n\nSystem fingerprint\n\n17\n\nOceanLotusOld techniques, new backdoor \n\fThis is a full-featured backdoor that offers its operators many capabilities, such as file, registry  \nand process manipulation, loading additional components, and performing a system fingerprint. \nHere\u2019s the list of supported commands:\n\nCommand \nnumber\n\nDescription\n\n0\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\nFingerprint\n\nSets the session ID\n\nCreates a process and gets the output (using pipes)\n\nSets the connection retry counter\n\nDelays polling time\n\nReads a file or registry key and computes the MD5\n\nCreates a process\n\nCreates a file, a registry entry or a stream in memory\n\nWrites to the registry\n\nQueries the registry\n\nSearches for files on the system\n\nMoves files to another directory\n\nDeletes files from the disk\n\nList the drives mapped on the system using the \nGetLogicalDriveStringW function\nCreates directory\n\nDeletes directory\n\nReads a file from an offset\n\nCalls the PE Loader (switch to HTTPprov communication)\n[Unknown] \n\n0: Query a value from the registry, 1:Drop and execute a \nprogram\n\nSets an environment variable\n\nRuns shellcode in a new thread\n\nRetrieves an environment variable\n\n+23 in new \nversion\n\nRestarts itself if the \u201cAPPL\u201d environment variable doesn\u2019t exist\n\nCONCLUSION\n\nOnce again, OceanLotus shows that the team is active and continues to update its toolset.  \nThis also demonstrates its intention to remain hidden by picking its targets, limiting the distribution \nof their malware and using several different servers to avoid attracting attention to a single domain \nor IP\u00a0address. The encryption of the payload, together with the side-loading technique \u2013 despite  \nits age \u2013 is a good way to stay under the radar, since the malicious activities look like they come  \nfrom the legitimate application.\n\n18\n\nOceanLotusOld techniques, new backdoor\fIoCs\n\nSamples\n\nTable 1. \n\nInitial Dropper\n\nSHA1-1\n\nFilename\n\nESET Detection Name\n\nfdcb35cd9cb8dc1474cbcdf1c9bb03200dcf3f18 RobototFontUpdate.exe\n\na40ee8ff313e59aa92d48592c494a4c3d81449af Firefox Installer.exe\n\nc2eb1033bc01ab0fd732a7ba4967be02c0690bf0\n\n20170905-Evaluation \nTable.xls.exe\n\nd35695f2366a43628231e73ffa83ca106306a8fa CV_LeHoangThing.doc.exe\n\nWin32/TrojanDropper.\nAgent.RUI\n\nWin32/TrojanDropper.\nAgent.RUI\n\nWin32/TrojanDropper.\nAgent.RUI\n\nWin32/TrojanDropper.\nAgent.RUI\n\nfe0161fb8a26a0bf4afad746c7ebf89499dcd3a7\n\n032ef58b7978d079287874044dc516af624ae5f5\n\n2a387d7d47a63d6e47d9cc92d3dc69a53816c2c0\n\n7105caa6d4fd8a2c67523d385277528e556ae4f6\n\nf96bcd875836da89800912de1e557891697c7cf4\n\nChi tiet don khieu nai \ngui saigontel.exe\n\nWin32/TrojanDropper.\nAgent.RUI\n\nMi17 Technical issues - \nPhonesack Grp.exe\n\nWin32/TrojanDropper.\nAgent.RUI\n\nSorchornor_with_PM_-_\nSep_2017.exe\n\nWin32/TrojanDropper.\nAgent.RUI\n\nUpdated AF MOD contract - \nJan 2018.exe\n\nWin32/TrojanDropper.\nAgent.RUI\n\nremove_pw_Reschedule of \nCISD Regular Meeting.ex_\n\nWin32/TrojanDropper.\nAgent.RUI\n\nTable 2. \n\nSideloaded libraries\n\nSHA1-1\n\nFilename\n\nESET Detection Name\n\n82e579bd49d69845133c9aa8585f8bd26736437b rastls.dll\n\n202fb56edb2fb542e05c845d62ffbdcfbebed9ec McUtil.dll\n\nWin32/Salgorea.BD\n\nWin32/Korplug.MK\n\nNetwork\n\nIP addresses\n46.183.220.81\n46.183.220.82\n46.183.222.82\n46.183.222.83\n46.183.222.84\n46.183.223.106\n46.183.223.107\n74.121.190.130\n74.121.190.150\n79.143.87.230\n\n19\n\nOceanLotusOld techniques, new backdoor \n \n\f79.143.87.233\n84.38.132.226\n84.38.132.227\n149.56.180.243\n158.69.100.199\n164.132.45.67\n192.34.109.163\n192.34.109.173\n198.50.191.194\n198.50.191.195\n198.50.234.96\n\n198.50.234.111\n\nDomain names\nadineohler[.]com\naisicoin[.]com\nalicervois[.]com\nanessallie[.]com\nantenham[.]com\narinaurna[.]com\narkoimmerma[.]com\naulolloy[.]com\navidilleneu[.]com\navidsontre[.]com\naximilian[.]com\nbiasatts[.]com\nbraydenhateaub[.]com\ncarosseda[.]com\nchascloud[.]com\ndreyoddu[.]com\ndwarduong[.]com\neckenbaue[.]com\neighrimeau[.]com\nerrellawle[.]com\nerstin[.]com\nfrahreiner[.]com\nhieryells[.]com\nhristophe[.]com\nichardt[.]com\nicmannaws[.]com\niecopeland[.]com\nirkaimboeuf[.]com\njamedalue[.]com\njamyer[.]com\njeanessbinder[.]com\njeffreyue[.]com\nkeoucha[.]com\nlaudiaouc[.]com\nlbertussbau[.]com\nloridanase[.]com\nmarrmann[.]com\nmeroque[.]com\nmoureuxacv[.]com\n\n20\n\nOceanLotusOld techniques, new backdoor\fmyolton[.]com\nnasahlaes[.]com\nntjeilliams[.]com\nomasicase[.]com\nonnaha[.]com\nonteagle[.]com\norinneamoure[.]com\norresto[.]com\norrislark[.]com\nrackerasr[.]com\nrcuselynac[.]com\nsanauer[.]com\nstopherau[.]com\ntefanie[.]com\ntefanortin[.]com\ntephens[.]com\ntraveroyce[.]com\ntsworthoa[.]com\nucaargo[.]com\nucairtz[.]com\nurnage[.]com\nvenionne[.]com\n\nvirginiaar[.]com\n\nHost-based\n\nWindows registry keys\nHKCU\\SOFTWARE\\Classes\\AppXc52346ec40fb4061ad96be0e6cb7d16a\\\nHKCU\\SOFTWARE\\Classes\\AppX3bbba44c6cae4d9695755183472171e2\\\nHKCU\\SOFTWARE\\Classes\\CLSID{E3517E26-8E93-458D-A6DF-8030BC80528B}\\\nHKCU\\SOFTWARE\\Intel\\Display\\igfxcui\\igfxtray\\;[NUMBER];[DWORD] (set by command #19)\n\nLast IoC update: 2018-02-22 18:30:46 Eastern Standard Time \n\n21\n\nOceanLotusOld techniques, new backdoor\f"], "URLs": [], "weight": 0.0}