{"rule_id": 590, "name": "casper-malware-babar-bunny-another-espionage-cartoon", "description": "-", "references": [], "File_Names": ["Casper_DLL.dll", "aiomgr.exe", "perfaudio.dat", "domcommon.exe", "jpic.gov", "strategy.xml"], "MD5_Hashes": [], "SHA1_Hashes": ["E4CC35792A48123E71A2C7B6AA904006343A157A", "C2CE95256206E0EBC98E237FB73B68AC69843DD5", "F4C39EDDEF1C7D99283C7303C1835E99D8E498B0", "75BF51709B913FDB4086DF78D84C099418F0F449", "7F266A5E959BEF9798A08E791E22DF4E1DEA9ED5"], "SHA256_Hashes": [], "Registry_Entries": ["HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\u201d.\n\nThe tag provides an argument to give to the payload. The exact value of the argument\nis critical to the \u201ccorrect\u201d execution of the payload. The actual verification in the\npayload is subtle: the argument is used in a custom algorithm to find library functions\nin memory. Unless the value is correct, the addresses of these library functions will be\nwrong, resulting in a random-looking crash of the payload.\n\nDropper cleans itself\n\nBefore terminating its execution, the dropper removes itself from the system, using\nthe method defined in the AUTODEL attribute. It should be noted that the payload is\nnot launched at this moment: it will be run only at the next startup thanks to the\nprevious persistence method.\n\nPayload\n\nSimilarly to the dropper, Casper payload\u2019s execution is based on an XML configuration\nfile decrypted at run-time, and shown in Figure 3.\n\n5/11\n\n\fFigure 3 \u2013 Casper\u2019s Payload Configuration File\n\nThis configuration file starts with a timestamp, which corresponds to Monday, the 7th\nApril 2014 at 21:27:05 GMT. Therefore, the compilation timestamps \u2013 set to 2010 \u2013\nhave very likely been forged.\n\nA series of tags will then control the payload\u2019s behavior, as described in the following\narray.\n\nattribute\nattribute\n\nID\n\nPurpose\nPurpose\n\nUnknown. It could be used to distinguish operations, as the value is the same in\nthe two payloads hosted on \u201cjpic.gov.sy\u201d.\n\nREGKEY\n\nPath in the Windows registry that will be used as storage area\n\nC&C server\u2019s URL\n\nCryptographic key for the communications with the C&C server\n\nTimers to configure the frequency of the contacts with the C&C server\n\nURL\n\nKEY\n\nDELAYMIN \nDELAYMAX\nDELAYRETRY\n\nThe payload then generates a unique identifier for the machine and inserts it at the\nend of the configuration in a tag. Finally, the configuration is RC4-encrypted and stored\nin the Windows registry.\n\nThe code handling the configuration shows certain capabilities not exploited in these\nCasper samples, for example a TIMETOLIVE attribute to plan the termination of Casper\nafter a certain amount of time, or a DELAYED_START attribute to wait before\ninteracting with the system.\n\nFinally, the payload\u2019s configuration contains the exact same as the dropper.\n\nReport to C&C\n\nDuring its first execution, Casper\u2019s payload executes the following XML file:\n\nThe handler of the \u201cSYSINFO\u201d command retrieves information about the system and\nbuilds a report containing several sections, as shown in Figure 4.\n\n6/11\n\n\fFigure 4 \u2013 SYSINFO Command\u2019s Result\n\nThe titles of the report sections are self-explanatory. Interestingly, the version of the\nmalware is clearly mentioned: 4.4.1. This report is then base64-encoded and sent to\nthe C&C server in the body of an HTTP POST request. It will also be written into a\ntemporary file named \u201cperfaudio.dat\u201d.\n\nThe network request will also have a cookie named \u201cPREF\u201d filled with the concatenation\nof the machine UID, the configuration ID, the version of Casper and the hardcoded\ncharacter \u201cR\u201d, all base64-encoded.\n\nC&C\u2019s possible answers\n\nDue to the C&C being down at the time of the investigation we can only speculate on\nthe rest of the execution based on Casper\u2019s known capabilities.\n\n7/11\n\n\fAt this point, the binary regularly contacts the C&C server with a cookie similar to the\none in the SYSINFO request, but this time with \u201cG\u201d as the hardcoded character instead\nof \u201cR\u201d. Our analysis of the binary reveals that the server can then send back a PNG\nimage \u2013 with the correct header and format for a PNG file \u2014 from which a XML\ncommand file will be decrypted and executed.\n\nIn addition to the \u201cSYSINFO\u201d command, Casper can handle tags with the following\nvalues:\n\n\u201cEXEC\u201d to execute a program on the machine from its local path\n\u201cSYSTEM\u201d to execute commands in a Windows command prompt\n\nFinally, Casper can also handle tags, whose content is a Windows executable to deploy\non the machine.\n\nHow Does Casper Relate to the Other Cartoons?\n\nOur best chance of establishing that the same developers are behind Bunny, Babar\nand Casper is to identify unusual code or algorithms shared between these various\nprograms. In our comparison we also take into account the so-called \u201cNBOT\u201d malware\n(also known as the \u201cTFC\u201d malware), whose link with Babar and Bunny was established\nby Marion Marschalek in her Babar report. Here is a non-exhaustive list of such\nshared features we observed:\n\nCasper hides its calls to API functions by using a hash calculated from the\nfunctions\u2019 names, rather than the names themselves. The hashing algorithm is a\ncombination of rotate-left (ROL) of 7 bits and exclusive-or (XOR) operations.\nNBOT uses the exact same algorithm for the same purpose, whereas Babar\nhides its API calls in a similar manner but with a different algorithm.\n\nCasper fetches information about the running antivirus in a way similar to\nBunny, Babar, and NBOT, namely through the same WMI request. Moreover, all\nthese malwares compute the SHA-256 hash of the first word of the antivirus\nname, although in Casper it is actually never used.\nCasper generates delimiters for its HTTP requests by filling a specific format\nstring with the results of calls to the GetTickCount API function. The same code is\npresent in some NBOT samples, as shown in the following array.\n\n8/11\n\n\fCasper removes its dropper by executing a Windows command created from the\nfollowing format string:\n\ncmd.exe /C FOR /L %%i IN (1,1,%d) DO IF EXIST \u201c%hs\u201d (DEL \u201c%hs\u201d & SYSTEMINFO) ELSE\nEXIT\n\nIn some NBOT samples we can find the following similar syntax:\n\ncmd.exe /C FOR /L %%i IN (1,1,%d) DO IF EXIST \u201c%s\u201d (DEL \u201c%s\u201d & PING 127.0.0.1 -n 3) ELSE\nEXIT\n\nCasper uses an \u201cID\u201d value set to \u201c13001\u201d, whereas Babar samples contain an ID of\n\u201c12075-01\u201d. Also, the malware discovered in 2009 by the CSEC possesses an ID of\n\u201c08184\u201d (slide 8 of the CSEC slides). This similar format, and the increasing value\nin decimal, could indicate a familial link.\n\n9/11\n\n\fNone of these signs alone is enough to establish a strong link but all the shared\nfeatures together make us assess with high confidence that Bunny, Babar, NBOT\nand Casper were all developed by the same organization.\n\nVictimology\n\nAccording to our telemetry data, all the people targeted during this operation were\nlocated in Syria. These targets may have been the visitors of the \u201cjpic.gov.sy\u201d website\n\u2014 Syrian citizens who want to file a complaint. In this case they could have been\nredirected to the exploits from a legitimate page of this website.\n\nBut we were actually unable to determine if this were indeed the case. In other words,\nit is just as likely that the targets have been redirected to the exploits from another\nlocation, for example from a hacked legitimate website or from a link in an email. What\nis known for sure is that the exploits, the Casper binaries and the C&C component\nwere all hosted on this website\u2019s server.\n\nThis leads us to a second hypothesis: the \u201cjpic.gov.sy\u201d website could have been hacked\nto serve as a storage area. This would have at least two advantages for the attackers:\nfirstly, hosting the files on a Syrian server can make them more easily accessible from\nSyria, a country whose Internet connection to the outside world has been unstable\nsince the beginning of the civil war, as shown in Google Transparency Report.\nSecondly, it would mislead attribution efforts by raising suspicion against the Syrian\ngovernment.\n\nConclusion\n\nAs previously explained, we are confident that the same group developed Bunny,\nBabar and Casper. The detailed analysis of Babar in the CSEC slides from 2009\nindicates this group is not a newcomer to the espionage business. The use of zero-day\nexploits is another indication that Casper\u2019s operators belong to a powerful\norganization. Finally, the narrow targeting of people in Syria shows a likely interest in\ngeopolitics.\n\nNevertheless, we did not find any evidence in Casper itself to point a finger at a specific\ncountry. In particular, no signs of French origin, as suggested by CSEC for Babar, were\nfound in the binaries.\n\nHashes\n\nSHA1\nSHA1\n\nNoteNote\n\nESET Detection\nESET Detection\nName\nName\n\n75BF51709B913FDB4086DF78D84C099418F0F449 DLL Dropper\n\nWin32/ProxyBot.B\n\n7F266A5E959BEF9798A08E791E22DF4E1DEA9ED5 DLL Dropper\n\nWin32/ProxyBot.B\n\n10/11\n\n\fSHA1\nSHA1\n\nNoteNote\n\nESET Detection\nESET Detection\nName\nName\n\nE4CC35792A48123E71A2C7B6AA904006343A157A\n\nExecutable Dropper Win32/ProxyBot.B\n\nF4C39EDDEF1C7D99283C7303C1835E99D8E498B0 X86 Executable\n\nWin32/ProxyBot.B\n\nPayload\n\nC2CE95256206E0EBC98E237FB73B68AC69843DD5 X64 Executable\n\nWin32/ProxyBot.A\n\nPayload\n\nIndicators of Compromise\n\nIndicator\nIndicator\n\nValue\nValue\n\nDropper\u2019s file name\n\ndomcommon.exe\n\nPayload\u2019s file name\n\naiomgr.exe\n\nC&C URLs\n\nhXXp://jpic.gov.sy/css/images/_cgi/index.php\n\nMutex name\n\n{4216567A-4512-9825-7745F856}\n\nKey for configuration decryption 7B 4B 59 DE 37 4A 42 26 59 98 63 C6 2D 0F 57\n\n40\n\nTemporary file name\n\nperfaudio.dat\n\nImage: PAISAN HOMHUAN / Shutterstock.com\n\nJoan Calvet 5 Mar 2015 - 01:55PM\n\n11/11\n\n\f"], "URLs": [], "weight": 0.0}