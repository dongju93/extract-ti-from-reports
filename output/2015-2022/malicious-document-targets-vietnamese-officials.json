{"rule_id": 846, "name": "malicious-document-targets-vietnamese-officials", "description": "-", "references": [], "File_Names": ["Winword.exe", "sodexoa.com", "dulichculao.com", "Dascgosrky.exe", "scryptmail.com", "tooganuh.com", "dulichbiendao.org", "onstaticcache.dat", "vietbaotinmoi.com", "sinkhole.net", "toonganuh.com", "dascgosrky.exe", "impresstravel.ga", "sggpnews.com"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File\nExecution Options\n\nAnd we set a value string for launching the debugger when EQNEDT32.exe\n\nis executed and attaching the debugger to the process .\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fValue to set the debuuger when EQNEDT32.exe is executed\n\nWhen we open the rtf document, Winword is launched and EQNEDT32.exe\n\nalso.\n\nWinword process\n\nEQNEDT32.exe process attached by the debugger\n\nAnd the debugger is attached at the entrypoint of EQNEDT32.exe.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\nWe check if it\u2019s 8.t is correctly created in the %TMP% folder.\n\n\f8.t dropped on disk\n\nNow we set a breakpoint at the createFile to check if the shellcode of the\n\nexploit reads the file 8.t.\n\nCreateFile is called at call eqnedt32.41E5EE.\n\nThe param of the path of file is pushed on the stack push dword ptr ss:[ebp-\n\n4].\n\nThe shellcode uses CreateFile to the 8.t in the %TMP% folder\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\nSo now, we can return of the user code at the calling function.\n\n\fAfter a step into, we enter in the shellcode, the address space has changed:\n\nShellcode of the exploit\n\nAfter CreateFile, GetFileSize is called to have the size of the file\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\nGet the size of the file\n\n\fAfter is Virtualloc, and it create a memory page at 1FD0000 (eax value)\n\nVirtualAlloc memory page to load 8.t\n\nAfter virtualAlloc, the memory page is pointed by EAX\n\nThe page allocated\n\nReadFile is called:\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fReadfile 8.t\n\nAnd 8.t is loaded at 1FD0000:\n\n8.t in memory\n\nAnd the shellcode decrypts the 8.t file in memory at 0066C82A.\n\nThe loop of decryption is a xoring with different manipulations on the\n\ndecryption key.\n\nAt the start of the decryption the key is set to 7BF48E63.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fDecryption loop\n\nAnd the xor is made after key manipulation.\n\nSet the decryption key in EAX\n\nIf we check the destination of the result of the xoring (here edx + ebx), we\n\nfind 01FD0000 where 8.t is loaded.\n\nAfter two step of the loop, we can see the magic number MZ set at the begin\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\nof memory section.\n\n\fMZ magic number\n\nAt the end of the decryption loop, we have a PE in memory at 01FD0000.\n\nthe file 8.t has been decrypted.\n\n8.t fully decrypted\n\nThen, the shellcode uses the VirtualAlloc and create a memory page at\n\n02070000.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fAnd the new PE at 01FD0000 is copied at this address.\n\nthe PE decrypted is copied in the new memory page\n\nAfter GetModuleFileNameA is called to have the path of EQNEDT32.exe\n\nAnd EQNEDT32.exe is forked in suspend status by a CreateProcess and the\n\nshellcode overwrite it by the PE at the address 02070000\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\nFork of EQNEDT32.exe\n\n\fOverwritting of EQNEDT32.exe\n\nStack used by NTWriteVirtualMemory\n\nAnd the shellcode does a ResumeThread to launch the new PE.\n\nSo, We\u2019ve found all API Calls in the object ole at the beginning and we have\n\na runPE to launch the new EQNEDT32.exe overwritten.\n\nAnalysing the fork of EQNEDT32.exe\nWe know that this process has to create on disk two files following the Joe\n\nSandBox Analysis:\n\n\u2022\n\n\u2022\n\nA dll named RasTls.dll\n\nA executable file named dascgosrky.exe\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\nIf we dump EQNEDT32.exe and we put in IDA, we found quickly the\n\n\fIf we dump EQNEDT32.exe and we put in IDA, we found quickly the\n\nfunction that drops the files on disk (sub_00401150) renamed dropFiles.\n\nDropFiles Fucntion\n\nAnd at the start of this functions, we have a loop with a xor.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fSecond loop of decryption\n\nAnd just after we have a call of the decompression function.\n\nDecompression function used zlib\n\nThe function dropFiles is called twice by the sub_4012D0.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fDrop the dll and the executable\n\nIf we check the call graph, DropFiles is called only by the function\n\nsub_4012D0.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fFunctions using DropFiles function\n\nSo we set a breakpoint on CreateFile because at each execution,\n\nEQNEDT32.exe starts by CreateFile onstaticcache.dat.\n\nBreakpoint to createfile\n\nAnd we return at the user code to set a new breakpoint to check the static\n\nanalysis.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\nSo we set a breakpoint at 0040159A when DropFiles is called.\n\n\fSo we set a breakpoint at 0040159A when DropFiles is called.\n\nBreakpoint to the first call of DropFiles\n\nAnd now we can analyse the second loop of decryption.\n\nThe first step is the initialization of the decryption function.\n\nSet for the second loop encryption\n\nAnd after we find the xor and store the result in esi+eax.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fDecryption loop\n\nIn the first step of the decryption loop, the result is written to 411BC0 in the\n\naddress space of EQNEDT32.exe.\n\nBefore the decryption\n\nAfter tree loops, we obtains the header of zlib compressed object.\n\nAfter the decryption\n\nAnd at the memory page 021E0000, a PE is decompressed.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fPage memory allocated to store the dll\n\nAfter decompression\n\nAnd after the file is created with the following path:\n\nL\u201dC:\\\\Users\\\\IEUser\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Netw\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fork Shortcuts\\\\RasTls.dll\u201d\n\nStored by ebx.\n\nDropFiles is called a twice to decrypt and decompress the executable file.\n\nThe offset where store the file is 00434EF8 and the pe decompressed is\n\nstored at 025D0020\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fDecryption of the executable dascgosrky.exe\n\nAnd the path of the new file is : ebx=005DA228\n\nL\u201dC:\\\\Users\\\\IEUser\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Netw\n\nork Shortcuts\\\\dascgosrky.exe\u201d\n\nSo we have two files in networks shortcuts of Windows.\n\nFiles drops on disk\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\ndll hijacking\n\n\fdll hijacking\nDascgosrky.exe is a legit and trusted software develop by Symantec.\n\nTo load the library RasTls.dll, the executable calls LoadLibrary and\n\nGetProcaddress in sub_401940 to execute the malicious functions\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fDascgosrky.exe loading the malicious\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fThe original file\n\nIf we check the exports in IDA, we just have a dllentrypoint. The dll is\n\nexecuted like this.\n\nWe\u2019ll analyse the RAT in the second Part.\n\nInfrastructure of Attackers\nThe domain contacted is wouderfulu.impresstravel.ga and this domain\n\nresolved on 192.99.181.14.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fDomain wouderfulu.impresstravel.ga\n\nThis IP has differents domains found with PassiveTotal and theses domains\n\nis recorded in the IP 176.223.165.122.\n\nMany domain names is used for Vietnameses people.\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fExpansion of domains\n\nThere are two domains really interesting:\n\nHalong.dulichculao.com is already used in the campaign targeting\n\nVietnameses organizations.\n\nhttps://www.fortinet.com/blog/threat-research/rehashed-rat-used-in-apt-\n\ncampaign-against-vietnamese-organizations.html\n\nFor Fortinet is the Chinese hacking group 1937CN.\n\nIf we compare the TTPs, it\u2019s really similar. They used RTFs to make the\n\nintrusion and dll hijacking to load the real payload.\n\nAnd the name for domains are really similar between the campaings.\n\nThe second one is:\n\nCat.toonganuh.com is a subdomain of tooganuh.com recorded by\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\nflorence1972@scryptmail.com\n\n\fConclusion\nThe Chinese hacking group 1937CN continues to target Vietnam officials\n\nwith the same TTPs with a refreshing on the tools used. The toolset used by\n\nthis group to create RTF malicious document has the same properpy of the\n\nSideWinder.\n\nI want to thank my buddies on \u201cZone de Confort\u201d. It\u2019s with this dreamteam,\n\nI can finalize correctly this analyses.\n\nIn the second part, we analyze the RAT using in this campaign. Or if\n\nanother reverse can make that, I\u2019ll paid a beer ;)\n\nIOCs:\n\ndomains:\n\ndn.dulichbiendao.org\n\ngateway.vietbaotinmoi.com\n\nfis.malware-sinkhole.net\n\nhn.dulichbiendao.org\n\nhalong.dulichculao.com\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\nnews.malware-sinkhole.net\n\n\fnews.malware-sinkhole.net\n\ncat.toonganuh.com\n\nnew.sggpnews.com\n\ndulichculao.com\n\ncoco.sodexoa.com.\n\nthoitiet.malware-sinkhole.net\n\nwouderfulu.impresstravel.ga\n\ntoonganuh.com\n\ncoco.sodexoa.com\n\nIPs:\n\n192.99.181.14\n\n176.223.165.122\n\nRTFs:\n\n42162c495e835cdf28670661a53d47d12255d9c791c1c5653673b25fb587ffe\n\nd\n\n8.t:\n\n2c60d4312e4416745e56048ee35e694a79e1bc77e7e4d0b5811e64c84a72d2\n\nd7\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\fPE:\n\nf9ebf6aeb3f0fb0c29bd8f3d652476cd1fe8bd9a0c11cb15c43de33bbce0bf6\n\n8 (exe)\n\n9f5da7524817736cd85d87dae93fdbe478385baac1c0aa3102b6ad50d7e5e3\n\n68 (dll)\n\nSecurity\n\nMalware Analysis\n\nThreat Intelligence\n\nLike what you read? Give Sebdraven a round of applause.\nFrom a quick cheer to a standing ovation, clap to show how much you enjoyed this story.\n\n6\n\nSebdraven\nOSINT, Python,Malware Analysis, Botnet Tracker, SIEM and IPS/IDS and\nThreats Expert / co-organizer #BotConf / co-creator of #FastIR\n\nNever miss a story from Sebdraven, when you sign up for\nMedium. Learn more\n\n1\n\nFollow\n\nGET UPDATES\n\nPDF generated automatically by the PDFmyURL HTML to PDF API\n\n\f"], "URLs": ["https://www.fortinet.com/blog/threat-research/rehashed-rat-used-in-apt-", "https://blogs.msdn.microsoft.com/mithuns/2010/03/24/image-file-"], "weight": 0.0}