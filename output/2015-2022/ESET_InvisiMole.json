{"rule_id": 515, "name": "ESET_InvisiMole", "description": "-", "references": ["CVE-2017-0144", "CVE-2019-0708"], "File_Names": ["infocardadd.cpl", "NGEN.cab", "ig_settings.xml", "Settings.ini", "PULSAR_LOADER.dll", "Control.js", "UltraVNC_1_2_24_X64_Setup.exe", "hskin.dll", "Panel.lnk", "wzcdlg.dll", "DMMultiView.exe", "SMInit.exe", "full.exe", "adberdr11000_ru_ru.exe", "epson373260eu.exe", "bdfwfpf.sys", "TVPSkin.dll", "infocard.cpl", "osppc.dll", "WptsExtensions.dll", "windowsupdate.com", "intel_log64.exe", "NLSModels0022.dll", "AIDA64.exe", "stg0D0CE03.dll", "MessageB.txt", "wdigest.dll", "FXSCOMPOSE.dll", "mscorscvs.exe", "lame.dll", "Invoice.cpl", "Iconcache.db", "setupSNK.exe", "WSETTING.WFC", "BDUSBImmunizerLauncher.exe", "Zip.exe", "PULSAR_LOADER.DLL", "stg0D33E0A.dll", "NGEN.exe", "globalsign.com", "WebComponents.exe", "InvisiMole.The", "0407.exe", "qhsafetray.exe", "speedfan.sys", "api64.cmd", "Ngen.cab", "intel_log64.cmd", "Tools.Lite", "imageapplet.dat", "alcrmv.exe", "fodhelper.exe", "CompMgmtLauncher.exe", "SamsungUniversalPrintDriver3.exe", "kb043921.exe", "osppcext.dll", "UltraVNC_1_2_24_X86_Setup.exe", "NlsModels0019.dll", "SMinit.exe", "lanscope_setup.exe"], "MD5_Hashes": [], "SHA1_Hashes": ["76FC2E29524C6AD58B0AF05251C419BB942CCED0", "6A6D956A8108E0D5339751927D5576369C0E2C34", "E85D7F0564771C9396FDCDB9877DB0FF61C1D515", "DBD21EF03CCC3A985D808B0C5EC7AC54DED5D1C9", "5D69782FFF60365FE81C58D5887C151D326CF731", "0197D794FA28B189B3B938FB384CC94E5F1D1733", "7901AD25A3673AC9CB1B6AE1FC9DC57A4B53383E", "A42FA8FB11DA669124AC7968838427BF8E998872", "0AAB85DDD4E25ADD24E9ECD83C8DD635B3A7C2F3", "D8EB2429253E82729F34373068EC350D1B2DA8AB", "652991303B319F5DE440C18A0F14DF65B82265FB", "AA5E8E21C79B0B4A02726233B9F5EB4994C87AD3", "728386C6D6EAF43148FE25F86E6AF248019D9842", "D0A769119F628FF0D5110A1E17864036FCB8BE6B", "F4F06C73A4D8091CE0C7229555921F58E735849D", "A27BB3E5F1CF56C89E5F9816CF8C5796D2FBB09E", "793F4DD2B765ECD962A053246646ED0D6144D249", "3BB2C05DEA077835A79499A0BB81410D27EEBFAF", "A1FFFB96415CF4146B056C9A847DC6EECD882DBB", "6F98B12C98DA1FCFF078256970E9B8EF12139640", "11EBA9E198C458A8D86D70BD64B3FDB0163A38C4", "82D653D71DC024C19894C2B2207D6C3414CA1B01", "A695FA12F97971A065FED927A30278C94C78C722", "8147E85E13B3624FA290F1F218647A0D1FD70204", "FFB74AF734453973FED6663C16FB001D563FAF1C", "9A3E870B61C4F37514F6E3E3FAB4D4506D3B50DB", "09821EB9F2B79501B3928FBA2F313C723FEBB1B3", "DE6D8B66BE01934D672C04E92EA2EDC0210BF00E", "0B57CD2393E29084D545300D1749AA50EB23A8AB", "F8CAA729C28EF6B0EC8AA74399CE4EE7A59B895C", "554AA9A39CC241AAD5FBDC5FD39CECCB1EB9E7D0", "DBEA8DAF48CC54C7CFB0DCC689D4C9549D3DD23F", "D98D258C234F5CEAD43FD897613B2EA2669AA7C0", "B7FEE003B413AF3297DB60D0FC845A054FE080D2", "5126A83A9D9B29598B36540647FFBA2834C82AE3", "B988F107E5F20CDC424EC9F470D157435FC03966", "9987c0b97cb6a0239d3af6e5a70b552e1c38810f", "857EEB37DB2B666981779005DD5E55CEA7A53233", "7752BD1C02E5DC7B0975FC6A1C73145A2A83D079", "CE94EC2CFB23D8C662F558C69B64104C78B9D098", "40D02DDB8BE27726135C4A0E20E2BBABDA84D0FF", "A203A7EEF726473911031578ADBF17CB83FE214B", "6DECBFCA132364CBD66DD07118959BCE95F83168", "7BA31B83B2ADF7A9B43C56F4882D217512F333AF", "CC595AAE9573BEEF92DE12C3DE9C85F7E9E1CD6D", "E1599FB73DDE78531BBF65063F10F239AEF29D70", "66B7DB6E755EC648AEE210F163655A5662562DEE", "E936E857A812690178ED049FD4A1766E281B9F1D", "F4A60039D7C9FC337AE2F59D09F6F6F3D1FF7DE3", "4a6dc6a32a777dc5dd47221bf79604bc0258a987", "F67300541D769C5AA071C766198F0B7E25476B23", "2402765EA67E04F151D32BF2B749B150BBD3993E", "7E8B99968C59FDE046DF3ECECED6049E4DFA7225", "B894F320569286B56F4272D0CBBA4DB10C645AE0", "B7712BBE5DE4386BAB11F61F1731C358648DECE6", "2F13F5DD481FB251991E0CC05DB9C06A4C1D6ED8", "3EF0D0278DB40F6116645B0B915D56374EB77004", "BFEF295D375A60A2EEFE416709DE73F14AC1416C", "355F026D6F8C43956B8D326026038BF809F7350D", "DDB871AD5823BE31F5176F2B0CE149D4B6E44F24", "4B8E11E0734D3109627FF8871EF7DB14C0DE9C41", "16E9B0ADBD53849E7F3A04FA8A5BF78E73A86841", "E489C4D6CA1DAFA034F7FADBF27DEEB202189833", "7AE0CA52F4690CA09558A94D4CE5B521B3A3E3FF", "21F320DEBDD4D97FA5420AF31A55FBC77B923819", "A527B41D60028BE24BE8CAC69DE9445401F280CD", "A419F091723A5632DA85B0930F3B260599672C00", "9B48090704C3F62D6B768780845E2D04862F5219", "EE7D06FC93D3C608B48823D1444148327330015A", "9F64FEC50D4447175459AAB33BC9126F9A3370D8", "5F09DF19232E0A77495EEDB1B715D9EF0B909634", "55F6185AD64997756ADF03BC2D4CC4ABF5C64E4E", "20FF1A290A53B39C4E54A670E8C27852BE8BCFF4", "66F9EA8017CD899AB146DED2E341201B51A9CE9F", "7114B2E031D8853434028D39873338C33CE67C16", "2E7F737CAEB56716ACE36FADEB74EE610705283F", "C0E73E522D09344A278D45A524A50CF4FCC87817", "6AA50BAE4D9529A60FE566115068E6BDF418786D", "27FC1DCB1B3DCA3E496F799A2944E4FB070AF39C", "E9AF42C4CF0299EEA7B405F9E3E925BCAFAB9F2B", "10C548992567A04DA199D09E3CA4B0C47B7A136C", "02F4242F7CA7289C8EDFA7B4F465C62C7A6815E2", "094DAEA5B97C510A8E9CFE3585B39B78522A2C61", "CD3419B4B3958BE5BE1CAEA60A4EE98E4D427A6D", "12EBD779D5BB416D05550D9ECBADF5A9EF89436C", "81BD3140F222FAC2DC6610E0CE79EDF34B599D47", "31FAE273942A1E432DE91400F5D625F88101B966", "6DEF96407F52B3C82D665B2C6A9B230B3D080CD1", "4A6DC6A32A777DC5DD47221BF79604BC0258A987", "3B923FA1E5DCB4F65DAA138BECEB123D7C431D1B", "3E49B3DD812AAE4997C4C9FF2843EAAC32F55A94", "4BBED6E307D214CAB9AE395E1F49104446B54D5A", "00EA86AAB3D616A24A5E13D592FABC26416DFDBD", "7FE30CA69E6631CB9333C37F72E3CABBE8CE366C", "AF67F640F33D1A46719056B66F45B91B2D56910A", "F7EF9A3501EEBCFFA4615CC3BD473F65A203A1D6", "A3AFF8CE55907DAA1F3360DED01BCF3F6F9D0CF2", "4C13AD9AD9C134DE15F3AE5E2F0D2EC1E290DEE8", "96D5E7C32AC299770E11DF521F867538361D9A8B", "E0B9C24DD5620FF70CB80002A4A772E16EB331F2", "E3BF27F1303BFDB877D1699D5B480342A9A2FE58", "8C5F463FA79601DE38D0A77808226B1A8E67459A", "065DEB443AAE29700D09CB395C928C919C3A7352", "6ECF2532A8E3AB1888088A503D4A7CA57A7BAA82", "FB4401DEA8911BEAB788E87A576EF5568DA82ED5", "9987C0B97CB6A0239D3AF6E5A70B552E1C38810F", "D8B101B588DA6DA3CBE3E161C91986E64D6DD290", "80D48821135D904CAF2DF0FE2883A6F104BE1639", "B61A277719359582071DB4CD448D3E9D0A460B1D", "32A9FF262649623CBFF4C6B29BD8ED7F803E75E3", "9B1E0A22DEB124FF36FCF7ED2EA82E799B49B070", "C5DE2BF0E13E741508A7EB4C67DED301ABA391CE", "303A63CE12AD42900DA257428E2FD4DE4F9829DC", "2161A471B598EA002FC2A1CC4B65DBB8DA14A88E", "798AF02CA0C8F92B1623A1F1CF25DA4916C04A74", "42086128F7213931D438BF127CC61D3F9483014A", "125FCA6EBD82682E51364CF93C9FFA8EB4F6CA5F", "60197B570D2ACF93A6F92B548D08A3CAF80A1579", "240C8157E5E053B70C4D301D852C609C212F85F3", "9091BE6630AD170D15CA6A6722CE53619AC61229", "B1B3E88494F7C27354E68D83E16EB65BBEFC7FB3", "6C49BF35116A147C7F3C5CE15ABA041F272E60B5", "371971130EE56AB5B7FEA61A80054F5E81E4027D", "D5D3A01A5944D55E5DDF1F915E88043691BE6F58"], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\Software\\Microsoft\\EventSystem\\AutoEx{A,B,C}.\n\nCommunication protocol\nFor C&C communication, the DNS downloader uses a custom implementation of DNS tunneling, building \n\nits own protocol on top of the DNS protocol. The downloader sends DNS NULL and DNS AAAA requests for \n\nsubdomains of attacker-controlled domain names, such as 153[.]re.\n\nThe downloader encodes the client\uf0e0server part of the protocol in the subdomain. The subdomain is \n\ngenerated for each request from information such as the request type, current timestamp, PC name, \n\nsystem volume serial number and other identifiers, using the following domain encoding algorithm:\n\n1.  The binary message is converted to bit strings, with LSB first, e.g. 0xC0 \uf0e0 \u201c00000011\u201d\n\n2.  The resulting long bit string is padded to multiples of 5.\n\n3.  The bit string is encoded using a modified base32 encoding, with the custom conversion table \n\nabcdefghiklmnopqrstvxyz123456789 and no padding.\n\nExample of a generated subdomain with encoded message:\n\na8y3g5f2h2aaybyfplr4xcbaaaaaaaaaaaaaahoraaaaaaaaaaaaaaaagiacaa.aaaaaaaaaaaae.153[.]re\n\nFor the server\uf0e0client part of the protocol, the attacker-controlled name server encodes the response \n\nin DNS NULL records or in DNS AAAA records, instead of what normally would be a list of IPv6 addresses.\n\nThe size of a DNS record is limited, so a typical communication between the DNS downloader and the C&C \n\nserver consists of a series of DNS requests and replies, with the command or file transmitted in chunks.\n\nTo keep track of such a pseudo-connection, both client- and server-side requests have embedded type and \n\ntransmission ID. All possible request types are listed in Table 1.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f11\n\nTable 1 // InvisiMole\u2019s DNS tunneling protocol request types\n\nID\n\nD7C0\n\nD7C2\n\nD7C3\n\nD7C4\n\nD7C5\n\nD7C6\n\nD7C7\n\nD7C8\n\nD7C9\n\nD7CA\n\nD7CB\n\nSender\n\nComment\n\nClient\n\nServer\n\nServer\n\nStart of communication\n\nNo operation\n\nStart of transmission (of blob)\n\nClient/server\n\nData transmission\n\nServer\n\nServer\n\nServer\n\nServer\n\nServer\n\nServer\n\nServer\n\nStart of transmission (of EXE file)\n\nStart of transmission (of DLL file)\n\nSleep for 30 minutes\n\nSleep for 2 hours\n\nLoad blob from the specified registry key\n\nEach pseudo-connection consists of the following steps, with one of the possible scenarios being illustrated \n\nin Figure 5:\n\n1.  The client sends a 0xD7C0 request to the server to initiate the pseudo-connection.\n\n2.  The server replies with a command to:\n\na\ufffd  sleep for a configured amount of time (0xD7C2/0xD7C7/0xD7C8 requests),\n\nb\ufffd  load InvisiMole blob from a specified registry key/value (0xD7C9/0xD7CA/0xD7CB  \n\nrequests), or\n\nc\ufffd  start transmission of a new module (0xD7C3/0xD7C5/0xD7C6 requests).\n\n1.  In case a transmission is started, the server sends the module size, transmission ID and then the server \n\nand client continue to communicate using the 0xD7C4 request type, until the full module is transmitted.\n\n2.  Finally, the DNS downloader executes the module or loads it in a new thread. If the transmitted module \nis a DLL or EXE file, it is first dropped under a randomly generated name in the %APPDATA%\\Microsoft\\\nAddIns\\ folder.\n\nDNS uses UDP as a transport protocol in most cases, which is not reliable, and so the DNS \n\ndownloader can repeat each DNS request for up to 4 times, to provide better stability for the \n\npseudo-connection.\n\nInvisiMole: The hidden part of the storyTLP: WHITE \n \n \n \n\f12\n\nFigure 5 // Example of how the DNS downloader retrieves an InvisiMole blob from the server\n\nDetection prevention\nTo make sure the C&C communication stays unnoticed, the DNS downloader refrains from contacting the \n\nserver if it suspects it is executed in an analytical environment.\n\nBefore it contacts the C&C server, it checks whether the compromised computer has network connectivity \nand access to a DNS server, by sending DNS A queries (using DnsQuery_A API) for these legitimate domains:\n\n\u2022  time.windows.com\n\n\u2022  crl.microsoft.com\n\n\u2022  download.windowsupdate.com\n\n\u2022  cdn.globalsign.com\n\nIt also checks for presence of selected network sniffers, by looking for artifacts listed in Table 2 on the \n\nsystem. If detected, the downloader waits 60 seconds until the next network activity attempt.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f13\n\nTable 2 // Artifacts associated with network sniffers scanned by the DNS downloader\n\nObject type\n\nObject name\n\nAssociated network sniffer\n\nMutex\n\nWindow name\n\nRunning process\n\nWireshark-is-running-{9CA78EEA-EA4D-4490-9240-\nFC01FCEF464B}\n\nTCPViewClass\n\nPROCMON_WINDOW_CLASS\n\nprocmon.exe\n\nwireshark.exe\n\ndumpcap.exe\n\nWireshark\n\nTCPView\n\nProcMon\n\nProcMon\n\nWireshark\n\nDumpcap (Wireshark)\n\n3.2.3  RC2CL backdoor\n\nRC2CL is the larger of InvisiMole\u2019s backdoors, with extensive espionage capabilities. Depending on the \n\nversion, this backdoor supports up to 87 commands, with capabilities such as:\n\n\u2022  Turning on webcam and microphone devices to capture photos, record video and sound;\n\n\u2022  Capturing screenshots of display or individual windows;\n\n\u2022  Collecting network configuration information, including information about wireless networks (MAC \n\naddress, SSID, beacon interval), that can be used for geo-location of the victims;\n\n\u2022  Collecting information about installed software, about software used by specific users, and about \n\nsoftware executed on user login;\n\n\u2022  Monitoring, sorting and collecting specific documents, such as recently accessed documents.\n\nPlease refer to our earlier blogpost for the full list of RC2CL backdoor\u2019s commands.\n\nIn this recent campaign, the backdoor continues to support these capabilities, with added functionality to \n\nscan the compromised network for hosts that support the vulnerable SMBv1.0 protocol. InvisiMole \n\nuses this capability to spread in the network via the EternalBlue exploit, as detailed in the EternalBlue exploit \n\nchain section.\n\nThe backdoor also continues to use a central staging location for collected data prior to the exfiltration. \n\nUpdated were the magic values used as markings for various types of data, as listed in Table 3, as well as \n\nspecific file and folder name prefixes:\n\n\u2022  Filename prefixes: \u201cT0Q2_\u201d, \u201c~S0PM\u201d, \u201c~A0FM\u201d, \u201c~N031E\u201d, \u201c~E070C\u201d, \u201c70zf_\u201d\n\n\u2022  Subfolder name prefixes: \u201c~T0QM\u201d, \u201cMT0\u201d, \u201cCE55\u201d, \u201c~70Z63\u201d, \u201c~D0E5\u201d\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f14\n\nTable 3 // Magic values\u2014the first four bytes of the files, storing various types of collected data.\n\nMagic value\n\nFile content\n\n91 89 01 DD\n\nUnknown\n\n93 21 01 DA\n\nAudio recordings\n\n93 89 01 DA\n\nWebcam photos\n\n95 89 01 DA\n\nAudio recordings\n\nA1 CA F1 08\n\nData from removable drives\n\nA1 CE F2 24\n\nUnknown\n\nA2 CA F1 08\n\nData from removable drives\n\nB1 CB F2 18\n\nzlib-compressed packages\n\nBA AB 00 19\n\nData from removable drives\n\nC0 AF F2 08\n\nInternal data\n\nC0 CC F1 08\n\nData from removable drives\n\nDF E4 3A 08\n\nScreenshots\n\nFor C&C communication, RC2CL mimics HTTP protocol with custom HTTP \u201cverbs\u201d\u2014HIDE, ZVVP and NOP.\n\nThe new versions of the RC2CL backdoor also have added measures to avoid detection\u2014the backdoor \n\ninjects itself into another process, rather than running directly, if Bitdefender firewall is detected running, \n\nthat is, if any of these artifacts is found on the system:\n\n\u2022  Loaded driver named bdfwfpf.sys\n\u2022  Running process with bitdefender substring in name\n\u2022  Substring enabled=\u201d1\u201d in any of these Bitdefender settings files:\n\n%PROGRAM_FILES%\\Bitdefender\\Bitdefender\\settings\\firewall\\settings.xml \n\n%PROGRAM_FILES%\\Bitdefender\\Bitdefender 2010\\Firewall\\settings.xml \n\n%PROGRAM_FILES%\\Bitdefender\\Bitdefender 2013\\settings\\firewall\\settings.xml \n\n%PROGRAM_FILES%\\Bitdefender\\Bitdefender 2015\\settings\\firewall\\settings.xml \n\n%PROGRAM_FILES%\\Bitdefender\\Bitdefender 2016\\settings\\firewall\\ig_settings.xml \n\n%PROGRAM_FILES%\\Bitdefender\\Bitdefender 2017\\settings\\firewall\\ig_settings.xml\n\n3.2.4  RC2FM backdoor\n\nRC2FM is the smaller of InvisiMole\u2019s backdoors, supporting up to 19 commands depending on the version.\n\nSeveral commands of the older version were used to collect and exfiltrate documents\u2014in specific folders, \n\non mapped drives or network shares. In the new version, the backdoor can also exfiltrate jpeg images from \n\nconnected devices using the WPD interface. The attackers probably use this capability to exfiltrate photos \n\nfrom Media Transport Protocol (MTP) devices, e.g. mobile devices. Many people take photos with \n\ntheir smartphones, so it indeed makes sense for an espionage actor to collect information not only \n\nfrom laptop or desktop computers, but also from smartphones.\n\nThis functionality is achieved using functions such as IPortableDeviceValues and \nIPortableDeviceConnector; a fragment is illustrated in Figure 6.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f15\n\nFigure 6 // Part of decompiled RC2FM backdoor responsible for opening a connected device via the WPD interface\n\nOther added capabilities include keylogging, process discovery, UAC bypass, and ability to create and operate \n\na reverse shell.\n\nSimilar to the RC2CL backdoor, the newest version of RC2FM has added means to avoid detection.\n\n\u2022  It modifies its behavior if selected AV products are detected. More specifically, it suppresses the \n\nkeylogging functionality or injects itself into another process if these processes are found running:\n\nProcess name\n\nAssociated AV\n\nqhsafetray.exe\n\navastsvc.exe\n\nbdagent.exe\n\n360 Total Security\n\nAvast Free Antivirus\n\nBitdefender Total Security\n\n\u2022  It terminates itself if a virtualized environment is detected. \n\na\ufffd  VirtualBox is assumed if the HKEY_LOCAL_MACHINE\\HARDWARE\\ACPI\\DSDT\\VBOX__  \n\nregistry key exists\n\nb\ufffd  Virtual PC environment is tested using vpcext instruction\n\nc\ufffd  VMware environment is tested using cpuid instruction, searching for VMwareVMware signature\n\nInvisiMole: The hidden part of the storyTLP: WHITE \n \n \n\f16\n\n4 \n\nDELIVERY METHOD\n\nWhen we first reported on InvisiMole\u2019s capabilities in 2018, we didn\u2019t know how it gained its initial foothold in \n\nthe network:\n\n\u201c\n\nAll infection vectors are possible, including installation facilitated by \n\nphysical access to the machine.\n\n\u201c\n\nHowever, there were hints the attackers had already obtained administrative privileges before InvisiMole \n\nwas installed on the system\u2014InvisiMole\u2019s loader was placed in the Windows directory. Similarly, most of the \n\nexecution methods used in the recent campaign require elevated privileges, as documented in the Execution \n\nchains section.\n\nWe solved the mystery in 2020 when we observed InvisiMole being delivered by network \ninfrastructure used by the Gamaredon threat group\u2014specifically by Gamaredon\u2019s .NET downloader2 that \nESET detects as MSIL/Pterodo.\n\nThis Gamaredon .NET downloader delivers a 7-Zip SFX package3, which unpacks to a legitimate tool \n\nwinapiexec4\u2014a small tool that enables running Windows API functions through command line parameters. \n\nThe attackers execute the tool using a batch script shown in Figure 7, with shellcode in the command line.\n\nFigure 7 // Batch script that passes InvisiMole\u2019s shellcode to the legitimate winapiexec tool \n\nWinapiexec interprets the command line arguments as Windows API calls, and so it allocates new memory, \n\ncopies the supplied shellcode into that memory and creates a new thread to execute it. The shellcode is \n\nthe InvisiMole TCP downloader, connecting to 80.255.3[.]66:443 to download and then execute a 64-bit \nInvisiMole blob (with 64 DA CE 11 magic).\n\n2 \n3 \n4 \n\n SHA-1: 857EEB37DB2B666981779005DD5E55CEA7A53233\n SHA-1: 303A63CE12AD42900DA257428E2FD4DE4F9829DC\n ESET classifies this tool as a potentially unsafe application, with detection names Win{32,64}/Winapiexec.A potentially unsafe application\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f17\n\nThe components used in InvisiMole\u2019s delivery chain are illustrated in Figure 8.\n\nFigure 8 // Overview of InvisiMole\u2019s delivery chain\n\nLater, we observed a variation of this delivery method, where the Gamaredon .NET downloader delivered \n\nInvisiMole\u2019s TCP downloader5 with added support for user-configured proxies. The downloader was probably \n\nupdated after an unsuccessful attempt to use a direct internet connection without using the proxy.\n\nTable 4 // InvisiMole\u2019s components delivered by Gamaredon\u2019s .NET downloader\n\nSHA-1\n\nFilename\n\nComment\n\n303A63CE12AD42900DA257428E2FD4DE4F9829DC\n\n4B8E11E0734D3109627FF8871EF7DB14C0DE9C41\n\n-\n\n-\n\ndroppers\n\n4A6DC6A32A777DC5DD47221BF79604BC0258A987\n\nintel_log64.exe\n\nwinapiexec tool\n\n6F98B12C98DA1FCFF078256970E9B8EF12139640\n\napi64.cmd\n\n76FC2E29524C6AD58B0AF05251C419BB942CCED0\n\nintel_log64.cmd\n\nbatch scripts\n\nNote that the Gamaredon group typically uses spearphishing emails as the initial vector, attaching documents \n\nwith malicious macros\u2014which is likely how the network was first compromised in this case as well.\n\nAs previously reported, this group is known for using simple tools, with the main objective to infiltrate the \n\ntarget organization and spread as far as possible in the target\u2019s network. Now we know they are paving \n\nthe way for the more sophisticated InvisiMole toolset.\n\nThis tactic of using a simpler backdoor to infiltrate the target network, and only then deliver the more \n\nsophisticated tool, has several benefits for the attackers. In this case, the Gamaredon toolset is used for \n\nreconnaissance\u2014to confirm the target is of special interest, to collect information about security products \n\nor security policies and to use this information to customize the next steps\u2014for example, to choose which of \n\nInvisiMole\u2019s execution chains should be used.\n\nThis all minimizes the risk that the more advanced infiltration\u2014InvisiMole\u2019s toolset\u2014will be discovered.\n\nNote that we were able to trace the cooperation between Gamaredon and InvisiMole groups back to 2018, \n\nbut only after the publication of our first blogpost about InvisiMole. This discovery is thus only relevant for \n\nthe recent campaign, and does not invalidate our earlier hypothesis about possible physical access.\n\n5 \n\n SHA-1: 4B8E11E0734D3109627FF8871EF7DB14C0DE9C41\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f18\n\n5 \n\nLATERAL MOVEMENT\n\nOnce in the compromised network, InvisiMole uses two methods to move laterally\u2014actively by exploiting \n\nvulnerabilities in network protocols, and passively by deploying trojanized applications and documents, while \n\nrelying on them to be shared and executed by the victims themselves.\n\n5.1  Network vulnerabilities\n\nWe have observed InvisiMole using the BlueKeep and EternalBlue vulnerabilities (CVE-2019-0708 and \n\nCVE-2017-0144, respectively) to spread within the network and deploy InvisiMole\u2019s backdoors or downloaders.\n\nThree of InvisiMole\u2019s components assist by scanning the compromised network:\n\n\u2022  The Portscan plugin searches for open ports; see Figure 9 for examples of strings extracted from the plugin.\n\n\u2022  The BlueKeep plugin searches for hosts vulnerable to the BlueKeep vulnerability in the RDP protocol.\n\n\u2022  The RC2CL backdoor searches for hosts vulnerable to the EternalBlue vulnerability in the SMB protocol.\n\nFigure 9 // Selected strings extracted from the Portscan plugin\n\n5.1.1 \n\nEternalBlue exploit chain\n\nInvisiMole deploys its RC2CL backdoor and TCP downloader on hosts vulnerable to EternalBlue, using \n\ncomponents shown in Figure 10.\n\nFigure 10 // InvisiMole\u2019s lateral movement via the EternalBlue exploit\n\nReconnaissance\nTo identify vulnerable hosts in the compromised network, InvisiMole uses the added functionality in the \n\nRC2CL backdoor. Its command 222 was previously used for controlling backdoor configuration values\u2014now \n\nthe attackers use it to send a range of IP addresses to the compromised computer.\n\nThe backdoor first tests whether these addresses are active by sending them ICMP echo requests, and \nretrieves their MAC addresses using the SendARP API.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f19\n\nTo determine whether the host supports the vulnerable SMBv1.0 protocol, the backdoor:\n\n\u2022  Opens SMB session on port 445 (and optionally on another port).\n\n\u2022  Sends SMB_COM_NEGOTIATE packet (0x72) to negotiate the SMB protocol (see Figure 11). It only \n\nlists \u201cNT LM 0.12\u201d as a supported dialect, forcing the server to choose SMBv1.0 protocol for the session, \n\nas long it is supported by the server.\n\nFigure 11 // SMB_COM_NEGOTIATE packet\n\n\u2022  Sends SMB_COM_SESSION_SETUP_ANDX packet (0x73) to setup the SMB session (see Figure 12). \n\nThe only command in the packet is No further commands (0xFF). The backdoor doesn\u2019t send any more \n\ncommands within the session.\n\nFigure 12 // SMB_COM_SESSION_ANDX packet\n\n\u2022  Logs off the session by sending SMB_COM_LOGOFF_ANDX packet (0x74) with the command \n\nNo\u00a0further commands (0xFF), as shown in Figure 13.\n\nFigure 13 // SMB_COM_LOGOFF_ANDX packet\n\nThe results of this scan are reported back to the C&C server.\n\nAfter identifying vulnerable hosts, we assume the attackers push a tool that tries to exploit the vulnerability \n\nvia the same backdoor\u2014RC2CL already has mechanisms in place to download and execute additional code.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f20\n\nExploit\nWe haven\u2019t seen the actual code used by the attackers to exploit the vulnerability. However, on multiple \n\ncomputers within one of the targeted networks, we detected DoublePulsar, a backdoor typically deployed by \n\nthe EternalBlue exploit.\n\nMoreover, we reviewed Windows Security Logs from the network and identified the following sequence \n\nof events:\n\n\u2022  An SMB session was created.\n\n\u2022  A few seconds later, InvisiMole\u2019s loader6 was executed.\n\nAs shown in Figure 14, the loader\u2019s internal name is PULSAR_LOADER.DLL, likely referring to being deployed \nby the DoublePulsar backdoor.\n\nFigure 14 // InvisiMole\u2019s component with internal name PULSAR_LOADER.dll\n\nPayload\nThe loader deployed by the DoublePulsar backdoor is bundled with an InvisiMole blob that is the \n\nTCP\u00a0downloader, used to download and execute additional InvisiMole blobs.\n\nWe also detected another loader7 with the same internal name PULSAR_LOADER.DLL, this time bundled \nwith InvisiMole\u2019s RC2CL backdoor.\n\n5.1.2 \n\nBlueKeep exploit chain\n\nAs another lateral movement technique, InvisiMole exploits the BlueKeep vulnerability in the RDP protocol \n\nto deploy InvisiMole\u2019s TCP downloader on the target machines, as illustrated in Figure 15. In this case, all \n\nparts of the exploit\u2014from identifying the vulnerable hosts to deploying the malicious payload\u2014are bundled \n\nin a single component, the BlueKeep plugin, which is implemented as a 64-bit InvisiMole blob. Figure 16 \n\nshows a fragment of the strings extracted from the plugin, referring to exploiting the vulnerability.\n\nFigure 15 // Three parts of BlueKeep plugin\n\n6  SHA-1: 02F4242F7CA7289C8EDFA7B4F465C62C7A6815E2\n7  SHA-1: 00EA86AAB3D616A24A5E13D592FABC26416DFDBD\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f21\n\nReconnaissance\nReconnaissance is implemented in the first part of the BlueKeep plugin, which scans the network for hosts \n\nvulnerable to the BlueKeep vulnerability.\n\nExploit\nThe main part is ported from the open-source Metasploit implementation of the BlueKeep exploit.\n\nPayload\nAs the user-mode code, the plugin finally executes the embedded InvisiMole TCP downloader.\n\nFigure 16 // Selected strings hardcoded in the BlueKeep plugin\n\n5.2 \n\nTrojanized software and documents\n\nApart from exploiting network vulnerabilities, the attackers also use a more passive approach to move \n\nlaterally. They use trojanized files\u2014SFX archives bundling InvisiMole malware with a benign software \n\ninstaller or, in one instance, a PDF document. \n\nWhen executed, the SFX archive drops and executes or opens the benign file, while it also loads an \n\nembedded InvisiMole blob that drops InvisiMole components and installs them on the system. Trojanized \n\nfiles are used to distribute two of InvisiMole\u2019s execution chains, as illustrated in Figure 17 and described in the \n\nControl Panel misuse chain and SMInit exploit chain sections.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f22\n\nFigure 17 // Two InvisiMole execution chains delivered by trojanized files\n\nWe have detected almost 30 different trojanized applications\u2014among them Bitdefender USB Immunizer, 7-Zip, \n\nremote desktop and employee monitoring utilities, but also region-specific software and software specific \n\nto the organization\u2019s sector. Along with the PDF document, the benign versions of these applications were \n\nclearly stolen from the compromised organization. \n\nInvisiMole replaces the original files on the compromised computer with the trojanized versions, \n\nwhile preserving their names, icons and metadata. This is both a lateral movement and persistence \n\ntechnique, as users naturally open and share their own documents.\n\nThis technique is especially powerful if the trojanized file happens to be a software installer placed on \n\na\u00a0central server\u2014a common way to deploy software in larger organizations. That way, InvisiMole is \n\norganically distributed to many computers that use this server.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f23\n\nTable 5 // Examples of trojanized software, stolen from the compromised organization and bundled with InvisiMole.The \nlist excludes documents and software specific to the affected organization.\n\nSHA-1\n\nFilename\n\nApplication\n\n125FCA6EBD82682E51364CF93C9FFA8EB4F6CA5F\n\nWebComponents.exe\n\nWeb Components (Hikvision)\n\n3B923FA1E5DCB4F65DAA138BECEB123D7C431D1B\n\nAIDA64.exe\n\n3BB2C05DEA077835A79499A0BB81410D27EEBFAF\n\npoweriso6-full.exe\n\nAIDA64 Network Audit\n\nPowerISO Setup\n\n4C13AD9AD9C134DE15F3AE5E2F0D2EC1E290DEE8\n\nSamsungUniversalPrintDriver3.exe\n\nSamsung Universal Print Driver\n\n728386C6D6EAF43148FE25F86E6AF248019D9842\n\nDaemon.Tools.Lite.v5.0.1.0407.exe\n\n793F4DD2B765ECD962A053246646ED0D6144D249\n\nadberdr11000_ru_ru.exe\n\n8147E85E13B3624FA290F1F218647A0D1FD70204\n\nUltraVNC_1_2_24_X86_Setup.exe\n\nDAEMON Tools\n\nAdobe Reader\n\nUltraVNC (remote desktop \nsoftware utility)\n\n8C5F463FA79601DE38D0A77808226B1A8E67459A\n\n7-Zip.exe\n\n7-Zip\n\n9B1E0A22DEB124FF36FCF7ED2EA82E799B49B070\n\nlanscope_setup.exe\n\nLanScope (employee monitoring)\n\n9B48090704C3F62D6B768780845E2D04862F5219\n\nUltraVNC_1_2_24_X64_Setup.exe\n\nCD3419B4B3958BE5BE1CAEA60A4EE98E4D427A6D\n\nepson373260eu.exe\n\nUltraVNC (remote desktop \nsoftware utility\n\nEpson (printer driver)\n\nD5D3A01A5944D55E5DDF1F915E88043691BE6F58\n\nputty.exe\n\nPutty\n\nD8EB2429253E82729F34373068EC350D1B2DA8AB\n\nWinSetupFromUSB-1-6.exe\n\nWinSetupFromUSB\n\nDDB871AD5823BE31F5176F2B0CE149D4B6E44F24\n\nBDUSBImmunizerLauncher.exe\n\nE936E857A812690178ED049FD4A1766E281B9F1D\n\nDMMultiView.exe\n\nBitDefender USB Immunizer \nLauncher\n\nGeovision DMmultiview Software \nfor Remote Monitoring\n\n6 \n\nEXECUTION CHAINS\n\nFor execution and persistence, InvisiMole\u2019s operators use long execution chains and rely on living-off-the-\n\n-land. We have observed the attackers using a BYOVD technique, and the aforementioned BYOVS technique, \n\nto deliver vulnerable components to the system and then exploit their vulnerabilities\u2014not to gain initial \n\naccess to the system, but to achieve covert code execution and long-term persistence.\n\nTheir tactic is exclusively to install legitimate tools, and reserve malicious components for later \n\nstages within the execution chain. \n\nMoreover, the later stages are encrypted using DPAPI, to make it harder to reconstruct the full chain outside \n\nthe victim\u2019s computer. Despite these issues, we were able to reconstruct four distinct types of InvisiMole \n\nexecution chains in cooperation with the compromised organizations, as illustrated in Figure 18.\n\nWe named the four chains by the component that InvisiMole misuses or exploits to achieve covert  \n\nexecution. Attackers use these methods in various situations:\n\n\u2022  Control Panel misuse chain is the least elaborate, possibly used in earlier stages of development, when \n\nthe attackers tested the use of DPAPI and InvisiMole blob structure. This is the only chain where the \n\nattackers used a malicious PE file\u2014all the other chains were crafted by combining legitimate tools \n\nand encrypted shellcode stored in registry keys.\n\n\u2022  SMInit exploit chain exploits a vulnerability in Total Video Player software, and is used on systems where \n\nthe attackers don\u2019t have administrative privileges.\n\n\u2022  Speedfan exploit chain exploits a vulnerability in Windows speedfan.sys driver, and is used on older \n\n32-bit systems where the attackers have managed to gain administrative privileges.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f24\n\n\u2022  Wdigest exploit chain exploits a vulnerability in Windows wdigest.dll library. This is InvisiMole\u2019s \n\nflagship chain, the most elaborate, used on the newest versions of Windows, where the attackers \n\nhave administrative privileges.\n\nFigure 18 // Four reconstructed InvisiMole execution chains\n\n5Note we haven\u2019t observed InvisiMole\u2019s RC2FM backdoor executed by these chains. On the other hand, \n\nwe were not able to obtain one of the three final stages in the Speedfan exploit chain, and it is possible the \n\nunknown component is precisely RC2FM backdoor.\n\nThis backdoor may also be is executed by another, yet undiscovered execution chain. As seen in Figure 19, \n\nthe debug artifacts in one of InvisiMole\u2019s components reveal other possible execution methods.\n\nFigure 19 // Debug artifact suggesting other possible execution methods\n\n6.1 \n\nControl Panel misuse chain\n\nThe specialty of the Control Panel misuse chain is a rare technique known from Vault 7 leaks, used to achieve \n\ncovert execution. InvisiMole installs one of its components as a control panel item, thus forcing Control Panel \n\nto load it every time it is executed. The malicious control panel item then loads InvisiMole\u2019s TCP downloader.\n\nOverview of the chain is illustrated in Figure 20.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f25\n\nFigure 20 // Control Panel misuse chain\n\n6.1.1 \n\nInstallation\n\nThe chain is set up by a patched RAR SFX dropper with an added InvisiMole blob. As a decoy, it uses a \n\nsoftware installer, or a document previously stolen from the victim.\n\nThe dropper encrypts the final stage\u2014InvisiMole\u2019s TCP downloader\u2014with CryptProtectData API and \ndrops it along with Stage 4. Then, it registers Stage 4 as a control panel item under this registry key:\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\CPLs\n\n\u201cinfocard\u201d = \u201c%APPDATA%\\Microsoft\\AddIns\\infocardadd.cpl\u201d\n\nand opens the Control Panel which (as detailed in Stage 3 part) triggers execution of Stage 4 for the first time.\n\nOn the first execution, Stage 4 sets up persistence for the chain, so it subsequently starts from Stage 1.\n\nTable 6 // Components used in InvisiMole\u2019s Control Panel misuse chain\n\nSHA-1\n\nN/A\n\nFile path\n\nComment\n\n%STARTUP%\\Control Panel.lnk\n\nStage 1\u2014LNK file\n\n2402765EA67E04F151D32BF2B749B150BBD3993E\n\n%APPDATA%\\Control\\Control.js\n\nStage 2\u2014JavaScript\n\n9F64FEC50D4447175459AAB33BC9126F9A3370D8\n\nA3AFF8CE55907DAA1F3360DED01BCF3F6F9D0CF2\n\n%APPDATA%\\Microsoft\\AddIns\\\ninfocardadd.cpl\n\nStage 4\u2014InvisiMole blob loader\n\nN/A (unique per victim)\n\n%APPDATA%\\Microsoft\\AddIns\\\nimageapplet.dat\n\nStage 5\u2014InvisiMole\u2019s TCP \ndownloader\n\n6.1.2 \n\nStage 1\u2014Control Panel.lnk\n\nThe first stage is an LNK file dropped in the Startup folder, pointing to the file %APPDATA%\\Control\\\nControl.js.\n\n6.1.3 \n\nStage 2\u2014Control.js\n\nStage 2 is a malicious JavaScript file with this script:\n\nWScript.CreateObject(\u201cWScript.Shell\u201d).Run(\u201c::{20d04fe0-3aea-1069-\n\na2d8-08002b30309d}\\\\::{21EC2020-3AEA-1069-A2DD-08002B30309D}\u201d, 0)\n\nAlthough it is not clear at first glance, this script opens the Control Panel in a new hidden window, as the \n\nCLSIDs used in the script refer to the This PC8 folder and the Control Panel, respectively.\n\n8 \n\n Alternatively, this folder is known as My Computer or Computer on older Windows versions\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f26\n\n6.1.4 \n\nStage 3\u2014Control Panel\n\nIn Stage 3, the legitimate, preinstalled Control Panel is misused to automatically load Stage 4, which is \n\nmasked as a CPL file.\n\nCPL files are a special type of Windows executable file\u2014a DLL file with .cpl extension, exporting a function \nnamed CPlApplet that matches a specific prototype. Unlike standard DLL files, CPL files can be executed \ndirectly. When a CPL file is executed, Windows automatically executes the Control Panel (control.exe) \nwith this file as an argument, and Control Panel loads the CPL and calls its CPlApplet function.\n\nThis feature made CPL files popular among malware authors in the past\u2014as a way to disguise DLL files and \n\nto bypass simple email filters. For example, massively distributed banking trojans in a campaign targeting Brazil \nhave been delivered as CPL files with deceptive names (e.g. Invoice.cpl), attached to malicious emails, in \nan attempt to trick potential victims into executing them.\n\nAnother method attackers have used to leverage CPL files is to register a malicious CPL file as a control \npanel item, under the HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\CPLs \nregistry key. Whenever the Control Panel is executed, it automatically loads all such CPL files and calls their \nCPlApplet functions. This technique is described in the MITRE ATT&CK knowledge base and is also used by \nInvisiMole\u2014but with a surprising twist.\n\nInvisiMole takes advantage of an anomaly in how Windows handles files with .cpl extensions that don\u2019t \n\ncomply with the CPL specification. Stage 4 is registered as a control panel item, but it is not a genuine \n\nCPL file\u2014instead, it is a standard DLL with its extension changed to .cpl. If the user executes the InvisiMole \n.cpl file directly, it won\u2019t be loaded because of the missing CPlApplet function, and an error may be \ntriggered, as seen in Figure 21.\n\nFigure 21 // As InvisiMole\u2019s .cpl file does not support the CPL interface, on Windows 7, it triggers an error when double-clicked\n\nHowever, when the Control Panel is executed, the same file is loaded successfully, and thus InvisiMole is able \n\nto execute any DLL file under the context of the Control Panel. This trick has been briefly documented in the \n\nVault 7 leak of CIA capabilities.\n\nOverall, the benefit of this persistence technique for the attackers is that there is no obvious connection \n\nbetween the LNK file dropped in the Startup folder and the malicious file that is ultimately loaded\u2014\n\nseemingly, only the Control Panel is executed on system startup.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f27\n\n6.1.5 \n\nStage 4\u2014infocardadd.cpl\n\nStage 4 is a malicious control panel item dropped under the name infocardadd.cpl, which mimics the \nname of its legitimate infocard.cpl counterpart.\n\nOn its first execution, this component drops Stages 1 and 2 to set up persistence for the chain.\n\nSubsequently, it is used to load the final stage of the chain, which is InvisiMole\u2019s TCP downloader9. It obtains \nthe downloader from the imageapplet.dat file, decrypts it using CryptUnprotectData and loads it in a \nnew thread.\n\n6.2 \n\nSMInit exploit chain\n\nIn the SMInit exploit execution chain, the attackers bring a legitimate, but vulnerable piece of software to the \n\ncompromised system and then exploit its vulnerability to load InvisiMole\u2019s TCP downloader.\n\nThis technique can help avoid application whitelisting or detection, as the malware is running under the \n\ncontext of a legitimate process.\n\nFor the exploitation, the attackers use the quite outdated Total Video Player10 software by EffectMatrix Inc. This \n\nsoftware was released back in 2007 and has a stack overflow vulnerability. The attackers deploy it under the \nname SMInit.exe; thus the name of this execution chain, illustrated in Figure 22.\n\nFigure 22 // InvisiMole\u2019s SMinit exploit chain\n\nNote that this execution method does not require administrative privileges, so the attackers can use it on \n\ncompromised computers where they didn\u2019t manage to obtain those rights.\n\n6.2.1 \n\nInstallation\n\nThis chain is set up by a dropper, which is a patched RAR SFX archive with an added InvisiMole blob. As a \n\ndecoy, it uses a software installer previously stolen from the compromised organization. This decoy software \n\ninstaller is unrelated to the Total Video Player software.\n\nThe dropper delivers a set of files related to the vulnerable software, as listed in Table 7, and drops them in \nthe %USERPROFILE%\\AppData\\Roaming\\Microsoft\\Sessions folder.\n\nApart from that, it uses CryptProtectData to encrypt Stage 2 and 3, and stores the encrypted blobs in the \nregistry, as listed in Table 8.\n\nTable 7 // Files related to Total Video Player software misused by InvisiMole\n\nSHA-1\n\nFilename\n\nComment\n\n2161A471B598EA002FC2A1CC4B65DBB8DA14A88E\n\n355F026D6F8C43956B8D326026038BF809F7350D\n\n9091BE6630AD170D15CA6A6722CE53619AC61229\n\nE85D7F0564771C9396FDCDB9877DB0FF61C1D515\n\nSMInit.exe\n\nhskin.dll\n\nTVPSkin.dll\n\nSettings.ini\n\nLegitimate Total Video Player software\n\nFile with exploit\n\n9 \n10 \n\n SHA-1 of decrypted InvisiMole blob: DBD21EF03CCC3A985D808B0C5EC7AC54DED5D1C9\n The full name of the software is E.M. Total Video Player\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f28\n\nTable 8 // Registry entries with stages of SMInit exploit chain\n\nRegistry key\n\nComment\n\nHKCU\\Software\\Microsoft\\Feeds\\SyncData\n\nStage 2\u2014task scheduler\n\nHKCU\\Software\\Microsoft\\Feeds\\SyncImage\n\nStage 3\u2014InvisiMole\u2019s TCP downloader\n\nOn the first execution, the chain starts from Stage 1 and sets up persistence, so that it is triggered on each \n\nsystem start by a scheduled task.\n\n6.2.2 \n\nStage 0\u2014scheduled task\n\nThis chain is installed as a task named MSST. This task executes the first stage\u2014SMInit.exe\u2014using this \nuncommon command line:\n\nrundll32.exe shell32.dll,ShellExec_RundDLL \u201cC:\\Users\\Admin\\AppData\\\n\nRoaming\\Microsoft\\Sessions\\SMInit\u201d\n\nThis combination of rundll32.exe and shell32.dll tricks Sysinternals Autoruns tool into hiding this task from the \n\nlist of programs configured to run during system bootup when the Hide Windows Entries option is enabled \n\nin the tool. This option is part of the default settings.\n\n6.2.3 \n\nStage 1\u2014SMinit.exe\n\nStage 1 is the legitimate Total Video Player software, deployed under the SMInit.exe11  filename (see Figure\u00a023).\n\nFigure 23 // SMInit.exe file properties show E.M. Total Video Player as the original name\n\n11 \n\n SHA-1: 2161A471B598EA002FC2A1CC4B65DBB8DA14A88E\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f29\n\nOnce the software is started, it attempts to parse the Settings.ini file, shown in Figure 24. The parsing \nfunction allocates a 256-byte buffer on the stack and reads a value from the file. InvisiMole uses a specifically \ncrafted Settings.ini file, where the length of this value exceeds the length of the allocated buffer. This \nis how the stack overflow vulnerability is exploited and how the shellcode placed in the crafted settings file \n\ngets executed.\n\nFigure 24 // Settings.ini file with the stack overflow exploit\n\nBy triggering this vulnerability, InvisiMole is able to force the application to execute InvisiMole shellcode \nunder its context. The shellcode reads the registry value HKCU\\Software\\Microsoft\\Feeds\\SyncData, \ndecrypts it and passes execution flow to the decrypted code.\n\n6.2.4  Stage 2\u2014SyncData entry\n\nThe Stage 2 shellcode is used to decrypt and load the final stage of this chain from HKCU\\Software\\\nMicrosoft\\Feeds\\SyncImage, which is InvisiMole\u2019s TCP downloader12.\n\nTo decrypt Stage 3, and also to decrypt one part of itself, it uses the CryptUnprotectData API.\n\nDuring the first execution, this stage also schedules the Stage 0 task for the current user, to ensure \n\npersistence for the whole chain. To make the task scheduling functionality stealthier, it doesn\u2019t utilize \nAPI calls; instead, it is implemented using the COM interface of the task scheduler (ITaskService, \nITaskDefinition, ITaskSettings COM interfaces).\n\n12 \n\n SHA-1 of decrypted InvisiMole blob: 2E7F737CAEB56716ACE36FADEB74EE610705283F\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f30\n\n6.3 \n\nSpeedfan exploit chain\n\nIn the Speedfan exploit execution chain, InvisiMole uses the Bring Your Own Vulnerable Driver technique \nto load the speedfan.sys driver on the compromised system, and then exploit local privilege escalation \nvulnerability (CVE-2007-5633) to gain code execution in kernel mode.\n\nTo get this exploit up and running, InvisiMole misuses two legitimate tools: srvany-ng and winapiexec.\n\nOnce running in the context of the kernel, InvisiMole injects its code into a legitimate process and covertly \n\nloads the final stages. We have seen InvisiMole\u2019s RC2CL backdoor and DNS downloader being loaded this way.\n\nThis execution method, illustrated in Figure 25, is used on older 32-bit Windows systems, for the cases when \n\nthe attackers were able to get admin privileges.\n\nFigure 25 // Execution chain exploiting vulnerability in the speedfan.sys driver\n\n6.3.1 \n\nInstallation\n\nWe don\u2019t know exactly how this chain is set up, whether by using an InvisiMole dropper, or possibly by a \n\nhuman operator using Gamaredon\u2019s toolset in the early stages of the attack\u2014either way, administrative \n\nprivileges are required for this execution method.\n\nBased on our post-attack analysis, we know the (unknown) installer must register the Windows service \n\nstarting up Stage 1 and drop legitimate utilities misused in Stages 1 and 2.\n\nFinally, it must encrypt the rest of the components in the chain using CryptProtectData, to make sure \nthey can only be decrypted on the victim\u2019s computer.\n\nSome of the filenames used in the Speedfan exploit chain are listed in Table 9; others are discussed later in \n\nthe section.\n\nSHA-1\n\nFile path\n\nTable 9 // Files used in InvisiMole\u2019s Speedfan exploit chain\n\n9987c0b97cb6a0239d3af6e5a70b552e1c38810f\n\nC:\\Windows\\system32\\mscorscvs.exe\n\n4a6dc6a32a777dc5dd47221bf79604bc0258a987\n\nN/A (unique per victim)\n\nC:\\Windows\\system32\\drivers\\NGEN \nFramework\\NGEN.exe\n\nC:\\Windows\\system32\\drivers\\NGEN \nFramework\\NGEN.cab\n\nComment\n\nStage 1\n\nStage 2\n\nStages 3-6\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f31\n\n6.3.2 \n\nStage 1\u2014mscorscvs.exe\n\nThis execution chain starts with a legitimate utility srvany-ng13, installed in C:\\Windows\\system32\\\nmscorscvs.exe and registered as a Windows service under the name clr_optimization_v2.0.51527_\nX86, as shown in Figure 26. This name is used to mimic Microsoft.NET Framework NGEN (Native Image \nGenerator service).\n\nFigure 26 // Properties of clr_optimization_v2.0.51527_X86 service starting up InvisiMole\u2019s Speedfan exploit chain\n\nThis utility is designed to run any Windows application as a service\u2014for that, the parameters of the \n\napplication must be specified under the service parameters. InvisiMole configures this tool so that it loads \nC:\\Windows\\system32\\drivers\\NGEN Framework\\NGEN.exe with the parameters specified under the \nAppParameters registry value, as shown in Figure 27.\n\nFigure 27 // srvany-ng is configured to execute the winapiexec tool with InvisiMole\u2019s shellcode\n\n6.3.3 \n\nStage 2\u2014NGEN.exe\n\nThe NGEN.exe name of Stage 2 is used to mimic a legitimate Windows Native Image Generator tool. The file \nitself is a copy of a legitimate tool winapiexec14\u2014the same tool that is misused to upgrade Gamaredon\u2019s \n\ntargets to InvisiMole (see the Delivery method section).\n\nFor this execution chain, winapiexec is executed with the following command line:\n\nC:\\Windows\\system32\\drivers\\NGEN Framework\\NGEN.exe VirtualAlloc 0 \n\n0x20000 0x3000 0x40 , CreateFileW \u2018Ngen.cab\u2019 0x80000000 0 0 3 0 0 , \n\nSetFilePointer $$:7 64 0 0 , ReadFile $$:7 $$:1 0x20000 $b:4 0 , \n\nCloseHandle $$:7 , EnumUILanguagesA $$:1 4 $$:1\u201d\n\n13 \n14 \n\n SHA-1: 9987C0B97CB6A0239D3AF6E5A70B552E1C38810F\n SHA-1: 4A6DC6A32A777DC5DD47221BF79604BC0258A987\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f32\n\nWith these parameters, winapiexec reads shellcode from the C:\\Windows\\system32\\drivers\\NGEN \nFramework\\Ngen.cab file, starting at offset 0x40, and calls the EnumUILanguagesA API with the shellcode \nas a parameter. EnumUILanguagesA enumerates the user interface languages that are available on the \noperating system and calls the specified callback function with every language in the list\u2014this is how the \n\nshellcode gets executed.\n\n6.3.4 \n\nStage 3\u2014Ngen.cab\n\nStage 3 is a multilayer shellcode, serving as a container for Stages 4-6.\n\nIt decrypts the first layer using a XOR cipher with this DWORD key:\n\nkey = 0x1D709CA2 + (i << 4) + (i << 0x12) // i starts at 0x80 and \n\nincrements for each subsequent dword\n\nThen, it uses CryptUnprotectData to decrypt the second layer with two embedded InvisiMole blobs, and \npasses execution to one of them\u2014Stage 4.\n\n6.3.5 \n\nStage 4\u2014speedfan.sys exploit\n\nStage 4 is a 32-bit shellcode15 running in the context of the winapiexec tool.\n\nThis component exploits a local privilege escalation vulnerability in the speedfan.sys driver to get code \nexecution in kernel space, and uses this access to execute Stage 5 in the kernel context.\n\nA design flaw in speedfan.sys allows local users to issue privileged IOCTLs to read or write arbitrary MSRs \nvia the IOCTL_RDMSR (0x9C402438) and IOCTL_WRMSR (0x9C40243C). InvisiMole uses this vulnerability \nto replace the value of  the IA32_SYSENTER_EIP MSR register, which holds the address of the \nSYSENTER handler.\n\nThen, it issues a system call to ensure the SYSENTER instruction is called from the user space, and thus the \n\npatched SYSENTER handler is triggered. Figure 28 illustrates the steps the patched handler takes.\n\nFigure 28 // Patched SYSENTER handler\n\n15 \n\n SHA-1 of decrypted shellcode: 10C548992567A04DA199D09E3CA4B0C47B7A136C\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f33\n\n1.  It uses the wrmsr instruction to restore the value of the IA32_SYSENTER_EIP MSR register (not to \n\ndisturb the normal operation of the kernel), which restores the original address of the SYSENTER handler.\n\n2.  It clears the write protection bit to allow writing to read-only memory pages (when the WP bit is set, the \n\nCPU can\u2019t write to read-only pages when privilege level is 0).\n\n3.  It patches the code section in speedfan.sys; more specifically it patches the handler for IOCTL_GET_\n\nDRIVER_VER (0x9C402434), as shown in Figure 29.\n\nFigure 29 // Original and patched handler for IOCTL_GET_DRIVER_VER in speedfan.sys\n\nThe esi register in this case holds Irp->AssociatedIrp.SystemBuffer; that is, when \nIOCTL 0x9C402434h is called on \\\\.\\speedfan with code as an argument, this code is \nexecuted \u00a0in kernel mode.\n\n4.  It restores the original value of CR0 (reenabling read-only protection, if applicable).\n\n5.  It passes control to the original SYSENTER handler, to properly process the original SYSENTER request.\n\nThis patched SYSENTER handler is thus only executed once, to patch a code section in speedfan.sys; after \nthat the original handler is restored.\n\nInvisiMole then leverages the created backdoor in the speedfan.sys driver by issuing IOCTL \n0x9C402434h with Stage 5 as a parameter, as illustrated in Figure 30. As a result, Stage 5 is executed \nunder the kernel context.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f34\n\nFigure 30 // InvisiMole issues the hijacked IOCTL with Stage 5 as an argument\n\nThis exploit works on x86 systems where it is possible to execute user-mode addresses from kernel mode\u2014\n\nit would be more difficult on x64 systems with SMEP mitigation in place. SMEP was launched in 2011 and \n\nenabled by default since Windows 8, so the exploit should work on Windows 7 or older.\n\nNote that the IA32_SYSENTER_EIP MSR register is separate per core, or per logical processor, so in order for \nthis exploit to work on processors with multiple logical units, the part of the exploit that triggers the patched \n\nSYSENTER handler must be executed on the same unit as the part patching the handler. To ensure this, \n\nInvisiMole takes further steps ensuring the full exploit is executed without interruption, on a single unit:\n\n\u2022  Before running the exploit, InvisiMole temporarily adjusts scheduling priority of the current thread \nto the highest possible priority by setting the priority class of the current process to REALTIME_\nPRIORITY_CLASS (SetPriorityClass API) and priority level of the thread to THREAD_PRIORITY_\nTIME_CRITICAL (SetThreadPriority API), to prevent the scheduler from interrupting it with \nsome other task.\n\n\u2022  Then it adjusts the processor affinity mask of the current process so that it can be executed on all \n\nlogical processors, by retrieving the affinity mask for the system with the GetProcessAffinityMask \nAPI, and then setting this mask to the current process with the SetProcessAffinityMask API.\n\n\u2022  Finally, if there are multiple logical processors, InvisiMole starts a number of new threads and spreads \nthem over the other logical processors using the SetThreadAffinityMask API. By this, InvisiMole \nmakes sure the shellcode is executed on one execution unit, while the other threads keep the other \n\nunits busy by looping until triggered by the main thread that the exploit has been completed\n\n6.3.6 \n\nStage 5\u2014kernel-mode inject\n\nStage 5 is shellcode executed in the context of the kernel, after the driver exploit has been completed. \nThis\u00a0component creates a new thread (in kernel space), attaches this thread to a svchost.exe process, \nand\u00a0inserts Stage 6 into the thread APC queue of this process using the KeInsertQueueApc API.\n\nAs a result, Stage 6 is executed asynchronously the next time the thread is scheduled.\n\nThis technique is used in an attempt to avoid detection, as it is stealthier to do process injection from \n\nkernel mode.\n\n6.3.7 \n\nStage 6\u2014loader\n\nStage 6 is a loader16 of the final stages of this execution chain\u2014InvisiMole\u2019s payloads. It searches for \nencrypted InvisiMole blobs, decrypts them using a combination of the CryptUnprotectData API and the \ntwo-key triple DES algorithm, and loads these payloads.\n\n16 \n\n SHA-1 of decrypted InvisiMole blob: B988F107E5F20CDC424EC9F470D157435FC03966\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f35\n\nThe tricky part is that the loader doesn\u2019t contain the full path to the encrypted files with these components; \n\ninstead it searches for files or registry values by a list of hardcoded SHA-1 hashes of filenames and \n\nregistry value names.\n\nThe SHA-1 values are calculated using Microsoft CryptoAPI from lowercase versions of the names and\u2014to \n\nmake detection even more difficult\u2014stored as binary data, rather than strings, as illustrated in Figure 31.\n\nFigure 31 // InvisiMole\u2019s loader uses a hardcoded list of binary SHA-1 values instead of filenames\n\nMore specifically, InvisiMole stores its final stages in registry values under specific subkeys of the HKLM \nregistry key, and in files in the %TEMP% or %SYSTEM% folder, the root folder of a system drive, or any \nprogramdata subfolder under this drive.\n\nThanks to the cooperation of the affected organizations, we were able to recover some of the obfuscated \nlocations, and obtain and decrypt the corresponding InvisiMole components\u2014InvisiMole\u2019s RC2CL backdoor17 \nand DNS downloader18. The recovered names of registry subkeys and values are listed in Table 10 and \n\nTable\u00a011, with one of the components yet to be uncovered.\n\nNeither have we recovered the names of files concealed behind the SHA-1 values, as listed in Table 12. \n\nHowever, from the artifacts in the InvisiMole loader, we assume these files would contain the same three \n\ncomponents as are loaded from the registry keys\u2014the RC2CL backdoor, DNS downloader and the third, \n\nunknown, component.\n\nIt remains a mystery whether the third loaded component is one of the known InvisiMole payloads (RC2FM \n\nbackdoor or TCP downloader, Portscan or BlueKeep component), or some unknown component, or whether \n\nit is reserved for some yet-to-be-implemented payload.\n\nTable 10 // Registry keys used to store InvisiMole components. SHA-1 values were calculated from lowercase, ASCII \nversions of the registry key names\n\nSHA-1 of registry key name\n\nRecovered registry key name\n\n40D02DDB8BE27726135C4A0E20E2BBABDA84D0FF\n\nsoftware\\microsoft\\drm\n\n5D69782FFF60365FE81C58D5887C151D326CF731\n\nsoftware\\microsoft\\windows\\currentversion\n\n7AE0CA52F4690CA09558A94D4CE5B521B3A3E3FF\n\nsoftware\\microsoft\\windows\\currentversion\\ext\n\nB7FEE003B413AF3297DB60D0FC845A054FE080D2\n\nsoftware\\microsoft\\function discovery\\registrystore\\publication\\explorer\n\n17 \n18 \n\n SHA-1 of decrypted InvisiMole blob: 094DAEA5B97C510A8E9CFE3585B39B78522A2C61\n SHA-1 of decrypted InvisiMole blob: F67300541D769C5AA071C766198F0B7E25476B23\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f36\n\nTable 11 // Properties of registry values used to store InvisiMole components. The SHA-1 values were calculated from \nlowercase, Unicode versions of registry value names.\n\nSHA-1 of registry value name\n\nRecovered value name\n\nComponent type\n\nC0E73E522D09344A278D45A524A50CF4FCC87817\n\nD0A769119F628FF0D5110A1E17864036FCB8BE6B\n\n065DEB443AAE29700D09CB395C928C919C3A7352\n\n6AA50BAE4D9529A60FE566115068E6BDF418786D\n\n5126A83A9D9B29598B36540647FFBA2834C82AE3\n\n371971130EE56AB5B7FEA61A80054F5E81E4027D\n\n3E49B3DD812AAE4997C4C9FF2843EAAC32F55A94\n\n12EBD779D5BB416D05550D9ECBADF5A9EF89436C\n\n80D48821135D904CAF2DF0FE2883A6F104BE1639\n\n1Extylc8fC5X1PL\n\n1Extylc8fC5X1HK\n\n1Extylc8fC5X1RK\n\n1Extylc8fC5X2PL\n\n1Extylc8fC5X2HK\n\n1Extylc8fC5X2RK\n\n1Extylc8fC5X3PL\n\n1Extylc8fC5X3HK\n\n1Extylc8fC5X3RK\n\nUnknown\n\nDNS downloader\n\nRC2CL backdoor\n\nTable 12 // Properties of names of the files storing InvisiMole components\n\nSHA-1 of filename\n\nFilename\n\nComponent type\n\nF4A60039D7C9FC337AE2F59D09F6F6F3D1FF7DE3\n\n2F13F5DD481FB251991E0CC05DB9C06A4C1D6ED8\n\n798AF02CA0C8F92B1623A1F1CF25DA4916C04A74\n\n6ECF2532A8E3AB1888088A503D4A7CA57A7BAA82\n\n0197D794FA28B189B3B938FB384CC94E5F1D1733\n\n60197B570D2ACF93A6F92B548D08A3CAF80A1579\n\nF4F06C73A4D8091CE0C7229555921F58E735849D\n\nA203A7EEF726473911031578ADBF17CB83FE214B\n\nC5DE2BF0E13E741508A7EB4C67DED301ABA391CE\n\n6.3.8  Previous versions\n\nUnknown\n\nUnknown\n\nUnknown\n\nUnknown\n\nUnknown\n\nUnknown\n\nUnknown\n\nUnknown\n\nUnknown\n\nUnknown\n\nUnknown\n\nUnknown\n\nNote that we detected a number of InvisiMole\u2019s loaders similar to the Stage 6 loader. While the latter loader \n\nis an InvisiMole blob loaded by a chain of other components, the former are standalone DLLs.\n\nWe identified three versions of these loaders, all sharing the same functionality as the Stage 6 loader, even \n\nusing the same list of SHA-1 hashes of final stage locations. These versions, however, vary in the level of \n\nobfuscation, showing a continuous development.\n\nWe assume these loaders are the predecessors of the elaborate Speedfan exploit execution chain. The attackers \n\nwere probably first experimenting with using execution guardrails and obfuscating the payload location, \n\nbefore they developed the full chain.\n\nInterestingly, most of these files have language in resources set to LANG_RUSSIAN, SUBLANG_RUSSIAN_\n\nRUSSIA\u2014we don\u2019t have this type of metadata for the rest of the InvisiMole\u2019s toolset, developed after the \n\ntransition to elaborate execution chains using InvisiMole blob shellcodes.\n\nThe filenames and SHA-1 hashes of the older loaders are provided in the IoCs section.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f37\n\n6.4  Wdigest exploit chain\n\nFinally, in the most elaborate Wdigest exploit execution chain, InvisiMole uses another variation of \nthe BYOVS technique. The attackers bring wdigest.dll, a vulnerable Windows component from \nWindows\u00a0XP, and misuse its input validation vulnerability to run shellcode, crafted to use code \n\ngadgets from the library.\n\nRunning under the context of a Windows component helps the attackers avoid application whitelisting \n\nand adds legitimacy to the malicious code. Despite being vulnerable, the library can\u2019t be cleaned by security \n\nproducts, as it could break the OS in previous Windows versions.\n\nLater in the chain, InvisiMole uses an improved version of ListPlanting, an interesting injection technique, \n\nto run the DNS downloader and the RC2CL backdoor within a trusted process.\n\nThis is InvisiMole\u2019s most recent and most elaborate execution method, used on computers with the newest \n\nversions of the OS, where the attackers were able to obtain administrative privileges previously. An overview \n\nof the chain is illustrated in Figure 32.\n\nFigure 32 // Execution chain exploiting wdigest.dll\n\n6.4.1 \n\nInstallation\n\nWe analyzed multiple instances of the installer component that sets up this chain. The installer is a 64-bit \n\nInvisiMole blob, probably delivered and executed by one of InvisiMole\u2019s downloaders.\n\nThe installer decrypts an embedded zlib blob, reusing the decryption routine previously used by InvisiMole. \n\nAfter decryption, the installer decompresses eight embedded blobs with stages of this execution chain and \n\ninstalls them. Finally, it schedules and executes Stage 0 using Windows Task Scheduler.\n\nAs you can see from Table 13 and Table 14, the only files used in this execution chain are legitimate \n\nWindows utilities, with all the malicious components stored in the registry. Even the small shellcode stored \nunder the FlashConfigEnrollee registry value is designed to live off the code gadgets from the legitimate \nwdigest.dll library. Thus, all the malicious components are encrypted and stored in the registry \n(a\u00a0technique some categorize as fileless), which adds to the stealthiness of this execution chain. \n\nTable 13 // Legitimate Windows utilities used in InvisiMole\u2019s Wdigest exploit chain\n\nSHA-1\n\nFile path\n\nB61A277719359582071DB4CD448D3E9D0A460B1D\n\n%WINDIR%\\SysWOW64\\drivers\\Rundll32.exe\n\n7752BD1C02E5DC7B0975FC6A1C73145A2A83D079\n\n%WINDIR%\\SysWOW64\\drivers\\wdigest.dll\n\nEE7D06FC93D3C608B48823D1444148327330015A\n\n%WINDIR%\\SysWOW64\\wbem\\setupSNK.exe\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f38\n\nTable 14 // Registry entries used in InvisiMole\u2019s Wdigest exploit chain. Registry keys are given for both 32-bit and 64-bit OS \nversions.\n\nRegistry key\n\nValue name\n\nComponent\n\nEncryption method\n\nHKLM\\SOFTWARE\\Microsoft\\\n\nFlashConfig  or \n\nHKLM\\SOFTWARE\\WOW6432Node\\\n\nMicrosoft\\FlashConfig\n\nHKLM\\SOFTWARE\\ODBC or \n\nHKLM\\SOFTWARE\\WOW6432Node\\ODBC\n\nFlashConfigEnrollee\n\nExploit used in Stage 2\n\n-\n\nM\n\nA\n\nB\n\nC\n\nD\n\nStage 3\n\nStage 4\n\nStage 5\n\nXOR 0x7E8B103C\n\nCryptProtectData\n\nCryptProtectData\n\nStage 6 / RC2CL backdoor\n\nCryptProtectData\n\nStage 6 / DNS downloader\n\nCryptProtectData\n\nUAC Bypass\nNote that the installer for this chain expects to be executed with System or Administrator privileges. \n\nOptionally, if it is executed as a non-elevated Administrator, it can use fileless UAC bypass to obtain elevated \n\nAdministrator privileges.\n\nIn that case, the installer creates a shared memory object named XVD21x9DC with a copy of itself and uses \nthe legitimate winapiexec tool to read from the shared memory and execute the installer in a new thread.\n\nIt first drops a copy of the winapiexec tool in %APPDATA%\\Microsoft\\Installer\\kb043921.exe.\n\nTo execute it as an elevated process, the installer uses a registry hijacking trick for UAC bypass:\n\n1.  It sets this registry key to register a new file type association with a malicious command line:\n\nHKCU\\SOFTWARE\\Classes\\.zeros\\shell\\open\\command = \u201c%APPDATA%\\Microsoft\\\n\nInstaller\\kb043921.exe\u201d OpenFileMappingW 0xF003F 0 \u201cXVD21x9DC\u201d , \n\nMapViewOfFile $$:1 0xF003F 0 0 %installer_size% , CreateThread 0 0 $$:6 \n\n$$:6 0 0 , WaitForSingleObject $$:13 -1\n\nIt sets this registry key:\n\nHKCU\\SOFTWARE\\Classes\\ms-settings\\Curver = \u201c.zeros\u201d\n\n2.  It executes %SYSTEMDIR%\\fodhelper.exe, which is an auto-elevated application. Once executed, \n\nfodhelper.exe reads file type association set in HKCU\\SOFTWARE\\Classes\\ms-settings\\Curver key \nand executes the associated command line.\n\nAs a result, the dropped winapiexec is executed as elevated process, then it reads the installer blob from \n\nshared memory and starts it in a new elevated thread.\n\nThis technique works on Windows 10. For Windows 7, the installer uses a similar trick, except it uses \n%SYSTEMDIR%\\CompMgmtLauncher.exe as the auto-elevated application and HKCU\\SOFTWARE\\Classes\\\nlnkfile\\Curver as the hijacked registry key.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f39\n\n6.4.2  Stage 0\u2014scheduled task\n\nFor this execution chain, InvisiMole achieves persistence using a standard scheduled task, scheduled on each \nsystem start and registered under the name \\Microsoft\\Windows\\Autochk\\Scheduled.\n\nFigure 33 // Part of XML specification of the scheduled task starting up InvisiMole\u2019s Wdigest exploit chain\n\nAs shown in Figure 33, this task creates a hidden system directory C:\\SMRTNTKY\\MessageB.txt (not a file) \nand executes setupSNK.exe19.\n\nThe directory is created to force a specific execution path within the setupSNK.exe tool.\n\n6.4.3 \n\nStage 1\u2014setupSNK.exe\n\nStage 1 is a copy of a legitimate Windows component\u2014Wireless Network Setup Wizard\u2014designed to share \n\nwireless connection settings on USB Flash drives.\n\nWhen launched, setupSNK.exe restores these settings by executing the default Flash Config Enrollee DLL \n(wzcdlg.dll). However, it has an undocumented feature that allows execution of a custom Flash Config \nEnrollee DLL instead of the default one. This undocumented feature is abused by InvisiMole.\n\nWhen executed, setupSNK.exe checks for the presence of the C:\\SMRTNTKY\\MessageB.txt directory. \nIf it exists, it attempts to load the FlashConfigEnrollee value from HKLM\\SOFTWARE\\Microsoft\\\nFlashConfig on 32-bit systems, or from HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\FlashConfig on 64-\nbit systems, and uses that value to build a command line in this format:\n\nrundll32.exe %s %s\\SMRTNTKY\\WSETTING.WFC\n\nNote that WSETTING.WFC refers to a file stored in the SMRTNTKY folder in the root of a USB drive, which is \nused to store the wireless connection settings.\n\nAs Figure 34 depicts, this command line is then executed via the CreateProcessA API that, in a legitimate \nrun of setupSNK.exe, opens a benign Wizard Dialog DLL.\n\n19 \n\n SHA-1: EE7D06FC93D3C608B48823D1444148327330015A\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f40\n\nFigure 34 // Decompiled function of setupSNK.exe tool\n\nHowever, InvisiMole hijacks this function to execute its own code. On InvisiMole-compromised computers, \nthe FlashConfigEnrollee value in the registry is changed to the following value, including a 119-byte-\nshort shellcode:\n\nshell32 ShellExec_RunDLL  \u201cC:\\Windows\\SysWOW64\\drivers\\Rundll32.exe\u201d \n\u201cC:\\Windows\\SysWOW64\\drivers\\wdigest.dll\u201d,SpInitialize %SHELLCODE_BYTES%\n\nAs a result, setupSNK.exe builds and executes this command line:\n\nrundll32.exe shell32 ShellExec_RunDLL  \u201cC:\\Windows\\SysWOW64\\drivers\\\n\nRundll32.exe\u201d \u201cC:\\Windows\\SysWOW64\\drivers\\wdigest.dll\u201d,SpInitialize \n%SHELLCODE_BYTES%\\SMRTNTKY\\WSETTING.WFC\n\nThe rundll32.exe20 and wdigest.dll21, whose properties are shown in Figure 35, are both legitimate files \nfrom Windows XP. InvisiMole brings these versions to the compromised computer, so this execution chain \n\nworks even on Windows 10.\n\nFigure 35 // Properties of wdigest.dll and setupSNK.exe files\u2014two Windows components misused by InvisiMole in \nthis chain\n\n20 \n21 \n\n SHA-1: B61A277719359582071DB4CD448D3E9D0A460B1D\n SHA-1: 7752BD1C02E5DC7B0975FC6A1C73145A2A83D079\n\nInvisiMole: The hidden part of the storyTLP: WHITE        \n\f41\n\n6.4.4  Stage 2\u2014wdigest.dll\n\nThe wdigest.dll library is a legitimate Windows component that contains an implementation of a digest \nauthentication protocol. When some third-party application needs to use this protocol, this library is loaded \n\ninto the process.\n\nHowever, the attackers discovered the possibility of running wdigest.dll from the command line \nusing rundll32.exe with shellcode as a parameter.\n\nWhen executed by Stage 1 with the given parameters, InvisiMole\u2019s shellcode is copied to\u00a0the g_LsaFunctions \nglobal variable in the SpInitialize function, shown in Figure 36. \n\nFigure 36 // Decompiled SpInitialize function of wdigest.dll library\n\nThe shellcode is constructed in a way so that it uses different parts of wdigest.dll\u2019s code (gadgets) to \nhijack its control flow, in order to load the next stage of this InvisiMole execution chain.\n\nAs shown in Figure 37, the following code is executed later after the SpInitialize function:\n\n1.  wdigest.dll calls [eax+14], with eax pointing to g_LsaFunctions, which passes control to the \n\nshellcode.\n\n2.  [eax+14] points to the 0x7E8BC063 value within the shellcode, which is an address within wdigest.dll.\n\n3.  This address points to a jmp eax instruction, which passes control back to the start of the shellcode.\n\n4.  The shellcode then uses other gadgets of wdigest.dll, such as the resolved address of the \n\nRegQueryValueExW API (always 0x7e8B1040), to read the next stage from value M under either the \nHKLM\\SOFTWARE\\ODBC or HKLM\\SOFTWARE\\WOW6432Node\\ODBC registry key and to pass control to it.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f42\n\nFigure 37 // InvisiMole\u2019s shellcode is crafted to use gadgets of wdigest.dll\n\nThe shellcode can reference hardcoded addresses within wdigest.dll, because it is a Windows XP \nbinary, so it doesn\u2019t use ASLR and is always loaded in the same address space.\n\n6.4.5  Stage 3\u2014M loader\n\nStage 3 is 32-bit shellcode22 loaded from the M registry key. Just like Stage 2, it uses imports from wdigest.dll, \nusing hardcoded addresses.\n\nThis component reads the A value from the registry, decrypts it using the CryptUnprotectData API and \npasses execution flow to the blob.\n\n6.4.6  Stage 4\u2014A loader\n\nStage 4 is a 32-bit InvisiMole blob23 that uses an interesting technique to inject the shellcode from the B \nregistry value to a trusted process.\n\nIt also creates a shared memory with content of C and D registry values and injects names of the shared \nobjects to the trusted process, so that B shellcode can access and load C and D payloads. The B, C and D \nvalues are all encrypted with DPAPI, so Stage 4 first decrypts them using CryptUnprotectData before they \nare injected/loaded.\n\n22 \n23 \n\n SHA-1: B894F320569286B56F4272D0CBBA4DB10C645AE0\n SHA-1 of decrypted InvisiMole blob: AA5E8E21C79B0B4A02726233B9F5EB4994C87AD3\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f43\n\nTable 15 // Shared objects created by Stage 4\n\nName format\n\nObject type\n\nName for C payload\n\nName for D payload\n\nExMp00%.2X\n\nExMpOK%.2X\n\nExMpER%.2X\n\nshared memory\n\nevent name for success\n\nevent name for error\n\nExMp0043\n\nExMpOK43\n\nExMpER43\n\nExMp0044\n\nExMpOK44\n\nExMpER44\n\nFor process injection, this component uses a technique called ListPlanting24. This technique has been \n\nalready documented online, but InvisiMole improves it to add even more stealthiness.\n\nListPlanting is based on the possibility of providing a callback to customize the sorting algorithm in a \n\nListView structure. To display a ListView structure, InvisiMole misuses a legitimate Windows library \nFXSCOMPOSE.dll, which displays contacts stored in the %USERPROFILE%\\Contacts folder in such \na\u00a0structure.\n\nIt first drops three XML files into this folder\u2014only to create data for the list. Then it executes the \nFXSCOMPOSE.dll library with the HrSelectEmailRecipient function.\n\n\u2022  If running without admin privileges, it executes this library directly using rundll32.exe.\n\u2022  Otherwise it creates a service named CsPower, with the registry content shown in Figure 38, that \n\nexecutes the same library.\n\nFigure 38 // Properties of CsPower service in the registry\n\nWhen FXSCOMPOSE.dll starts, it creates a window filled with information from %USERPROFILE%\\\nContacts files, as shown in Figure 39. This window is displayed for so short a period of time that it may well \ngo unnoticed by the user.\n\n See https://modexp.wordpress.com/2019/04/25/seven-window-injection-methods/#listplanting, http://www.hexacorn.com/blog/2019/04/25/\n\n24 \nlistplanting-yet-another-code-injection-trick/\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f44\n\nFigure 39 // Window with a contact list created when FXSCOMPOSE.dll starts\n\nInvisiMole enumerates windows and child windows to get the handle of the SysListView32\u00a0child \n\nof this window (the handle to the ListView). Then it allocates memory inside the new process using \nVirtualAllocEx, copies malicious code to the target process and triggers the shellcode by sending a \nLVM_SORTITEMS message to the ListView. Using this technique, InvisiMole is able to inject shellcode into a \ntrusted process.\n\nIt is important to add that unlike in the standard ListPlanting technique, InvisiMole does not use the \nWriteProcessMemory API to write malicious code to the target process, as this API could be monitored by \nsecurity solutions. InvisiMole takes this technique one step further to make the code injection stealthier.\n\nInstead of calling WriteProcessMemory, it achieves the same result by using a pair of LVM_SETITEMPOSITION \nand LVM_GETITEMPOSITION messages sent to SysListView32, as shown in Figure 40.\n\n\u2022  It first sends an LVM_SETITEMPOSITION message to SysListView32, which moves an item to a \n\nspecified position in a ListView. InvisiMole provides XXYY as the new position, where XX and YY are \n\nbytes of shellcode.\n\n\u2022  Then it sends an LVM_GETITEMPOSITION message to retrieve the position of the same item\n\nThe trick is that the return buffer (POINT\u00a0structure) points to an offset in a newly allocated memory, and so \nInvisiMole is able to copy two bytes at a time to the allocated memory within the legitimate FXSCOMPOSE.dll.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f45\n\nFigure 40 // Improved part of ListPlanting technique used by InvisiMole\n\nAfter Stage 4 has successfully injected Stage 5 in a trusted process, it clears traces by removing the XML files \nfrom the %USERPROFILE%\\Contacts folder, and deleting the  C:\\SMRTNTKY\\MessageB.txt directory. \nMoreover, Stage 5 later deletes the CsPower service from the registry, if it was executed that way.\n\n6.4.7 \n\nStage 5\u2014B loader\n\nStage 5 is a small InvisiMole blob25 that is injected into a trusted process. It opens already existing shared \n\nmemory objects with shellcodes from C and D registry values, copies them to a newly allocated memory and \nexecutes using the CreateThread API.\n\nNote that the C and D shellcodes could be injected directly into the trusted process, instead of the small \n\nStage 5 loader. However, the modified ListPlanting technique requires a lot of operations\u2014a pair of \n\nLVM_SETITEMPOSITION and LVM_GETITEMPOSITION messages sent for each pair of copied bytes. \n\nFor larger payloads, such as the RC2CL backdoor, it is possible the window shown in Figure 39 would be \n\nvisible for a short time. This extra stage is used to make sure the user won\u2019t spot the window.\n\nAs a result of this execution chain, InvisiMole\u2019s RC2CL backdoor26 and DNS downloader27 are covertly \n\nexecuted under the context of a trusted process.\n\n7 \n\nCONCLUSION\n\nWhen we first reported about InvisiMole in 2018, we highlighted its covert workings and complex range of \n\ncapabilities. However, a large part of the picture was missing. \n\nAfter discovering new activity in late 2019, we gained the opportunity to take a proper look under the hood \n\nof InvisiMole\u2019s operations and piece together the hidden parts of the story. \n\nAnalyzing the group\u2019s updated toolset, we observed continuous development and substantial improvements, \n\nwith special focus on staying under the radar. \n\n25 \n26 \n27 \n\n SHA-1 of decrypted InvisiMole blob: D8B101B588DA6DA3CBE3E161C91986E64D6DD290\n SHA-1 of decrypted InvisiMole blob: 0AAB85DDD4E25ADD24E9ECD83C8DD635B3A7C2F3\n SHA-1 of decrypted InvisiMole blob: E9AF42C4CF0299EEA7B405F9E3E925BCAFAB9F2B\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f46\n\nNotably, we identified four different execution chains misusing legitimate tools for persistence, and user- \n\nand kernel-mode exploits for covert execution. We described how the malware uses per-victim encryption \n\nto prevent defenders from obtaining its payloads; and detailed the workings of a new component used for \n\nDNS tunneling.\n\nOur investigation also revealed a previously unknown cooperation between InvisiMole and the Gamaredon \n\ngroup, with Gamaredon\u2019s malware used to infiltrate the target network and deliver the sophisticated \n\nInvisiMole malware to targets of special interest. \n\nHaving provided a detailed report on InvisiMole\u2019s TTPs, we will continue to track the group\u2019s malicious activities.\n\nIndicators of Compromise can also be found on our GitHub respository. For any inquiries, or to make sample submissions \n\nrelated to the subject, contact us at threatintel@eset com.\n\n8 \n\nACKNOWLEDGEMENTS\n\nAcknowledgements to Matthieu Faou, Ladislav Janko and Michal Poslu\u0161n\u00fd for their work on this investigation.\n\n9 \n\nINDICATORS OF COMPROMISE (IOCS)\n\n9.1 \n\nESET detection names\n\nWin32/InvisiMole \n\nWin64/InvisiMole\n\n9.2 \n\nSHA-1\n\nSHA-1\n\nNote\n\nFile / registry key /\ndecrypted blob28\n\n125FCA6EBD82682E51364CF93C9FFA8EB4F6CA5F\n\n3B923FA1E5DCB4F65DAA138BECEB123D7C431D1B\n\n3BB2C05DEA077835A79499A0BB81410D27EEBFAF\n\n4C13AD9AD9C134DE15F3AE5E2F0D2EC1E290DEE8\n\n728386C6D6EAF43148FE25F86E6AF248019D9842\n\n793F4DD2B765ECD962A053246646ED0D6144D249\n\n8147E85E13B3624FA290F1F218647A0D1FD70204\n\n8C5F463FA79601DE38D0A77808226B1A8E67459A\n\nTrojanized software\n\n9B1E0A22DEB124FF36FCF7ED2EA82E799B49B070\n\n9B48090704C3F62D6B768780845E2D04862F5219\n\nCD3419B4B3958BE5BE1CAEA60A4EE98E4D427A6D\n\nD5D3A01A5944D55E5DDF1F915E88043691BE6F58\n\nD8EB2429253E82729F34373068EC350D1B2DA8AB\n\nDDB871AD5823BE31F5176F2B0CE149D4B6E44F24\n\nE936E857A812690178ED049FD4A1766E281B9F1D\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\n28 \n\n Decrypted blobs are recovered using the CryptUnprotectData API. We present SHA-1 hashes of these versions, as the encrypted versions are different per victim\ufffd\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f47\n\n09821EB9F2B79501B3928FBA2F313C723FEBB1B3\n\n16E9B0ADBD53849E7F3A04FA8A5BF78E73A86841\n\n21F320DEBDD4D97FA5420AF31A55FBC77B923819\n\n240C8157E5E053B70C4D301D852C609C212F85F3\n\n32A9FF262649623CBFF4C6B29BD8ED7F803E75E3\n\n3EF0D0278DB40F6116645B0B915D56374EB77004\n\n42086128F7213931D438BF127CC61D3F9483014A\n\n4BBED6E307D214CAB9AE395E1F49104446B54D5A\n\n55F6185AD64997756ADF03BC2D4CC4ABF5C64E4E\n\n652991303B319F5DE440C18A0F14DF65B82265FB\n\n66F9EA8017CD899AB146DED2E341201B51A9CE9F\n\n6A6D956A8108E0D5339751927D5576369C0E2C34\n\n6C49BF35116A147C7F3C5CE15ABA041F272E60B5\n\n6DECBFCA132364CBD66DD07118959BCE95F83168\n\n6DEF96407F52B3C82D665B2C6A9B230B3D080CD1\n\n7901AD25A3673AC9CB1B6AE1FC9DC57A4B53383E\n\n7BA31B83B2ADF7A9B43C56F4882D217512F333AF\n\nLoaders\n\n82D653D71DC024C19894C2B2207D6C3414CA1B01 \n\n96D5E7C32AC299770E11DF521F867538361D9A8B\n\nA27BB3E5F1CF56C89E5F9816CF8C5796D2FBB09E\n\nA419F091723A5632DA85B0930F3B260599672C00\n\nA527B41D60028BE24BE8CAC69DE9445401F280CD\n\nA695FA12F97971A065FED927A30278C94C78C722\n\nB1B3E88494F7C27354E68D83E16EB65BBEFC7FB3\n\nB7712BBE5DE4386BAB11F61F1731C358648DECE6\n\nBFEF295D375A60A2EEFE416709DE73F14AC1416C\n\nCC595AAE9573BEEF92DE12C3DE9C85F7E9E1CD6D\n\nDBEA8DAF48CC54C7CFB0DCC689D4C9549D3DD23F\n\nDE6D8B66BE01934D672C04E92EA2EDC0210BF00E\n\nE0B9C24DD5620FF70CB80002A4A772E16EB331F2\n\nE489C4D6CA1DAFA034F7FADBF27DEEB202189833\n\nF7EF9A3501EEBCFFA4615CC3BD473F65A203A1D6\n\nFB4401DEA8911BEAB788E87A576EF5568DA82ED5\n\n27FC1DCB1B3DCA3E496F799A2944E4FB070AF39C\n\nE1599FB73DDE78531BBF65063F10F239AEF29D70\n\nRC2FM backdoor\n\nE3BF27F1303BFDB877D1699D5B480342A9A2FE58\n\n7FE30CA69E6631CB9333C37F72E3CABBE8CE366C\n\nRC2FM helper DLL\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nFile\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f48\n\n00EA86AAB3D616A24A5E13D592FABC26416DFDBD\n\n094DAEA5B97C510A8E9CFE3585B39B78522A2C61\n\n0AAB85DDD4E25ADD24E9ECD83C8DD635B3A7C2F3\n\n0B57CD2393E29084D545300D1749AA50EB23A8AB \n\n11EBA9E198C458A8D86D70BD64B3FDB0163A38C4\n\n20FF1A290A53B39C4E54A670E8C27852BE8BCFF4\n\nRC2CL backdoor\n\n554AA9A39CC241AAD5FBDC5FD39CECCB1EB9E7D0\n\n7114B2E031D8853434028D39873338C33CE67C16\n\nA1FFFB96415CF4146B056C9A847DC6EECD882DBB\n\nAF67F640F33D1A46719056B66F45B91B2D56910A\n\nFFB74AF734453973FED6663C16FB001D563FAF1C\n\n02F4242F7CA7289C8EDFA7B4F465C62C7A6815E2\n\n303A63CE12AD42900DA257428E2FD4DE4F9829DC\n\nDBD21EF03CCC3A985D808B0C5EC7AC54DED5D1C9\n\n2E7F737CAEB56716ACE36FADEB74EE610705283F\n\nTCP downloader\n\nFile\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nFile\n\nFile\n\nDecrypted\n\nDecrypted\n\n4B8E11E0734D3109627FF8871EF7DB14C0DE9C41\n\nA variation of the TCP downloader\n\nFile\n\n31FAE273942A1E432DE91400F5D625F88101B966\n\n5F09DF19232E0A77495EEDB1B715D9EF0B909634\n\nE9AF42C4CF0299EEA7B405F9E3E925BCAFAB9F2B\n\nDNS downloader\n\nF67300541D769C5AA071C766198F0B7E25476B23\n\nF8CAA729C28EF6B0EC8AA74399CE4EE7A59B895C\n\n6F98B12C98DA1FCFF078256970E9B8EF12139640\n\n76FC2E29524C6AD58B0AF05251C419BB942CCED0\n\nBatch scripts (Delivery chain)\n\nDecrypted\n\nFile\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nFile\n\nFile\n\n2402765EA67E04F151D32BF2B749B150BBD3993E\n\nStage 2 (Control Panel misuse chain)\n\nFile\n\n9F64FEC50D4447175459AAB33BC9126F9A3370D8\n\nA3AFF8CE55907DAA1F3360DED01BCF3F6F9D0CF2\n\nE85D7F0564771C9396FDCDB9877DB0FF61C1D515\n\nStage 4 (Control Panel misuse chain)\n\nTotal Video Player exploit\n\nFile\n\nFile\n\nFile\n\n10C548992567A04DA199D09E3CA4B0C47B7A136C\n\nStage 4 (Speedfan exploit chain)\n\nDecrypted\n\nB988F107E5F20CDC424EC9F470D157435FC03966\n\nStage 6 (Speedfan exploit chain)\n\nDecrypted\n\nB894F320569286B56F4272D0CBBA4DB10C645AE0\n\nStage 3 (Wdigest exploit chain)\n\nRegistry value\n\n66B7DB6E755EC648AEE210F163655A5662562DEE\n\n7E8B99968C59FDE046DF3ECECED6049E4DFA7225\n\nDecrypted\n\nDecrypted\n\n81BD3140F222FAC2DC6610E0CE79EDF34B599D47\n\nStage 4 (Wdigest exploit chain)\n\nDecrypted\n\n9A3E870B61C4F37514F6E3E3FAB4D4506D3B50DB\n\nAA5E8E21C79B0B4A02726233B9F5EB4994C87AD3\n\nA42FA8FB11DA669124AC7968838427BF8E998872\n\nD8B101B588DA6DA3CBE3E161C91986E64D6DD290\n\nStage 5 (Wdigest exploit chain)\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nDecrypted\n\nInvisiMole: The hidden part of the storyTLP: WHITE\fSHA-1\n\nPE Timestamp\n\nC&C server\n\nURI\n\nCampaign Name\n\n49\n\nD98D258C234F5CEAD43FD897613B2EA2669AA7C0\n\n2019-01-28\n\nchart.healthcare-internet[.]com\n\nCE94EC2CFB23D8C662F558C69B64104C78B9D098\n\n2019-04-25\n\ninicializacion[.]com\n\n-\n\n-\n\n-\n\ncion\n\n9.3 \n\nFilenames and paths\n\n9.3.1  Delivery chain\n\napi64.cmd \n\nintel_log64.cmd \n\nintel_log64.exe\n\n9.3.2  EternalBlue exploit chain\n\nstg0D0CE03.dll \n\nstg0D33E0A.dll\n\n9.3.3  Control Panel misuse chain\n\n%APPDATA%\\Control\\Control.js \n\n%APPDATA%\\Microsoft\\AddIns\\imageapplet.dat \n\n%APPDATA%\\Microsoft\\AddIns\\infocardadd.cpl \n\n%STARTUP%\\Control Panel.lnk\n\n9.3.4 \n\nSMInit exploit chain\n\n%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Sessions\\hskin.dll \n\n%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Sessions\\Settings.ini \n\n%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Sessions\\SMInit.exe \n\n%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Sessions\\TVPSkin.dll\n\n9.3.5 \n\nSpeedfan exploit chain\n\nC:\\Windows\\system32\\drivers\\NGEN Framework\\NGEN.cab \n\nC:\\Windows\\system32\\drivers\\NGEN Framework\\NGEN.exe \n\nC:\\Windows\\system32\\mscorscvs.exe \n\n9.3.6  Wdigest exploit chain\n\n%APPDATA%\\Microsoft\\Installer\\kb043921.exe \n\n%WINDIR%\\SysWOW64\\drivers\\Rundll32.exe \n\n%WINDIR%\\SysWOW64\\drivers\\wdigest.dll \n\n%WINDIR%\\SysWOW64\\wbem\\setupSNK.exe\n\n9.3.7 \n\nInvisiMole loaders\n\nNlsModels0019.dll \n\nNLSModels0022.dll \n\nosppc.dll \n\nosppcext.dll \n\nWptsExtensions.dll\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f50\n\n9.3.8  RC2FM backdoor\n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\0IOQ61KI \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\4AINFWUJ \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\6FFT03MB \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\74BWF9JV \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\7KWRPZWK \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\AMB6HER8 \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\CZPOL9V4 \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\KQP70AQV \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\MX0ROSB1 \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\NI8NKODB \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\OUB1N96O \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\V2JMDODG \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\W9U2CJ6T \n\n%APPDATA%\\Microsoft\\Internet Explorer\\Cache\\Y68JG1TH \n\n%APPDATA%\\Microsoft\\Windows\\Iconcache.db \n\n%APPDATA%Realtek\\Drivers\\Drv7\\DP_Sound_Realtek_wnt\\A6305_WDM\\alcrmv.exe \n\n%TEMP%\\~log \n\n%TEMP%\\vsfilter_%random%.dll\n\n9.4  Registry keys / values / data\n\n9.4.1  Control Panel misuse chain\n\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\CPLs \n\n\u201cinfocard\u201d = %APPDATA%\\Microsoft\\AddIns\\infocardadd.cpl\n\n9.4.2  Speedfan exploit chain\n\nHKLM\\SYSTEM\\ControlSet001\\services\\clr_optimization_v2.0.51527_X86\n\n\u201cType\u201d=dword:00000010\n\n\u201cStart\u201d=dword:00000002 \n\n\u201cErrorControl\u201d=dword:00000000\n\n\u201cImagePath\u201d= \u201cC:\\Windows\\system32\\mscorscvs.exe\u201d\n\n\u201cDisplayName\u201d=\u201dMicrosoft .NET Framework NGEN v2.0.51527_X86\u201d \n\n\u201cObjectName\u201d=\u201dLocalSystem\u201d\n\n\u201cDescription\u201d=\u201dMicrosoft .NET Framework NGEN v.2\u201d\n\nHKLM\\SYSTEM\\ControlSet001\\services\\clr_optimization_v2.0.51527_X86\\Parameters\n\n\u201cApplication\u201d=\u201dC:\\Windows\\system32\\drivers\\NGEN Framework\\NGEN.exe\u201d \n\n\u201cAppDirectory\u201d=\u201dC:\\Windows\\system32\\drivers\\NGEN Framework\u201d \n\n\u201cAppParameters\u201d=\u201dVirtualAlloc 0 0x20000 0x3000 0x40 , CreateFileW \u201cNgen.\ncab\u201d 0x80000000 0 0 3 0 0 , SetFilePointer $$:7 64 0 0 , ReadFile $$:7 $$:1 \n\n0x20000 $b:4 0 , CloseHandle $$:7 , EnumUILanguagesA $$:1 4 $$:1\u201d\n\nHKLM\\software\\microsoft\\drm or HKLM\\software\\microsoft\\windows\\currentversion or \n\nHKLM\\software\\microsoft\\windows\\currentversion\\ext or HKLM\\software\\microsoft\\\n\nfunction discovery\\registrystore\\publication\\explorer\n\n\u201c1Extylc8fC5X1PL\u201d\n\n\u201c1Extylc8fC5X1HK\u201d\n\n\u201c1Extylc8fC5X1RK\u201d\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f51\n\n\u201c1Extylc8fC5X1PL\u201d\n\n\u201c1Extylc8fC5X1HK\u201d\n\n\u201c1Extylc8fC5X1RK\u201d\n\n\u201c1Extylc8fC5X1PL\u201d\n\n\u201c1Extylc8fC5X1HK\u201d\n\n\u201c1Extylc8fC5X1RK\u201d\n\n9.4.3  Wdigest exploit chain\n\nHKCU\\SOFTWARE\\Classes\\lnkfile\n\n\u201cCurver\u201d = \u201c.zeros\u201d\n\nHKCU\\SOFTWARE\\Classes\\ms-settings\n\n\u201cCurver\u201d = \u201c.zeros\u201d\n\nHKCU\\SOFTWARE\\Classes\\.zeros\\shell\\open\n\n\u201ccommand\u201d = \u201c\u201d%APPDATA%\\Microsoft\\Installer\\kb043921.exe\u201d OpenFileMappingW \n\n0xF003F 0 \u201cXVD21x9DC\u201d , MapViewOfFile $$:1 0xF003F 0 0 %installer_size% , \n\nCreateThread 0 0 $$:6 $$:6 0 0 , WaitForSingleObject $$:13 -1\u201d\n\nHKLM\\SOFTWARE\\Microsoft\\FlashConfig or HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\FlashConfig\n\n\u201cFlashConfigEnrollee\u201d = \u201cshell32 ShellExec_RunDLL  \u201cC:\\Windows\\SysWOW64\\\ndrivers\\Rundll32.exe\u201d \u201cC:\\Windows\\SysWOW64\\drivers\\wdigest.dll\u201d,SpInitialize \n\n%SHELLCODE_BYTES%\u201d\n\nHKLM\\SOFTWARE\\ODBC or HKLM\\SOFTWARE\\WOW6432Node\\ODBC\n\n\u201cA\u201d\n\n\u201cB\u201d\n\n\u201cC\u201d\n\n\u201cD\u201d\n\n\u201cM\u201d\n\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\CsPower\n\n\u201cType\u201d=dword:00000020\n\n\u201cStart\u201d=dword:00000004\n\n\u201cErrorControl\u201d=dword:00000000\n\u201cImagePath\u201d= \u201c%SystemRoot%\\System32\\svchost.exe -k DComLaunch\u201d (translated \nfrom hex)\n\n\u201cDisplayName\u201d=\u201dSystem Group\u201d\n\n\u201cGroup\u201d=\u201dPlugplay\u201d\n\n\u201cObjectName\u201d=\u201dLocalSystem\u201d\n\n\u201cRequiredPrivileges\u201d=SeTcbPrivilege\n\nSeSecurityPrivilege\n\nSeAssignPrimaryTokenPrivilege\n\nSeTakeOwnershipPrivilege\n\nSeLoadDriverPrivilege\n\nSeBackupPrivilege\n\nSeRestorePrivilege\n\nSeImpersonatePrivilege\n\nSeAuditPrivilege\n\nSeChangeNotifyPrivilege\n\nSeUndockPrivilege\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f52\n\nSeDebugPrivilege\n\nSeSystemEnvironmentPrivilege (translated from hex)\n\n\u201cDeleteFlag\u201d=dword:00000001\n\nHKLM\\SYSTEM\\CurrentControlSet\\Services\\CsPower\\Parameters\n\n\u201cServiceDll\u201d= \u201c%SystemRoot%\\System32\\FXSCOMPOSE.dll\u201d (translated from hex)\n\n\u201cServiceMain\u201d=\u201dHrSelectEmailRecipient\u201d\n\n9.4.4  DNS downloader\n\nHKCU\\Software\\Microsoft\\EventSystem\n\n\u201cAutoExA\u201d\n\n\u201cAutoExB\u201d\n\n\u201cAutoExC\u201d\n\nHKCU\\Software\\Microsoft\\EventSystem\n\n\u201cKeyA\u201d\n\n\u201cKeyB\u201d\n\n\u201cKeyC\u201d\n\n9.4.5  RC2FM backdoor\n\nHKCU\\Software\\Microsoft\\IE\\Cache\n\n\u201cIndex\u201d\n\nHKCU\\Software\\Microsoft\\IE\n\n\u201cSecureProtocols\u201d\n\nHKCU\\Software\\Microsoft\\IE\\Thumbnails\n\n9.4.6  RC2CL backdoor\n\nHKCU\\Software\\Microsoft\\Direct3D or HKLM\\Software\\Microsoft\\Windows NT\\\n\nCurrentVersion\\Console\n\n\u201cBSKS\u201d\n\n\u201cCommon\u201d\n\n\u201cCurrent\u201d\n\n\u201cDisableFM\u201d\n\n\u201cEdit\u201d\n\n\u201cENC\u201d\n\n\u201dENCEx\u201d\n\n\u201cENCEx2\u201d\n\n\u201cFFLT\u201d\n\n\u201cFlag1\u201d\n\n\u201cFlagLF\u201d\n\n\u201cFlagLF2\u201d\n\n\u201cIfData\u201d\n\n\u201cINFO\u201d\n\n\u201cInstallA\u201d\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f53\n\n\u201cInstallB\u201d\n\n\u201cLastFD\u201d\n\n\u201cLegacyImpersonationNumber\u201d\n\n\u201cLM\u201d\n\n\u201cMachineAccessStateData\u201d\n\n\u201cMachineAT\u201d\n\n\u201cMachineDataUM\u201d\n\n\u201cMachineNW\u201d\n\n\u201cMachineState 0\u201d\n\n\u201cMFLT\u201d\n\n\u201cOverMin\u201d\n\n\u201cRPT\u201d\n\n\u201cSettingsFM\u201d\n\n\u201cSettingsMC\u201d\n\n\u201cSettingsSR1\u201d\n\n\u201cSettingsSR2\u201d\n\n\u201cSP2\u201d\n\n\u201cSP3\u201d\n\n\u201cUseDFlag\u201d\n\n(Unknown registry key)\n\n\u201cValue_Bck\u201d\n\n\u201cValue_Cmnm\u201d\n\n\u201cValue_CMS\u201d\n\n\u201cValue_DFl\u201d\n\n\u201cValue_DFM\u201d\n\n\u201cValue_FAT\u201d\n\n\u201cValue_FGL\u201d\n\n\u201cValue_FPP_ZC\u201d\n\n\u201cValue_LastL\u201d\n\n\u201cValue_LgsD\u201d\n\n\u201cValue_LM\u201d\n\n\u201cValue_LNM\u201d\n\n\u201cValue_LsFl1\u201d\n\n\u201cValue_LsFl2\u201d\n\n\u201cValue_M1\u201d\n\n\u201cValue_MD\u201d\n\n\u201cValue_MF\u201d\n\n\u201cValue_MFV\u201d\n\n\u201cValue_MIN\u201d\n\n\u201cValue_MMc\u201d\n\n\u201cValue_MNL\u201d\n\n\u201cValue_MRP\u201d\n\n\u201cValue_MSS\u201d\n\n\u201cValue_onFPL\u201d\n\n\u201cValue_OvMin\u201d\n\n\u201cValue_PEIP_ZC\u201d\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f54\n\n\u201cValue_PtS\u201d\n\n\u201cValue_SlF\u201d\n\n\u201cValue_SR1\u201d\n\n\u201cValue_SR2\u201d\n\n\u201cValue_SRC\u201d\n\n\u201cValue_uLA\u201d\n\n\u201cValue_uLB\u201d\n\n\u201cValue_Ulcf\u201d\n\n\u201cValue_UM\u201d\n\n\u201cValue_WDSP_ZC\u201d\n\n\u201cValue_WPDF_ZC\u201d\n\n\u201cValue_WSFX_ZC\u201d \n\n9.5 \n\nSynchronization objects\n\n9.5.1  Mutex names\n\nMSO~2 \n\nMSO~4 \n\nMutex_sync \n\nwkssvmtx\n\nSemaphore names\n\nGlobal\\BrLK \n\nGlobal\\GtLK \n\nGlobal\\M6Br \n\nGlobal\\M6Gt \n\nGlobal\\M6Nx \n\nGlobal\\M6St \n\nGlobal\\MBrT \n\nGlobal\\MMGt \n\nGlobal\\MMNx \n\nGlobal\\MMSt \n\nGlobal\\NxLK \n\nGlobal\\StLK \n\nGlobal\\TsLK \n\nGlobal\\TsM5 \n\nGlobal\\TsM6\n\n9.5.2 \n\nShared memory names\n\nExMp0043 \n\nExMp0044 \n\nXVD21x9DC\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f55\n\n9.5.3  Event names\n\nEvMExM2ER \n\nEvMExM2OK \n\nExMpER43 \n\nExMpER44 \n\nExMpOK43 \n\nExMpOK44 \n\n9.6  C&C servers\n\n9.6.1 \n\nIP addresses\n\n46.165.220[.]228 \n\n80.255.3[.]66 \n\n85.17.26[.]174 \n\n185.193.38[.]55 \n\n194.187.249[.]157 \n\n195.154.255[.]211\n\n9.6.2  Domain names\n\n153[.]re \n\nadstat[.]red \n\nadtrax[.]net \n\nakamai.sytes[.]net \n\namz-eu401[.]com \n\nblabla234342.sytes[.]net \n\nmx1[.]be \n\nstatad[.]de \n\ntime.servehttp[.]com \n\nupd[.]re \nupdate[.]xn--6frz82g (update[.]\u79fb\u52a8) \nupdatecloud.sytes[.]net \n\nupdchecking.sytes[.]net \n\nwlsts[.]net \n\n10  MITRE ATT&CK TECHNIQUES\n\nNote: For better readability, we have separated the RC2FM and RC2CL backdoors into their respective ATT&CK \n\nmapping tables, because of their rich capabilities. The first mapping pertains to InvisiMole\u2019s supporting components \n\nused for delivery, lateral movement, execution chains, and for downloading additional payloads.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f56\n\n10.1 \n\nInvisiMole\n\nTactic\n\nID\n\nName\n\nDescription\n\nT1196\n\nControl Panel Items\n\nInvisiMole\u2019s loader is masked as a CPL file, misusing control panel \nitems for execution.\n\nT1106\n\nExecution through API\n\nInvisiMole has used ShellExecuteW and CreateProcessW APIs \nto execute files.\n\nT1129\n\nT1203\n\nExecution through Module \nLoad\n\nInvisiMole implements a custom loader for its components \n(InvisiMole blobs).\n\nExploitation for Client \nExecution\n\nInvisiMole has delivered vulnerable Total Video Player \nsoftware and wdigest.dll library and exploited their stack \noverflow and input validation vulnerabilities, respectively, to gain \ncovert code execution.\n\nExecution\n\nT1085\n\nRundll32\n\nInvisiMole has used rundll32.exe as part of its execution chain.\n\nT1053\n\nScheduled Task\n\nInvisiMole has used Windows task scheduler as part of its \nexecution chains.\n\nT1064\n\nScripting\n\nInvisiMole has used a JavaScript file named Control.js as part of \nits execution chain.\n\nT1035\n\nService Execution\n\nInvisiMole has registered a Windows service as one of the ways to \nexecute its malicious payload.\n\nT1204\n\nUser Execution\n\nInvisiMole has been delivered as trojanized versions of software \nand documents, using deceiving names and icons and relying on \nuser execution.\n\nT1050\n\nNew Service\n\nInvisiMole has registered a Windows service named \nclr_optimization_v2.0.51527_X86 to achieve persistence.\n\nT1060\n\nRegistry Run Keys / Startup \nFolder\n\nInvisiMole has placed a LNK file in Startup Folder to achieve \npersistence.\n\nPersistence\n\nT1053\n\nScheduled Task\n\nInvisiMole has scheduled tasks under names MSST and \n\\Microsoft\\Windows\\Autochk\\Scheduled to achieve \npersistence.\n\nT1023\n\nShortcut Modification\n\nInvisiMole has placed a LNK file in Startup Folder to achieve \npersistence.\n\nPrivilege \nEscalation\n\nT1088\n\nBypass User Account Control\n\nInvisiMole can bypass UAC to obtain elevated privileges.\n\nT1068\n\nExploitation for Privilege \nEscalation\n\nInvisiMole has exploited CVE-2007-5633 vulnerability in \nspeedfan.sys driver to obtain kernel mode privileges.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f57\n\nT1140\n\nDeobfuscate/Decode Files or \nInformation\n\nInvisiMole decrypts strings using variations of XOR \ncipher. InvisiMole decrypts its components using the \nCryptUnprotectData API and two-key triple DES.\n\nT1480\n\nExecution Guardrails\n\nInvisiMole has used Data Protection API to encrypt its \ncomponents on the victim\u2019s computer, to evade detection and \nmake sure the payload can only be decrypted (and then loaded) \non one specific compromised computer.\n\nT1143\n\nHidden Window\n\nInvisiMole has executed legitimate tools in hidden windows and \nused them to execute malicious InvisiMole components. \n\nT1066\n\nIndicator Removal from Tools\n\nInvisiMole has undergone technical improvements in attempt to \nevade detection.\n\nT1202\n\nIndirect Command Execution\n\nInvisiMole has used winapiexec tool for indirect execution of \nWindows API functions.\n\nDefense \nEvasion\n\nT1027\n\nObfuscated Files or \nInformation\n\nInvisiMole has obfuscated strings and code to make analysis more \ndifficult, and encrypted its components to thwart detection.\n\nT1055\n\nProcess Injection\n\nInvisiMole has injected its code into trusted processes using an \nimproved ListPlanting technique and via APC queue.\n\nT1108\n\nRedundant Access\n\nInvisiMole has deployed multiple backdoors on a single \ncompromised computer.\n\nT1085\n\nRundll32\n\nInvisiMole has used rundll32.exe as part of its execution chain.\n\nT1064\n\nScripting\n\nInvisiMole\u2019s loader uses a JavaScript script as a part of setting up \npersistence.\n\nT1063\n\nSecurity Software Discovery\n\nInvisiMole\u2019s DNS plugin avoids connecting to the C&C server if \nselected network sniffers are detected running.\n\nT1099\n\nTimestomp\n\nInvisiMole has modified timestamps of files that it creates or \nmodifies.\n\nT1036\n\nMasquerading\n\nT1046\n\nNetwork Service Scanning\n\nDiscovery\n\nT1518\n\nSoftware Discovery\n\nInvisiMole has attempted to disguise its droppers as legitimate \nsoftware or documents, and to conceal itself by registering under \na seemingly legitimate service name.\n\nInvisiMole has performed network scanning within the \ncompromised network using its Portscan and BlueKeep \ncomponents, in order to search for open ports and for hosts \nvulnerable to the BlueKeep vulnerability.\n\nInvisiMole\u2019s DNS downloader attempts to detect selected network \nsniffer tools, and pauses its network traffic if any are detected \nrunning.\n\nT1082\n\nSystem Information Discovery\n\nInvisiMole\u2019s DNS downloader collects computer name and system \nvolume serial number.\n\nT1124\n\nSystem Time Discovery\n\nInvisiMole can collect the timestamp from the victim\u2019s machine.\n\nT1210\n\nExploitation of Remote \nServices\n\nInvisiMole has exploited EternalBlue and BlueKeep vulnerabilities \nfor lateral movement.\n\nLateral \nMovement\n\nT1080\n\nTaint Shared Content\n\nInvisiMole has replaced legitimate software or documents in \nthe compromised network with their trojanized versions, in an \nattempt to propagate itself within the network.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f58\n\nT1043\n\nCommonly Used Port\n\nInvisiMole\u2019s downloader uses port 443 for C&C communication. \nInvisiMole\u2019s DNS plugin uses port 53 for C&C communication.\n\nT1090\n\nConnection Proxy\n\nInvisiMole\u2019s TCP downloader is able to utilize user-configured \nproxy servers for C&C communication.\n\nT1024\n\nCustom Cryptographic \nProtocol\n\nInvisiMole\u2019s TCP and DNS downloaders use a custom \ncryptographic protocol for encrypting network communication.\n\nT1132\n\nData Encoding\n\nInvisiMole\u2019s DNS downloader uses a variation of base32 encoding \nto encode data into the subdomain in its requests.\n\nCommand and \nControl\n\nT1008\n\nFallback Channels\n\nInvisiMole\u2019s TCP and DNS downloaders are configured with \nseveral C&C servers.\n\nT1105\n\nRemote File Copy\n\nInvisiMole\u2019s TCP and DNS downloaders can download additional \nfiles to be executed on the compromised system.\n\nT1071\n\nT1095\n\nStandard Application Layer \nProtocol\n\nInvisiMole\u2019s DNS downloader uses DNS protocol for C&C \ncommunication.\n\nStandard Non-Application \nLayer Protocol\n\nInvisiMole\u2019s TCP downloader uses TCP protocol for C&C \ncommunication.\n\nT1065\n\nUncommonly Used Port\n\nInvisiMole\u2019s TCP downloader uses port 1922 for C&C \ncommunication.\n\n10.2  RC2CL backdoor\n\nTactic\n\nID\n\nName\n\nDescription\n\nExecution\n\nPrivilege \nEscalation\n\nT1059\n\nCommand-Line Interface\n\nRC2CL backdoor can create a remote shell to execute commands.\n\nT1106\n\nExecution through API\n\nRC2CL backdoor uses CreateProcess and CreateProcessAsUser \nAPIs to execute files.\n\nT1134\n\nAccess Token Manipulation\n\nRC2CL backdoor can use CreateProcessAsUser API to start a new \nprocess under context of another user or process.\n\nT1088\n\nBypass User Account Control\n\nRC2CL backdoor can disable and bypass UAC to obtain elevated \nprivileges.\n\nT1090\n\nConnection Proxy\n\nRC2CL backdoor can be configured as a proxy relaying \ncommunication between other compromised computers and C&C \nserver.\n\nT1140\n\nDeobfuscate/Decode Files or \nInformation\n\nRC2CL backdoor decrypts strings using variations of XOR cipher.\n\nT1089\n\nDisabling Security Tools\n\nRC2CL backdoor is able to disable Windows firewall.\n\nDefense \nEvasion\n\nT1107\n\nFile Deletion\n\nRC2CL backdoor can delete dropped artifacts, and various files on-\ndemand following a delete command.\n\nRC2CL backdoor can safely delete files to thwart forensic analysis.\n\nT1112\n\nModify Registry\n\nRC2CL backdoor hides its configuration within registry keys.\n\nT1027\n\nObfuscated Files or \nInformation\n\nRC2CL backdoor obfuscates/encrypts strings and code to make \nanalysis more difficult.\n\nT1099\n\nTimestomp\n\nRC2CL backdoor modifies timestamps of files that it creates/\nmodifies.\n\nT1497\n\nVirtualization/Sandbox Evasion\n\nRC2CL backdoor is able to detect virtualized environments.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f59\n\nT1087\n\nAccount Discovery\n\nRC2CL backdoor can list account information and session \ninformation.\n\nT1010\n\nApplication Window Discovery\n\nRC2CL backdoor can list information about active windows.\n\nT1083\n\nFile and Directory Discovery\n\nRC2CL backdoor can list files, and specifically recently opened files, \nand list information about mapped/unmapped drives.\n\nT1046\n\nNetwork Service Scanning\n\nRC2CL backdoor is able to scan the compromised network for hosts \nvulnerable to EternalBlue vulnerability.\n\nT1057\n\nProcess Discovery\n\nRC2CL backdoor can list running processes.\n\nT1012\n\nQuery Registry\n\nDiscovery\n\nRC2CL backdoor can query registry to obtain information about \ninstalled software, applications accessed by users, applications \nexecuted on user login/system start, recently opened files, \n\nT1063\n\nSecurity Software Discovery\n\nRC2CL backdoor modifies its behavior if Bitdefender firewall is \nenabled, or if selected AV processes are detected running.\n\nT1518\n\nSoftware Discovery\n\nT1082\n\nSystem Information Discovery\n\nRC2CL backdoor can list installed software, recently accessed \nsoftware by users, software executed on each user login and/or \neach system start.\n\nRC2CL backdoor can list information about loaded drivers, computer \nname, OS version, memory status, local time, system and process \nDEP policy, \u2026\n\nT1016\n\nSystem Network Configuration \nDiscovery\n\nRC2CL backdoor can list IP table; configured proxy information; \ninformation about enabled wireless networks for geolocation of the \nvictims.\n\nT1007\n\nSystem Service Discovery\n\nRC2CL backdoor can list system service information.\n\nT1123\n\nAudio Capture\n\nRC2CL backdoor can record the sounds from microphones on a \ncomputer. RC2FM misuses a legitimate lame.dll for MP3 encoding of \nthe recordings.\n\nT1005\n\nData from Local System\n\nRC2CL backdoor can collect data from the system, and can monitor \nchanges in specified directories.\n\nCollection\n\nT1074\n\nData Staged\n\nRC2CL backdoor can store collected data in a central location for a \nlater exfiltration.\n\nT1113\n\nScreen Capture\n\nT1125\n\nVideo Capture\n\nT1008\n\nFallback Channels\n\nRC2CL backdoor can capture screenshots of the victim\u2019s screen. \nRC2CL backdoor can also capture screenshots of separate windows.\n\nRC2CL backdoor can access victim\u2019s webcam and capture photos/\nrecord videos.\n\nRC2CL backdoor is configured with several C&C servers. Via a \nbackdoor command, it is possible to extend the list and change \nwhich C&C server is used.\n\nT1105\n\nRemote File Copy\n\nInvisiMole can download additional files to be executed on the \ncompromised system.\n\nT1065\n\nUncommonly Used Port\n\nRC2CL backdoor uses port 1922 for C&C communication.\n\nT1002\n\nData Compressed\n\nRC2CL backdoor can create zlib and SFX archives. It misuses a copy \nof the legitimate WinRAR tool for compression and decompression.\n\nCommand and \nControl\n\nExfiltration\n\nT1022\n\nData Encrypted\n\nRC2CL backdoor uses variations of XOR cipher to encrypt data.\n\nT1041\n\nExfiltration Over Command \nand Control Channel\n\nRC2CL backdoor exfiltrates collected information over its C&C \nchannel.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f60\n\n10.3  RC2FM backdoor\n\nTactic\n\nID\n\nName\n\nDescription\n\nExecution\n\nPrivilege \nEscalation\n\nT1059\n\nCommand-Line Interface\n\nRC2FM backdoor can create a remote shell to execute commands.\n\nT1106\n\nExecution through API\n\nRC2FM backdoor supports a command that uses ShellExecute and \nCreateProcess APIs to execute files.\n\nT1088\n\nBypass User Account Control\n\nRC2FM backdoor can bypass UAC to obtain elevated privileges.\n\nT1140\n\nDeobfuscate/Decode Files or \nInformation\n\nRC2FM backdoor decrypts strings using variations of XOR cipher.\n\nT1107\n\nFile Deletion\n\nRC2FM backdoor can delete dropped artifacts, and various files on-\ndemand following a delete command.\n\nT1143\n\nHidden Window\n\nRC2FM backdoor uses CREATE_NO_WINDOW creation flag to execute \nmalware in hidden window.\n\nT1112\n\nModify Registry\n\nRC2FM backdoor hides its configuration within registry keys.\n\nDefense \nEvasion\n\nT1027\n\nObfuscated Files or \nInformation\n\nRC2FM backdoor obfuscates/encrypts strings and code to make analysis \nmore difficult.\n\nT1055\n\nProcess Injection\n\nRC2FM backdoor can inject itself into ctfmon.exe, dwm.exe, sihost.exe \nand taskhost.exe processes.\n\nT1085\n\nRundll32\n\nRC2FM backdoor uses rundll32.exe to load a stub DLL to which it then \ninjects itself.\n\nT1099\n\nTimestamp\n\nRC2FM backdoor modifies timestamps of files that it creates/modifies.\n\nT1497\n\nVirtualization/Sandbox Evasion\n\nRC2FM backdoor is able to detect virtualized environments.\n\nT1083\n\nFile and Directory Discovery\n\nRC2FM backdoor collects information about mapped drives. It can list \nfiles in a specific folder.\n\nT1135\n\nNetwork Share Discovery\n\nRC2FM backdoor can list connected network shares.\n\nDiscovery\n\nT1057\n\nProcess Discovery\n\nRC2FM backdoor can list running processes.\n\nT1082\n\nSystem Information Discovery\n\nRC2FM backdoor collects computer name and system volume serial \nnumber.\n\nT1016\n\nSystem Network Configuration \nDiscovery\n\nRC2FM backdoor lists information about configured proxy servers.\n\nT1123\n\nAudio Capture\n\nRC2FM backdoor can record the sounds from microphones on a \ncomputer. It misuses a legitimate lame.dll for MP3 encoding of the \nrecordings.\n\nCollection\n\nT1025\n\nData from Removable Media\n\nRC2FM backdoor can collect jpeg files from connected MTP devices.\n\nT1056\n\nInput Capture\n\nRC2FM backdoor can collect keystrokes.\n\nT1113\n\nScreen Capture\n\nRC2FM backdoor can capture screenshots of the victim\u2019s screen.\n\nT1043\n\nCommonly Used Port\n\nRC2FM backdoor uses port 80 for C&C communication.\n\nT1090\n\nConnection Proxy\n\nRC2FM backdoor can use proxies configured on the local system, for \nvarious installed and portable browsers, if direct connection to the C&C \nserver fails.\n\nCommand and \nControl\n\nT1008\n\nFallback Channels\n\nRC2FM backdoor is configured with several C&C servers. It is possible to \nupdate the C&C server by a backdoor command.\n\nT1105\n\nRemote File Copy\n\nInvisiMole can download additional files to be executed on the \ncompromised system.\n\nT1071\n\nStandard Application Layer \nProtocol\n\nRC2FM backdoor uses HTTP for C&C communication.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\f61\n\nT1022\n\nData Encrypted\n\nRC2FM backdoor uses variations of XOR cipher to encrypt data.\n\nExfiltration\n\nT1041\n\nExfiltration Over Command \nand Control Channel\n\nRC2FM backdoor exfiltrates collected information over its C&C channel.\n\nInvisiMole: The hidden part of the storyTLP: WHITE\fABOUT ESET\n\nFor 30 years, ESET\u00ae has been developing industry-leading IT security software and services for \n\nbusinesses and consumers worldwide. With solutions ranging from endpoint and mobile security, \n\nto encryption and two-factor authentication, ESET\u2019s high-performing, easy-to-use products give \n\nconsumers and businesses the peace of mind to enjoy the full potential of their technology. ESET \n\nunobtrusively protects and monitors 24/7, updating defenses in real time to keep users safe and \n\nbusinesses running without interruption. Evolving threats require an evolving IT security company. \n\nBacked by R&D centers worldwide, ESET becomes the first IT security company to earn 100 Virus \n\nBulletin VB100 awards, identifying every single \u201cin-the-wild\u201d malware without interruption since 2003. \n\nFor more information, visit www.eset.com or follow us on LinkedIn, Facebook and Twitter.\n\n\f"], "URLs": ["https://modexp.wordpress.com/2019/04/25/seven-window-injection-methods/", "http://www.hexacorn.com/blog/2019/04/25/"], "weight": 0.0}