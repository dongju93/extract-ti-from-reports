{"rule_id": 671, "name": "ESET_Operation_Ghost_Dukes", "description": "-", "references": [], "File_Names": ["doctors.php", "Agent.SYC", "bottom.php", "rulourialuminiu.co", "Agent.ZWH", "Agent.AART", "operaprefs.ini", "Agent.CAW", "people.php", "Agent.TSG", "Agent.TSH", "powerpolymer.net", "Agent.OL", "rcv_get.php", "Agent.TGC", "contacts.php", "acciaio.com", "welcome.php", "Agent.SXO", "cuteanimals12.jpg", "Canocpc.exe", "Agent.SVP", "dothome.co", "bcf505ca1af4a38762ff650968ac9cab2ce305cdbf8331d30b.png", "diagnostics.php", "Tiny.BG", "php_script.php", "northants.sch", "Agent.AAPY", "prej.js", "rulourialuminiu.ro", "Agent.TUF"], "MD5_Hashes": ["fc7fbe66c820f17c30147235e95d31b8", "e40a4bc603a74403979716c932f0523a"], "SHA1_Hashes": ["AF2B46D4371CE632E2669FEA1959EE8AF4EC39CE", "718C2CE6170D6CA505297B41DE072D8D3B873456", "D625C7CE9DC7E56A29EC9A81650280EDC6189616", "A88DA2DD033775F7ABC8D6FB3AD5DD48EFBEADE1", "7994714FFDD6411A6D64A7A6371DB9C529E70C37", "6ACC0B1230303F8CF46152697D3036D69EA5A849", "170BE45669026F3C1FC5BA2D48817DBF950DA3F6", "CF14AC569A63DF214128F375C12D90E535770395", "0A5A7DD4AD0F2E50F3577F8D43A4C55DDC1D80CF", "B05CABA461000C6EBD8B237F318577E9BCCD6047", "64D6C11FFF2C2AADAACEE01B294AFCC751316176", "D09C4E7B641F8CB7CC86190FD9A778C6955FEA28", "A75995F94854DEA8799650A2F4A97980B71199D2", "4BA559C403FF3F5CC2571AE0961EAFF6CF0A50F6", "539D021CD17D901539A5E1132ECAAB7164ED5DB5", "0E25EE58B119DD48B7C9931879294AC3FC433F50", "F7FD63C0534D2F717FD5325D4397597C9EE4065F", "5905C55189C683BC37258AEC28E916C41948CD1C", "DB19171B239EF6DE8E83B2926EADC652E74A5AFA", "9E96B00E9F7EB94A944269108B9E02D97142EEDC", "86EC70C27E5346700714DBAE2F10E168A08210E4", "194D8E2AE4C723CE5FE11C4D9CFEFBBA32DCF766"], "SHA256_Hashes": ["62DA45930238A4A1149E76658A35C4A70CE7E0CDF7529C96499FB5F27AA647B3"], "Registry_Entries": ["HKCU\\Software\\\nClasses\\http\\shell\\open\\command. It then selects one of the hardcoded User-Agent strings \naccordingly, as shown in Table 5.\n\nTable 5 \n\nHardcoded User-Agent\n\nDefault Browser\n\nSelected User-Agent\n\nChrome\n\nFirefox\n\nMozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 \nSafari/537.36\n\nMozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0\n\nInternet Explorer Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\n\nOpera\n\nSafari\n\nMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) \nChrome/37.0.2062.35 Safari/537.36 OPR/24.0.1558.21\n\nMozilla/5.0 (Windows; Windows NT 6.1) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 \nSafari/534.57.2\n\nNext, FatDuke contacts the C&C server, specified in the config, and uses one of the PHP scripts specified in \nthe php_aliases field of the config. It is interesting to note that these filenames are related to the theme \nof the C&C server domain. For example, they registered the domain westmedicalgroup[.]net, and the \naliases list contains filenames such as doctors.php or diagnostics.php.\n\nFigure 30 is a summary of the C&C protocol.\n\nFatDuke\n\nGET Request\nto the C&C\n\n</>\n\nUse a regex \nto extract a speci\ufb01c \nimage URL\n\nHTML page\n\nImage URL\n\nDownloads \nthe PNG image\n\n>_\n\nMalicious \naction\n\nExecute\nthe command\n\n{ JSON }\n\nDecode\nand decrypt\n\nBackdoor \ncommand in JSON\n\nImage URL\n\nFigure 30 // FatDuke C&C protocol\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f27\n\nThe requests sent to the C&C server are crafted to look like typical GET requests and once again  \nare related to the script name. For example, the request below uses parameters that you might expect  \nto find on a forum\u2019s website.\n\n/homepage/forum.php?newsid=<RANDOM>&article=<REDACTED>&user= \ne40a4bc603a74403979716c932f0523a&revision=3&fromcache=0\n\nHowever, while some fields are randomly generated strings, article and user could be used  \nby the operator to pinpoint the victim. The first keyword, article, is an identifier \u2013 a SHA-256 hash  \nof the volume identifier concatenated with MAC addresses found on the target computer. The other \nkeyword, user, probably flags the general configuration that comes with the malware. This value  \nis located in the PE resource section, right before the encoded configuration mentioned in section 4 5.\n\nThe reply is an HTML page, with the HTML content copied from a legitimate website such as the BBC. \nHowever, if the C&C server wants to send a command to the malware, it will add an additional \nHTML img tag to the page, as shown in Figure 31.\n\nFigure 31 // Additional image tag sent by FatDuke C&C\n\nOnce it receives this HTML page, the malware uses the two following regexes:\n\n\u2022  <img id=\u201did[0-9]+\u201d src=\u201d([^ \u201c]+)\u201d class=\u201dimage-replace\u201d[^>]*>\n\u2022  <img id=\u201didd[0-9]+\u201d src=\u201d([^ \u201c]+)\u201d class=\u201dimage-replace\u201d[^>]*>\n\nThese regexes extract the src attribute value \u2013 the URI of the image. If it finds an image, the malware will \nmake another GET request to http(s)://<C&C>/<directory>/<php_script.php>?imageid=<src \nvalue>. In our example, it will make a request to http://<C&C>/about/bottom.php?imageid=32d7 \nbcf505ca1af4a38762ff650968ac9cab2ce305cdbf8331d30b.png.\n\nThis will return a file, such as that shown in Figure 32. These files masquerade as PNG images  \nin the GET request, but are not valid images. They contain a header of 0x37 bytes, matching one hardcoded \nin the malware, and a chunk of encrypted data that is base64 encoded. To further the PNG subterfuge,  \nthe header contains an incomplete, misplaced and corrupted PNG header, which may be sufficient to avert \nconcern under cursory examination.\n\nFigure 32 // C&C response including most of a valid PNG header and an encrypted command for FatDuke\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f28\n\nThe malware then decrypts this data using AES-256 in ECB mode, with the key hardcoded in the config.  \nThe result is a command in JSON. Figure 33 shows six real command examples.\n\n{", "HKEY_LOCAL_MACHINE\\SOFTWARE\\Intel\\\nMediaSDK\\Dispatch\\0102\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Intel\\\nMediaSDK\\Dispatch\\hw64-s1-1\n\nPathCPA\n\nCPAmodule\n\nInit\n\nRootPath\n\nAPIModule\n\nStack\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\\nMSBuild\\4.0\n\nMSBuildOverride-\nTasksPath\n\nDefaultLibs\n\nBinaryCache\n\nFinally, the decrypted Windows Executable is loaded using the Assembly.Load method. We only found  \none payload, but we cannot be certain that others are not deployed in the wild.\n\nThe payload: a fileless, Dropbox-controlled backdoor\n\nThe payload is a backdoor that resides in memory only, and that uses Dropbox as its C&C server.  \nIts configuration is hardcoded in an internal class, shown in Figure 20. Our analysis is based on the sample \nwith SHA-1 5905C55189C683BC37258AEC28E916C41948CD1C.\n\nFigure 20 // Dropbox backdoor configuration (redacted)\n\nWe have seen the following clientId values being used: collection_3, collection_4, collection_6, \ncollection_7, collection_8 and collection_99. However, other than collection_4, we were not \nable to determine the targets for these collections. \n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f21\n\nThe backdoor regularly lists the Dropbox directory corresponding to its clientId and downloads PNG files \nfrom it. The downloaded PNG files are valid pictures, as you can see in Figure 21.\n\nFigure 21 // Example of two pictures downloaded from the Dropbox directory\n\nHowever, the attackers have used steganography to hide data in the pictures. In Figure 22, you can see  \nthe code looping over all the pixels of the image and extracting data from them. \n\nFigure 22 // Loop extracting a payload from the pixels of a downloaded picture\n\nEach pixel is encoded into 24 bits: 8 for red, 8 for green and 8 for blue. The developers use a technique  \ncalled \u201cLeast Significant Bit\u201d to store 8 bits of data in each pixel, as shown in Figure 23. This technique  \nhas been used previously by other malware such as Gozi [25]. They extract two bits from the red value,  \nthree from the green and three from the blue.\n\nRed\n\nGreen\n\nBlue\n\n0\n\n1\n\n0\n\n1\n\n0\n\n1\n\n1\n\n0\n\n1\n\n1\n\n1\n\n1\n\n0\n\n0\n\n1\n\n0\n\n0\n\n1\n\n1\n\n1\n\n0\n\n0\n\n0\n\n1\n\n1\n\n0\n\n0\n\n1\n\n0\n\n0\n\n0\n\n1\n\nFigure 23 // The least significant bits of each color of each pixel are extracted to recover the hidden data\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f22\n\nThe steganographically altered image has almost no visible difference from the original image because  \nthe two or three least significant bits have a very limited impact on the color. For the green and blue \ncomponents of each pixel a maximum of 7/256, and for the red component 3/256 of a fully saturated pixel \nvariation will occur. Figure 24 shows a blue of value 255 (on the left) and the maximum deviation from that \nin just the blue spectrum with a value of 248 (on the right). There is apparently no difference but, by doing \nthat on every pixel of the image, allows the attacker to store a backdoor in a still valid PNG image.\n\n255\n\n248\n\nFigure 24 // Comparison between a blue of value 255 and a blue of value 248\n\nFinally, it decrypts the extracted bytes using the AES key hardcoded in the config. The decrypted data can be:\n\n\u2022  a Windows executable\n\n\u2022  a Windows DLL\n\n\u2022  a PowerShell script\n\nWe have seen the following executables being dropped by this Dropbox backdoor:\n\n\u2022  Several MiniDuke backdoors (see section 4 4)\n\n\u2022  Process Explorer, a utility that is part of the SysInternals suite\n\n4.4  MiniDuke backdoor: the second stage\n\nAs highlighted in section 3 2, the most recent versions of the MiniDuke backdoor have a lot of code similarities  \nwith earlier versions, such as the sample with SHA-1 of 86EC70C27E5346700714DBAE2F10E168A08210E4, \ndescribed by Kaspersky researchers in 2014 [21]. Our analysis is based on the sample with  \nSHA-1 B05CABA461000C6EBD8B237F318577E9BCCD6047, compiled on August 17, 2018. \n\nMiniDuke acts as a second-stage backdoor, which is dropped by one of the two first-stage components \ndescribed in the sections above.\n\nThe most recent samples we are aware of were compiled in June 2019 and show no major changes, except \nthe C&C domain and the use of an invalid (likely transplanted) digital signature, as shown in Figure 25.  \nThis might be an attempt to bypass some security products.\n\nFigure 25 // Invalid digital signature added to the backdoor\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f23\n\nThe backdoor is still written in pure x86 assembly but its size increased a lot \u2013 from 20 KB to 200+ KB.  \nThis is due to the addition of obfuscation, mainly control-flow flattening [26], as shown in Figure 26.  \nThis is a common obfuscation technique that makes it difficult to read the code because every function  \nis split in a switch/case inside a loop.\n\nFigure 26 // Control flow flattening used to obfuscate the MiniDuke backdoor\n\nSome of the Windows API functions are resolved dynamically. The backdoor uses a simple hash function  \nto obfuscate the name of the function it tries to resolve.\n\nThe network communication is relatively simple. It can use the GET, POST and PUT HTTP methods to contact \nthe hardcoded C&C server.\n\nIn order to blend into the legitimate traffic, the data are prepended with a JPEG header. The resulting images \nare not valid, but it is very unlikely that anybody will check the validity of all pictures in the network traffic. \nFigure 27 is an example of a POST request to the C&C server. As the server was down at the time of capture, \nwe were not able to receive a reply, but we believe the reply also contains a JPEG header, as the malware \nignores the first bytes of the reply.\n\nFigure 27 // Post request to the C&C server that looks like a regular jpeg file upload\n\nIn addition to the HTTP protocol, the malware is able to send and receive data over a named pipe. This \nfeature typically allows it to reach machines on the local network that don\u2019t have internet access. One \ncompromised machine, with internet access, will forward commands to other compromised machines \nthrough the named pipe.\n\nA similar feature to the named pipe is the HTTP proxy. The malware will listen on a first socket, either  \non the default port 8080 or on a port specified by the operators. It will also open a second socket with  \nthe C&C server. It waits for connections on the first socket and when one is established, it proxies data \nbetween the two sockets. Thus, a machine without internet access, or with a firewall that blocks connec-\ntions to the attackers\u2019 domain, might still be able to reach the C&C through the proxy machine.\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f24\n\nFinally, this malware implements thirty-eight different backdoor functions such as:\n\n\u2022  Uploading or downloading files\n\n\u2022  Creating processes\n\n\u2022  Getting system information (hostname, ID, pipename, HTTP method)\n\n\u2022  Getting the list of local drives and their type (unk, nrt, rmv, fix, net, cdr, ram, und)\n\u2022  Reading and writing in the named pipe\n\n\u2022  Starting and stopping the proxy feature\n\n4.5  FatDuke: the third stage\n\nFatDuke is the current flagship backdoor of the group and is only deployed on the most interesting  \nmachines. It is generally dropped by the MiniDuke backdoor, but we also have seen the operators dropping \nFatDuke using lateral movement tools such as PsExec.\n\nThe operators regularly repack this malware in order to evade detections. The most recent sample  \nof FatDuke we have seen was compiled on May 24, 2019.\n\nWe have seen them trying to regain control of a machine multiple times in a few days, each time with  \na different sample. Their packer, described in a later section, adds a lot of code, leading to large binaries. \nWhile the effective code should not be larger than 1MB, we have seen one sample weighing in at 13MB, \nhence our name for this backdoor component: FatDuke.\n\nIn this section, we will use the sample with SHA-1 DB19171B239EF6DE8E83B2926EADC652E74A5AFA  \nfor our analysis.\n\nInstallation and persistence\n\nDuring our investigation, we were not able to find a dropper for FatDuke. We believe the operators simply \ninstall the backdoor and establish persistence using the standard commands of an earlier stage backdoor.\n\nWe also noted that FatDuke generally replaced the second-stage binary, reusing the persistence  \nmechanism already in place.\n\nThe persistence we have seen is very standard. They use the registry key HKLM\\SOFTWARE\\Microsoft\\\nWindows\\CurrentVersion\\Run and creatd a new value named Canon Gear and value C:\\Program \nFiles\\Canon\\Network ScanGear\\Canocpc.exe. This launches the backdoor each time a user logs in.\n\nConfiguration\n\nFatDuke has a hardcoded configuration embedded in the executable\u2019s resources, as shown in Figure 28.\n\nFigure 28 // FatDuke configuration data in the PE resources\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f25\n\nThe configuration data is a JSON object encoded in base64. Once decoded, it reveals much interesting \ninformation, as shown in Figure 29.\n\n{\n\n", "HKCU\\Software\\KasperskyLab exists and if so, it waits 30 seconds before executing  \nany additional code. We do not know whether this really bypasses any Kaspersky security products.\n\nThe Crypto Container is an SQLite database, stored on the disk in the same directory as the loader,  \nand uses SQLCipher. This SQLite extension encrypts the database using AES-256. The encryption key is the \nMD5 hash of machine-specific values (such as CPUID, the account name, the BIOS version and the processor \nname) to prevent decryption if, for example, the database ends up in a public malware repository. The key  \nis not stored anywhere but is re-generated at each execution.\n\nThe database contains three different tables, which are created using the following commands:\n\nCREATE\tTABLE\tmodules\t(uid\tINTEGER\tPRIMARY\tKEY,\tversion\tchar(255),\t\ncode\tblob,\tconfig\tblob,\ttype\tchar(10),\tmd5sum\tchar(32),\tautorun\t\n(INTEGER);\nCREATE\tTABLE\tobjects\t(uid\tINTEGER\tPRIMARY\tKEY\tAUTOINCREMENT,\tname\t\nCHAR(255),\tbody\tblob,\ttype\tchar(10),\tmd5sum\tchar(32));\nCREATE\tTABLE\tconfig\t(uid\tINTEGER\tPRIMARY\tKEY\tAUTOINCREMENT,\tagent_id\t\nCHAR(128),\tremote_host\tCHAR(256),\tremote_port\tinteger,\tremote_path\t\nchar(1024),\tupdate_interval\tinteger,\tserver_key\tCHAR(32),\trcv_header\t\nCHAR(64));\n\nThe configuration default values are hardcoded in the binary. This SQLite table allows the malware  \noperators to update these parameters easily. \n\nSimilarly, the modules, which are plug-ins for the backdoor, are stored in the database. Since the database  \nis encrypted, the modules never touch the disk in plaintext and will only be loaded into memory.  \nUnfortunately, we have not yet been able to find any of the plug-ins used by LiteDuke.\n\nOne artefact of the development method is the implementation of the backdoor commands. Usually,  \na backdoor will have a big switch statement to check the command sent by the C&C server against the list \nof commands implemented in the malware. In the case of LiteDuke, it is a succession of loops: one loop per \nimplemented command, as shown in Figure 42.\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f33\n\nFigure 42 // Multiple while loops instead of a backdoor switch case\n\nEach of the 41 different commands has between three and six possible command IDs. The program will loop \nsuccessively on the list until the ID in the list matches the ID provided by the operator. The full list is available \nin Figure 43.\n\nFigure 43 // List of LiteDuke command IDs\n\nGiven the large number of different commands, we won\u2019t list them all. Basically, the backdoor can:\n\n\u2022  Upload or download files\n\n\u2022  Securely delete a file by first writing random data (from a linear congruential generator) to the file\n\n\u2022  Update the database (config, modules and objects)\n\n\u2022  Create a process\n\n\u2022  Get system information (CPUID, BIOS version, account name, etc.)\n\n\u2022  Terminate itself\n\nThe network part of the backdoor is relatively simple. It uses GET requests to contact either the hardcoded \nC&C URL or the one stored in the database. Figure 44 shows the domain, resources and parameters used  \nby LiteDuke.\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f34\n\nFigure 44 // LiteDuke C&C domain, resources and parameters \n\nAmong the different samples we analyzed, the C&C domains are different, but they always use a script \nnamed rcv_get.php. We believe that the C&C domains are compromised servers.\n\nIn order to blend into the network traffic, and similar to FatDuke, the malware checks the default browser \nand chooses its User-Agent request header accordingly, as shown in Table 7. It can also get the proxy \nconfiguration from Firefox, in the configuration file prej.js, or from Opera, in the operaprefs.ini file. \nThis information is then used when establishing a connection to the C&C server.\n\nTable 7 \n\nUser-Agent strings used by LiteDuke\n\nDefault Browser\n\nUser-Agent\n\nInternet Explorer\n\nMozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; \nSLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729)\n\nFirefox\n\nChrome\n\nSafari\n\nOpera\n\nMozilla/5.0 (Windows NT 6.2; WOW64; rv:23.0) Gecko/20100101 \nFirefox/23.0\n\nMozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWeb-\nKit/534.13(KHTML, like Gecko) Chrome/9.0.597.98 Safari/534.13\n\nMozilla/5.0 (Windows; U; Windows NT 5.1; en-US) AppleWebKit/533.19.4 \n(KHTML, like Gecko) Version/5.0.3 Safari/533.19.4\n\nOpera/9.80 (Windows NT 5.1; U; en-US) Presto/2.7.62 Version/11.01\n\nAs one can see, some of these User-Agents are custom and they all refer to very old browsers, most of them \nreleased in 2011. It is also way less stealthy than with FatDuke\u2019s sniffing of the real User-Agent used by the \nlocal browser. This reinforces our hypothesis that this backdoor was used many years ago and is no longer \ndeployed in the wild.\n\n5.  CONCLUSION\n\nOperation Ghost shows that the Dukes never stopped their espionage activities. They were in the spotlight \nafter the breach of the Democratic National Committee during the 2016 US presidential elections. However, \nthey then recovered from that media attention and rebuilt most of their toolset.\n\nUsing these new tools and previously used techniques, such as leveraging Twitter and steganography, they \nwere able to breach Foreign Affairs Ministries of several European governments.\n\nThis campaign also shows that APT threat actors going dark for several years does not mean they have \nstopped spying. They might pause for a while and re-appear in another form, but they still need to spy to \nfulfill their mandates.\n\nTo help defenders better protect their networks, we will continue to monitor the Dukes\u2019 developments.\n\nIndicators of Compromise can also be found on GitHub. For any inquiries, or to make sample submissions \nrelated to the subject, contact us at: threatintel@eset com.\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f35\n\n6.  BIBLIOGRAPHY\n  1  D. Alperovitch, \u201cBears in the Midst: Intrusion into the Democratic National Committee,\u201d 15 06 2016.\u00a0[Online]. \n\nAvailable: https://www crowdstrike com/blog/bears-midst-intrusion-democratic-national-committee/.\n\n  2  Department of Homeland Security, \u201cEnhanced Analysis of GRIZZLY STEPPE Activity,\u201d 10 02 2017.\u00a0[Online]. \n\nAvailable: https://www us-cert gov/sites/default/files/publications/AR-17-20045_Enhanced_Analysis_of_GRIZZLY_\nSTEPPE_Activity pdf.\n\n  3  GReAT, \u201cThe MiniDuke Mystery: PDF 0-day Government Spy Assembler 0x29A Micro Backdoor,\u201d  \n\n27 02 2013.\u00a0[Online]. Available:  \nhttps://securelist com/the-miniduke-mystery-pdf-0-day-government-spy-assembler-0x29a-micro-backdoor/31112/.\n\n  4  A. Lehti\u00f6, \u201cTHE DUKES: 7 years of Russian cyberespionage,\u201d 17 09 2015.\u00a0[Online].  \n\nAvailable: https://www f-secure com/documents/996508/1030745/dukes_whitepaper pdf.\n\n  5 \n\nS. R. Skjeggestad, H. Stolt-Nielsen, L. Tomter, E. Omland and A. Str\u00f8nen, \u201cNorge utsatt for et omfattende \nhackerangrep,\u201d 07 02 2017.\u00a0[Online]. Available:  \nhttps://www nrk no/norge/norge-utsatt-for-et-omfattende-hackerangrep-1 13358988.\n\n  6  A. T. Matthew Dunwoody, B. Withnell, J. Leathery, M. Matonis and N. Carr, \u201cNot So Cozy: An Uncomfortable \n\nExamination of a Suspected APT29 Phishing Campaign,\u201d 19 11 2018.\u00a0[Online]. Available: https://www fireeye com/\nblog/threat-research/2018/11/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign html.\n\n  7  A. Cherepanov, \u201cGREYENERGY: A successor to BlackEnergy,\u201d 10 2018.\u00a0[Online]. Available:  \n\nhttps://www welivesecurity com/wp-content/uploads/2018/10/ESET_GreyEnergy pdf.\n\n  8  A. Cherepanov, \u201cThe rise of TeleBots: Analyzing disruptive KillDisk attacks,\u201d ESET, 13 12 2016.\u00a0[Online]. \n\nAvailable: https://www welivesecurity com/2016/12/13/rise-telebots-analyzing-disruptive-killdisk-attacks/.\n\n  9  T. Brewster, \u201cSophisticated \u2018MiniDuke\u2019 hackers start hunting governments and drug \n\ndealers,\u201d 03 07 2014.\u00a0[Online]. Available: https://www theguardian com/technology/2014/jul/03/\nminiduke-hackers-governments-drug-dealers-kaspersky.\n\n 10  F-Secure, \u201cCOZYDUKE,\u201d 22 04 2015.\u00a0[Online]. Available:  \n\nhttps://www f-secure com/documents/996508/1030745/CozyDuke.\n\n  11  M. Dunwoody, \u201cDissecting One of APT29\u2019s Fileless WMI and PowerShell Backdoors (POSHSPY),\u201d  \n\n03 04 2017.\u00a0[Online]. Available: https://www fireeye com/blog/threat-research/2017/03/dissecting_one_ofap html.\n\n  12  FireEye, \u201cHAMMERTOSS: Stealthy Tactics Define a Russian Cyber Threat Group,\u201d 07 2015.\u00a0[Online].  \n\nAvailable: https://www2 fireeye com/rs/848-DID-242/images/rpt-apt29-hammertoss pdf.\n\n  13 \n\n  14 \n\nSymantec Security Response, \u201c\u2019Forkmeiamfamous\u2019: Seaduke, latest weapon in the Duke armory,\u201d  \n13 07 2015.\u00a0[Online]. Available:  \nhttps://www symantec com/connect/blogs/forkmeiamfamous-seaduke-latest-weapon-duke-armory.\n\nS. Adair, \u201cPowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think \nTanks and NGOs,\u201d 09 11 2016.\u00a0[Online]. Available: https://www volexity com/blog/2016/11/09/\npowerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/.\n\n  15 \n\nJ. Pitts, \u201cThe Case of the Modified Binaries,\u201d 23 10 2014.\u00a0[Online]. Available:  \nhttps://www leviathansecurity com/blog/the-case-of-the-modified-binaries/.\n\n  16  A. Lehti\u00f6, \u201cOnionDuke: APT Attacks Via the Tor Network,\u201d 14 11 2014.\u00a0[Online]. Available:  \n\nhttps://www f-secure com/weblog/archives/00002764 html.\n\n  17  ESET Research, \u201cMiniduke still duking it out,\u201d 20 05 2014.\u00a0[Online]. Available:  \n\nhttps://www welivesecurity com/2014/05/20/miniduke-still-duking/.\n\n  18 \n\n  19 \n\nS. Lozhkin, \u201cMinidionis \u2013 one more APT with a usage of cloud drives,\u201d 15 07 2015.\u00a0[Online]. Available:  \nhttps://securelist com/minidionis-one-more-apt-with-a-usage-of-cloud-drives/71443/.\n\nJ.-I. Boutin and M. Faou, \u201cVisiting the snake nest,\u201d 01 2018.\u00a0[Online]. Available:  \nhttps://recon cx/2018/brussels/resources/slides/RECON-BRX-2018-Visiting-The-Snake-Nest pdf.\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f36\n\n 20  ESET Research, \u201cEn Route with Sednit,\u201d 10 2016.\u00a0[Online]. Available:  \n\nhttps://www welivesecurity com/wp-content/uploads/2016/10/eset-sednit-full pdf.\n\n  21  GReAT, \u201cMiniduke is back: Nemesis Gemina and the Botgen Studio,\u201d 03 07 2014.\u00a0[Online]. Available:  \n\nhttps://securelist com/miniduke-is-back-nemesis-gemina-and-the-botgen-studio/64107/.\n\n 22  The Unicode Consortium, \u201cKatakana Range: 30A0\u201330FF,\u201d\u00a0[Online]. Available:  \n\nhttps://www unicode org/charts/PDF/U30A0 pdf.\n\n 23  The Unicode Consortium, \u201cCherokee Range: 13A0-13FF,\u201d\u00a0[Online]. Available:  \n\nhttps://unicode org/charts/PDF/U13A0 pdf.\n\n 24  The Unicode Consortium, \u201cKangxi Radicals Range: 2F00-2FDF,\u201d\u00a0[Online]. Available:  \n\nhttps://unicode org/charts/PDF/U2F00 pdf.\n\n 25  P.-M. Bureau and C. Dietrich, \u201cHiding in Plain Sight,\u201d 2015.\u00a0[Online]. Available: https://www blackhat com/docs/\n\neu-15/materials/eu-15-Bureau-Hiding-In-Plain-Sight-Advances-In-Malware-Covert-Communication-Channels pdf.\n\n 26  T. L\u00e1szl\u00f3 and \u00c1. Kiss, \u201cObfuscating C++ programs via control flow flattening,\u201d 08 2009.\u00a0[Online].  \n\nAvailable: http://ac inf elte hu/Vol_030_2009/003 pdf.\n\n 27 \n\nSkylight, \u201cCylance, I Kill You!,\u201d 18 07 2019.\u00a0[Online]. Available:  \nhttps://skylightcyber com/2019/07/18/cylance-i-kill-you/.\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f37\n\n7. \n\nINDICATORS OF COMPROMISE\n\n7.1  Hashes\n\nComponent\n\nSHA-1\n\nCompilation \nDate\n\nESET detection \nname\n\n4BA559C403FF3F5CC2571AE0961EAFF6CF0A50F6\n\n07/07/2014\n\nWin32/Agent.ZWH\n\nCF14AC569A63DF214128F375C12D90E535770395\n\n07/06/2017\n\nWin32/Agent.AAPY\n\nPolyglotDuke\n\n539D021CD17D901539A5E1132ECAAB7164ED5DB5\n\n07/06/2017\n\nWin32/Agent.ZWH\n\n0E25EE58B119DD48B7C9931879294AC3FC433F50\n\n07/08/2017\n\nWin64/Agent.OL\n\nD625C7CE9DC7E56A29EC9A81650280EDC6189616\n\n19/10/2018\n\nWin64/Agent.OL\n\n0A5A7DD4AD0F2E50F3577F8D43A4C55DDC1D80CF\n\n21/12/2017\n\nMSIL/Tiny.BG\n\nF7FD63C0534D2F717FD5325D4397597C9EE4065F\n\n10/07/2018\n\nMSIL/Tiny.BG\n\nRegDuke Loader\n\n194D8E2AE4C723CE5FE11C4D9CFEFBBA32DCF766\n\n29/08/2018\n\nMSIL/Agent.TGC\n\n64D6C11FFF2C2AADAACEE01B294AFCC751316176\n\n01/10/2018\n\nMSIL/Agent.SVP\n\n6ACC0B1230303F8CF46152697D3036D69EA5A849\n\n25/10/2018\n\nMSIL/Agent.SXO\n\n170BE45669026F3C1FC5BA2D48817DBF950DA3F6\n\n01/12/2018\n\nMSIL/Agent.SYC\n\nRegDuke Backdoor\n\n5905C55189C683BC37258AEC28E916C41948CD1C\n\n29/08/2018\n\nMSIL/Agent.CAW\n\nMiniDuke\n\nFatDuke\n\nB05CABA461000C6EBD8B237F318577E9BCCD6047\n\n17/08/2018\n\nWin32/Agent.TSG\n\n718C2CE6170D6CA505297B41DE072D8D3B873456\n\n24/06/2019\n\nWin32/Agent.TUF\n\nA88DA2DD033775F7ABC8D6FB3AD5DD48EFBEADE1\n\n03/05/2017\n\nWin32/Agent.TSH\n\nDB19171B239EF6DE8E83B2926EADC652E74A5AFA\n\n22/05/2019\n\nWin32/Agent.TSH\n\nFatDuke Loader\n\n9E96B00E9F7EB94A944269108B9E02D97142EEDC\n\n19/04/2019\n\nWin32/Agent.AAPY\n\nLiteDuke\n\nAF2B46D4371CE632E2669FEA1959EE8AF4EC39CE\n\n02/10/2014\n\nWin32/Agent.AART\n\n7.2  Network\n\nDomains\n\nComponent\n\nDomain\n\nacciaio.com[.]br\n\nceycarb[.]com\n\ncoachandcook[.]at\n\nfisioterapiabb[.]it\n\nlorriratzlaff[.]com\n\nmavin21c.dothome.co[.]kr\n\nmotherlodebulldogclub[.]com\n\npowerpolymerindustry[.]com\n\npubliccouncil[.]org\n\nrulourialuminiu.co[.]uk\n\nsistemikan[.]com\n\nvaruhusmc[.]org\n\necolesndmessines[.]org\n\nsalesappliances[.]com\n\nbusseylawoffice[.]com\n\nfairfieldsch[.]org\n\nministernetwork[.]org\n\nskagenyoga[.]com\n\nwestmedicalgroup[.]net\n\nPolyglotDuke\n\nMiniDuke\n\nFatDuke\n\nLiteDuke\n\nbandabonga[.]fr\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f38\n\nPublic webpages used by PolyglotDuke\n\nhttp://ibb[.]co/hVhaAq\n\nhttp://imgur[.]com/1RzfF7r\n\nhttp://imgur[.]com/6wjspWp\n\nhttp://imgur[.]com/d4ObKL0\n\nhttp://imgur[.]com/D6U06Ci\n\nhttp://imgur[.]com/GZSK9zI\n\nhttp://imgur[.]com/wcMk7a2\n\nhttp://imgur[.]com/WMTwSMJ\n\nhttp://imgur[.]com/WOKHonk\n\nhttp://imgur[.]com/XFa7Ee1\n\nhttp://jack998899jack.imgbb[.]com\n\nhttp://simp[.]ly/publish/pBn8Jt\n\nhttp://thinkery[.]me/billywilliams/5a0170161cb602262f000d2c\n\nhttp://twitter[.]com/aimeefleming25\n\nhttp://twitter[.]com/hen_rivero\n\nhttp://twitter[.]com/JamesScott1990\n\nhttp://twitter[.]com/KarimM_traveler\n\nhttp://twitter[.]com/lerg5pvo1i\n\nhttp://twitter[.]com/m63vhd7ach3\n\nhttp://twitter[.]com/MarlinTarin\n\nhttp://twitter[.]com/np8j7ovqdl\n\nhttp://twitter[.]com/q5euqysfu5\n\nhttp://twitter[.]com/qistp743li\n\nhttp://twitter[.]com/t8t842io2\n\nhttp://twitter[.]com/ua6ivyxkfv\n\nhttp://twitter[.]com/utyi5asko02\n\nhttp://twitter[.]com/vgmmmyqaq\n\nhttp://twitter[.]com/vvwc63tgz\n\nhttp://twitter[.]com/wekcddkg2ra\n\nhttp://twitter[.]com/xzg3a2e2z\n\nhttp://www.evernote[.]com/shard/s675/sh/6686ff4e-8896-499b-8cdb-a2bbf2cc4db9/\nfc7fbe66c820f17c30147235e95d31b8 \n\nhttp://www.fotolog[.]com/g1h4wuiz6\n\nhttp://www.fotolog[.]com/gf3z425rr0\n\nhttp://www.fotolog[.]com/i4ntff47xfw\n\nhttp://www.fotolog[.]com/joannevil/121000000000030009/\n\nhttp://www.fotolog[.]com/o2rh2s2x7pu\n\nhttp://www.fotolog[.]com/q4tusizx9xb\n\nhttp://www.fotolog[.]com/rypnil03sl6\n\nhttp://www.fotolog[.]com/shx8hypubt\n\nhttp://www.fotolog[.]com/u99aliw5g\n\nhttp://www.fotolog[.]com/uq44y4j19m8\n\nhttp://www.fotolog[.]com/vq21p34\n\nhttp://www.fotolog[.]com/vz1g3wmwu\n\nhttp://www.fotolog[.]com/zu2of5vyfl6\n\nhttp://www.google[.]com/?gws_rd=ssl#q=Heiofjskghwe+Hjwefkbqw\n\nhttp://www.kiwibox[.]com/AfricanRugby/info/\n\nhttp://www.kiwibox[.]com/GaryPhotographe/info/\n\nhttp://www.reddit[.]com/user/BeaumontV/\n\nhttp://www.reddit[.]com/user/StevensThomasWis/\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f39\n\n8.  MITRE ATT&CK TECHNIQUES\n\nTactic\n\nID\n\nName\n\nDescription\n\nInitial \nAccess\n\nExecution\n\nT1193\n\nSpearphishing \nAttachment\n\nThe Dukes likely used spearphishing emails to compromise  \nthe target.\n\nT1078\n\nValid Accounts\n\nT1106\n\nExecution through API\n\nOperators use account credentials previously stolen  \nto come back on the victim\u2019s network.\n\nThey use CreateProcess or LoadLibrary Windows APIs  \nto execute binaries.\n\nT1129\n\nT1086\n\nT1085\n\nT1064\n\nT1035\n\nT1060\n\nExecution through \nModule Load\n\nPowerShell\n\nRundll32\n\nScripting\n\nSome of their malware load DLL using LoadLibrary Windows API.\n\nFatDuke can execute PowerShell scripts.\n\nThe FatDuke loader uses rundll32 to execute the main DLL.\n\nFatDuke can execute PowerShell scripts.\n\nService Execution\n\nThe Dukes use PsExec to execute binaries on remote hosts.\n\nRegistry Run Keys / \nStartup Folder\n\nThe Dukes use the CurrentVersion\\Run registry key to establish \npersistence on compromised computers.\n\nT1053\n\nScheduled Task\n\nThe Dukes use Scheduled Task to launch malware at startup.\n\nPersistence\n\nT1078\n\nValid Accounts\n\nThe Dukes use account credentials previously stolen to come \nback on the victim\u2019s network.\n\nT1084\n\nT1140\n\nWindows Management \nInstrumentation Event \nSubscription\n\nThe Dukes used WMI to establish persistence for RegDuke.\n\nDeobfuscate/Decode \nFiles or Information\n\nThe droppers for PolyglotDuke and LiteDuke embed  \nencrypted payloads.\n\nT1107\n\nFile Deletion\n\nThe Dukes malware can delete files and directories.\n\nT1112\n\nModify Registry\n\nThe keys used to decrypt RegDuke payloads are stored  \nin the Windows registry.\n\nT1027\n\nObfuscated Files  \nor Information\n\nDefense \nEvasion\n\nT1085\n\nT1064\n\nRundll32\n\nScripting\n\nT1045\n\nSoftware Packing\n\nT1078\n\nValid Accounts\n\nT1102\n\nWeb Service\n\nThe Dukes encrypts PolyglotDuke and LiteDuke payloads  \nwith custom algorithms. They also rely on known obfuscation \ntechniques such as opaque predicates and control flow \nflattening to obfuscate RegDuke, MiniDuke and FatDuke.\n\nThe FatDuke loader uses rundll32 to execute the main DLL.\n\nFatDuke can execute PowerShell scripts.\n\nThe Dukes use a custom packer to obfuscate MiniDuke  \nand FatDuke binaries. They also use the commercial packer \n.NET Reactor to obfuscate RegDuke.\n\nThe Dukes use account credentials previously stolen  \nto come back on the victim\u2019s network.\n\nPolyglotDuke fetches public webpages (Twitter, Reddit,  \nImgur, etc.) to get encrypted strings leading to new C&C. \nserver. For RegDuke, they also use Dropbox as a C&C server.\n\nT1083\n\nT1135\n\nT1057\n\nT1049\n\nFile and Directory \nDiscovery\n\nThe Dukes can interact with files and directories  \non the victim\u2019s computer.\n\nNetwork Share Discovery\n\nThe Dukes can list network shares.\n\nProcess Discovery\n\nThe Dukes can list running processes.\n\nSystem Network \nConnections Discovery\n\nThe Dukes can execute commands like net use to gather \ninformation on network connections.\n\nT1077\n\nWindows Admin Shares\n\nThe Dukes use PsExec to execute binaries on a remote host.\n\nDiscovery\n\nLateral \nMovement\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f40\n\nT1005\n\nData from Local System\n\nThe Dukes can collect files on the compromised machines\n\nCollection\n\nT1039\n\nT1025\n\nData from Network \nShared Drive\n\nData from Removable \nMedia\n\nThe Dukes can collect files on shared drives.\n\nThe Dukes can collect files on removable drives.\n\nT1090\n\nConnection Proxy\n\nT1001\n\nData Obfuscation\n\nCommand \nand Control\n\nT1008\n\nFallback Channels\n\nThe Dukes can communicate to the C&C server via proxy.  \nThey also use named pipes as proxies when a machine  \nis isolated within a network and does not have direct access  \nto the internet.\n\nThe Dukes use steganography to hide payloads and commands \ninside valid images.\n\nThe Dukes have multiple C&C servers in case one of them  \nis down.\n\nT1071\n\nStandard Application \nLayer Protocol\n\nThe Dukes are using HTTP and HTTPS protocols  \nto communicate with the C&C server.\n\nT1102\n\nWeb Service\n\nPolyglotDuke fetches public webpages (Twitter, Reddit,  \nImgur, etc.) to get encrypted strings leading to new C&C server. \nFor RegDuke, they also use Dropbox as a C&C server.\n\nExfiltration\n\nT1041\n\nExfiltration Over \nCommand and Control \nChannel\n\nThe Dukes use the C&C channel to exfiltrate stolen data.\n\nOperation Ghost The Dukes aren\u2019t back \u2013 they never left\f"], "URLs": ["http://ac", "http://www.kiwibox[.]com/AfricanRugby/info/", "http://imgur[.]com/XFa7Ee1", "http://www.fotolog[.]com/u99aliw5g", "http://twitter[.]com/utyi5asko02", "http://simp[.]ly/publish/pBn8Jt", "http://www.fotolog[.]com/uq44y4j19m8", "http://www.fotolog[.]com/rypnil03sl6", "http://imgur[.]com/1RzfF7r", "http://imgur[.]com/wcMk7a2", "http://www.reddit[.]com/user/BeaumontV/", "https://recon", "http://localhost:", "https://www2", "http://twitter[.]com/m63vhd7ach3", "http://twitter[.]com/KarimM_traveler", "http://twitter[.]com/ua6ivyxkfv", "http://twitter[.]com/lerg5pvo1i", "http://twitter[.]com/qistp743li", "http://twitter[.]com/wekcddkg2ra", "http://twitter[.]com/np8j7ovqdl", "http://twitter[.]com/q5euqysfu5", "http://<C&C>/about/bottom.php?imageid=32d7", "http://twitter[.]com/MarlinTarin", "http://twitter[.]com/xzg3a2e2z", "http://www.fotolog[.]com/joannevil/121000000000030009/", "http://www.fotolog[.]com/vz1g3wmwu", "http://twitter[.]com/aimeefleming25", "http://imgur[.]com/GZSK9zI", "http://twitter[.]com/vgmmmyqaq", "https://skylightcyber", "http://www.fotolog[.]com/i4ntff47xfw", "http://www.fotolog[.]com/shx8hypubt", "http://imgur[.]com/WMTwSMJ", "http://jack998899jack.imgbb[.]com", "http://ibb[.]co/hVhaAq", "https://ministernetwork[.]org:443/Main/", "http://thinkery[.]me/billywilliams/5a0170161cb602262f000d2c", "http://twitter[.]com/JamesScott1990", "http://imgur[.]com/6wjspWp", "http://www.fotolog[.]com/vq21p34", "http://www.reddit[.]com/user/StevensThomasWis/", "http://twitter[.]com/vvwc63tgz", "https://unicode", "http://www.evernote[.]com/shard/s675/sh/6686ff4e-8896-499b-8cdb-a2bbf2cc4db9/", "http://imgur[.]com/d4ObKL0", "http://twitter[.]com/hen_rivero", "http://www.fotolog[.]com/g1h4wuiz6", "http://www.kiwibox[.]com/GaryPhotographe/info/", "http://imgur[.]com/WOKHonk", "http://www.fotolog[.]com/o2rh2s2x7pu", "http://www.fotolog[.]com/zu2of5vyfl6", "http://twitter[.]com/t8t842io2", "http://www.fotolog[.]com/gf3z425rr0", "http://imgur[.]com/D6U06Ci", "http://www.fotolog[.]com/q4tusizx9xb", "http://www.google[.]com/?gws_rd=ssl"], "weight": 0.0}