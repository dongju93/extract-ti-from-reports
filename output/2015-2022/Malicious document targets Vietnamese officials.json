{"rule_id": 861, "name": "Malicious document targets Vietnamese officials", "description": "-", "references": [], "File_Names": ["ScnCfg.exe", "59.rtf", "9d.rtf", "thoitietvietnam.org", "b7.rtf", "spoolsver.exe"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": ["2c60d4312e4416745e56048ee35e694a79e1bc77e7e4d0b5811e64c84a72d2d7", "087d8bee1db61273a7cd533d52b63265d3a8a8b897526d7849c48bcdba4b22ec", "11f38b6a69978dad95c9b1479db9a8729ca57329855998bd41befc364657d654", "93aa353320a8e27923880401a4a0f3760374b4d17dcd709d351e612d589b969d", "9f5da7524817736cd85d87dae93fdbe478385baac1c0aa3102b6ad50d7e5e368", "9fba998ab2c1b7fec39da9817b27768ba7892c0613c4be7c525989161981d2e2"], "Registry_Entries": ["HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File\nExecution Options\n\nAnd we set a value string for launching the debugger when EQNEDT32.exe is executed\nand attaching the debugger to the process .\n\nValue to set the debuuger when EQNEDT32.exe is executed\n\nWhen we open the rtf document, Winword is launched and EQNEDT32.exe also.\n\nWinword process\n\n6/22\n\n\fEQNEDT32.exe process attached by the debugger\n\nAnd the debugger is attached at the entrypoint of EQNEDT32.exe.\n\nWe check if it\u2019s 8.t is correctly created in the %TMP% folder.\n\n8.t dropped on disk\n\nNow we set a breakpoint at the createFile to\ncheck if the shellcode of the exploit reads the file\n8.t.\n\nCreateFile is called at call eqnedt32.41E5EE.\n\nThe param of the path of file is pushed on the stack push dword ptr ss:[ebp-4].\n\nThe shellcode uses CreateFile to the 8.t in the %TMP% folder\n\nSo now, we can return of the user code at the calling function.\n\nAfter a step into, we enter in the shellcode, the address space has changed:\n\nShellcode of the exploit\n\nAfter CreateFile, GetFileSize is called to have the size of the file\n\n7/22\n\n\fGet the size of the file\n\nAfter is Virtualloc, and it create a memory page at 1FD0000 (eax value)\n\nVirtualAlloc memory page to load 8.t\n\nAfter virtualAlloc, the memory page is pointed by EAX\n\nThe page allocated\n\nReadFile is called:\n\nReadfile 8.t\n\nAnd 8.t is loaded at 1FD0000:\n\n8/22\n\n\f8.t in memory\n\nAnd the shellcode decrypts the 8.t file in memory at 0066C82A.\n\nThe loop of decryption is a xoring with different manipulations on the decryption key.\n\nAt the start of the decryption the key is set to 7BF48E63.\n\nDecryption loop\n\nAnd the xor is made after key manipulation.\n\nSet the decryption key in EAX\n\nIf we check the destination of the result of the xoring (here edx + ebx), we find 01FD0000\nwhere 8.t is loaded.\n\nAfter two step of the loop, we can see the magic number MZ set at the begin of memory\nsection.\n\nMZ magic number\n\nAt the end of the decryption loop, we have a PE in memory at 01FD0000.\n\nthe file 8.t has been decrypted.\n\n9/22\n\n\f8.t fully decrypted\n\nThen, the shellcode uses the VirtualAlloc and create a memory page at 02070000.\n\nAnd the new PE at 01FD0000 is copied at this address.\n\nthe PE decrypted is copied in the new memory page\n\nAfter GetModuleFileNameA is called to have the path of EQNEDT32.exe\n\nAnd EQNEDT32.exe is forked in suspend status by a CreateProcess and the shellcode\noverwrite it by the PE at the address 02070000\n\nFork of EQNEDT32.exe\n\nOverwritting of EQNEDT32.exe\n\n10/22\n\n\fStack used by NTWriteVirtualMemory\n\nAnd the shellcode does a ResumeThread to launch the new PE.\n\nSo, We\u2019ve found all API Calls in the object ole at the beginning and we have a runPE to\nlaunch the new EQNEDT32.exe overwritten.\n\nAnalysing the fork of EQNEDT32.exe\n\nWe know that this process has to create on disk two files following the Joe SandBox\nAnalysis:\n\nA dll named RasTls.dll\nA executable file named dascgosrky.exe\n\nIf we dump EQNEDT32.exe and we put in IDA, we found quickly the function that drops the\nfiles on disk (sub_00401150) renamed dropFiles.\n\nDropFiles Fucntion\n\nAnd at the start of this functions, we have a loop with a xor.\n\n11/22\n\n\fSecond loop of decryption\n\nAnd just after we have a call of the decompression function.\n\nDecompression function used zlib\n\nThe function dropFiles is called twice by the sub_4012D0.\n\nDrop the dll and the executable\n\n12/22\n\n\fIf we check the call graph, DropFiles is called only by the function sub_4012D0.\n\nFunctions using DropFiles function\n\nSo we set a breakpoint on CreateFile because at each\nexecution, EQNEDT32.exe starts by CreateFile\nonstaticcache.dat.\n\nBreakpoint to createfile\n\nAnd we return at the user code to set a new breakpoint to check the static analysis.\n\nSo we set a breakpoint at 0040159A when DropFiles is called.\n\nBreakpoint to the first call of DropFiles\n\nAnd now we can analyse the second loop of decryption.\n\nThe first step is the initialization of the decryption function.\n\n13/22\n\n\fSet for the second loop encryption\n\nAnd after we find the xor and store the result in esi+eax.\n\nDecryption loop\n\nIn the first step of the decryption loop, the result is written to 411BC0 in the address space\nof EQNEDT32.exe.\n\nBefore the decryption\n\nAfter tree loops, we obtains the header of zlib compressed object.\n\nAfter the decryption\n\nAnd at the memory page 021E0000, a PE is decompressed.\n\nPage memory allocated to store the dll\n\n14/22\n\n\fAfter decompression\n\nAnd after the file is created with the following path:\nL\u201dC:\\\\Users\\\\IEUser\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Network\nShortcuts\\\\RasTls.dll\u201d\n\nStored by ebx.\n\nDropFiles is called a twice to decrypt and decompress the executable file.\n\nThe offset where store the file is 00434EF8 and the pe decompressed is stored at\n025D0020\n\n15/22\n\n\fDecryption of the executable dascgosrky.exe\n\nAnd the path of the new file is : ebx=005DA228\nL\u201dC:\\\\Users\\\\IEUser\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Network\nShortcuts\\\\dascgosrky.exe\u201d\n\nSo we have two files in networks shortcuts of Windows.\n\nFiles drops on disk\n\ndll hijacking\n\nDascgosrky.exe is a legit and trusted software develop by Symantec.\n\n16/22\n\n\fTo load the library RasTls.dll, the executable calls LoadLibrary and GetProcaddress in\nsub_401940 to execute the malicious functions\n\n17/22\n\n\fDascgosrky.exe loading the malicious\n\n18/22\n\n\fThe original file\n\nIf we check the exports in IDA, we just have a dllentrypoint. The dll is executed like this.\n\nWe\u2019ll analyse the RAT in the second Part.\n\nInfrastructure of Attackers\n\nThe domain contacted is wouderfulu.impresstravel.ga and this domain resolved on\n192.99.181.14.\n\n19/22\n\n\fDomain wouderfulu.impresstravel.ga\n\nThis IP has differents domains found with PassiveTotal and theses domains is recorded in\nthe IP 176.223.165.122.\n\nMany domain names is used for Vietnameses people.\n\nExpansion of domains\n\nThere are two domains really interesting:\n\nHalong.dulichculao.com is already used in the campaign targeting Vietnameses\norganizations.\n\nhttps://www.fortinet.com/blog/threat-research/rehashed-rat-used-in-apt-campaign-against-\nvietnamese-organizations.html\n\n20/22\n\n\fFor Fortinet is the Chinese hacking group 1937CN.\n\nIf we compare the TTPs, it\u2019s really similar. They used RTFs to make the intrusion and dll\nhijacking to load the real payload.\n\nAnd the name of domains are really similar between the campaings.\n\nThe second one is:\n\nCat.toonganuh.com is a subdomain of tooganuh.com recorded by\nflorence1972@scryptmail.com\n\nConclusion\n\nThe Chinese hacking group 1937CN continues to target Vietnam officials with the same\nTTPs with a refreshing on the tools used. The toolset used by this group to create RTF\nmalicious document has the same properpy of the SideWinder.\n\nI want to thank my buddies on \u201cZone de Confort\u201d. It\u2019s with this dreamteam, I can finalize\ncorrectly this analyses.\n\nIn the second part, we analyze the RAT using in this campaign. Or if another reverse can\nmake that, I\u2019ll paid a beer ;)\n\nIOCs for the paper:\n\ndomains:\ndn.dulichbiendao.org\ngateway.vietbaotinmoi.com\n\nweb.thoitietvietnam.org\nhn.dulichbiendao.org\nhalong.dulichculao.com\ncat.toonganuh.com\nnew.sggpnews.com\ndulichculao.com\ncoco.sodexoa.com.\nthoitiet.malware-sinkhole.net\nwouderfulu.impresstravel.ga\ntoonganuh.com\ncoco.sodexoa.com\n\nIPs:\n192.99.181.14\n176.223.165.122\n\nRTFs:\n\n42162c495e835cdf28670661a53d47d12255d9c791c1c5653673b25fb587ffed\n\n8.t:\n\n21/22\n\n\f2c60d4312e4416745e56048ee35e694a79e1bc77e7e4d0b5811e64c84a72d2d7\n\nPE:\n\nf9ebf6aeb3f0fb0c29bd8f3d652476cd1fe8bd9a0c11cb15c43de33bbce0bf68 (exe)\n\n9f5da7524817736cd85d87dae93fdbe478385baac1c0aa3102b6ad50d7e5e368 (dll)\n\nUpdate:\n\nThe payload is PlugX. Thanks to Gabor Szappanos\nhttps://twitter.com/GaborSzappanos/status/1024622354582908928\n\nUpdate IOCs:\n\n597c0c6f397eefb06155abdf5aa9a7476c977c44ef8bd9575b01359e96273486 59.rtf\n11f38b6a69978dad95c9b1479db9a8729ca57329855998bd41befc364657d654 RasTls.dll\nf9ebf6aeb3f0fb0c29bd8f3d652476cd1fe8bd9a0c11cb15c43de33bbce0bf68 RasTls.exe\n\nb70069e1c8e829bfd7090ba3dfbf0e256fc7dfcefc6acafb3b53abcf2caa2253 b7.rtf\n77361b1ca09d6857d68cea052a0bb857e03d776d3e1943897315a80a19f20fc2\nspoolsver.exe\n9fba998ab2c1b7fec39da9817b27768ba7892c0613c4be7c525989161981d2e2 vsodscpl.dll\n\n9d239ddd4c925d14e00b5a95827e9191bfda7d59858f141f6f5dcc52329838f0 9d.rtf\n087d8bee1db61273a7cd533d52b63265d3a8a8b897526d7849c48bcdba4b22ec RasTls.dll\nf9ebf6aeb3f0fb0c29bd8f3d652476cd1fe8bd9a0c11cb15c43de33bbce0bf68 RasTls.exe\n\n332aa26d719a20f3a26b2b00a9ca5d2e090b33f5070b057f4950d4f088201ab9 rtf\n\n93aa353320a8e27923880401a4a0f3760374b4d17dcd709d351e612d589b969d\nvsodscpl.dll\n\n77361b1ca09d6857d68cea052a0bb857e03d776d3e1943897315a80a19f20fc2 ScnCfg.exe\n\n22/22\n\n\f"], "URLs": ["https://blogs.msdn.microsoft.com/mithuns/2010/03/24/image-file-execution-", "https://twitter.com/GaborSzappanos/status/1024622354582908928", "https://securingtomorrow.mcafee.com/mcafee-labs/dropping-files-temp-folder-raises-"], "weight": 0.0}