{"rule_id": 242, "name": "Hungry for data, ModPipe backdoor hits POS software used in hospitality sector _ WeLiveSecurity", "description": "-", "references": [], "File_Names": ["CALSrv.exe", "shj145ertyb.ddns", "ouidji12345.ddns", "msdtc.exe", "dbcapi.dll", "MDSHTTPService.exe", "xmlsoap.org", "gettime.html", "Cvoeqo.exe", "robots.txt", "wininit.exe", "jusched.exe"], "MD5_Hashes": ["F45D076FEC641691A21F0C946EDA9BD5"], "SHA1_Hashes": ["0F4355A17AABD3645788341EAC2A9BB759DB95EE", "FEE9C08B494C80DBF73A6F70FACD20ED0429330D", "B47E05D67DC055AF5B0689782D67EAA2EB8C75E3", "F213B4EEF63F06EC127D3DC3265E14EE190B71E5", "2AC7A2C09E50EAFABF1F401194AC487ED96C6781", "B2CE307DFE65C188FDAE169ABD65B75B112522C4", "9F8530627A8AD38F47102F626DEC9F0173B44CD5", "9f8530627a8ad38f47102f626dec9f0173b44cd5", "0D1A4CB620576B8ADD34F919B4C6C46E7C3F9A59"], "SHA256_Hashes": [], "Registry_Entries": ["HKLM\\Software\\Micros\\UserData or\nHKLM\\Software\\WOW6432Node\\Micros\\UserData if run in Windows 32-bit on\nWindows 64-bit (WOW64) subsystem\n\nhttps://www.welivesecurity.com/2020/11/12/hungry-data-modpipe-backdoor-hits-pos-software-hospitality-sector/\n\n4/22\n\n\f11/13/2020\n\nHungry for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurity\n\nFigure 2. Hex-Rays decompiled code of the function stealing database passwords\n\nThe GetMicInfo module can intercept and decrypt these database passwords, using a\nspecifically designed algorithm. So as not to aid other malicious actors, we won\u2019t be\ndisclosing the inner workings of the algorithm. Since the decryption mechanism wasn\u2019t\npublicly available, there are at least three possible scenarios of how the attackers could have\ncreated the algorithm:\n\nThe most probable option is that the attackers acquired and reverse engineered\nthe implementation of the ORACLE MICROS RES 3700 POS and the libraries\nresponsible for encryption and decryption of the database passwords.\nThe attackers could have gained the information describing the implementation of the\nencryption and decryption mechanism from a 2016 data breach described in a\nblogpost by Brian Krebs.\nThe malware operators could have bought the code from an underground market.\n\nOur analysis shows that in cases where the GetMicInfo module decrypts the password for\nthe dba username, it will also try to acquire the path to the SQL Anywhere API library from\nthe environment variable \u201cSQLANY_API_DLL\u201d and load it if it\u2019s available.\n\nIf the environment variable does not exist, the module tries to load the library using its\nname dbcapi.dll. This library is a part of Sybase SQL Anywhere, which is used by RES 3700\nPOS.\n\nIf one of these approaches is successful, GetMicInfo attempts to connect to the database\nusing the following connection string:\n\nhttps://www.welivesecurity.com/2020/11/12/hungry-data-modpipe-backdoor-hits-pos-software-hospitality-sector/\n\n5/22\n\n\f11/13/2020\n\nHungry for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurity\n\nDBN=micros;UID=dba;ENG=sql%PCNAME%;PWD=%decrypted_DataS5%\n\n%PCNAME% represents the computer name retrieved via the GetComputerName API and\n%decrypted_DataS5% stands for the decrypted dba user password.\n\nAfter establishing a connection, GetMicInfo tries to execute the following SQL queries and\nreport the results to the main module, using a pipe message with ID 0x10000013 (see Table\n3 for a full list of pipe messages and their IDs):\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\nSELECT lan_node_seq,obj_num,name,lan_addr,ob_diskless,type,ip_addr,ip_netmask\nFROM micros.lan_node_def\n\nSELECT dvc_tbl_seq,obj_num,name,type,com_port_seq,com_port,baud_rate,num_-\ndata_bits,num_stop_bits,parity_type,filename FROM micros.dev_def\n\nSELECT tmed_seq,obj_num,name,type,ca_driver,edc_driver FROM micros.tmed_def\n\nSELECT * FROM micros.caedc_driver_def\n\nSELECT * FROM micros.interface_def\n\nQueried data contain various MICROS RES 3700 POS system definitions and\nconfigurations (see Figure 3). Other information stolen by the module includes the version\nof the MICROS POS and information about specific registry keys most likely related to\nvarious credit card services configurations.\n\nhttps://www.welivesecurity.com/2020/11/12/hungry-data-modpipe-backdoor-hits-pos-software-hospitality-sector/\n\n6/22\n\n \n \n \n \n\f11/13/2020\n\nHungry for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurity\n\nFigure 3. Hex-Rays decompiled code of the function that steals database data\n\nThe GetMicInfo module is injected into one of the processes specified by the C&C in the\ninstall command (0x0C). Based on our findings, it is typically associated with one of the\nfollowing legitimate processes:\n\nMDSHTTPService.exe (MICROS MDS HTTP Service)\nCALSrv.exe (MICROS CAL Service \u2013 Client Application Loader server)\nexplorer.exe\n\nWe can confirm that the GetMicInfo module can successfully obtain the database passwords\nfrom RES 3700 POS v4.7 and v5.4. For all the other versions, we were able neither to\nconfirm nor deny the ability of the component to obtain the targeted libraries.\n\nDownloadable module: ModScan 2.20\n\nThe main purpose of ModScan 2.20 is to collect additional information about the installed\nMICROS POS environment on the machines by scanning selected IP addresses. The\nModScan 2.20 module is injected into one of the processes specified by the C&C via an\nInstallMod command (0x72). Based on our findings, it is typically associated with one of the\nfollowing legitimate processes:\n\nMDSHTTPService.exe (MICROS MDS HTTP Service)\nCALSrv.exe (MICROS CAL Service \u2013 Client Application Loader server)\nmsdtc.exe\njusched.exe\nspoolsv.exe\nservices.exe\n\nDifferences between the injected processes misused by GetMicInfo and those targeted by\nModScan 2.20 might be caused by the fact that GetMicInfo module is injected only into\nprocesses running under WOW64.\n\nThe list of IP addresses intended for scanning and the special \u201cping\u201d IP address are\nspecified by the C&C in one of two ways. It is either:\n\n1. downloaded from the C&C along with the ModScan module, or\n2. received during runtime, using the named pipe associated with the ModScan module.\n\nThe ModScan module handles pipe commands listed in Table 2.\n\nTable 2. ModScan 2.20 module pipe commands\n\nCommand\nname\n\nCommand description\n\nhttps://www.welivesecurity.com/2020/11/12/hungry-data-modpipe-backdoor-hits-pos-software-hospitality-sector/\n\n7/22\n\n\f11/13/2020\n\nHungry for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurity\n\nCommand\nname\n\nCommand description\n\nexit\n\nstop\n\nscan\n\nExit\n\nTerminate scanning threads\n\nStart scanning IPs specified in the command data to collect additional in-\nformation about the environment\n\nprm\n\nSpecify special \u201cping\u201d IP address\n\nScanning procedure routine\n\n1. Before scanning, the module sends a special \u201cping\u201d message containing a 32-bit value\ngenerated by the GetTickCount Windows API function to TCP ports 50123 (used by\nMDS HTTP Service) and 2638 (used by SAP Sybase database server) of the \u201cping\u201d IP\naddress.\n\n2. The response from the \u201cping\u201d IP address should contain the same 32-bit value rotated\nright by one bit and XORed with the value 0x6CF6B8A8. If the response on at least\none of the ports provides the appropriate value, the module will start the scan of the\nselected IP addresses. A decompilation of this ping function is shown in Figure 4.\n\nFigure 4. Hex-Rays decompiled code of the ModScan ping functionality\n\n3. When the ModScan module starts the scan, some of the following information may be\n\ngathered, depending on the parameters received along with the scan command:\n\nVersion of the Oracle MICROS RES 3700 POS, which is acquired by sending an\nHTTP Post message (see Figure 5) to the specified IP address on port 50123 used by\nthe MDS HTTP Service. The sought-after information is stored between data xml tags\n(<data>%version%</data>) of the response from the service.\n\nhttps://www.welivesecurity.com/2020/11/12/hungry-data-modpipe-backdoor-hits-pos-software-hospitality-sector/\n\n8/22\n\n\f11/13/2020\n\nHungry for data, ModPipe backdoor hits POS software used in hospitality sector | WeLiveSecurity\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\nPOST /%s HTTP/1.1\n\nAccept: text/xml\n\nUser-Agent: MDS POS Client\n\nHost: %s:50123\n\nContent-Length: 459\n\nConnection: Keep-Alive\n\nCache-Control: no-cache\n\n<SOAP-ENV:Envelope xmlns:SOAP-ENV="], "URLs": ["https://www.welivesecurity.com/2020/11/12/hungry-data-modpipe-backdoor-hits-pos-software-hospitality-sector/", "http://schemas.xmlsoap.org/soap/enve-"], "weight": 0.0}