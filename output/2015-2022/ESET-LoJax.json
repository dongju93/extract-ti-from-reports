{"rule_id": 303, "name": "ESET-LoJax", "description": "-", "references": [], "File_Names": ["page_13763820.html", "WP.pdf", "speed_racer_whitepaper.pdf", "full.pdf", "rweverything.com", "autochk.exe", "Indictment.pdf", "ReWriter_binary.exe", "RwDrv.sys", "coresecurity.com", "autoche.exe", "image.bin", "documentcloud.org", "wikileaks.org", "opensecuritytraining.info", "rpcnetp.exe", "info_efi.exe", "absolute.com", "Reality.pdf", "ReWriter_read.exe", "www.kb", "IntroBIOS.html", "vulnerabilities.html", "ASacco.pdf", "datasheet.pdf", "cert.org"], "MD5_Hashes": [], "SHA1_Hashes": ["8e138eecea8e9937a83bffe100d842d6381b6bb1", "ddaa06a4021baf980a08caea899f2904609410b9", "397d97e278110a48bd2cb11bb5632b99a9100dbd", "e8f07caafb23eff83020406c21645d8ed0005ca6", "1771e435ba25f9cdfa77168899490d87681f2029", "f2be778971ad9df2082a266bd04ab657bd287413", "2529f6eda28d54490119d2123d22da56783c704f", "cc217342373967d1916cb20eca5ccb29caaf7c1b", "10d571d66d3ab7b9ddf6a850cb9b8e38b07623c0", "09d2e2c26247a4a908952fee36b56b360561984f", "f90ccf57e75923812c2c1da9f56166b36d1482be", "e923ac79046ffa06f67d3f4c567e84a82dd7ff1b", "4b9e71615b37aea1eaeb5b1cfa0eee048118ff72", "700d7e763f59e706b4f05c69911319690f85432e", "ea728abe26bac161e110970051e1561fd51db93b", "ef860dca7d7c928b68c4218007fb9069c6e654e9"], "SHA256_Hashes": [], "Registry_Entries": ["HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\BootExecute = \n\u201cautocheck autochk *\u201d\n\nThen, RwDrv service is stopped and uninstalled . It is important that the Windows Registry value is set  \nto that string because the UEFI Rootkit looks for that exact string to modify it and thus execute its payload \nduring Windows startup . We will give more details about this modification of the Windows Registry when \nwe describe the UEFI Rootkit and its payloads .\n\n5.  LOJAX TECHNICAL ANALYSIS\n\nWhile the tool to dump, patch and write to the SPI\u00a0flash memory is customized for a particular firmware \nimage and cannot be re-used easily on any given system, the full UEFI module can be extracted from it . The \nfirst step we did after recovering this module was to go through our telemetry to see whether we had seen \nthis module before . However, as this is a UEFI module, we had to rely on the new ESET UEFI scanner that is \nable to access and scan a system\u2019s firmware . Using telemetry coming from this module, we were able to find \nat least one case where the Sednit\u2019s UEFI module was installed on a system, meaning that this UEFI rootkit \nwas truly deployed in the wild .\n\nWe do not know for sure how the different tools ended up on the compromised systems . The most likely \nguess at this point is that it was dropped by another tool, likely XAgent, as part of the post-compromise \nsteps done by the operators . Since the dumper and the writer tools were found on the same system but  \nat different times, it is likely the operators worked in two steps . First, they dumped the firmware on the target  \nmachine, made sure that their patching tool would work fine before uploading it again and patching  \nthe firmware for real . While we were able to find only one version of the dumper and writer tools, there  \nis a possibility that different versions exist for different vulnerable firmware they were able to locate .\n\nFigure\u00a014 gives a high-level overview of the UEFI rootkit workflow until the OS boots . First, SecDxe\u00a0DXE\u00a0driver  \nis loaded by the DXE dispatcher . It sets a Notify function callback on the EFI_EVENT_GROUP_READY_TO_BOOT  \nevent group . When the firmware is about to choose a boot device and to run the OS loader, the Notify \nfunction is called . The callback does three things:\n\n\u2022 \n\n\u2022 \n\n\u2022 \n\nIt loads an embedded NTFS DXE driver to be able to access and write to NTFS partitions\n\nIt writes two files to the Windows NTFS partition: rpcnetp.exe and autoche.exe\nIt modifies this registry key \u2018HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\\nSession Manager\\BootExecute\u2019:\n\u2022  Before: \u2018autocheck autochk *\u2019 \n\u2022  After: \u2018autocheck autoche *\u2019 .\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f15\n\nSecurity (SEC)\n\nPre-verifier\n\nVerify\n\nPre EFI\nInitialization (PEI)\n\nProcessor Init\n\nChipset Init\n\nBoard Init\n\nDriver \nExecution Environment \n(DXE)\n\nEFI Driver \nDispatcher\n\nLoad\n\nDXE Drivers\n\nEFI_EVENT_GROUP_READY_TO_BOOT\n\nCreate an event\n\nBoot Device Selection \n(BDS)\n\nBoot Manager\n\nTrigger event\n\nDrop\n\nEFI_EVENT_GROUP_READY_TO_BOOT\n\nrpcnetp.exe\n\nautoche.exe\n\nModify\n\nautochk.exe\n\nTransient System Load \n(TSL)\n\nOS Loader\n\nRun Time (RT)\n\nOperating System\n\nRun\n\nautoche.exe\n\nModify\n\nFigure\u00a014 // Boot process of a system infected by the UEFI rootkit\n\nautoche.exe\n\nautochk.exe\n\nautoche.exe\n\nSecDxe: The malicious DXE driver\n\nNow that we have covered the details of the deployment of the UEFI rootkit, this section focuses on the \nchain of events that occurs on a compromised machine . We adopt a bottom-up approach where we begin \nby describing the UEFI rootkit itself and then follow the chain of events up to the final payloads that are \ndeployed at the operating system level .\n\nSednit\u2019s UEFI rootkit is a DXE driver, identified by the GUID 682894B5-6B70-4EBA-9E90-A607E5676297 .  \nIt is unsigned; thus it cannot run on a system with Secure Boot enabled . Once deployed in one  \nof the firmware volumes, the DXE Foundation loads it every time the system boots .\n\nSecDxe is a small DXE driver that mainly does two things . It installs a protocol identified by the GUID \n832d9b4d-d8d5-425f-bd52-5c5afb2c85dc that is never used . Then, it creates an event associated with  \na Notify function . The Notify function is set to be called when the EFI_EVENT_GROUP_READY_TO_BOOT \nevent group is signaled . This event group is signaled by the boot manager when it is about to choose  \na device to boot from .\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f16\n\nFigure\u00a015 // Hex-Rays decompiler output for the routine creating the event\n\nThe Notify function implements the malicious behavior of Sednit\u2019s UEFI rootkit . It writes the payloads  \nto Windows\u2019 NTFS file system . Since UEFI firmware normally deals solely with the EFI system partition,  \nan NTFS driver usually is not included . Only FAT-based file systems are supported as boot partitions . Thus,  \nit is not mandatory for a UEFI firmware to ship with NTFS drivers . For that reason, SecDxe embeds its own \nNTFS driver . This driver is first loaded and connected to the disk device . Hence, it installs an EFI_SIMPLE_\nFILE_SYSTEM_PROTOCOL on disk devices with NTFS partitions, enabling file-based access to it .\n\nNow that everything is in place to write files on the Windows partition, SecDxe drops rpcnetp.exe  \nand autoche.exe . Next, rpcnetp.exe is installed to %WINDIR%\\SysWOW64 on 64-bit Windows versions  \nor to %WINDIR%\\System32 on 32-bit versions . As for autoche.exe, it is installed to %WINDIR%\\SysWOW64 . \nFigure\u00a016 shows the routine responsible for writing these files to disk .\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f17\n\nFigure\u00a016 // Hex-Rays decompiler output for the routine writing files to disk\n\nSecDxe then opens %WINDIR%\\System32\\config\\SYSTEM, which is the file backing the HKLM\\SYSTEM \nregistry hive . It parses the file until it finds \u2018autocheck autochk *\u2019 and replaces the \u2018k\u2019 of \u2018autochk\u2019 \nwith \u2018e\u2019 . This sets \u2018HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\\nBootExecute\u2019 to \u2018autocheck autoche *\u2019 . Next time Windows boots, autoche .exe will be launched \ninstead of autochk.exe .\n\nHacking Team\u2019s NTFS driver\n\nAs previously discussed, SecDxe module embeds an NTFS driver . There is strong evidence that Sednit\u2019s \noperators did not write their own driver, but rather compiled their own copy of Hacking Team\u2019s leaked \nNTFS\u00a0DXE driver .\n\nHacking Team\u2019s NTFS driver uses the ntfs-3g open source project at its core . It is merely a wrapper around  \nit to make it work as a UEFI DXE Driver . As such, the INF file build information of Hacking Team\u2019s driver lists \nfilenames from the ntfs-3g project . SecDxe\u2019s NTFS driver strings also lists many of these filenames:\n\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\inode.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\volume.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\bootsect.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\unistr.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\attrib.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\mft.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\index.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\cache.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\misc.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\dir.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\runlist.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\logfile.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\uefi_io.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\ntfsinternal.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\mst.c\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f18\n\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\lcnalloc.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\compress.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\bitmap.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\collate.c\n\u2022  c:\\edk2\\NtfsPkg\\NtfsDxe\\ntfs\\security.c\n\nAnother interesting thing to note is that the project path is the same as those found in vector-edk, Hacking \nTeam\u2019s EFI development leaked project . In vector-edk, there is a subproject NtfsPkg with the exact same \ndirectory layout . The ntfs-3g source code files are located in the same path . While these paths are generic, \nwe believe this is not a coincidence .\n\nComparing the leaked source code with Hex-Rays decompiler output, it becomes evident that it is the  \nsame project . Figure\u00a017 is an example comparing the function NtfsDriverBindingStart took from \nvector-edk/NtfsPkg/NtfsDxe/Ntfs.c . Comments have been removed from the original HT\u2019s source \ncode for clarity . The logic and the order of the function calls are the same . Both projects even use the same \nvariable (LockedByMe) to keep the state of the lock . \n\nFigure\u00a017 // Comparison between Hex-Rays decompiler output of Sednit\u2019s NTFS driver (left) and HT\u2019s NTFS driver (right)\n\nThe comparison above shows code from Hacking Team developers and is not present in the ntfs-3g open \nsource code .\n\nAs mentioned in the ReWriter_binary section, when parsing the firmware file system the executable  \ntries to remove the AMI NTFS driver . We wanted to understand why they remove it instead of using it .  \nWe analyzed the driver and found out that it can only perform read operations . As writing to the file system \nis not supported, they couldn\u2019t use it for their purposes . It is also likely that Sednit\u2019s operators may have run \ninto some issues when another NTFS driver was already present in the firmware, so they simply decided to \nremove it . In addition to implementing read and write operations, Hacking Team\u2019s driver does not enforce \nfile permissions . For instance, it is possible to overwrite a read-only file without raising any error .\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f19\n\nAt this point in this paper, we have described the various operations performed by the UEFI rootkit  \nto compromise the host operating system . We also discussed the reasons why we believe that Sednit \noperators used the source code of Hacking Team\u2019s vector-edk to build their NTFS driver to write files  \non the Windows NTFS partition . In the following sections, we will provide our analysis of the payloads \ndropped by SecDxe .\n\nautoche.exe vs. autochk.exe\n\nThe malicious autoche.exe is used to set up persistence for the small agent rpcnetp.exe . As can be seen \nin Figure\u00a018, it uses native Windows API calls to create this service .\n\nFigure\u00a018 // Malicious autoche .exe setting up rpcnetp .exe persistence\n\nIt should be noted that the service name is the same as the one used by the legitimate Computrace agent . \nOnce the service is created, it then restores the BootExecute registry key to its previous value .\n\nFigure\u00a019 // Malicious autoche .exe restoring BootExecute\u2019s original registry value\n\nSince this process takes place while Windows is booting, the user can hardly notice the BootExecute \nregistry key value modification . It should be noted that autoche .exe shows some similarities with Compu-\ntrace\u2019s autochk.exe module, such as the API calls used and the service registration, but the rest is quite \ndifferent . Computrace\u2019s module is bigger and restores the original autochk .exe executable instead  \nof changing the registry key . It is also responsible for dropping the small agent on disk, while this  \nis handled by the UEFI\u00a0rootkit in the LoJax case .\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f20\n\nrpcnetp.exe\n\nWhile the small agent rpcnetp.exe can be dropped by the UEFI rootkit, it is probable that most instances \nwe saw of a trojanized LoJack small agent did not use this component . It is likely that they were opportunistic  \nand installed the UEFI rootkit only when possible and in organizations of high importance .\n\nThroughout our investigation, we were able to uncover different LoJax small agent versions . The IOC\u00a0section \nlists their hashes and the associated malicious domains/IPs . As discussed previously, all LoJax small agent \nsamples we were able to recover were a trojanized version of the same old Computrace small agent  \ncompiled in 2008 .\n\nWhile we never witnessed LoJax agent download and install additional modules, we do know  \nthat this functionality exists . As LoJax\u2019s best quality is to be stealthy and persistent, it could definitely  \nbe used to help ensure that access to key resources is maintained .\n\n6. PREVENTION AND REMEDIATION\n\nHow could such an attack have been prevented? This involves a complex ecosystem composed of multiple \nactors . The first security mechanism that could have blocked such an attack is Secure Boot . When Secure \nBoot is enabled, each and every firmware component that is loaded by the firmware needs to be properly \nsigned, thus ensuring the integrity of the firmware . We strongly suggest that you enable it . This is the base \ndefense against attacks targeting UEFI firmware .\n\nAs is the case for software, the UEFI firmware should always be kept up-to-date . Visit your motherboard \nwebsite to make sure that you have the latest version available .\n\nYou should also make sure that all of your systems have modern chipsets with Platform\u00a0Controller\u00a0Hub \n(starting from Intel Series 5 chipsets onwards) . This will ensure that the security mechanism against  \nthe race condition vulnerability we mentioned [18] is available on the platform .\n\nThe other part of firmware security is in the hands of UEFI/BIOS vendors . The security mechanisms provided \nby the platform need to be properly configured by the system firmware to actually protect it . Thus, firmware \nmust be built with security in mind from the ground up . Fortunately, more and more security researchers  \nare looking at firmware security thus contributing to improve this field and raise awareness of firmware \nvendors . It is also worth mentioning CHIPSEC [16], an open source framework to perform low-level security \nassessments, which is very helpful to determine if your platform is properly configured .\n\nRemediation of a UEFI firmware-based compromise is a hard problem . There are no easy ways of cleaning \nthe system from such threat nor are there any security products that can save the day . In the case we described  \nin this paper, the SPI\u00a0flash memory needs to be reflashed to remove the rootkit . This is not a trivial task and \nthat definitely is not a recommended procedure for the average computer owner . Upgrading the UEFI\u00a0firm-\nware may remove the rootkit given that the update rewrites the whole BIOS region of the SPI\u00a0flash memory . \nIf reflashing the UEFI firmware is not an option for you, the only alternative is to change the motherboard  \nof the infected system .\n\n7.  CONCLUSION\n\nUEFI rootkits are one of the most powerful tools in an attacker\u2019s arsenal as they are persistent across  \nOS re-install and hard disk changes and are extremely difficult to detect and remove . While it is hard  \nto modify a system\u2019s UEFI image, few solutions exists to scan system\u2019s UEFI modules and detect malicious \nones . Moreover, cleaning a system\u2019s UEFI firmware means re-flashing it, an operation not commonly done \nand certainly not by the average user . These advantages explain why determined and resourceful  \nattackers will continue to target systems\u2019 UEFI .\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f21\n\n8. ACKNOWLEDGEMENT\n\nWe\u2019d like to express our gratitude to the people behind opensecuritytraining .info for the great material  \nthat they share with the community . The course \u2018Introduction to BIOS & SMM\u2019 [20] was of great help  \nto us when it came the time to analyze interactions with the SPI\u00a0flash chip .\n\n9. GLOSSARY\n\nPlease refer to Intel specifications [21] for more details on each fields and more .\n\n\u2022  BIOS_CNTL: BIOS Control Register\n\n\u2022  BIOSWE: BIOS Write Enabled\n\n\u2022  BLE: BIOS Lock Enabled\n\n\u2022  FADDR: Flash Address\n\n\u2022  FDATAX: Flash Data from FDATA0 to FDATAN\n\n\u2022  FDBC: Flash Data Byte Count\n\n\u2022  FGO: Flash Cycle Go\n\n\u2022  HSFC: Hardware Sequencing Flash Control\n\n\u2022  HSFS: Hardware Sequencing Flash Status\n\n\u2022  IOCTL: Input/Output Control\n\n\u2022  PCH: Platform Controller Hub\n\n\u2022  RCBA: Root Complex Base Address Register\n\n\u2022  RCRB: Root Complex Register Block\n\n\u2022  SCIP: SPI Cycle in Progress\n\n\u2022  SMI: System Management Interrupt\n\n\u2022  SMM: System Management Mode\n\n\u2022  SMM_BWP: SMM BIOS Write Protect Disable\n\n\u2022  SPI: Serial Peripheral Interface\n\n10.  REFERENCES\n\n  1  D . Alperovitch, \u201cBears in the Midst: Intrusion into the Democratic National Committee,\u201d Crowdstrike, 15\u00a0June\u00a02016 .  \n\n[Online] . Available: https://www.crowdstrike.com/blog/bears-midst-intrusion-democratic-national-committee/\n\n  2  US Department of Justice, July 2018 . [Online] . Available:  \n\nhttps://assets.documentcloud.org/documents/4598895/DOJ-Russia-DNC-Hack-Indictment.pdf\n\n  3  G . Corera, \u201cHow France\u2019s TV5 was almost destroyed by \u2018Russian hackers\u2019,\u201d BBC, 10 October 2016 . [ \n\nOnline] . Available: https://www.bbc.com/news/technology-37590375\n\n  4  L . Matsakis, \u201cHack Brief: Russian Hackers Release Apparent IOC Emails in Wake of Olympics Ban,\u201d \n\n WIRED, 1\u00a0January\u00a02018 . [Online] .  \nAvailable: https://www.wired.com/story/russian-fancy-bears-hackers-release-apparent-ioc-emails/\n\n  5  ESET Research, \u201cEn Route with Sednit,\u201d ESET, 2016 . [Online] .  \n\nAvailable: http://www.welivesecurity.com/wp-content/uploads/2016/10/eset-sednit-full.pdf\n\n  6  ESET Research, \u201cSednit adds two zero-day exploits using \u2018Trump\u2019s attack on Syria\u2019 as a decoy,\u201d ESET, \n\n9\u00a0May\u00a02017 . [Online] . Available:  \nhttps://www.welivesecurity.com/2017/05/09/sednit-adds-two-zero-day-exploits-using-trumps-attack-syria-decoy/\n\n  7  ESET Research, \u201cSednit update: Analysis of Zebrocy,\u201d ESET, 24 April 2018 . [Online] .  \nAvailable: https://www.welivesecurity.com/2018/04/24/sednit-update-analysis-zebrocy/\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f22\n\n  8  P . Lin, \u201cHacking Team Uses UEFI BIOS Rootkit to Keep RCS 9 Agent in Target Systems,\u201d Trend Micro, 13 July \n\n2015 . [Online] . Available: https://blog.trendmicro.com/trendlabs-security-intelligence/\nhacking-team-uses-uefi-bios-rootkit-to-keep-rcs-9-agent-in-target-systems/\n\n  9  WikiLeaks, \u201cDerStarke 2 .0,\u201d [Online] . Available: https://wikileaks.org/ciav7p1/cms/page_13763820.html\n\n 10  Absolute, \u201cAbsolute Response to Arbor Research,\u201d May 2018 . [Online] .  \n\nAvailable: https://www.absolute.com/en-gb/resources/faq/absolute-response-to-arbor-research\n\n 11  A . Ortega and A . Sacco, \u201cDeactivate the Rootkit: Attacks on BIOS anti-theft,\u201d Core Security Technologies, \n\n24\u00a0July 2009 . [Online] . Available: https://www.coresecurity.com/system/files/publications/2016/05/Paper-Deactivate-\nthe-Rootkit-AOrtega-ASacco.pdf\n\n 12  V . Kamlyuk, S . Belov and A . Sacco, \u201cAbsolute Backdoor Revisited,\u201d BlackHat, June 2014 . [Online] .  \n\nAvailable: https://www.blackhat.com/docs/us-14/materials/us-14-Kamluk-Computrace-Backdoor-Revisited-WP.pdf\n\n 13  ASERT team, \u201cLojack Becomes a Double-Agent,\u201d 1 May 2018 . [Online] .  \nAvailable: https://asert.arbornetworks.com/lojack-becomes-a-double-agent/\n\n 14 \n\n\u201cRWEverything Read & Write Everything,\u201d [Online] . Available: http://rweverything.com/\n\n 15  A . Matrosov and E . Rodionov, \u201cUEFI Firmware Rootkits: Myths and Reality,\u201d Black Hat Asia, 2017 . [Online] . \n\nAvailable: https://www.blackhat.com/docs/asia-17/materials/asia-17-Matrosov-The-UEFI-Firmware-Rootkits-Myths-\nAnd-Reality.pdf\n\n 16 \n\n\u201cGitHub repository for UEFITool,\u201d [Online] . Available: https://github.com/LongSoft/UEFITool\n\n 17  Cylance, \u201cResearchers Disclose Vulnerabilities in GIGABYTE BRIX Systems,\u201d [Online] .  \n\nAvailable: https://threatvector.cylance.com/en_us/home/gigabyte-brix-systems-vulnerabilities.html\n\n 18  Carnegie Mellon University SEI CERT, \u201cVulnerability Note VU#766164, Intel BIOS locking mechanism contains \nrace condition that enables write protection bypass,\u201d [Online] . Available: https://www.kb.cert.org/vuls/id/766164\n\n 19  C . Kallenberg and R . Wojtczuk, \u201cSpeed Racer: Exploiting an Intel Flash Protection Race Condition,\u201d \n\n January 2015 . [Online] . Available: https://bromiumlabs.files.wordpress.com/2015/01/speed_racer_whitepaper.pdf\n\n 20  J . Butterworth, \u201cAdvanced x86: Introduction to BIOS & SMM,\u201d 2014 . [Online] .  \n\nAvailable: http://opensecuritytraining.info/IntroBIOS.html\n\n 21 \n\nIntel, \u201cIntel 7 Series / C216 Chipset and Family Platform Controller Hub (PCH),\u201d June 2012 . [Online] . Available: \nhttps://www.intel.com/content/dam/www/public/us/en/documents/datasheets/7-series-chipset-pch-datasheet.pdf\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f23\n\n11. IOCs\n\nReWriter_read.exe\n\nESET detection name\n\nWin32/SPIFlash .A\n\nSHA-1\n\nea728abe26bac161e110970051e1561fd51db93b\n\nReWriter_binary.exe\n\nESET detection name\n\nWin32/SPIFlash .A\n\nSHA-1\n\ncc217342373967d1916cb20eca5ccb29caaf7c1b\n\nSecDxe\n\nESET detection name\n\nEFI/LoJax .A \n\nSHA-1\n\nf2be778971ad9df2082a266bd04ab657bd287413\n\ninfo_efi.exe\n\nESET detection name\n\nWin32/Agent .ZXZ\n\nSHA-1\n\n4b9e71615b37aea1eaeb5b1cfa0eee048118ff72\n\nautoche.exe\n\nESET detection name\n\nWin32/LoJax .A\n\nSHA-1\n\n700d7e763f59e706b4f05c69911319690f85432e\n\nSmall agent EXE\n\nESET detection names\n\nWin32/Agent .ZQE\n\nWin32/Agent .ZTU\n\nSHA-1\n\n1771e435ba25f9cdfa77168899490d87681f2029\n\nddaa06a4021baf980a08caea899f2904609410b9\n\n10d571d66d3ab7b9ddf6a850cb9b8e38b07623c0\n\n2529f6eda28d54490119d2123d22da56783c704f\n\ne923ac79046ffa06f67d3f4c567e84a82dd7ff1b\n\n8e138eecea8e9937a83bffe100d842d6381b6bb1\n\nef860dca7d7c928b68c4218007fb9069c6e654e9\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f24\n\ne8f07caafb23eff83020406c21645d8ed0005ca6\n\n09d2e2c26247a4a908952fee36b56b360561984f\n\nf90ccf57e75923812c2c1da9f56166b36d1482be\n\nC&C server domain names\n\nsecao[ .]org\n\nikmtrust[ .]com\n\nsysanalyticweb[ .]com\n\nlxwo[ .]org\n\njflynci[ .]com\n\nremotepx[ .]net\n\nrdsnets[ .]com\n\nrpcnetconnect[ .]com\n\nwebstp[ .]com\n\nelaxo[ .]org\n\nC&C server IPs\n\n185 .77 .129[ .]106\n\n185 .144 .82[ .]239\n\n93 .113 .131[ .]103\n\n185 .86 .149[ .]54\n\n185 .86 .151[ .]104\n\n103 .41 .177[ .]43\n\n185 .86 .148[ .]184\n\n185 .94 .191[ .]65\n\n86 .106 .131[ .]54\n\nSmall agent DLL\n\nIn this section, we list only the DLL for which we never obtained the corresponding EXE\n\nESET detection names\n\nWin32/Agent .ZQE\n\nSHA-1\n\n397d97e278110a48bd2cb11bb5632b99a9100dbd\n\nC&C server domain names\n\nelaxo[ .]org\n\nC&C server IPs\n\n86 .106 .131[ .]54\n\nLoJax // First UEFI rootkit found in the wild, courtesy of the Sednit group\f"], "URLs": ["http://opensecuritytraining.info/IntroBIOS.html", "https://www.welivesecurity.com/2017/05/09/sednit-adds-two-zero-day-exploits-using-trumps-attack-syria-decoy/", "https://www.coresecurity.com/system/files/publications/2016/05/Paper-Deactivate-", "https://www.wired.com/story/russian-fancy-bears-hackers-release-apparent-ioc-emails/", "https://www.absolute.com/en-gb/resources/faq/absolute-response-to-arbor-research", "https://www.welivesecurity.com/2018/04/24/sednit-update-analysis-zebrocy/", "https://www.blackhat.com/docs/us-14/materials/us-14-Kamluk-Computrace-Backdoor-Revisited-WP.pdf", "https://bromiumlabs.files.wordpress.com/2015/01/speed_racer_whitepaper.pdf", "https://wikileaks.org/ciav7p1/cms/page_13763820.html", "https://www.kb.cert.org/vuls/id/766164", "http://www.welivesecurity.com/wp-content/uploads/2016/10/eset-sednit-full.pdf", "https://www.intel.com/content/dam/www/public/us/en/documents/datasheets/7-series-chipset-pch-datasheet.pdf", "https://assets.documentcloud.org/documents/4598895/DOJ-Russia-DNC-Hack-Indictment.pdf", "https://www.bbc.com/news/technology-37590375", "https://threatvector.cylance.com/en_us/home/gigabyte-brix-systems-vulnerabilities.html", "https://www.crowdstrike.com/blog/bears-midst-intrusion-democratic-national-committee/", "https://github.com/LongSoft/UEFITool", "https://www.blackhat.com/docs/asia-17/materials/asia-17-Matrosov-The-UEFI-Firmware-Rootkits-Myths-", "https://asert.arbornetworks.com/lojack-becomes-a-double-agent/", "http://rweverything.com/"], "weight": 0.0}