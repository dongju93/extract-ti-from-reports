{"rule_id": 705, "name": "LuckyMouse", "description": "-", "references": [], "File_Names": ["load.log"], "MD5_Hashes": ["8e6d87eadb27b74852bd5a19062e52ed", "6a352c3e55e8ae5ed39dc1be7fb964b1", "3cbeda2c5ac41cca0b0d60376a2b2511", "dacedff98035f80711c61bc47e83b61d", "9dc209f66da77858e362e624d0be86b3", "493167e85e45363d09495d0841c30648", "83c5ff660f2900677e537f9500579965", "3a97d9b6f17754dcd38ca7fc89caab04", "ad07b44578fa47e7de0df42a8b7f8d2d", "a2eb59414823ae00d53ca05272168006", "d21de00f981bb6b5094f9c3dfa0be533"], "SHA1_Hashes": [], "SHA256_Hashes": ["c69121a994ea8ff188510f41890208625710870af9a06b005db817934b517bc1"], "Registry_Entries": ["HKLM\\SOFTWARE\\Classes\\32ndisproxy-mn (or 64ndisproxy-mn for 64-bit hosts). The\nencrypted configuration is saved as the value filterpd-ndisproxy-mn in the registry key\nHKCR\\ndisproxy-mn.\n\nInitial installer saves XOR-encrypted Trojan\u2019s shellcode and DES-encrypted configuration in system registry\n\nThe installer creates the corresponding autostart service and registry keys. The \u201cAltitude\u201d\nregistry value (unique ID for the minifilter driver) is set to 321 000, which means \u201cFSFilter\nAnti-Virus\u201d in Windows terms:\n\nNDISProxy network filtering driver\n\nDriver MD5 hash\n\nTimestamp\n\nSize\n\nBits\n\n8e6d87eadb27b74852bd5a19062e52ed 2018.03.29 07:33:58\n\n40400\n\nd21de00f981bb6b5094f9c3dfa0be533\n\n2018.03.29 07:33:52\n\n33744\n\na2eb59414823ae00d53ca05272168006\n\n2018.03.26 04:15:28\n\n40400\n\n64\n\n32\n\n64\n\n3/7\n\n\f493167e85e45363d09495d0841c30648\n\n2018.03.26 04:15:21\n\n33744\n\n32\n\nad07b44578fa47e7de0df42a8b7f8d2d\n\n2017.11.08 08:04:50\n\n241616 64\n\nThis digitally signed driver is the most interesting artefact used in this campaign. The\nnetwork filtering modules serve two purposes: first they decrypt and inject the RAT; second,\nthey set its communication channel through RDP port 3389.\n\nThe drivers are signed with a digital certificate issued by VeriSign to LeagSoft, a company\ndeveloping information security software such as data loss prevention (DLP) solutions.\n\nThis driver makes extensive use of third-party publicly available C source code, including\nfrom the Blackbone repository available at GitHub.\n\nFeature\n\nPublic repository\n\nDriver memory\ninjection\n\nBlackbone https://github.com/DarthTon/Blackbone\n\nNDIS network\nfiltering driver\n\nMicrosoft Windows Driver Kit (WDK) sample code \u201cWindows Filtering Platform\nStream Edit Sample/C++/sys/stream_callout.c\u201d\n\nParse HTTP\npackets\n\nHttp-parser https://github.com/nodejs/http-parser\n\nThe driver again checks if the Windows version is higher than Vista, then creates a device\nnamed \\\\Device\\\\ndisproxy-%s (where the word after \u201c-\u201d varies \u2013 see Appendix for all\nvariants) and its corresponding symbolic link \\\\DosDevices\\\\Global\\\\ndisproxy-%s.\n\nThe driver combines all the Trojan-related registry values from\nHKLM\\SOFTWARE\\Classes\\32ndisproxy-mn and de-XORs them with a six-byte hardcoded\nvalue. It then injects the resulting Trojan executable shellcode into lsass.exe memory using\nBlackbone library functions.\n\nNDISProxy works as a network traffic filter engine, filtering the traffic going through RDP\nport 3389 (the port number is hardcoded) and injecting messages into it.\n\nThe communication between the user-mode in-memory Trojan and the driver goes through\nthe custom control codes used by the DeviceIoControl() Windows API function. Apart from\nthe auxiliary codes, there are two codes worth mentioning:\n\n4/7\n\n\fDriver control\ncode\n\nMeaning\n\n0x222400\n\nStart traffic filtering at RDP port 3389\n\n0x22240C\n\nInject given data into filtering TCP stream. Used for Trojan communication with\nC2\n\nIn-memory C++ Trojan\n\nSHA256\n\nc69121a994ea8ff188510f41890208625710870af9a06b005db817934b517bc1\n\nMD5\n\n6a352c3e55e8ae5ed39dc1be7fb964b1\n\nCompiled 2018.03.26 04:15:48 (GMT)\n\nType\n\nI386 Windows GUI DLL\n\nSize\n\n175 616\n\nPlease note this Trojan exists in memory only; the data above is for the decrypted Windows\nregistry content without the initial shellcode\n\nThis RAT is decrypted by the NDISProxy driver from the system registry and injected into\nthe lsass.exe process memory. Code starts with a shellcode \u2013 instead of typical Windows\nportable executable files loader this malware implements memory mapping by itself.\n\nThis Trojan is a full-featured RAT capable of executing common tasks such as command\nexecution and downloading/uploading files. This is implemented through a couple dozen\nC++ classes such as CMFile, CMFile, CMProcess, TFileDownload, TDrive, TProcessInfo,\nTSock, etc. The first stage custom installer utilizes the same classes. The Trojan uses\nHTTP Server API to filter HTTPS packets at port 443 and parse commands.\n\nThe Trojan is an HTTP server, allowing LAN connection. It uses a SOCKS tunneler to communicate with the C2\n\n5/7\n\n\fThis Trojan is used by attackers to gather a target\u2019s data, make lateral movements and\ncreate SOCKS tunnels to their C2 using the Earthworm tunneler. This tool is publicly\navailable and popular among Chinese-speaking actors. Given that the Trojan is an HTTPS\nserver itself, we believe that the SOCKS tunnel is used for targets without an external IP,\nso the C2 is able to send commands.\n\nWho\u2019s behind it and why?\n\nWe found that this campaign targeted Middle Asian governments\u2019 entities. We believe the\nattack was highly targeted and was linked to a high-level meeting. We assess with high\nconfidence that the Chinese-speaking LuckyMouse actor is responsible for this new\ncampaign using the NDISProxy tool described in this report.\n\nIn particular, the choice of the Earthworm tunneler is typical for Chinese-speaking actors.\nAlso, one of the commands used by the attackers (\u201c-s rssocks -d 103.75.190[.]28 -e 443\u201d)\ncreates a tunnel to a previously known LuckyMouse C2. The choice of victims in this\ncampaign also aligns with the previous interests shown by this actor.\n\nConsistent with current trends\n\nWe have observed a gradual shift in several Chinese-speaking campaigns towards a\ncombination of publicly available tools (such as Metasploit or CobaltStrike) and custom\nmalware (like the C++ last stage RAT described in this report). We have also observed how\ndifferent actors adopt code from GitHub repositories on a regular basis. All this combines to\nmake attribution more difficult.\n\nThis campaign appears to demonstrate once again LuckyMouse\u2019s interest in Central Asia\nand the political agenda surrounding the Shanghai Cooperation Organization.\n\nIndicators of Compromise\n\nNote: The indicators in this section are valid at the time of publication. Any future changes\nwill be updated directly in the corresponding .ioc file.\n\nFile Hashes\n\nDroppers-installers\n9dc209f66da77858e362e624d0be86b3\ndacedff98035f80711c61bc47e83b61d\n\nDrivers\n8e6d87eadb27b74852bd5a19062e52ed\nd21de00f981bb6b5094f9c3dfa0be533\na2eb59414823ae00d53ca05272168006\n493167e85e45363d09495d0841c30648\nad07b44578fa47e7de0df42a8b7f8d2d\n\nAuxiliary Earthworm SOCKS tunneler and Scanline network scanner\n83c5ff660f2900677e537f9500579965\n\n6/7\n\n\f3a97d9b6f17754dcd38ca7fc89caab04\n\nDomains and IPs\n\n103.75.190[.]28\n213.109.87[.]58\n\nSemaphores\n\nGlobal\\Door-ndisproxy-mn\nGlobal\\Door-ndisproxy-help\nGlobal\\Door-ndisproxy-notify\n\nServices\n\nndisproxy-mn\nndisproxy-help\nndisproxy-notify\n\nRegistry keys and values\n\nHKLM\\SOFTWARE\\Classes\\32ndisproxy-mn\nHKLM\\SOFTWARE\\Classes\\64ndisproxy-mn\nHKCR\\ndisproxy-mn\\filterpd-ndisproxy-mn\nHKLM\\SOFTWARE\\Classes\\32ndisproxy-help\nHKLM\\SOFTWARE\\Classes\\64ndisproxy-help\nHKCR\\ndisproxy-mn\\filterpd-ndisproxy-help\nHKLM\\SOFTWARE\\Classes\\32ndisproxy-notify\nHKLM\\SOFTWARE\\Classes\\64ndisproxy-notify\nHKCR\\ndisproxy-mn\\filterpd-ndisproxy-notify\n\nDriver certificate\n\nA lot of legitimate LeagSoft products are signed with the following certificate. Please don\u2019t\nconsider all signed files as malicious.\n\nSubject\n\nShenZhen LeagSoft Technology Co.,Ltd.\n\nSerial number\n\n78 62 07 2d dc 75 9e 5f 6a 61 4b e9 b9 3b d5 21\n\nIssuer\n\nVeriSign Class 3 Code Signing 2010 CA\n\nValid to\n\n2018-07-19\n\n7/7\n\n\f"], "URLs": ["https://github.com/DarthTon/Blackbone", "https://github.com/nodejs/http-parser"], "weight": 0.0}