{"rule_id": 147, "name": "Bitdefender-Whitepaper-PAC-A4-en-EN1", "description": "-", "references": [], "File_Names": ["mst.dll", "2.js", "msvck.dll", "document.doc", "msp60.dll", "msvct60.dll", "selfdel.bat", "msp.dll", "msi60.dll", "taskhostex.exe", "ylir.js", "MSWord.exe", "menu.php", "mst60.dll", "msvck60.dll", "dws.exe", "msvci.dll", "db_table.php", "IPv4.php", "rec.doc", "ubfic.exe", "MsWord.exe", "ntlm.exe", "msvct.exe", "msvcp.dll", "msvct.dll", "ivotp.xpi", "class.wp", "msk.dll", "xmlupd.bat", "msvci60.dll", "1.js", "user.js", "ilebi.xpi", "main1.js", "startup.bat", "yqyra.js", "main.js", "msi.dll", "msi32.dll", "sihost.exe", "db.php", "Dimitrescu.doc", "European_global_navigation_system.doc", "aes.js", "anfel.js", "scientific.otzo", "msk60.dll", "ntml.exe", "msvci.exe", "reckless.dk", "msi.exe", "doc.js", "dwms.exe", "ufo.com", "fishstalk.esy", "pomo.php"], "MD5_Hashes": ["7201895b632dc5044c02ea98b0dbd371", "5815da5d0d5565f342474d976f507807", "ec398e010a0cb6b6e4f48722dc07eaa3"], "SHA1_Hashes": ["14b6f2bc2b869d3417619201c7205e240a93d2ef", "88fd1ee6fb78385a1c5e462dd0768bc34b8188a3", "583036a7c9b210508c222c7dfdd9b8321feca7df", "547f525f57f3f47222ae3ab253635df936bd355a", "336d5957909487990033a3432d0347be34db044a", "58952be65d0ed53490f69f566485c699f246dcc0", "c5166d1a574bc5e374490846f2584f94f755d90b", "840de34aa767131eb34069e6f936dea3a48c024e", "bca5accb9f1d0806f8603cf74ce0ebe9519f5004", "2bf06a003a9bd56d2ed91770966a7aee7d9784b9", "9b0effd20ea7239275b6cf1e02280eb67eced701", "eb1b83825ff28de7f13812bfce273ad7fb1994fb", "2a84f90ed23a569defee7b37f4650aca4021a767", "2ad7262ad52320399aa54cd8482c30e7a480bebc", "261a8fc8e0e396298120a7bc15c32a37f3ce5b94", "321ca51b4c250515bc3075abe735e360a57dee22", "3e10fd3e8d4c4a7900e603aee7660c83441d998e", "a5daecfd57f006acd15486bd544f40e4cdce3801", "23ce92fd1d4d2d42389a66869434fb578aa3f539", "66ec04c005d0a1ebc218455915e31d2a2b6dd459", "5a6b14fad221ab65a086b1ee7c97eb63ff38480e", "ccf0a302eb264cbb5db726d61ad18ebdc0d3d012", "840563929f13ab05e45a8d3fb2d11e70e3cdccca", "c7accc1c4ceedc756c30ebb2f1ff9f0dbd0255b0", "46f1b8722f8f094015c749599e94a3e44850df0a", "8ffd436182f8d2a7ec0a66c0d6d43f71222f62b5", "09df1b0abd32791c3b0d5d657cd956f81e2dacb2", "ca07bbfc5e8c15c4258f92e6e6c328b86b7b19a5", "26f8d64038439c006f12ec34b035b1dee1c56b31", "acc2250be782063f268b87bd0f798549c5838b95", "c4b06021c6c925c837dab3ba42c6b76eb77ad30b", "85c03c6fa5e3803e55a46f17d6981992181de57b", "623185a651a1962538141d7ffefdc2f2445a9201", "c34a68c1a2d2beddbbe8ee8bd125cce14d0dc377", "c3bc94b065449879c25a541d740346e060d9d6fe", "01e2e16be5828ca03c6b78f253bd962bfaa5ccbf", "d80d5ccb9d37d971a408d3c91f803e40b8421a2c", "b2700f16e4494ef7eba26b88a800728621adffea", "2eb5a075b710155c409e727e7f74fdc3be63b58c", "b55dac24f646dd5e0ea856d6ed7891ad8c8acdc1", "5617c1414cb79411c64883ee72d219d52123fa30", "67e9e098c2b39b5847f6cd3aa5a3f86917602f5f", "ede8ec9f3efeb515859becd1f430f82933b42dd9", "d6d3d9a56513b83db497a8d4701c2ac7270d78eb", "b35b07ad4f42493ecb19f66aba83da8e74c1bb5a", "c9b1208be2aa2c5cfbcbfcb9b1a45c36854414b8", "eea9fec97dca5d122069adf6dd71628bd6d9c2fd", "fbd538cf432f2576b37e2770f860b70b009c3cf3", "66a7642abaf3d05d5ab14e83dfd52eca0c17acc6", "5374b898dbb618aa84d92f7a3e9d166e9e819960", "5aaa055fa5eb9a436ca0e643bf2ada268bcd6f33", "6c68a9df2d710187d067ecb2d0cc04358d570b52", "d83d7de186fa6c7abe4676eb568ba4dc62a7c931", "54ac8caeae8046e01301379602041c74ee527dfc", "c8395601ea301ba083cb530dad7a44c8048eeb77", "686ada60c898782b57ca993141b64f7c7a531c50", "3fbaf98c75992db9db11d29ae20c13b7b0f50470", "fdb9d026502aa64aa23b1acb96f6d0013ef874b4", "33f57151a52666ca055f1dc66ef04e2f9cb09918", "be10c837af1f25ee67440f3a33da8c650f5ab54a", "e20b0f03f6708118bca9f408b156b210ba083b54", "ee1f5ba06400fa192664f984d71b1a0cdba96d75", "0af1a6d6c487e78aa252ae2f5921606a8a379206", "8d40a65a2bca1378eb6e009c1842aa0e45ae289e", "92731e4ed149c59a25c233635c55a87a8a22b19f", "852dc73ca9e6d92b3da96500d27ab44b7f9a4ea4", "2a9c8639215faf08593f17b930f83757324dfbee", "e32832e3f0e0b8450e7bdded16c441951b171130", "585550816539b73dfdc3cee80cc60e1cdc1cdb3e", "b719e1d03e860235a68dda4168f29ac4988d25de", "22c565e2cfb8adadd022b0ec281bb2b6ed62dca2", "4880a13c4e1cde0343c233f5e107abf4e3d00664", "4f35665e689bea4f116505f81ae2906fd1517128", "325b1075b4544ecc2c5741a7a06a9df00f0965da", "78499e4694f847972576960a04f8177691a7c911", "ce234ed0899c8f97e3f2085215b842723a773368", "d53eb2a6904d1fb7982bb876916cd3723c3dc9b1", "a5359856742d09d1596e5c7fde407856d72046db", "b84ef6480d888b560b071e1f97e78f06080dae89", "0641f22e1b4e15cc23660b2e8bbf42623e997dfb", "100241519698bb013f668ff49d3d0d4fdab6a584", "96d9cf7296f02bf4e49c0540fb84981493b61a93", "a753de6b2e6d3d5735fc5e90a879f1ad7e93fb0f", "9957af2dbfa04bca2a5319a216852ce4f4a17682", "eacadedc31af04ef86470aec62ad3eccc9a35332", "4eecebf5c9720c8e85347e0dcf55a844a6d01b08", "b4afc5e0002201ce052466cba9061018474b1de0", "aecf66120861b71c92a2d1f0015fc9228c02ee88", "7abf407b9a19dd9ee528fa6e5a099ea1c8ba2f98", "80091e1b7b4dd404c83a9c54fda9e6951b2689b1", "88f473f3d7a7eb2637754a8d0856ab888066ab08", "272c42bcdcc88adba1e01e60a931fbe5f5800883", "ba29c29a35d15a668ea2ea79d1d4e56c2d67553f", "c414ba1dd1f281a63e58c60eb1d8cb4ac3c4e7f0", "6e070e01076a4a92f08924a405f389436003d927", "1e49924afe56e3c782893118a51256ca5f247fba", "1ae10d6ec5d33b704c32ef52c3ee9671f4298d5f", "49f0569886e5e6ba4b32b7f118dc35f9e5916dc2", "8c4dd73cdd48908ddf5039c5a99e719dfd44ff41", "8f8d7cd742fb843ba8cb16c2b2d6349436049ed8", "b4e867893d9d6f8b52de98ab6b41513d61f20472", "f9af4a51616db485adc577ad600b60e77916cace", "f781e603c55558708ac3101d0bfee2c1752693c2", "14014f810a0c07b6dde48b7a8954b56c409ae7f3", "5d492ae763bfc227db9eea46e560124128ff925b", "45c7f3f065cf015289ab17161a1880eb638b508a", "eb0f02e36e77221366becabc60e78dd43368ab9d", "443551d822eba6a81b8ac3177e31e210c99934d0", "368b746daf5448812b231aed67bd795dfb5a605d", "edf96c42f4e1cf43fbaab3f0bbf54280fc8e311d", "0a9dd2b71df68ba088d7d868d7e191875755e34c", "38d16c19b54bf2c94e0ad81fca207de062181b31", "713855aa5680154324bfcbac638aa1c12681e3c3", "5bcc6da122b3aa88c766d80eb7774c2c6e9e25d5", "621698f821a2bafccad026f9f5d2fe1ac46a39ce", "d7218e80261517badd8090d3a5ba0a1ed21c21a2", "eda30afac2c1fa0ed2c80e8859e2556ea3dfe2ef", "c340534b8eafed85fc6e9950033b0b9e696d5cb0", "6a2d12adc541c9c5aaa1096d7e59c72c489cdd59", "b0b9215e236bb47f5f0a108be97b24d20898d2fc", "16c6d317fd7c361623c62cf5652a6b7937f58e0a", "5ff776d23e6c6af47619ad2e7333a434b79e19df", "d74d8ec530c02b1eb94203de1f641e15a72faf8d", "a9239572afe4fbdfe077a262c9699eb1d22a9c87", "23d5cc54641f56f554890bbd55d580e5c564e197", "7674f680fd0c24c222c027976c40ffe1e08c6f2e", "85a6e3a3fcee71ffa2aad90336960132fa8f4c4d", "88af035dc34f730c884b5a11c8be666974a1a6eb"], "SHA256_Hashes": ["7201895b632dc5044c02ea98b0dbd3715815da5d0d5565f342474d976f507807"], "Registry_Entries": ["HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\svchostUpdate -> %TEMP%\\ntlm.exe\n\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Devices -> %TEMP%\\ntlm.exe\n\nThe first key is for starting the trojan, along the .lnk files. Some versions do not have the lnk feature, only the registry keys. The \n\nsecond key is never used in our samples.\n\nLast file created is %temp%\\Axpim\\selfdel.bat for self-deletion. \n\nmsvcp.dll\n\n32 bit library used for returning the PID of one of the processes: iexplore.exe, outlook.exe, firefox.exe, chrome.exe. It hase one export, \n\nmsvcp, which enumerates running processes and checks their names. It will return the PID of the first one found. If the processes could \n\nnot be enumerated it returns 0. If no process was found it returns -1. Instead of storing the actual names of those processes in the dll, \n\nit stores a byte array as a key and one byte array (result) for each of the 4 names. The checking is done: ProcessName xor key == result,  \n\non coresponding bytes. The function may return different PIDs when processes are stopped or started.\n\n[7]\n\nWhite Paper\fmsvci.dll \n\n32 bit library used for injecting msvck.dll (the 32 bit backdoor) into a running 32 bit process. The library has one export msvci, which \n\ntakes one parameter representing the PID of a running process. It allocates a small chunk of memory into that process (260 bytes). In \n\nthis memory it copies the path to the msvck.dll file, which is found in %temp%\\msvck.dll. \n\nThen, from the current process it gets the address of LoadLibraryA function and creates a remote thread in the target process starting \n\nat that address. The parameter sent for the thread function is the address of the new allocated string containing the path to msvck.dll. \n\nAs a result, in the target process, a thread is created which just executes LoadLibraryA(\u201epath to msvck.dll\u201d). \n\nThis method will work even if ASLR is enabled, because the random loading offset for dlls is calculated once per boot and by default \n\none dll is loaded at the same address in different processes. msvci.exe\n\n64 bit application used for injecting msvck60.dll (the 64 bit backdoor) into a running 64bit process. The executable takes a commandline \n\nparameter representing a PID. The functionality is identical to msvci.dll library. ntlm.exe\n\nThis is the file that starts the trojan. First, it creates a named pipe \\\\.\\pipe\\bc367  used as a mutex, as the file will probably be executed \n\nmany times from the shortcuts. The name of the pipe and all other strings in the file and in the rest of the dlls are encrypted with RC4. \n\nIt sets the other files of the trojan (msvci.dll, msvcp.dll, msvck.dll, msvct.dll, msvci.exe, msvck60.dll, msvct60.dll) as hidden, ntml.exe \n\nwill not be hidden. \n\nAfterwards, the executable enters an infinite loop.\n\nIt checks if the file %temp%\\msvci.dll exists, if it does not exist it will do a self destroy: deletes all components, deletes registry keys, \n\nrestores the original lnk files from %temp%\\Links, closes the pipe. This behaviour is used by the backdoor component later for self \n\ndeleting. \n\nNext it loads the msvcp.dll library and call msvcp export from it. This function returns the PID of one of the processes: iexplore.exe, \n\noutlook. exe, firefox.exe, chrome.exe, and 0 or -1 if none of those processes was found. If a process was found, its PID is saved into a \n\nvariable, then the program checks whether that process is a 32 bit or 64 bit process. \n\nIf it is a 32 bit process it calls msvci export from msvci.dll with one parameter, the PID. If the process is a 64 bit process it creates a \n\nSleep 30 sec\n\nstart\n\nCreate pipe,\nHide files\n\nmsvci.dll\nexists\n\nyes\n\nSelf delete\n\nno\n\nend\n\nCall msvcp,\nGet PID of target\n\nPID == last_PID\n\nyes\n\nno\n\nLast_PID = PID\n\nno\n\nPID process\nIs 64 bit\n\nyes\n\nCall msvci(PID)\n\nExecute \u201cmsvci.exe PID\u201d\n\nyes\n\nPID\nIsWow64\n\nno\n\nno\n\nntlm.exe\nIsWow64\n\nyes\n\ntarget is\n32 bit\n\ntarget is\n64 bit\n\n[8]\n\nntlm.exe functionality\n\nCheck if a process is 64bit knowing \nthat ntlm.exe is 32bit\n\nWhite Paper \n\fprocess from msvci.exe with the commandline parameter being the PID converted to ascii, base 10 (ex: msvci.exe 728). \n\nThe purpose of msvci.dll and msvci.exe (64bit) is to inject the payload into a process.  After this it sleeps 30 seconds and repeats \n\nindefinitely. \n\nThe saved PID is checked so that it doesn\u2019t inject again into the same process. This mecanism is flawed because another process from \n\nthe list could be found and it will inject into it also, or it is possible to inject in the same process twice, for example outlook.exe opened \n\nfirst and injected then iexplore.exe opened second and injected then iexplore.exe closed and outlook.exe injected again. \n\nAnother bug can appear if msvcp.dll will be deleted because when calling LoadLibrary and GetProcAddress it doesn\u2019t check the return \n\nvalues and the program will crash when calling a NULL pointer. \n\nmsvct.dll\n\n32 bit library contains functions for communicating with the C&C, using WinINet API. The backdoor does  not contain any C&C \n\naddresses or networking logic, it just uses the exports from msvct.dll, namely: \n\n-  \n\nBOOL CI(void) \u2013 Checks for internet connection. Returns true if a http request (\u201eGET /1\u201d) to  www.google.com succeeds; \n\nreturns false if not.\n\n- \n\nBOOL SHR(char *ServerAddr, char *ServerScript, void *ID, void *SendBuff, void *RecvBuff,  void *extra) \u2013 Sends and receives \n\ndata to/ from C&C. The communication is encrypted through HTTPS, port 443. \n\n- \n\nExtra flags are used for the connection: INTERNET_FLAG_IGNORE_ CERT_DATE_INVALID,  INTERNET_FLAG_IGNORE_CERT_\n\nCN_INVALID,  SECURITY_FLAG_IGNORE_UNKNOWN_CA  to  ignore  errors  caused  by  invalid  certificates.  ServerAddr  and  ServerScript \n\nmake the address of the C&C, these are found using the CS export. ID is a structure made from a buffer (string) and its length. The ID \n\nstring will be put into the HTTP headers.  SendBuff is the same type of structure like the ID. SendBuff contains data that is sent to the \n\nC&C. RecvBuff is a structure that contains 4 members, 3 being pointers: a data buffer, a buffer length and two strings. This structure \n\nwill be filled with data coming from C&C. The data buffer can contain batch commands or whole files to be written to disk. The first \n\nstring will contain the Content-Type from the headers and this will be the command for the backdoor. The second string will contain the \n\nContent-Location from the headers and will have the name of a file for download/upload commands. The last parameter, extra, is again \n\na structure from a buffer and its length. It is optional. The string that it contains is sent through the HTTP header. This is used by the \n\nCS export and then it contains that \u201eCheck: RandomNr\u201d string for C&C validation. It is also used in the \u201eupload\u201d backdoor command. \n\nThe function returns true or false.\n\n- \n\nBOOL CS(void *ID, char *ServerAddr, char *ServerScript) \u2013 Check C&C connectivity. Returns true if it founds a valid C&C and \n\nServerAdd, ServerScript (output parameters) will contain the address and the page/script of the C&C. ID (input parameter) is a structure \n\nthat contains a string and its length. The string represents an ID identifying the infected system. This function tries two hardcoded C&C \n\naddresses: 88.208.0.130/rss.php, 78.47.51.238/rss.php (other variants used different addreses). It generates a random number from 0 \n\nto 32767 and then creates a string with it, such as: \u201eCheck: 1352\u201d. This string will be sent in the http headers using SHR function to the \n\nC&C. If a C&C is alive it must respond with the string \u201e1352\u201d back. If none of the two C&Cs are alive the function returns false.\n\nmsvct60.dll\n\n64 bit version of msvct.dll msvck.dll\n\n32 bit library containing the main functionality, the actual backdoor. It has no exports and will only execute if injected into iexplore.exe, \n\noutlook.exe, firefox.exe or chrome.exe. \n\nFirst, it checks the internet connection using the CI export from msvct.dll. If it has no internet access the execution ends. \n\nNext it creates an ID of the infected system as a string such as: \n\n\u201eMyCookie: {eceee5c0-1eca-11de-abc9-806d6172696f}{3559831177}\u201d \u2013 the GUID is obtained using GetCurrentHwProfile API and the \n\nsecond bracketed number is the volume serial number. If GetCurrentHwProfile fails the ID will be:\n\n\u201eMyCookie: UserName{3559831177}\u201d \u2013 with the username from GetUserNameA API and again the volume serial number.\n\n[9]\n\nWhite Paper\fThe ID created will be used to check the connection to the C&C with the CS export from msvct.dll. The connection is checked in an \n\ninfinite loop with a sleep of 28 minutes after each check, until a valid, active C&C server is found. The C&C addresses are contained \n\nin msvct.dll and one of them is returned by CS function on success. It can be seen that the loop was meant to only check 3 times for \n\nthe connection (like other samples do), but, maybe because this is a intermediary version or by negligence, the code actually loops \n\nindefinitely. \n\nAfter  this  follows  the  code  for  a  regular  backdoor  which  receives  commands  from  the  C&C.  The  commands  are  received  and  the \n\nresults are sent back with the SHR export from msvct.dll. The backdoor will be identifying the computer with the ID it created. After \n\n3 successful commands received it will sleep for 28 minutes. After 3 consecutive failed commands (SHR returns false) it will again \n\nperform a C&C validation with the CS function in an infinite loop. Here it may receive the other C&C address. If a command is received \n\nbut it is not recognized it will sleep again for 28 minutes. The commands are text strings and are described below:\n\n\u201ecmd\u201d - Creates the file %temp%\\xmlupd.bat which will contain batch commands. It creates a process with xmlupd.bat but with stderr \n\nand stdout redirected to the file %temp%\\1. It waits maximum 30 seconds for it to finish then it will kill the process. After that it sends \n\nback to the C&C the content of the %temp%\\1 file. Some examples of commands received:\n\nsysteminfo\n\nset\n\nnetstat \u2013ano\n\ndir/a %programfiles%   \n\ndir /a %programfiles(x86)%\n\n\u201edownload\u201d \u2013 Receives a file and writes it to %temp%. The name of the file is also received from C&C. It will not execute the file.\n\n\u201eupload\u201d \u2013 Receives a file name, reads the file, converts the content to base64 and sends it to the C&C with an extra HTTP header \u201eFile: \n\nfilename\u201d. If it doesn\u2019t find the file it sends back the last error (GetLastError for CreateFileA). \n\n \u201etext/html\u201d \u2013 This looks like a normal Content-Type HTTP header value (the commands arrive in the Content-Type header). When this \n\nis received it resets the number of consecutive failed commands and sleeps 28 minutes. The backdoor will continue after.\n\n\u201eclose\u201d \u2013 Stops the execution of the backdoor, the injected thread will terminate.\n\n\u201eselfdestroy\u201d \u2013 Deletes the file %temp%\\msvci.dll then ntlm.exe will take care of deleteing all other components. The backdoor ends \n\nexecution after the command.\n\nmsvck60.dll\n\n64 bit version of msvck.dll.\n\n[10]\n\nWhite Paper\f2014-15 Browser Extension\n\nThe Infected Document \nThe  infection  start  from  a  document  cv_Mate.Dimitrescu.doc  .  The  document  is  constructed  in  the  same  way  as  the  documents \n\ncontaining the other variant of the malware. The script in it has the same functionality, it will create and execute the dropper %appdata%\\\n\nMicrosoft\\Word\\MSWord.exe\n\nThe Dropper\n\nThe dropper looks the same as the other droppers, only smaller in size. The files that it contains are encrypted with RC4 in overlay. Only \n\ntwo files will be dropped:\n\n%appdata%\\Aggea\\ivotp.xpi\n\n%appdata%\\Aggea\\ylir.js\n\nThe names Aggea, ivotp.xpi, ylir.js are random generated. No clean document is present in the dropper and the initial infected document \n\nwill not close. There is no second dropper either. The javascript file is executed, installs the xpi file as an extension in Firefox and then \n\ndeletes the directory %appdata%\\Aggea\\.\n\nThe Firefox Extension\nThe extension file will be renamed to {285364ef-e70c-4386-8e5c-2aa93a78daad}.xpi then will be installed in Firefox. In the browser it \n\nwill appear with the name \u201elangpack-en-GB 15.0.0\u201d as in the picture below.\n\n[11]\n\nWhite Paper\fWe tested it in Firefox 35.0, in some newer versions it didn\u2019t work. In this version of the malware the extension will work as the backdoor. \n\nThe functionality is contained in 3 files in the extension package: 1.js, 2.js, main.js. \n\n1.js\n\nThe file 1.js contains encryption and decryption routines. Algorithm used is AES, and the implementation seems to be copied from \n\nhttps:// github.com/chrisveness/crypto/blob/master/aes.js  and ran through an obfuscator.\n\n2.js\n\nThe  file  2.js  contains  the  C&C  addresses  and  the  network  functionality.  All  data  to  and  from  the  C&C  will  be  sent  through  normal \n\nHTTP but it will be encrypted and converted to base64. The encryption key is generated once when the extension is started but it \n\ncan be changed if the C&C requests as we will see later. In this variant we find 6 C&C addresses (presumably these are previously-\n\ncompromised machines):\n\nhttp://reckless.dk/wp-includes/class-pomo.php \n\nhttp://reckless.dk/wp-includes/class.wp-db.php \n\nhttp://fishstalk.esy.es/wp-content/plugins/bbpress/includes/common/menu.php \n\nhttp://fishstalk.esy.es/wp-includes/SimplePie/Net/IPv4.php \n\nhttp://77-ufo.com/wp-includes/class-menu.php \n\nhttp://77-ufo.com/pma/db_table.php\n\nThe strings in the files are not visible because the javascript files are highly obfuscated. The function that sends the data to the C&C \n\nalso receives the response. The function will select each time a C&C that responds from the list. This file would be the equivalent of \n\nthe msvct. dll file from the earlier version.\n\nmain.js\n\nThe file main.js is the actual backdoor (msvck.dll equivalent). The malware starts by creating an ID for the system. The ID is a Md5 hash \n\non some data colected from the system. The ID is sent in every request to the C&C as in the previous version with executable files. This \n\nis an example of the data collected for the ID from a test machine:\n\n{285364ef-e70c-4386-8e5c-2aa93a78daad}C:\\Documents  and  \n\nSettings\\user\\Application  Data\\Mozilla\\Firefox\\Profiles\\2gmaw237. defaultC:\\Documents and Settings\\user\\Desktop{ec8030f7-\n\nc20a-464f-9b0e-13a3a9e97384}\n\nThere are no line separators, it is just a long string. The ID in this case will be \u201e5815da5d0d5565f342474d976f507807\u201d. The gathered \n\ndata represents:\n\n{285364ef-e70c-4386-8e5c-2aa93a78daad} \u2013 GUID for the extension\n\nC:\\Documents and Settings\\user\\Application Data\\Mozilla\\Firefox\\Profiles\\2gmaw237.default\n\nFirefox profile folder where the extension was placed\n\nC:\\Documents and Settings\\user\\Desktop \u2013 desktop folder of the active user\n[12]\n\nWhite Paper\f{ec8030f7-c20a-464f-9b0e-13a3a9e97384} - GUID for Firefox\n\nAfter    the    ID    was    generated,    an    encryption/decryption    key    will    be    created.    It    concatenates    the    hardcoded    string \n\n\u201e7201895b632dc5044c02ea98b0dbd371\u201d  with  the  string  containing  the  ID.  In  the  case  of  our  example  this  will  make  the  string \n\n\u201c7201895b632dc5044c02ea98b0dbd3715815da5d0d5565f342474d976f507807\u201d. Then it makes the Md5 hash on the string which will \n\nresult in \u201cec398e010a0cb6b6e4f48722dc07eaa3\u201d. \n\nThis  final  buffer  (containing  a  C  like  string  with  the  md5)  is  the  decryption  key.  The  key  is  subsequently  used  for  encryption  and \n\ndecryption of every message sent and received from the C&C. \n\nNext it gathers more data about the system. Again, an example from the test machine:\n\n5815da5d0d5565f342474d976f507807 {285364ef-e70c-4386-8e5c-2aa93a78daad} winnt x86\n\nMozilla Firefox {ec8030f7-c20a-464f-9b0e-13a3a9e97384} 35.0\n\nC:\\Documents and Settings\\user\\Application Data\\Mozilla\\Firefox\\Profiles\\2gmaw237.default\n\nC:\\Documents and Settings\\user\\Desktop\n\n0040|||C:\\Documents and Settings\\user\\Application Data\\Mozilla\\Firefox\\Profiles\\2gmaw237.default\\user.js\n\nLines are separated by line feed (0x0A). The data represents:\n\n5815da5d0d5565f342474d976f507807 \u2013 System ID\n\n{285364ef-e70c-4386-8e5c-2aa93a78daad} \u2013 GUID for the extension winnt x86 \u2013 Operating system\n\n{ec8030f7-c20a-464f-9b0e-13a3a9e97384} \u2013 GUID for Firefox\n\n35.0 \u2013 Firefox version\n\nC:\\Perl... - %path%\n\nC:\\Documents and Settings\\user\\Application Data\\Mozilla\\Firefox\\Profiles\\2gmaw237.default \u2013 Path to Firefox profile\n\nC:\\Documents and Settings\\user\\Desktop \u2013 Desktop folder of the logged user\n\nC:\\Documents  and  Settings\\user\\ApplicationData\\Mozilla\\Firefox\\Profiles\\2gmaw237.default\\user.js  \u2013  Config  file  for  Firefox  which \n\ncan override normal settings, it will try to delete it. If is still present after deletion it will put 0041 instead 0040 as the status. \n\nThe data is encrypted with the key that was generated and sent to the C&C. Finally the malware sets a timer which calls a function \n\nthat sends to C&C, receives from C&C and processes the backdoor commands every five seconds. The commands are made up from 3 \n\nstrings separated by \u201e|||\u201d,like \u201enr|||string1|||string2\u201d. \n\nnr will be \u201a0\u2019 to \u201a6\u2019 and represents the backdoor command. string1 and string2 contain file names, urls and other things used by the \n\ncommands. In some commands string2 is not used. The commands are:\n\n[13]\n\nWhite Paper\f\u201e1|||file commandlineOptions\u201d \n\nExecutes  the  file  \u201efile\u201d  with  command  line  parameters  \u201ecommandlineOptions\u201d.  stdout  and  stderr  are  redirected  to  a  string  and  the \n\ncontent of the string will be sent to the C&C. If the file to be executed does not exists it sends back to the C&C \u201e0011|||file\u201d\n\n\u201e2|||url|||file\u201d\n\nDownloads  the  file  from  \u201eurl\u201d  and  writes  it  with  the  name  \u201efile\u201d.  Returns  to  the  C&C  \u201e0020|||file\u201d  if  the  file  was  successfuly  written, \n\n\u201e0021|||file\u201d if the file was not written or \u201e0051|||url|||errCode\u201d if the download failed.\n\n\u201e3|||file\u201d\n\nSearches the file \u201efile\u201d and sends it to the C&C. In case of an error it will return \u201e0034|||file\u201d if the file is a folder, \u201e0033|||file|||size\u201d if the \n\nfile size is greater than 5000000 bytes, \u201e0031|||file\u201d if the file exists but it couldn\u2019t get information about it, \u201e0032|||file\u201d if the file does \n\nnot exists, \u201e0051|||url|||errCode\u201d if the file could not be sent due to some network problems.\n\n\u201e4|||file\u201d\n\nDeletes the file \u201efile\u201d. Returns to the C&C \u201e0040|||file\u201d if the file was deleted or \u201e0041|||file\u201d if the file could not be deleted.\n\n\u201e5|||string1|||file\u201d\n\nSends  back  \u201estring1\u201d  to  the  C&C.  The  C&C  responds  with  a  buffer  which  will  be  written  to  the  file  \u201efile\u201d.  It  sends  back  to  the  C&C \n\n\u201e0020|||file\u201d if the file was successfuly written, \u201e0021|||file\u201d if the file could not be written or \u201e0051|||url|||errCode\u201d in case of network \n\nproblems.\n\n\u201e6|||path|||depth\u201d\n\nLists files and directories from \u201epath\u201d recursively until \u201edepth\u201d level, then it sends the list to the C&C. An example:\n\n          0060|||c:\\0\n\n           1|c:\\0\\Documents|d|ct=NaN|lat=1442919637000|lmt=1442919637000|\n\n           1|c:\\0\\main.js|17394|ct=NaN|lat=1442919639000|lmt=1442405697000|\n\n           1|c:\\0\\main1.js.js_format|9486|ct=NaN|lat=1442919639000|lmt=1442404160000|\n\n2|c:\\0\\Documents\\rec.doc|12|ct=NaN|lat=1442919637000|lmt=1442919637000|\n\n           ...\n\n           0061|||path_failed|||error_code \n\n           ...\n\n           0061|||c:\\0|||10000\n\nThe \u201epath\u201d listed  and a return code would be \u201e0060|||c:\\0\u201d. \u201e1\u201d and \u201e2\u201d from the start of the lines is the level of a file or directory. The \n\ncount starts at 1 and the maximum level would be \u201edepth\u201d+1This is followed by a file or directory path. After the path a \u201ed\u201d follows, if the \n\npath specifies a directory, or something like \u201e17394\u201d in case of a file, which is the size of the file. \u201ect=NaN\u201d is the creation time of a file. \n\nThere is a typo in the code and because of that the creation time is never actually retrieved (\u201ewinBirtdhDate\u201d instead of \u201ewinBirthDate\u201d). \n\n\u201elat=1442919637000\u201d is the last access time. \u201elmt=1442919637000\u201d is  last modified time. \u201e0061|||path_failed|||error_code\u201d is optional \n\nand may appear multiple times, contains a path at which the file enumeration failed. \u201e00061|||c:\\0|||10000\u201d at the end is optional and \n\nappears only if the listing so far contains more than 10000 characters, then no more lines will be added.\n\n\u201e0|||key\u201d\n\nSets a new encryption/decryption key with the C string \u201ekey\u201d\n\n[14]\n\nWhite Paper\fOther 2015 variants\n\nWe found different versions of the files with almost identical functionality and only minor differences. The most notable difference is \n\nthat C&C addresses vary. Another interesting fact is where the samples were spotted. \n\nMore C&C servers\n\n- \n\n- \n\n- \n\n- \n\n- \n\n- \n\n- \n\nreckless.dk/wp-includes/class-pomo.php\n\nreckless.dk/wp-includes/class.wp-db.php\n\nfishstalk.esy.es/wp-content/plugins/bbpress/includes/common/menu.php\n\nfishstalk.esy.es/wp-includes/SimplePie/Net/IPv4.php\n\n77-ufo.com/wp-includes/class-menu.php\n\n77-ufo.com/pma/db_table.php\n\nscientific.otzo.com/rss.php\n\nDocuments\nThe documents differ in what they present but they are identical in where the dropper resides and how the script operates.\n\nDroppers\nThe most common level 1 droppers contain the files encrypted with RC4 in the overlay and level 2 droppers have the files in clear in \n\n.data section. Some level 1 and level 2 droppers are just selfextracting winrar archives, but they have the same functionality. \n\nFirefox addon\nOnly one version was found.\n\nntlm.exe, svchost.exe, dwms.exe\nDifferent names for the starting executable. Some variants do not have the link files functionality and rely only on the registry key to \n\nstart. All variants use the key HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run and the value is named \u201esvchostUpdate\u201d or \n\n\u201edwm service\u201d.\n\nmsvci.dll\nSome versions check if the process into which they inject is 64 bit or 32 bit. If it is 64 bit \u201emsvci.exe PID\u201d is executed. This looks like \n\nan early version of the code because the functionality for 32/64 bit is in ntlm.exe file and if we have a 64 bit process to inject, msvci.dll \n\nwould not be loaded in the first place.\n\nmsvct.dll\nDifferent C&C addresses.\n\nmsvck.dll\nSome versions check the C&C in an infinite loop other will check it only 3 times and if no connection could be established the execution \nends. The computer ID has a GUID obtained with GetCurrentHwProfile in some versions and in others the GUID is taken from the \nregistry key HKLM\\SOFTWARE\\Microsoft\\Cryptography\\ MachineGuid\n\nStrings\nAlmost all strings in the files are encrypted. They are encrypted with RC4 in all versions, only the decryption keys are different.\n\n[15]\n\nWhite Paper\f2016 attack wave\n\nIn May 2016 we have encountered a new wave of attacks. They came, at least in some known cases, as spear phishing emails containing \nvarious documents: topics like Oil conferences, international politics, budget calculations, simple guidelines on how to interview for a \n\njob in foreign affairs. \n\nThe attackers moved away from using documents containing macro scripts to employing a zip archive containing a java-script file \n\nthat would in turn drop a clean document and the actual malware. The archived file has a double extension, something like urgent-\n\ndocument.doc.js. This method is probably more efficient, as the victim doesn\u2019t have to enable macros in Word Viewer.\n\nGenerally  speaking,  the  components  are  slightly  different  from  the  2015  variants  but  they  achieve  the  same  results.  As  a  general \n\nrule, we observed that these variants tend to be stealthier than past years\u2019 variants because malware is only injected in legitimate \n\nprocesses, so that no new main executable will be seen in the process list after injection. The components are outlined below.\n\nDocument containing malicious macro script\n\nThe new infected documents have a different structure, as seen in the picture. The clean document is \nencrypted directly in the infected document, not contained in the dropper as with previous versions. The \nmacro from the infected document will decrypt and run the clean document and the dropper. \n\nAt the end of the document there is a dword which contains the total size (document+dropper+4). In front \nof the encrypted document is a dword which represents its size. After the encrypted document there is one \nbyte, the checksum. \n\nThe encrypted dropper has the same structure. The checksum algorithm remains the same but the \nencryption is slightly different than before:\n\n// decrypt\n\nfor (key = 75, i = 0; i < size; i++)\n\n{\n\n    buffer[i] = buffer[i] ^ key;\n\n    key = (key ^ ((200 + i) % 256) ^ (i % 256); \n}\n\nThe Dropper\n\nThe droppers are self-extracting Winrar archives. They do not contain the clean document any more. The \ncomponent files are extracted to:\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\dws.exe\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\msi.dll\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\msi32.dll\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\msk.dll  (optional)\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\msp.dll\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\mst.dll\n\n[16]\n\nWhite Paper \n\f-  %appdata%\\Microsoft\\VisualStudio\\11.0\\msi.exe  (64 bit)\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\msi60.dll  (64 bit)\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\msk60.dll  (64 bit, optional)\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\msp60.dll  (64 bit)\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\mst60.dll  (64 bit)\n\n-  %appdata%\\Microsoft\\VisualStudio\\11.0\\msvci60.dll  (64 bit)\n\nmsk.dll and msk60.dll are not always present in which case their functionality is taken by another dll. After the files are dropped the \n\nfile dws.exe is executed without any parameters.\n\nmsp.dll\n\nSimilar to the old msvcp.dll. Returns the PID of some processes. It has 3 important exports: p, p1, p2. \n\n\u2022 p export has the functionality as the older variant, returns the PID of one of iexplore.exe, firefox.exe, chrome.exe, outlook.exe. \n\n\u2022 p1 export returns the PID of dwm.exe (Windows Desktop Manager). \n\n\u2022 p2 returns the PID of taskhostex.exe (Host Process for Windows Tasks) or sihost.exe (Shell Infrastructure Host). These are \n\nlegitimate processes that can be found in Windows 8 and Windows 10. Some variants do not search for sihost.exe. \n\n\u2022 Some variants also have another export kp which kills a process, but it\u2019s never invoked.\n\nmsp60.dll\n\n64 bit variant of msp.dll.\n\nmsi.dll\n\nThis is similar to the old msvci.dll. It has one export msvci with two parameters, a path to a file and a PID. It will inject the file from the \n\npath into the process with that PID. For 32 bit processes.\n\nmsvci60.dll\n\n64 bit variant of msi.dll.\n\nmsi.exe\n\nSimilar to msi.dll, for 64 bit processes. It will look for 1 or 2 command line parameters. \n\nThe first is a process PID. The second parameter can be anything and is just a flag for \n\nknowing what library to inject: 2 parameters \u2013 will inject msi60.dll, 1 parameter \u2013 will \n\ninject msk60.dll. The injection is done with the msvci export from msvci60.dll.\n\ndws.exe\n\nThe starting module. If it was started with a parameter and the parameter is not a number (as an ascii string), it will create a process \n\nwith the executable taken from the parameter; this looks like a reminiscent of the .lnk files functionality. \n\nIf the parameter is a number, the number will be interpreted as a PID and it will check if the process with that PID is a 32/64 bit \n\nprocess. If it is a 64 bit process, dws.exe will create a new process with the command line \u201cmsi.exe PID\u201d. If it is a 32 bit process, dws.\n\nexe will load msi.dll and call its export as msvci(\u201cmsvck\u201d,pid). In this case (parameter as number received) the execution stops here. \n\nIf the file msp.dll is not present it will delete all components of the trojan. Otherwise it will call from msp.dll the export p1 or p2 (only \n\non Windows 8/10 or Server 2012) to get the PID of dwm.exe, taskhostex.exe or sihost.exe. If the returned PID is for a 64 bit process \n\n[17]\n\nWhite Paper\fwill run \u201cmsi.exe PID 1\u201d; two parameters are passed, the last one being dummy and used by msi.exe just to know to take a different \n\npath of execution. If the returned PID is for a 32 bit process, it will load msi.dll and call msvci(\u201cmsi32.dll\u201d, PID). After this the program \n\nterminates (the older ntlm.exe would have stayed in a loop here).\n\nmsi32.dll\n\nCode from this library will execute injected in dwm.exe, taskhostex.exe. Sets the same registry autorun key as the 2015 variants. It \n\nwill also set a scheduled task:\n\nschtasks /create /SC DAILY /ST 12:00 /TN update /F /TR %appdata%\\Microsoft\\VisualStudio\\11\\dws.exe\n\nwhich will make sure that main module will start daily.\n\nChecks if msp.dll exists, if it does not, it will execute dws.exe without parameters, which in turn will self delete the Trojan. It uses \n\nfrom msp.dll the p export to get a PID. If that PID is a 32 bit process it will run \u201cdws.exe PID\u201d and if it is a 64 bit process it will run \n\n\u201cmsi.exe PID\u201d. Those processes with parameters will inject the actual backdoor (msk.dll). It will stay in a loop and try to find targeted \n\nprocesses in order to inject in them. This variant of the Trojan is stealthier than the previous one in which ntlm.exe would stay in a \n\nloop and try to inject, in which case a suspicious process (ntlm.exe) would be visible.\n\nmsi32.dll \u2013 with backdoor functionality\n\nIn some droppers msi32.dll has another variant different enough to be described separately. In this case msi32.dll would contain \n\nbackdoor functionality along the functionality described earlier. It will function in 2 ways (backdoor or earlier msi32.dll) based on the \n\nname of the process from which it runs. If the containing process is dwm.exe, taskhostex.exe or sihost.exe it will function like the \n\nusual msi32.dll and also will copy itself as msk.dll for later use as the backdoor. If the containing process is another process then it \n\nwill function as the backdoor (identical to msk.dll). \n\nmsi60.dll\n\n64 bit variant of msi32.dll.\n\nmsk.dll\n\nThe backdoor component, similar to the old msvck.dll, it has the same functionality. For selfdelete it will delete msp.dll. It also has a \n\nnew backdoor command \u201cst\u201d which sets the time in milliseconds for Sleep, time value received from the C&C. \n\nmsk60.dll\n\n64 bit variant of msk.dll.\n\nmst.dll\n\nLibrary used for communication with the C&C. Very similar to the old msvct.dll. Internet connection is checked with \u201cgo.microsoft.\n\ncom\u201d .\n\nmst60.dll\n\n64 bit variant of mst.dll.\n\n[18]\n\nWhite Paper\fFunctionality diagram\n\nFunctionality summary:\n\n1.  The macro from the infected document will drop and open a dummy clean document and a dropper.\n\n2.  The dropper will drop the component files in the folder %appdata%\\Microsoft\\VisualStudio\\11\\ and will open dws.exe without \n\nparameters.\n\n3.  dws.exe will use the function p2 (only on Windows 8 or Windows Server 2012) or the function p1 from msp.dll. p1 will return the \n\nPID of dwm.exe, p2 will return the PID of taskhostex.exe.\n\n[19]\n\nWhite Paper\f4.  dws.exe will load msi.dll and will call its export as msvci(\u201cmsi32.dll\u201d, PID), with the PID returned from step 3. This will inject msi32.\n\ndll into dwm.exe or taskhostex.exe depending on the OS. After this dws.exe process terminates.\n\n5.  a.   msi32.dll will add a run key in registry and a scheduled task, both will open dws.exe \n\nb.   msi32.dll will copy itself to msk.dll. This step is done only in some versions where msi32.dll has the backdoor functionality and \n\nthe initial backdoor msk.dll is missing.\n\n6.  msi32.dll will use the function p from msp.dll which will return the PID of one of iexplore.exe, outlook.exe, firefox.exe, chrome.exe.\n\n7.  msi32.dll will create a new process with dws.exe with a parameter, the PID returned at step 6. If at step 6. the file msp.dll was not \n\nfound (selfdelete from backdoor), it will create a new process with dws.exe but without parameters, which in turn will delete all \n\ncomponents. msi32.dll will stay in a loop repeating from step 6 (the backdoor variant of msi32.dll will exit).\n\n8.  dws.exe  with  a  parameter  will  function  differently  and  will  call  the  export  from  msi.dll  as  msvci(\u201cmsk.dll\u201d,  PID),  with  the  PID \n\nreturned at step 6., received as a command line parameter. This will inject msk.dll in the specified process. After this dws.exe \n\nprocess terminates. At this step it does not matter if msk.dll is the msi32.dll variant or not.\n\n9.  msk.dll is the backdoor program and will use exports from mst.dll to communicate with the C&C. In case that msk.dll is msi32.\n\ndll variant the selfdelete will be done here (start dws.exe) and not in step 7. because msi32.dll will no longer run in dwm.exe, \n\ntaskhostex.exe or sihost.exe.\n\nZip file containing malicious java-script\n\nIn this variant victim is lured to double click on a file with double extension .doc.js  this way java-script file gets executed, will \n\ndecode a clean Word document and a malware executable file, both are embedded in java-script. Next, a windows task is created \n\nto run the malware, and clean document is opened. Malware execution follows as previously described.\n\nC&C\n\nWe have 4 unique C&Cs for 2016 variants, hosted in Netherlands, New York and Germany. The machines used are most \n\nlikely compromised web servers.\n\n[20]\n\nWhite Paper \n\fBinary difference between 2014/2015 and 2016 variants\n\ndiagram representing backdoor main function\n\nYellow blocks represent partial code modifications compared to 2015 versions. Red blocks represent added functionality. We can \n\nsee that little functionality was added to backdoor component.\n\n[21]\n\nWhite Paper\fIOCs\n\nFile paths\n\n%APPDATA%\\Microsoft\\Word\\MSWord.exe\n\n%APPDATA%\\Axpim\\ubfic.exe (random)\n\n%APPDATA%\\Axpim\\anfel.js  (random)\n\n%APPDATA%\\Nuuw\\ilebi.xpi  (random) \n\n%APPDATA%\\Nuuw\\yqyra.js   (random)\n\n%TEMP%\\ntlm.exe\n\n%TEMP%\\msvci.dll \n\n%TEMP%\\msvcp.dll \n\n%TEMP%\\msvck.dll \n\n%TEMP%\\msvct.dll \n\n%TEMP%\\msvci.exe   (64bit)\n\n%TEMP%\\msvck60.dll (64bit)\n\n%TEMP%\\msvct60.dll (64bit)\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\dws.exe\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msi.dll\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msi.exe\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msi32.dll\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msi60.dll\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msk.dll\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msk60.dll\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msp.dll\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msp60.dll\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\mst.dll\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\mst60.dll\n\n%APPDATA%\\Microsoft\\VisualStudio\\11.0\\msvci60.dll\n\n%APPDATA%\\Axpim\\selfdel.bat\n\n%TEMP%\\xmlupd.bat\n\n[22]\n\nWhite Paper\fpipes\n\n\\\\.\\pipe\\bc367\n\n\\\\.\\pipe\\bc31a7\n\nRegistry paths\n\nHKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\svchostUpdate  \n\n-> %TEMP%\\ntlm.exe\n\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Devices  \n\n-> %TEMP%\\ntlm.exe\n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\svchostUpdate   \n\n-> %TEMP%\\svchost.exe\n\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Devices  \n\n-> %TEMP%\\svchost.exe \n\nHKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\dwm service   \n\n-> %TEMP%\\dwms.exe\n\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Devices  \n\n-> %TEMP%\\dwms.exe \n\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\dwupdate  \n\n-> %APPDATA%\\Microsoft\\VisualStudio\\11.0\\dws.exe\n\ntasks\n\nupdate \n\n\u2022 command schtasks /create /SC DAILY /ST 12:00 /TN update /F /TR %APPDATA%\\Microsoft\\VisualStudio\\11.0\\dws.exe\n\nnetwork activity\n\n2014-2015 variants:\n\nreckless.dk/wp-includes/class-pomo.php\n\nreckless.dk/wp-includes/class.wp-db.php\n\nfishstalk.esy.es/wp-content/plugins/bbpress/includes/common/menu.php\n\nfishstalk.esy.es/wp-includes/SimplePie/Net/IPv4.php\n\n77-ufo.com/wp-includes/class-menu.php\n\n77-ufo.com/pma/db_table.php\n\nscientific.otzo.com/rss.php\n\n[23]\n\nWhite Paper\fSHA1 hashes of all known variants\n\n0641f22e1b4e15cc23660b2e8bbf42623e997dfb\n\nc4b06021c6c925c837dab3ba42c6b76eb77ad30b\n\n0af1a6d6c487e78aa252ae2f5921606a8a379206\n\nc5166d1a574bc5e374490846f2584f94f755d90b\n\n100241519698bb013f668ff49d3d0d4fdab6a584\n\nc9b1208be2aa2c5cfbcbfcb9b1a45c36854414b8\n\n14014f810a0c07b6dde48b7a8954b56c409ae7f3\n\nce234ed0899c8f97e3f2085215b842723a773368\n\n16c6d317fd7c361623c62cf5652a6b7937f58e0a\n\nd80d5ccb9d37d971a408d3c91f803e40b8421a2c\n\n22c565e2cfb8adadd022b0ec281bb2b6ed62dca2\n\nd83d7de186fa6c7abe4676eb568ba4dc62a7c931\n\n23ce92fd1d4d2d42389a66869434fb578aa3f539\n\ne20b0f03f6708118bca9f408b156b210ba083b54\n\n261a8fc8e0e396298120a7bc15c32a37f3ce5b94\n\neacadedc31af04ef86470aec62ad3eccc9a35332\n\n2a9c8639215faf08593f17b930f83757324dfbee\n\neb0f02e36e77221366becabc60e78dd43368ab9d\n\n2ad7262ad52320399aa54cd8482c30e7a480bebc\n\neb1b83825ff28de7f13812bfce273ad7fb1994fb\n\n2eb5a075b710155c409e727e7f74fdc3be63b58c\n\nede8ec9f3efeb515859becd1f430f82933b42dd9\n\n325b1075b4544ecc2c5741a7a06a9df00f0965da\n\nedf96c42f4e1cf43fbaab3f0bbf54280fc8e311d\n\n336d5957909487990033a3432d0347be34db044a\n\neea9fec97dca5d122069adf6dd71628bd6d9c2fd\n\n368b746daf5448812b231aed67bd795dfb5a605d\n\nf9af4a51616db485adc577ad600b60e77916cace\n\n38d16c19b54bf2c94e0ad81fca207de062181b31\n\nfbd538cf432f2576b37e2770f860b70b009c3cf3\n\n4880a13c4e1cde0343c233f5e107abf4e3d00664\n\n01e2e16be5828ca03c6b78f253bd962bfaa5ccbf\n\n49f0569886e5e6ba4b32b7f118dc35f9e5916dc2\n\n09df1b0abd32791c3b0d5d657cd956f81e2dacb2\n\n4eecebf5c9720c8e85347e0dcf55a844a6d01b08\n\n0a9dd2b71df68ba088d7d868d7e191875755e34c\n\n5374b898dbb618aa84d92f7a3e9d166e9e819960\n\n14b6f2bc2b869d3417619201c7205e240a93d2ef\n\n54ac8caeae8046e01301379602041c74ee527dfc\n\n1ae10d6ec5d33b704c32ef52c3ee9671f4298d5f\n\n5617c1414cb79411c64883ee72d219d52123fa30\n\n1e49924afe56e3c782893118a51256ca5f247fba\n\n583036a7c9b210508c222c7dfdd9b8321feca7df\n\n23d5cc54641f56f554890bbd55d580e5c564e197\n\n58952be65d0ed53490f69f566485c699f246dcc0\n\n26f8d64038439c006f12ec34b035b1dee1c56b31\n\n5a6b14fad221ab65a086b1ee7c97eb63ff38480e\n\n272c42bcdcc88adba1e01e60a931fbe5f5800883\n\n5aaa055fa5eb9a436ca0e643bf2ada268bcd6f33\n\n2a84f90ed23a569defee7b37f4650aca4021a767\n\n5bcc6da122b3aa88c766d80eb7774c2c6e9e25d5\n\n2bf06a003a9bd56d2ed91770966a7aee7d9784b9\n\n623185a651a1962538141d7ffefdc2f2445a9201\n\n321ca51b4c250515bc3075abe735e360a57dee22\n\n66a7642abaf3d05d5ab14e83dfd52eca0c17acc6\n\n33f57151a52666ca055f1dc66ef04e2f9cb09918\n\n67e9e098c2b39b5847f6cd3aa5a3f86917602f5f\n\n3e10fd3e8d4c4a7900e603aee7660c83441d998e\n\n6a2d12adc541c9c5aaa1096d7e59c72c489cdd59\n\n3fbaf98c75992db9db11d29ae20c13b7b0f50470\n\n713855aa5680154324bfcbac638aa1c12681e3c3\n\n443551d822eba6a81b8ac3177e31e210c99934d0\n\n7674f680fd0c24c222c027976c40ffe1e08c6f2e\n\n45c7f3f065cf015289ab17161a1880eb638b508a\n\n7abf407b9a19dd9ee528fa6e5a099ea1c8ba2f98\n\n46f1b8722f8f094015c749599e94a3e44850df0a\n\n80091e1b7b4dd404c83a9c54fda9e6951b2689b1\n\n4f35665e689bea4f116505f81ae2906fd1517128\n\n852dc73ca9e6d92b3da96500d27ab44b7f9a4ea4\n\n547f525f57f3f47222ae3ab253635df936bd355a\n\n85c03c6fa5e3803e55a46f17d6981992181de57b\n\n585550816539b73dfdc3cee80cc60e1cdc1cdb3e\n\n88af035dc34f730c884b5a11c8be666974a1a6eb\n\n5d492ae763bfc227db9eea46e560124128ff925b\n\n88fd1ee6fb78385a1c5e462dd0768bc34b8188a3\n\n5ff776d23e6c6af47619ad2e7333a434b79e19df\n\n8c4dd73cdd48908ddf5039c5a99e719dfd44ff41\n\n621698f821a2bafccad026f9f5d2fe1ac46a39ce\n\n8d40a65a2bca1378eb6e009c1842aa0e45ae289e\n\n66ec04c005d0a1ebc218455915e31d2a2b6dd459\n\na5359856742d09d1596e5c7fde407856d72046db\n\n686ada60c898782b57ca993141b64f7c7a531c50\n\na9239572afe4fbdfe077a262c9699eb1d22a9c87\n\n6c68a9df2d710187d067ecb2d0cc04358d570b52\n\nacc2250be782063f268b87bd0f798549c5838b95\n\n6e070e01076a4a92f08924a405f389436003d927\n\naecf66120861b71c92a2d1f0015fc9228c02ee88\n\n78499e4694f847972576960a04f8177691a7c911\n\nb2700f16e4494ef7eba26b88a800728621adffea\n\n840563929f13ab05e45a8d3fb2d11e70e3cdccca\n\nb4afc5e0002201ce052466cba9061018474b1de0\n\n840de34aa767131eb34069e6f936dea3a48c024e\n\nb55dac24f646dd5e0ea856d6ed7891ad8c8acdc1\n\n85a6e3a3fcee71ffa2aad90336960132fa8f4c4d\n\nb84ef6480d888b560b071e1f97e78f06080dae89\n\n88f473f3d7a7eb2637754a8d0856ab888066ab08\n\nc340534b8eafed85fc6e9950033b0b9e696d5cb0\n\n8f8d7cd742fb843ba8cb16c2b2d6349436049ed8\n\n[24]\n\nWhite Paper\f8ffd436182f8d2a7ec0a66c0d6d43f71222f62b5\n\nb719e1d03e860235a68dda4168f29ac4988d25de\n\n92731e4ed149c59a25c233635c55a87a8a22b19f\n\nba29c29a35d15a668ea2ea79d1d4e56c2d67553f\n\n96d9cf7296f02bf4e49c0540fb84981493b61a93\n\nbca5accb9f1d0806f8603cf74ce0ebe9519f5004\n\n9957af2dbfa04bca2a5319a216852ce4f4a17682\n\nbe10c837af1f25ee67440f3a33da8c650f5ab54a\n\n9b0effd20ea7239275b6cf1e02280eb67eced701\n\nc34a68c1a2d2beddbbe8ee8bd125cce14d0dc377\n\na5daecfd57f006acd15486bd544f40e4cdce3801\n\nc3bc94b065449879c25a541d740346e060d9d6fe\n\na753de6b2e6d3d5735fc5e90a879f1ad7e93fb0f\n\nc414ba1dd1f281a63e58c60eb1d8cb4ac3c4e7f0\n\nb0b9215e236bb47f5f0a108be97b24d20898d2fc\n\nc7accc1c4ceedc756c30ebb2f1ff9f0dbd0255b0\n\nb35b07ad4f42493ecb19f66aba83da8e74c1bb5a\n\nc8395601ea301ba083cb530dad7a44c8048eeb77\n\nb4e867893d9d6f8b52de98ab6b41513d61f20472\n\nca07bbfc5e8c15c4258f92e6e6c328b86b7b19a5\n\nccf0a302eb264cbb5db726d61ad18ebdc0d3d012\n\nd53eb2a6904d1fb7982bb876916cd3723c3dc9b1\n\nd6d3d9a56513b83db497a8d4701c2ac7270d78eb\n\nd7218e80261517badd8090d3a5ba0a1ed21c21a2\n\nd74d8ec530c02b1eb94203de1f641e15a72faf8d\n\ne32832e3f0e0b8450e7bdded16c441951b171130\n\neda30afac2c1fa0ed2c80e8859e2556ea3dfe2ef\n\nee1f5ba06400fa192664f984d71b1a0cdba96d75\n\nf781e603c55558708ac3101d0bfee2c1752693c2\n\nfdb9d026502aa64aa23b1acb96f6d0013ef874b4\n\n[25]\n\nWhite Paper\fClean documents opened by droppers\n\nInvitation to event organized by the UK embassy in Ashgabat:\n\n[26]\n\nWhite Paper\fCar for sale:\n\n[27]\n\nWhite Paper\f23rd International Caspian Oil & Gas Conference\n\nPresentation for a real conference that took place on 1-4 June 2016 in Azerbaijan, Baku. Picture and text are taken from official page \n\nof conference organizers.\n\n[28]\n\nWhite Paper\fAustralia - Korea Foundation, foreign affairs position, interview guidelines\n\nData seems to be taken from Australian Government, Department of Foreign Affairs and Trade. \n\n[29]\n\nWhite Paper\fInternational politics\n\nText is a Bloomberg news story from October 24th: Bulgaria, Romania and Serbia Ready to Close Borders for Migrants.\n\n[30]\n\nWhite Paper\fBudget plan template\n\nThis one looks as a budget calculation template taken from \u201cRelations internationals et Francophonie\u201d of Qu\u00e9bec.\n\n[31]\n\nWhite Paper\fBitdefender is a global security technology company that delivers solutions in more than 100 countries through a network of value-added alliances, distributors and \n\nreseller partners. Since 2001, Bitdefender has consistently produced award-winning business and consumer security technology, and is a leading security provider in \n\nvirtualization and cloud technologies. Through R&D, alliances and partnership teams, Bitdefender has elevated the highest standards of security excellence in both its \n\nnumber-one-ranked technology and its strategic alliances with the world\u2019s leading virtualization and cloud technology providers. More information is available at  \n\nhttp://www.bitdefender.com/\n\nAll Rights Reserved. \u00a9 2015 Bitdefender. All trademarks, trade names, and products referenced herein are property of their respective owners.   \nFOR MORE INFORMATION VISIT: enterprise.bitdefender.com\n\n5\n8\n5\n0\n7\n\n:\n\n.\n\n.\n\n#\nk\nT\n-\n6\n1\n0\n2\n0\n3\nn\nu\nJ\n-\ns\ns\ne\nn\ns\nu\nB\nD\nB\n\n-\n\ni\n\n\f"], "URLs": ["http://fishstalk.esy.es/wp-content/plugins/bbpress/includes/common/menu.php", "http://reckless.dk/wp-includes/class-pomo.php", "http://77-ufo.com/pma/db_table.php", "http://fishstalk.esy.es/wp-includes/SimplePie/Net/IPv4.php", "http://77-ufo.com/wp-includes/class-menu.php", "http://reckless.dk/wp-includes/class.wp-db.php", "http://www.bitdefender.com/"], "weight": 0.0}