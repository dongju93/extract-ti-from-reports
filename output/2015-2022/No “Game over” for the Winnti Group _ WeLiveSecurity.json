{"rule_id": 484, "name": "No \u201cGame over\u201d for the Winnti Group _ WeLiveSecurity", "description": "-", "references": [], "File_Names": ["setup0.exe", "dDll.pdb", "Main.pdb", "B0SDFUWEkNCj.logN", "osksupport.dll", "Core.dll", "AceHash64.exe", "103.exe", "EntAppsvc.dll", "Slack.exe", "PrintDialog.exe", "www2.dyn", "Net.dll", "cation.pdb", "setup.dll", "tion.pdb", "PrintDialog.dll", "banner.bmp", "DEment.dll", "NTFSSSE.log", "License.hwp", "certi\ufb01cate.cert", "Win32CmdDll.dll", "mz64x.exe", "Win32CmDll.dll", "100.exe", "taskhostw.exe", "er.com", "nc.dll", "lcrest.com", "t.pdb", "ssl2.dyn", "CrLnc.dat", "Interactive.dll", "l.pdb", "B0SDFUWEkNCj.log"], "MD5_Hashes": [], "SHA1_Hashes": ["C7A9DCD4F9B2F26F50E8DD7F96352AEC7C4123FE", "5BB96743FEB1C3375A6E2660B8397C68BEF4AAC2", "729D526E75462AA8D33A1493B5A77CB28DD654BC", "E422CC1D7B2958A59F44EE6D1B4E10B524893E9D", "534CD47EB38FEE7093D24BAC66C2CF8DF24C7D03", "53C5AE2655808365F1030E1E06982A7A6141E47F", "C887B35EA883F8622F7C48EC9D0427AFE833BF46", "b02ad3e8b1cf0b78ad9239374d535a0ac57bf27e", "23789B2C9F831E385B22942DBC22F085D62B48C7", "D24BBB898A4A301870CAB85F836090B0FC968163", "FD4567BB77F40E62FD11BEBF32F4C9AC00A58D53", "2B0481C61F367A99987B7EC0ADE4B6995425151C", "48230228B69D764F71A7BF8C08C85436B503109E", "C03BE8BB8D03BE24A6C5CF2ED14EDFCEFA8E8429", "745EAC99E03232763F98FB6099F575DFC7BDFAA3", "2830DE648BF0A521320036B96CE0D82BEF05994C", "3508EB2857E279E0165DE5AD7BBF811422959158", "78F4ACD69DC8F9477CAB9C732C91A92374ADCACD", "6c97039605f93ccf1afccbab8174d26a43f91b20", "7ca43f3612db0891b2c4c8ccab1543f581d0d10c", "5663AF9295F171FDD41A6D819094A5196920AA4B", "B56D8F826FA8E073E6AD1B99B433EAF7501F129E", "AF9C220D177B0B54A790C6CC135824E7C829B681", "168101B9B3B512583B3CE6531CFCE6E5FB581409", "751A9CBFFEC28B22105CDCAF073A371DE255F176", "E17972F1A3C667EEBB155A228278AA3B5F89F560", "4A240EDEF042AE3CE47E8E42C2395DB43190909D", "44D0A2A43ECC8619DE8DB99C1465DB4E3C8FF995", "4B90E2E2D1DEA7889DC15059E11E11353FA621A6"], "SHA256_Hashes": [], "Registry_Entries": ["HKLM\\SYSTEM\\ControlSet001\\Control\\Print\\Environments\\Windows x64\\Print Processors\\PrintFiiterPipelineSvc\\Driver =\n\u201cDEment.dll\u201d\n\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\lltdsvc1\\Driver =\n\u201cEntAppsvc.dll\u201d\n\nHKLM\\SOFTWARE\\Microsoft\\Print\\Components\\DC20FD7E-4B1B-4B88-8172-61F0BED7D9E8\nHKLM\\SOFTWARE\\Microsoft\\Print\\Components\\A66F35-4164-45FF-9CB4-69ACAA10E52D\n\nSamples\n\nFirst stage\n\n4B90E2E2D1DEA7889DC15059E11E11353FA621A6\nC7A9DCD4F9B2F26F50E8DD7F96352AEC7C4123FE\n3508EB2857E279E0165DE5AD7BBF811422959158\n729D526E75462AA8D33A1493B5A77CB28DD654BC\n5663AF9295F171FDD41A6D819094A5196920AA4B\n\nPipeMon\n\n23789B2C9F831E385B22942DBC22F085D62B48C7\n53C5AE2655808365F1030E1E06982A7A6141E47F\nE422CC1D7B2958A59F44EE6D1B4E10B524893E9D\n5BB96743FEB1C3375A6E2660B8397C68BEF4AAC2\n78F4ACD69DC8F9477CAB9C732C91A92374ADCACD\nB56D8F826FA8E073E6AD1B99B433EAF7501F129E\n534CD47EB38FEE7093D24BAC66C2CF8DF24C7D03\n\nPipeMon encrypted binaries\n\n168101B9B3B512583B3CE6531CFCE6E5FB581409\nC887B35EA883F8622F7C48EC9D0427AFE833BF46\n44D0A2A43ECC8619DE8DB99C1465DB4E3C8FF995\nE17972F1A3C667EEBB155A228278AA3B5F89F560\nC03BE8BB8D03BE24A6C5CF2ED14EDFCEFA8E8429\n2B0481C61F367A99987B7EC0ADE4B6995425151C\n\nAdditional tools\n\nWinEggDrop\n\nAF9C220D177B0B54A790C6CC135824E7C829B681\n\nMimikatz\n\n4A240EDEF042AE3CE47E8E42C2395DB43190909D\nFD4567BB77F40E62FD11BEBF32F4C9AC00A58D53\n\nNetcat\n\n751A9CBFFEC28B22105CDCAF073A371DE255F176\n\nHTran\n\nhttps://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/\n\n14/16\n\n\f5/21/2020\n\nNo \u201cGame over\u201d for the Winnti Group | WeLiveSecurity\n\n48230228B69D764F71A7BF8C08C85436B503109E\n\nAceHash\n\nD24BBB898A4A301870CAB85F836090B0FC968163\n\nCode-signing certi\ufb01cate SHA-1 thumbprints\n\n745EAC99E03232763F98FB6099F575DFC7BDFAA3\n2830DE648BF0A521320036B96CE0D82BEF05994C\n\nC&C domains\n\nn8.ahnlabinc[.]com\nowa.ahnlabinc[.]com\nssl2.ahnlabinc[.]com\nwww2.dyn.tracker[.]com\nssl2.dyn-tracker[.]com\nclient.gnisoft[.]com\nnmn.nhndesk[.]com\n\nC&C IP addresses\n\n154.223.215[.]116\n203.86.239[.]113\n\nMITRE ATT&CK techniques\n\nTactic\n\nID\n\nName\n\nDescription\n\nPersistence\n\nT1013 Port Monitor\n\nPipeMon uses a persistence technique similar to Port\nMonitor based on Print Processors.\n\nPrivilege\nEscalation\n\nT1134 Access Token\nManipulation\n\nThe PipeMon installer tries to gain administrative privi\u2010\nleges using token impersonation.\n\nT1088 Bypass User Account\n\nControl\n\nThe PipeMon installer uses UAC bypass techniques to\ninstall the payload.\n\nT1502 Parent PID Spoo\ufb01ng\n\nThe PipeMon installer uses parent PID spoo\ufb01ng to ele\u2010\nvate privileges.\n\nDefense\nEvasion\n\nT1116 Code Signing\n\nPipeMon, its installer and additional tools are signed\nwith stolen code-signing certi\ufb01cates.\n\nT1027 Obfuscate Files or\nInformation\n\nT1112 Modify Registry\n\nPipeMon modules are stored encrypted on disk.\n\nThe PipeMon installer modi\ufb01es the registry to install\nPipeMon as a Print Processor.\n\nT1055 Process Injection\n\nPipeMon injects its modules into various processes us\u2010\ning re\ufb02ective loading.\n\nDiscovery\n\nT1057 Process Discovery\n\nPipeMon iterates over the running processes to \ufb01nd a\nsuitable injection target.\n\nT1063 Security Software\ndiscovery\n\nPipeMon checks for the presence of ESET and Kasper\u2010\nsky software.\n\nhttps://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/\n\n15/16\n\n\f5/21/2020\n\nNo \u201cGame over\u201d for the Winnti Group | WeLiveSecurity\n\nTactic\n\nID\n\nName\n\nDescription\n\nCollection\n\nT1113 Screen Capture\n\nOne of the PipeMon modules is likely a screenshotter.\n\nCommand\nand Control\n\nT1043 Commonly Used Ports\n\nPipeMon communicates through port 443.\n\nT1095 Custom Command and\nControl Protocol\n\nPipeMon communication module uses a custom proto\u2010\ncol based on TLS over TCP.\n\nT1032 Standard Cryptographic\n\nPipeMon communication is RC4 encrypted.\n\nProtocol\n\nT1008 Fallback Channels\n\nThe updated PipeMon version uses a fallback channel\nonce a particular date is reached.\n\nhttps://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/\n\n16/16\n\n\f", "HKLM\\SYSTEM\\ControlSet001\\Control\\Print\\Environments\\Windows x64\\Print Processors\\PrintFiiterPipelineSvc\\Driver =\n\u201cDEment.dll\u201d\n\nor\n\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\lltdsvc1\\Driver =\n\u201cEntAppsvc.dll\u201d\n\ndepending on the variant. Note the typo in PrintFiiterPipelineSvc (which has no impact on the Print Processor installation\nsince any name can be used).\n\nAfter having registered the Print Processor, PipeMon restarts the print spooler service (spoolsv.exe). As a result, the\nmalicious print process is loaded when the spooler service starts. Note that the Print Spooler service starts at each PC\nstartup, which ensures persistence across system resets.\n\nThis technique is really similar to the Print Monitor persistence technique (being used by DePriMon, for example) and, to\nour knowledge, has not been documented previously.\n\nAdditionally, the encrypted payload, CrLnc.dat, extracted from the RARSFX is written to the registry at the following\nlocation, depending on the installer:\n\nHKLM\\SOFTWARE\\Microsoft\\Print\\Components\\DC20FD7E-4B1B-4B88-8172-61F0BED7D9E8\nHKLM\\SOFTWARE\\Microsoft\\Print\\Components\\A66F35-4164-45FF-9CB4-69ACAA10E52D\n\nThis encrypted registry payload is then loaded, decrypted and executed by the previously registered Print Processor\nlibrary. The whole PipeMon staging and persistence is shown in Figure 1.\n\nFigure 1. PipeMon staging and persistence\n\nPipeMon\n\nWe named this new implant PipeMon because it uses multiple named pipes for inter-module communication and\naccording to its PDB path, the name of the Visual Studio project used by its developer is \u201cMonitor\u201d.\n\nAs mentioned previously, two different PipeMon variants were found. Considering the \ufb01rst variant, we couldn\u2019t retrieve the\ninstaller; thus, we don\u2019t know for sure the persistence technique that was used. But considering that this \ufb01rst variant of\nPipeMon was also located in the Print Processor directory, it\u2019s likely that the same persistence mechanism was used.\n\nOriginal variant\n\nPipeMon is a modular backdoor where each module is a single DLL exporting a function called IntelLoader and is loaded\nusing a re\ufb02ective loading technique. Each module exhibits different functionalities that are shown in Table 2.\n\nhttps://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/\n\n3/16\n\n\f5/21/2020\n\nNo \u201cGame over\u201d for the Winnti Group | WeLiveSecurity\n\nThe loader, responsible for loading the main modules (ManagerMain and GuardClient) is Win32CmdDll.dll and is located\nin the Print Processors directory. The modules are stored encrypted on disk at the same location with inoffensive-looking\nnames such as:\n\nbanner.bmp\ncerti\ufb01cate.cert\nLicense.hwp\nJSONDIU7c9djE\nD8JNCKS0DJE\nB0SDFUWEkNCj.logN\n\nNote that .hwp is the extension used by Hangul Word Processor from Hangul Of\ufb01ce, which is very popular in South\nKorea.\n\nThe modules are RC4 encrypted and the decryption key Com!123Qasdz is hardcoded into each module. Win32CmDll.dll\ndecrypts and injects the ManagerMain and GuardClient modules. The ManagerMain module is responsible for decrypting\nand injecting the Communication module, while the GuardClient module will ensure that the Communication module is\nrunning and reload it if necessary. An overview of how PipeMon operates is shown in Figure 2.\n\nWin32CmDll.dll \ufb01rst tries to inject the ManagerMain and GuardClient modules into a process with one of the following\nnames: lsass.exe, wininit.exe or lsm.exe. If that fails, it tries to inject into one of the registered windows services\nprocesses, excluding processes named spoolsv.exe, ekrn.exe (ESET), avp.exe (Kaspersky) or dllhost.exe. As a last\noption, if everything else failed, it tries to use the processes taskhost.exe, taskhostw.exe or explorer.exe.\n\nThe process candidates for Communication module injection must be in the TCP connection table with either 0.0.0.0 as\nthe local address, or an ESTABLISHED connection and owning a LOCAL SERVICE token. \u00a0These conditions are likely\nused to hide the Communication module into a process that is already communicating over the network so that the traf\ufb01c\nfrom the Communication module would seem inconspicuous and possibly also whitelisted in the \ufb01rewall. If no process\nmeets the previous requirements, the ManagerMain module tries to inject the Communication module into explorer.exe.\nProcesses belonging to the Windows Store Apps and processes named egui.exe (ESET) and avpui.exe (Kaspersky) are\nignored from the selection.\n\nTable 2. PipeMon module descriptions and their respective PDB paths\n\nMod\u2010\nule\nName Description\n\nDecrypts and loads the ManagerMain and GuardClient modules.\n\nWin32\nCmd\u2010\nDll\n\nGuard\nClient\n\nPeriodically checks whether the Communication module is running\nand loads it if not.\n\nMan\u2010\nager\u2010\nMain\n\nLoads Communication module when executed. Contains encrypted\nC&C domain which is passed to the Communication module via\nnamed pipe.\nCan execute several commands based on the data received from\nthe Communication module (mostly system information collecting,\ninjecting payloads).\n\nPDB Path\n\nS:\\Monitor\\Monitor_RAW\\Lau\nncher\\x64\\Release\\Win32Cm\ndDll.pdb\nS:\\Monitor\\Monitor_RAW\\libs\\\nx64\\Release\\Win32CmdDl\u2010\nl.pdb\n\nS:\\Monitor\\Monitor_RAW\\Clie\nnt\\x64\\Release\\GuardClien\u2010\nt.pdb\n\nS:\\Monitor\\Monitor_RAW\\Clie\nnt\\x64\\Release\\Manager\u2010\nMain.pdb\n\nhttps://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/\n\n4/16\n\n\f5/21/2020\n\nNo \u201cGame over\u201d for the Winnti Group | WeLiveSecurity\n\nMod\u2010\nule\nName Description\n\nCom\u2010\nmuni\u2010\ncation\n\nResponsible for managing communication between the C&C server\nand individual modules via named pipes.\n\nPDB Path\n\nS:\\Monitor\\Monitor_RAW\\Clie\nnt\\x64\\Release\\Communica\u2010\ntion.pdb\nF:\\PCC\\trunk\\Communication\u2010\nClient\\x64\\Release\\Communi\u2010\ncation.pdb\n\nAdditional modules can be loaded on-demand using dedicated commands (see below), but unfortunately, we weren\u2019t\nable to discover any of them. The names of these modules are an educated guess based on the named pipes used to\ncommunicate with them:\n\nScreen\nRoute\nCMD\nInCmd\nFile\n\nInter-module communication\n\nInter-module communication is performed via named pipes, using two named pipes per communication channel between\neach individual module, one for sending and one for receiving. Table 3 lists the communication channels and their\ncorresponding named pipes.\n\nTable 3. PipeMon communication channel and their respective named pipes\n\nCommunication channel\n\nNamed pipe\n\nCommunication, Screen\n\n\\\\.\\pipe\\ScreenPipeRead%CNC_DEFINED% \n\\\\.\\pipe\\ScreenPipeWrite%CNC_DEFINED%\n\nCommunication, Route\n\n\\\\.\\pipe\\RoutePipeWriite%B64_TIMESTAMP%\n\nCommunication, ManagerMain \\\\.\\pipe\\MainPipeWrite%B64_TIMESTAMP% \n\\\\.\\pipe\\MainPipeRead%B64_TIMESTAMP%\n\nGuardClient, ManagerMain\n\n\\\\.\\pipe\\MainHeatPipeRead%B64_TIMESTAMP%\n\nCommunication, InCmd\n\n\\\\.\\pipe\\InCmdPipeWrite%B64_TIMESTAMP% \n\\\\.\\pipe\\InCmdPipeRead%B64_TIMESTAMP%\n\nCommunication, File\n\n\\\\.\\pipe\\FilePipeRead%B64_TIMESTAMP% \n\\\\.\\pipe\\FilePipeWrite%B64_TIMESTAMP%\n\nGuardClient, Communication\n\n\\\\.\\pipe\\ComHeatPipeRead%B64_TIMESTAMP%\n\nCommunication, CMD\n\n\\\\.\\pipe\\CMDPipeRead\n\\\\.\\pipe\\CMDPipeWrite\n\nThe %CNC_DEFINED% string is received from the C&C server and %B64_TIMESTAMP% variables are base64-\nencoded timestamps such as the ones shown in Table 4.\n\nTable 4. Example timestamps used with named pipes\n\n%BASE64_TIMESTAMP% Decoded timestamp\n\nMjAxOTAyMjgxMDE1Mzc= 20190228101537\n\nhttps://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/\n\n5/16\n\n\f5/21/2020\n\nNo \u201cGame over\u201d for the Winnti Group | WeLiveSecurity\n\n%BASE64_TIMESTAMP% Decoded timestamp\n\nMjAxOTA1MjEyMzU2MjQ= 20190521235624\n\nMjAxOTExMjExMjE2MjY=\n\n20191121121626\n\nFigure 2. PipeMon IPC scheme (original PipeMon variant)\n\nC&C communication\n\nThe Communication module is responsible for managing communications between the C&C server and the other\nmodules via named pipes, similar to the PortReuse backdoor documented in our white paper on the Winnti arsenal.\n\nIts C&C address is hardcoded in the ManagerMain module and encrypted using RC4 with the hardcoded key\nCom!123Qasdz. It is sent to the Communication module through a named pipe.\n\nA separate communication channel is created for each installed module. The communication protocol used is TLS over\nTCP. The communication is handled with the HP-Socket library. All the messages are RC4 encrypted using the\nhardcoded key. If the size of the message to be transferred is greater than or equal to 4KB, it is \ufb01rst compressed using\nzlib\u2019s De\ufb02ate implementation.\n\nhttps://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/\n\n6/16\n\n\f5/21/2020\n\nNo \u201cGame over\u201d for the Winnti Group | WeLiveSecurity\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\nstruct CCMSG\n\n{\n\n\u00a0\u00a0\u00a0\u00a0BYTE is_compressed;\n\n\u00a0\u00a0\u00a0\u00a0CMD cmd;\n\n};\n\nstruct CMD\n\n{\n\n\u00a0\u00a0\u00a0\u00a0QWORD cmd_type;\n\n\u00a0\u00a0\u00a0\u00a0DWORD cmd_size;\n\n10\n\n\u00a0\u00a0\u00a0\u00a0DWORD cmd_arg;\n\n11\n\n\u00a0\u00a0\u00a0\u00a0BYTE data[cmd_size - 16];\n\n12\n\n};\n\n13\n\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\nstruct beacon_msg\n\n{\n\n\u00a0\u00a0\u00a0\u00a0BYTE isCompressed = 0;\n\n\u00a0\u00a0\u00a0\u00a0CMD cmd_hdr;\n\n\u00a0\u00a0\u00a0\u00a0WCHAR win_version[128];\n\n\u00a0\u00a0\u00a0\u00a0WCHAR adapters_addrs[128];\n\n\u00a0\u00a0\u00a0\u00a0WCHAR adapters_addrs[64];\n\n\u00a0\u00a0\u00a0\u00a0WCHAR local_addr[64];\n\n\u00a0\u00a0\u00a0\u00a0WCHAR malware_version[64];\n\n10\n\n\u00a0\u00a0\u00a0\u00a0WCHAR computer_name[64];\n\n11\n\n}\n\nFigure 3. C&C message and beacon formats\n\nTo initiate communication with the C&C server, a beacon message is \ufb01rst sent that contains the following information:\n\nOS version\nphysical addresses of connected network adapters concatenated with %B64_TIMESTAMP%\nvictim\u2019s local IP address\nbackdoor version/campaign ID; we\u2019ve observed the following values\n\n\u201c1.1.1.4beat\u201d\n\u201c1.1.1.4Bata\u201d\n\u201c1.1.1.5\u201d\nVictim computer name\n\nhttps://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/\n\n7/16\n\n\f5/21/2020\n\nNo \u201cGame over\u201d for the Winnti Group | WeLiveSecurity\n\nThe information about the victim\u2019s machine is collected by the ManagerMain module and sent to the Communication\nmodule via the named pipe. The backdoor version is hardcoded in the Communication module in cleartext.\n\nThe format of the beacon message is shown in Figure 3 and the supported commands are shown in Table 5.\n\nTable 5. List of commands\n\nCommand type Command argument Description\n\n0x02\n\n0x03\n\n0x03\n\n0x04\n\n0x04\n\n0x05\n\n0x06\n\n0x06\n\n0x06\n\n0x07\n\n0x09\n\n0x0C\n\n0x0C\n\n0x0C\n\n0x03\n\n0x03\n\n0x0B\n\n0x02\n\n0x03\n\n*\n\n0x05\n\n0x06\n\n0x07\n\n*\n\n*\n\n0x15\n\n0x16\n\n0x17\n\nInstall the File module\n\nInstall the CMD module\n\nInstall the InCmd module\n\nQueue command for the Route module\n\nInstall the Route module\n\nSend victim\u2019s RDP information to the C&C server\n\nSend OS, CPU, PC and time zone information to the C&C server\n\nSend network information to the C&C server\n\nSend disk drive information to the C&C server\n\nSend running processes information to the C&C server\n\nDLL injection\n\nSend names of "], "URLs": ["https://www.welivesecurity.com/2020/05/21/no-game-over-winnti-group/"], "weight": 0.0}