{"rule_id": 325, "name": "paper_the-shadows-of-ghosts-carbanak-report", "description": "-", "references": ["CVE-2016-5165"], "File_Names": ["ps.bmp", "audit.log", "PSEXESVC.EXE", "tinyp_unique_command_line_arguments.sql", "PSEXESVC.exe", "repo.org", "sshd.bak", "tinyp1.bmp", "_out.log", "forcepoint.com", "xname.txt", "tineyp3.bmp", "ctlmon_v2.exe", "UIAutomationCore.dll", "slpar.org", "auditunnel_init.lua", "ctlmon_v3.exe", "RSA_IR_Carbanak_Domain.xml", "risk.info", "TINYP2.bmp", "persistence.html", "pscp.bin", "046.html", "xxx64.exe", "psexesvc.exe", "image64.bmp", "RSA_IR_Digital_Appendix.zip", "tinyp4.bmp", "Infos.bmp", "ti1.bmp", "infos.bmp", "RSA_IR_Carbanak_IP.xml", "psexec_winexe_remote_service_creation.sql", "0xbscured.net", "auth.log", "qwinsta.exe", "svcmd.exe", "apache.org", "xxx32.exe", "gotroj_beacon_parser.lua", "ccs.bmp", "1.sh", "RSA_IR_Carbanak_IP.csv", "bankinfosecurity.com", "tinyp2.bmp", "RSA_IR_Carbanak_Domain.csv", "WINEXESVC.EXE", "ctlmon.exe", "pscan.bmp", "fin7_spear_phishing.html", "TINYP2.bin", "UIAUTOMATIONCORE.DLL", "image32.bmp"], "MD5_Hashes": ["6499863d47b68030f0c5ffafaffb1344", "8B3A91038ECB2F57DE5BBD29848B6DC4", "1BD7D0C3023C55B5DF0201CC5D7BBCE1", "ab8bed25f9ff64a4b07be5d3bc34f26b", "E3C061FA0450056E30285FD44A74CD2A", "f9766140642c24d422e19e9cf35f2827", "5DDF9683692154986494CA9DD74B588F", "d66e31794836dfd2c344d0be435c6d12", "c4d746b8e5e8e12a50a18c9d61e01864", "0F1C4A2A795FB58BD3C5724AF6F1F71A", "0810d239169a13fc0e2e53fc72d2e5f0", "D406E037F034B89C85758AF1A98110BE", "a365fd9076af4d841c84accd58287801", "BD126A7B59D5D1F97BA89A3E71425731", "5ddf9683692154986494ca9dd74b588f", "8b3a91038ecb2f57de5bbd29848b6dc4", "370D420948672E04BA8EAC10BFE6FC9C", "9E2E4DF27698615DF92822646DC9E16B", "7393CB0F409F8F51B7745981AC30B8B6", "0f1c4a2a795fb58bd3c5724af6f1f71a", "d406e037f034b89c85758af1a98110be", "AD4B3B859FA85957B479D824E19C9957", "209BC26396E838E4B665FE3D1CCF7787", "A365FD9076AF4D841C84ACCD58287801", "6499863D47B68030F0C5FFAFAFFB1344", "D825FBD90087D2350E89CBF205A1B71C", "9e2e4df27698615df92822646dc9e16b", "F9766140642C24D422E19E9CF35F2827", "752D245F1026482A967A763DAE184569", "EDCE844A219C7534E6A1E7C77C3CB020", "752d245f1026482a967a763dae184569", "771fa63231fb42ee97aa17818a53f432", "90D4CC6D4B81B8C462F5AA7166FEE6FB", "edce844a219c7534e6a1e7c77c3cb020", "7393cb0f409f8f51b7745981ac30b8b6", "370d420948672e04ba8eac10bfe6fc9c", "D66E31794836DFD2C344D0BE435C6D12", "C4D746B8E5E8E12A50A18C9D61E01864", "d825fbd90087d2350e89cbf205a1b71c", "bd126a7b59d5d1f97ba89a3e71425731", "b3135736bcfdab27f891dbe4009a8c80", "B3135736BCFDAB27F891DBE4009A8C80", "0810D239169A13FC0E2E53FC72D2E5F0", "C01FD758ABB423C8336EE1BD5035A6C7", "b57dc2bc16dfdb3de55923aef9a98401", "AB8BED25F9FF64A4B07BE5D3BC34F26B", "EB87856732236E1AC7E168FE264F1B43", "771FA63231FB42EE97AA17818A53F432", "B57DC2BC16DFDB3DE55923AEF9A98401"], "SHA1_Hashes": ["08f527bef45cb001150ef12ad9ab91d1822bb9c7", "450605b6761ff8dd025978f44724b11e0c5eadcc", "c020f8939f136b4785dda7b2e4b80ced96e23663", "ca5e195692399dca99a4d8299dc9ff816168a6dc", "6c17113f66efa5115111a9e67c6ddd026ba9b55d", "039f814cdd4ac6f675c908067d5be1d6f9acc31f", "54074b3934955d4121d1a01fe2ed5493c3f7f16d", "96e56c39f38b4ef5ac4196ca12742127f286c6fa", "457b1cd985ed07baffd8c66ff40e9c1b6da93753", "286bf53934aa33ddf220d61c394af79221a152f1", "9240e1744e7272e59e482f68a10f126fdf501be0", "6bc46528da6cd224fa5e58ccd9df5b05c46c673d", "60a0c1042644cdc8189af1917cb14278f64f17e8", "149a9270d9160120229b7c088975c2754e3b5333", "355603b1922886044884afbdfa9c9a6626b6669a", "1d3501b30183ba213fb4c22a00d89db6fd50cc34", "a065244522b6b26c033dfbc3383b93dba776c37d", "ba2f90f85cada4be24d925cbff0c2efea6e7f3a8", "2197e35f14ff9960985c982ed6d16d5bd5366062", "42ce9c2bd246a0243fa91309938042e434b39876", "7b27771de1a2540008758e9894bfe168f26bffa0"], "SHA256_Hashes": [], "Registry_Entries": ["HKLM\\SYSTEM\\ControlSet001\\services\\PSEXESVC. Once the service binary is placed on the \n\nsystem, a Windows Service is created to execute the service binary. This is observed in the last \n\nDeleted:  \n\nDeleted:  \n\nDeleted: ,\n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nPage 50 \n\nWHITE PAPER \n \n \n \n \n \n \n \n \n \n \n \n \n\f!\n\n!\n\n!\n\nThe!Shadows!of!Ghosts!\n\nCase!Study:!CARBANAK!\n\nFigure 46: IIOCs Representing UIAutomationCore.dll.bin WGET Binary Activity \n\nDeleted: Instant \n\nAs stated in the section associated with Table 15, the TINYP binary is a modification of the \nSysInternals PSEXEC remote access utility. Just like PSEXEC, the TINYP binary sends a service \nbinary to the ADMIN$ share (C:\\Windows) of the target host. The target host executes this \nservice binary, and the TINYP tool connects to that service binary. When identifying attacker \nlateral movement from the perspective of the target system, the PSEXESVC.exe TINYP service \nbinary executes the remote command requested by the attacker system. The view of this \nactivity in RSA NetWitness Endpoint is illustrated in Figure 47. \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted: ,\n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nFigure 47: TINYP Execution from Source (Red) and Target (Blue) Perspective\nFigure 47: TINYP Execution from Source (Red) and Target (Blue) Perspective \n\nFigure 47 illustrates the most common use case for the TINYP binary observed: lateral \nFigure 47 illustrates the most common use case for the TINYP binary \nmovement via remote command shell execution. In the figure above, the source host \nperspective of TINYP execution is shown in the red boxes, while the target host perspective of \nobserved: lateral movement via remote command shell execution. In the \nTINYP execution is shown in the blue boxes. In the box labeled \u201c1,\u201d we see file PSEXESVC.exe \nfigure above, the source host perspective of TINYP execution is shown in the \nservice binary being written to the C:\\Windows directory, which represents the ADMIN$ \nSMB/CIFS network share. Once the service binary is placed in the ADMIN$ share, a Windows \nred boxes, while the target host perspective of TINYP execution is shown in \nRegistry entry is created in the SYSTEM Registry Hive under the path \nHKLM\\SYSTEM\\ControlSet001\\services\\PSEXESVC. Once the service binary is placed on the \nthe blue boxes. In the box labeled \u201c1,\u201d we see file PSEXESVC.exe service binary \nsystem, a Windows Service is created to execute the service binary. This is observed in the last \nbeing written to the C:\\Windows directory, which represents the ADMIN$ \nSMB/CIFS network share. Once the service binary is placed in the ADMIN$ \nshare, a Windows Registry entry is created in the SYSTEM Registry Hive under \nthe path HKLM\\SYSTEM\\ControlSet001\\services\\PSEXESVC. Once the service \nbinary is placed on the system, a Windows Service is created to execute the \nservice binary. This is observed in the last item in box \u201c1,\u201d as the Windows \nServices Control Manager services.exe executes the PSEXESVC.exe process.  \n\nPage 50 \n\nUpon the second execution of the TINYP binary, the Windows SYSTEM \nRegistry Key is not created, as it already exists on the system, and it is \nimportant to note that the Registry entry is only created on the first \nexecution. This information can be used to determine the first host access \nby this method. On the second execution, represented by the box labeled \n\u201c2,\u201d we see the Windows Local Security Authentication Server binary lsass.\nexe opening the PSEXESVC.exe service process. This is the actor attempting \nto authenticate to the remote system under whatever credentials they have \nacquired. Once authenticated, the process goes into the box labeled \u201c3,\u201d \nwhere the PSEXESVC.exe service binary executes the Windows Command \nProcessor cmd.exe remotely on behalf of the attacker. It is important to note \nthat while the calling parent binary on the target system is the TINYP binary \nps.exe, all actions executed by TINYP will be carried out by the PSEXESVC.\nexe service binary on the target system. Given this, we can identify remote \ncommand shell execution via PSEXEC for any instance in which PSEXESVC.exe \nCreates Process cmd.exe, which we established was the primary use case for \nthis tool in this engagement.\n\nKnowing this, and knowing that the legitimate PSEXEC utility is often widely \nused by system administrators, the difference in the legitimate PSEXEC and \nthe TINYP binaries or their service binaries is particularly useful to incident \nresponders. In reviewing the service binaries of both tools in RSA NetWitness \nEndpoint, we identify differences we can use to distinguish between legitimate \nand malicious activity. A view of one difference is shown in Figure 48.\n\n47\n\nWHITE PAPER \n \n \n \n \n \n\f!\n\n!\n\n!\n\nThe!Shadows!of!Ghosts!\n\nCase!Study:!CARBANAK!\n\nitem in box \u201c1,\u201d as the Windows Services Control Manager services.exe executes the \n\nDeleted: ,\n\nPSEXESVC.exe process.   \n\nUpon the second execution of the TINYP binary, the Windows SYSTEM Registry Key is not \n\ncreated, as it already exists on the system, and it is important to note that the Registry entry is \n\nonly created on the first execution. This information can be used to determine the first host \n\naccess by this method. On the second execution, represented by the box labeled \u201c2,\u201d we see the \n\nWindows Local Security Authentication Server binary lsass.exe opening the PSEXESVC.exe \n\nservice process. This is the actor attempting to authenticate to the remote system under \nwhatever credentials they have acquired. Once authenticated, the process goes into the box \nlabeled \u201c3,\u201d where the PSEXESVC.exe service binary executes the Windows Command Processor \ncmd.exe remotely on behalf of the attacker. It is important to note that while the calling parent \nbinary on the target system is the TINYP binary ps.exe, all actions executed by TINYP will be \ncarried out by the PSEXESVC.exe service binary on the target system. Given this, we can \nidentify remote command shell execution via PSEXEC for any instance in which PSEXESVC.exe \nCreates Process cmd.exe, which we established was the primary use case for this tool in this \nengagement. \n\nDeleted:  \n\nDeleted:  \n\nDeleted: ,\n\nDeleted:  \n\nDeleted:  \n\nDeleted: ,\n\nDeleted:  \n\nDeleted:  \n\nKnowing this, and knowing that the legitimate PSEXEC utility is often widely used by system \nadministrators, the difference in the legitimate PSEXEC and the TINYP binaries or their service \nbinaries is particularly useful to incident responders. In reviewing the service binaries of both \ntools in RSA NetWitness Endpoint, we identify differences we can use to distinguish between \nlegitimate and malicious activity. A view of one difference is shown in Figure 48. \n\nDeleted: and \n\nDeleted:  \n\nDeleted:  \n\nFigure 48: TINYP vs PSEXEC Service Binaries\nFigure 48: TINYP vs. PSEXEC Service Binaries \n\nIn Figure 48, we see that the PSEXESVC.exe service binary used by TINYP has a valid Microsoft \nIn Figure 48, we see that the PSEXESVC.exe service binary used by TINYP has \nsignature, though it is about 40KB smaller than the legitimate PSEXEC service binary. While the \nsignature for this binary is valid, even valid information can become an actionable IOC. In this \na valid Microsoft signature, though it is about 40KB smaller than the legitimate \nparticular engagement, the version of PSEXEC that was legitimately being used by system \nPSEXEC service binary. While the signature for this binary is valid, even valid \nadministrators was signed by SysInternals, much like the figure above. With this being the case, \nany PSEXESVC service binaries that were Microsoft signed became immediately suspect during \ninformation can become an actionable IOC. In this particular engagement, the \nthis investigation. Additionally, the TINYP binary itself was unsigned, standing in stark \ndifference from its legitimate PSEXEC counterpart. The differences in these binaries are shown in \nversion of PSEXEC that was legitimately being used by system administrators \nFigure 49. \nwas signed by SysInternals, much like the figure above. With this being the \ncase, any PSEXESVC service binaries that were Microsoft signed became \nimmediately suspect during this investigation. Additionally, the TINYP binary \nitself was unsigned, standing in stark difference from its legitimate PSEXEC \ncounterpart. The differences in these binaries are shown in Figure 49.\n\nPage 51 \nThe!Shadows!of!Ghosts!\nCase!Study:!CARBANAK!\n\n!\n!\n!\n\nComment [A60]: branding \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nComment [A61]: branding \n\nFigure 49: TINYP vs. PSEXEC\u2014Module Differences\nFigure 49: TINYP vs. PSEXEC\u2014Module Differences \n\nDeleted:  \u2013 \n\nIn Figure 49, we observe the following differences in the TINYP binary and legitimate PSEXEC: \nIn Figure 49, we observe the following differences in the TINYP binary and \nlegitimate PSEXEC:\n\n1.! The TINYP binary resides within a consistent directory of C:\\Windows\\SysWOW64\\zh-TW. \n2.! The TINYP binary has a very recent compile time from the time of initial entry into the \n\n1. The TINYP binary resides within a consistent directory of C:\\Windows\\\n\nenvironment. \n\n3.! The TINYP binary has no value in the Description section of its header. \nSysWOW64\\zh-TW.\n4.! The TINYP binary is not signed. \n\n2. The TINYP binary has a very recent compile time from the time of initial \nGiven this, should the attackers change filename or location, this can be hunted for by viewing \nonly unsigned binaries with no Description values and sorted by compile time to identify binaries \ncompiled within close proximity to the compile time of this binary. \n\nentry into the environment.\n\n3. The TINYP binary has no value in the Description section of its header.\nIn order to reduce time to detection of this activity, IIOC content for RSA NetWitness Endpoint \nhas been created and included in the Digital Appendix associated with this document.  \n4. The TINYP binary is not signed.\nThe majority of the attackers\u2019 actions-on-objective were conducted using commands residing \nwithin, and are functions of, the Windows Command Processor cmd.exe. While there are a \nGiven this, should the attackers change filename or location, this can be \nvariety of commands available to users at the Windows Command Prompt, a specific subset of \nthese commands are internal to the cmd.exe binary and therefore will not cause additional \nhunted for by viewing only unsigned binaries with no Description values and \nprocess creation. These commands are listed in Table 25. \nsorted by compile time to identify binaries compiled within close proximity to \nthe compile time of this binary.\n\nDeleted: Instant \n\nDeleted:  \n\nDeleted: ,\n\nDeleted: ,\n\nDeleted:  \n\nInternal Windows Command Processor Commands \n\nComment [A62]: table format is inconsistent. \n\nIn order to reduce time to detection of this activity, IIOC content for RSA \nASSOC \nBREAK \nNetWitness Endpoint has been created and included in the Digital Appendix \nCALL \nCD/CHDIR \nassociated with this document. \nCLS \nCOLOR \nThe majority of the attackers\u2019 actions-on-objective were conducted using \nCOPY \nDATE \ncommands residing within, and are functions of, the Windows Command \nDEL \nProcessor cmd.exe. While there are a variety of commands available to users \nDIR \nDPATH \nat the Windows Command Prompt, a specific subset of these commands are \nECHO \nENDLOCAL \ninternal to the cmd.exe binary and therefore will not cause additional process \nERASE \ncreation. These commands are listed in Table 25.\nEXIT \nFOR \n\nMKLINK (vista and above) \nMOVE \nPATH \nPAUSE \nPOPD \nPROMPT \nPUSHD \nREM \nREN/RENAME \nRD/RMDIR \nSET \nSETLOCAL \nSHIFT \nSTART \nTIME \nTITLE \n\nPage 52 \n\n48\n\nWHITE PAPER \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fInternal Windows Command Processor Commands\n\nASSOC\n\nBREAK\n\nCALL\n\nCD/CHDIR\n\nCLS\n\nCOLOR\n\nCOPY\n\nDATE\n\nDEL\n\nDIR\n\nDPATH\n\nECHO\n\nENDLOCAL\n\nERASE\n\nEXIT\n\nFOR\n\nFTYPE\n\nGOTO\n\nIF\n\nKEYS\n\nMD/MKDIR\n\nMKLINK (vista and above)\n\nMOVE\n\nPATH\n\nPAUSE\n\nPOPD\n\nPROMPT\n\nPUSHD\n\nREM\n\nREN/RENAME\n\nRD/RMDIR\n\nSET\n\nSETLOCAL\n\nSHIFT\n\nSTART\n\nTIME\n\nTITLE\n\nTYPE\n\nVER\n\nVERIFY\n\nVOL\n\nTable 25: List of Commands Internal to the Windows Command Processor\n\nThroughout this engagement, the primary attacker actions consisted of \ntraversing directories and outputting files, looking for files that may contain \nadditional credentials, database information, internal infrastructure \ndocumentation, and financial data such as PCI data. The majority of the \ncommands utilized consisted of the CD, TYPE, ECHO, DATE and DIR. As none \nof these commands call additional binaries, the attackers would reside almost \ncompletely within the cmd.exe process for the majority of their host actions. \nFour distinct external commands were utilized by the attackers in traversing \nthe host filesystems as part of their internal reconnaissance activities: net.exe, \nipconfig.exe, find.exe and qwinsta.exe. Knowing this, any time cmd.exe called any \nof these binaries, it was considered suspect activity. However, two of these \ncommands were specific to the actor activity and were thereby utilized as a \nhigh-fidelity indication of attacker activity. The find.exe command searches \na specified file or piped input for a defined string given in the command \narguments, much like the grep binary does on Linux and UNIX hosts. The \nattackers would use this binary in the following command string\n\ndir /b /s 2>nul | find /I \u201cphrase\u201d\n\n49\n\nWHITE PAPER \n \n\fFTYPE \n\nGOTO \n\nIF \nKEYS \nMD/MKDIR \n\nTYPE \n\nVER \n\nVERIFY \nVOL \n\n!\n\n!\n\n!\n\nThe!Shadows!of!Ghosts!\n\nCase!Study:!CARBANAK!\n\nTable 25: List of Commands Internal to the Windows Command Processor \n\nThroughout this engagement, the primary attacker actions consisted of traversing directories \nand outputting files, looking for files that may contain additional credentials, database \ninformation, internal infrastructure documentation, and financial data such as PCI data. The \nmajority of the commands utilized consisted of the CD, TYPE, ECHO, DATE and DIR. As none of \nthese commands call additional binaries, the attackers would reside almost completely within the \ncmd.exe process for the majority of their host actions. Four distinct external commands were \nutilized by the attackers in traversing the host filesystems as part of their internal \nreconnaissance activities: net.exe, ipconfig.exe, find.exe and qwinsta.exe. Knowing this, any \ntime cmd.exe called any of these binaries, it was considered suspect activity. However, two of \nthese commands were specific to the actor activity and were thereby utilized as a high-fidelity \nindication of attacker activity. The find.exe command searches a specified file or piped input for \nwhere the \u201cphrase\u201d would be a string of interest to the attackers, such as \na defined string given in the command arguments, much like the grep binary does on Linux and \n\u201cPCI,\u201d \u201cPasswords\u201d and \u201cCredit Card.\u201d This command would list the filenames \nUNIX hosts. The attackers would use this binary in the following command string \nof all files in all subdirectories under the present working directory, and then \nonly display the ones with the required string in the filename. Since the DIR \nwhere the \u201cphrase\u201d would be a string of interest to the attackers, such as \u201cPCI,\u201d \u201cPasswords\u201d \ncommand is part of the Windows Command Processor, but the FIND command \nand \u201cCredit Card.\u201d This command would list the filenames of all files in all subdirectories under \nthe present working directory, and then only display the ones with the required string in the \nis a separate binary, we observe this activity in RSA NetWitness Endpoint via \nfilename. Since the DIR command is part of the Windows Command Processor, but the FIND \ncommand is a separate binary, we observe this activity in RSA NetWitness Endpoint via the \nthe cmd.exe process calling find.exe with arguments, as illustrated in Figure 50.\ncmd.exe process calling find.exe with arguments, as illustrated in Figure 50. \n\ndir /b /s 2>nul | find /I \u201cphrase\u201d \n\nDeleted: ,\n\nDeleted:  \n\nDeleted: ,\n\nDeleted:  \n\nDeleted:  \n\nDeleted: ,\n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted: ,\n\nDeleted: ,\n\nDeleted: . \n\nDeleted:  \n\nFigure 50: cmd.exe Calling find.exe as a Piped Directory Listing Search\nFigure 50: cmd.exe Calling find.exe as a Piped Directory Listing Search \n\nThe qwinsta.exe binary identifies all currently logged-in users via command line session, console \nThe qwinsta.exe binary identifies all currently logged-in users via command \nsession or RDP session, and displays the user logged in and the type of session they are \nline session, console session or RDP session, and displays the user logged \nassociated with. The attackers would use this for two primary functions on the majority of hosts \nthey interacted with. The first would be to check other users logged in to the system as a \nin and the type of session they are associated with. The attackers would \nmonitor to determine if their activity was being detected, and also to identify administrative \nusers logged in whose credentials they could harvest from memory. The second was to identify \nuse this for two primary functions on the majority of hosts they interacted \nwhat systems users were engaging the system with, and what method of access they were \nwith. The first would be to check other users logged in to the system as a \nmonitor to determine if their activity was being detected, and also to identify \nadministrative users logged in whose credentials they could harvest from \nmemory. The second was to identify what systems users were engaging \nthe system with, and what method of access they were using. This gave the \nattackers additional information with which to map the internal systems \nand networks. Additionally, the attackers were the only users executing this \ncommand anywhere within the environment, as the system administrators \nusing. This gave the attackers additional information with which to map the internal systems and \ndid not use this command in any of their administrative functions. This \nnetworks. Additionally, the attackers were the only users executing this command anywhere \ncontextual information allowed RSA IR to utilize these IOCs with significant \nwithin the environment, as the system administrators did not use this command in any of their \nadministrative functions. This contextual information allowed RSA IR to utilize these IOCs with \neffectiveness during the course of the engagement. An example of this \nsignificant effectiveness during the course of the engagement. An example of this activity is \nactivity is shown in Figure 51.\nshown in Figure 51. \n\nThe!Shadows!of!Ghosts!\nCase!Study:!CARBANAK!\n\nPage 53 \n\n!\n!\n!\n\nComment [A63]: branding \n\nDeleted: logged \n\nDeleted: ,\n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\n Figure 51: qwinsta.exe Being Called by cmd.exe \nFigure 51: qwinsta.exe Being Called by cmd.exe  \n\nThe GOTROJ RAT used by the attackers in this engagement was primarily \nThe GOTROJ RAT used by the attackers in this engagement was primarily utilized by installing it \nutilized by installing it as a Windows Service, starting the service and then \nas a Windows Service, starting the service and then deleting the service once the Trojan was \ndeleting the service once the Trojan was executing successfully in memory. \nexecuting successfully in memory. Evidence of this activity, as observed in Application Tracking \nwithin RSA NetWitness Endpoint, is shown in Figure 52 and Figure 53. \nEvidence of this activity, as observed in Application Tracking within RSA \nNetWitness Endpoint, is shown in Figure 52 and Figure 53.\n\nComment [A64]: This is the first time you \nreference GOTROJ as a RAT. It should be \nreferenced early on or not at all (leaving it as \n\u201cunderstood by the reader\u201d) \n\nDeleted: ,\n\nDeleted:  \n\nComment [A65]: branding \n\n50\n\nFigure 52: Installation of GOTROJ RAT Via Windows Service \n\nFigure 53: Deletion of GOTROJ Windows Service After Execution \n\nOnce successfully executed, GOTROJ communicates with 107.181.246.146 over TCP port 443. \n\nWhen reviewing the host screen\u2019s Scan Data tab, under the Processes section, we see where the \n\nDeleted:  \n\nnetwork connection is correlated with the running ctlmon.exe process by clicking on it, as shown \n\nin Figure 54. \n\nPage 54 \n\nWHITE PAPER \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\fusing. This gave the attackers additional information with which to map the internal systems and \n\nusing. This gave the attackers additional information with which to map the internal systems and \n\nnetworks. Additionally, the attackers were the only users executing this command anywhere \n\nnetworks. Additionally, the attackers were the only users executing this command anywhere \n\nwithin the environment, as the system administrators did not use this command in any of their \n\nwithin the environment, as the system administrators did not use this command in any of their \n\nadministrative functions. This contextual information allowed RSA IR to utilize these IOCs with \n\nadministrative functions. This contextual information allowed RSA IR to utilize these IOCs with \n\nsignificant effectiveness during the course of the engagement. An example of this activity is \n\nsignificant effectiveness during the course of the engagement. An example of this activity is \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nDeleted:  \n\nshown in Figure 51. \n\nshown in Figure 51. \n\n!\n\n!\n\n!\n\n!\n\n!\n\n!\n\nThe!Shadows!of!Ghosts!\n\nThe!Shadows!of!Ghosts!\n\nCase!Study:!CARBANAK!\n\nCase!Study:!CARBANAK!\n\nFigure 51: qwinsta.exe Being Called by cmd.exe  \nFigure 51: qwinsta.exe Being Called by cmd.exe  \n\nThe GOTROJ RAT used by the attackers in this engagement was primarily utilized by installing it \nThe GOTROJ RAT used by the attackers in this engagement was primarily utilized by installing it \nas a Windows Service, starting the service and then deleting the service once the Trojan was \nas a Windows Service, starting the service and then deleting the service once the Trojan was \nexecuting successfully in memory. Evidence of this activity, as observed in Application Tracking \nexecuting successfully in memory. Evidence of this activity, as observed in Application Tracking \nwithin RSA NetWitness Endpoint, is shown in Figure 52 and Figure 53. \nwithin RSA NetWitness Endpoint, is shown in Figure 52 and Figure 53. \n\nComment [A64]: This is the first time you \nComment [A64]: This is the first time you \nreference GOTROJ as a RAT. It should be \nreference GOTROJ as a RAT. It should be \nreferenced early on or not at all (leaving it as \nreferenced early on or not at all (leaving it as \n\u201cunderstood by the reader\u201d) \n\u201cunderstood by the reader\u201d) \nDeleted: ,\nDeleted: ,\nDeleted:  \nDeleted:  \nComment [A65]: branding \nComment [A65]: branding \n\nFigure 52: Installation of GOTROJ RAT Via Windows Service\nFigure 52: Installation of GOTROJ RAT Via Windows Service \nFigure 52: Installation of GOTROJ RAT Via Windows Service \n\nFigure 53: Deletion of GOTROJ Windows Service After Execution\nFigure 53: Deletion of GOTROJ Windows Service After Execution \nFigure 53: Deletion of GOTROJ Windows Service After Execution \n\nOnce successfully executed, GOTROJ communicates with 107.181.246.146 over TCP port 443. \nOnce successfully executed, GOTROJ communicates with 107.181.246.146 over TCP port 443. \nOnce successfully executed, GOTROJ communicates with 107.181.246.146 \nWhen reviewing the host screen\u2019s Scan Data tab, under the Processes section, we see where the \nWhen reviewing the host screen\u2019s Scan Data tab, under the Processes section, we see where the \nover TCP port 443. When reviewing the host screen\u2019s Scan Data tab, under \nnetwork connection is correlated with the running ctlmon.exe process by clicking on it, as shown \nnetwork connection is correlated with the running ctlmon.exe process by clicking on it, as shown \nin Figure 54. \nin Figure 54. \nthe Processes section, we see where the network connection is correlated \nwith the running ctlmon.exe process by clicking on it, as shown in Figure 54.\n\n!\n!\n!\n\nThe!Shadows!of!Ghosts!\nCase!Study:!CARBANAK!\n\nThe!Shadows!of!Ghosts!\nDeleted:  \nDeleted:  \nCase!Study:!CARBANAK!\n\n!\n!\n!\n\nPage 54 \nPage 54 \n\nFigure 54: GOTROJ Process Executing and Network Connection Information\nFigure 54: GOTROJ Process Executing and Network Connection Information \n\nFigure 54: GOTROJ Process Executing and Network Connection Information \n\nAdditionally, the GOTROJ ctlmon.exe binary itself can be triaged via \nAdditionally, the GOTROJ ctlmon.exe binary itself can be triaged via the RSA NetWitness \nEndpoint module analyzer in order to identify the imported function and DLL information, \nthe RSA NetWitness Endpoint module analyzer in order to identify the \nAdditionally, the GOTROJ ctlmon.exe binary itself can be triaged via the RSA NetWitness \nentropy, PE header information and searchable static strings analysis. One common initial triage \nimported function and DLL information, entropy, PE header information and \nsearch pattern for identifying possible C2 strings is common web port value strings, such as \nEndpoint module analyzer in order to identify the imported function and DLL information, \nsearchable static strings analysis. One common initial triage search pattern \n\u201c:443.\u201d The use of this search string to triage the GOTROJ Trojan identifies the C2 IP address \nentropy, PE header information and searchable static strings analysis. One common initial triage \nand port value in a clear text string at offset 0x3049304, as evidenced in Figure 55. \nfor identifying possible C2 strings is common web port value strings, such as \nsearch pattern for identifying possible C2 strings is common web port value strings, such as \n\u201c:443.\u201d The use of this search string to triage the GOTROJ Trojan identifies \n\u201c:443.\u201d The use of this search string to triage the GOTROJ Trojan identifies the C2 IP address \nthe C2 IP address and port value in a clear text string at offset 0x3049304, as \nand port value in a clear text string at offset 0x3049304, as evidenced in Figure 55. \nevidenced in Figure 55.\n\nDeleted: . \n\nDeleted: ,\n\nDeleted:  \n\nDeleted: Module \n\nDeleted: Analyzer \n\nDeleted: Module \n\nDeleted: Analyzer \n\nDeleted: ,\n\nDeleted:  \n\nDeleted: . \n\nFigure 55: C2 IP and Port Identification in Cursory Analysis via RSA NetWitness Endpoint Module Analyzer \n\n51\n\nFigure 55: C2 IP and Port Identification in Cursory Analysis via RSA NetWitness \nFigure 55: C2 IP and Port Identification in Cursory Analysis via RSA NetWitness Endpoint Module Analyzer \nEndpoint Module Analyzer\n\nPage 55 \n\nPage 55 \n\nWHITE PAPER \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\f5.  CONCLUSION\nThe attackers in this engagement primarily used modified versions of legitimate \nadministrative tools, commonly used penetration testing utilities and common \nnetwork file acquisition tools. Though specialty malware was observed during \nthis intrusion, the attackers used basic XOR encoding just above Layer 4 to \nfacilitate communication, communicated via SSH tunnel directly over TCP/443, \nor just transmitted and received data in clear text across the network. Of the \nobserved actions during this intrusion, none of the attacker tools, techniques or \nprocedures was particularly advanced. However, they were still able to bypass \na significant security stack, obtain initial access and lateral access effectively, \ndeploy malware and toolsets with impunity, and traverse over 150 systems in \nthe span of six weeks. While, at first glance, this attack was not sophisticated \nin its toolset, it was sophisticated in its operationalization and agility of actions \ntaken by the attackers. Upon reviewing the entirety of tools used in this \nengagement, operational correlations can be made between the Linux and \nWindows toolsets, as illustrated in Table 26.\n\nCross Platform Toolsets and Purpose\n\nLinux\n\nWinexe\n\nWindows\n\nTinyp\n\nAuditunnel (Linux \nVersion)\n\nAuditunnel (Windows \nVersion)\n\nPScan (Linux Version)\n\nPScan (Windows \nVersion)\n\nFunction\n\nLateral Movement\n\nIngress Tunneling\n\nInternal Recon\n\nWGet (Linux Version) WGet (Windows \n\nToolset Download\n\nSCP\n\nVersion)\n\nPSCP\n\nFile Transfer\n\nTable 26: Cross-Platform Toolset Utilization\n\nThe CARBANAK actors not only showed the capability to successfully \ncompromise both Linux and Windows systems but they chose a toolset that \nwas either directly cross-platform or extremely similar in both function \nand command line usage. This indicates a level of tactical organization and \noperationalization not previously observed by this actor group. Additionally, \nthey were significantly cognizant and aware of actions taken by the security \nteam, switching to new methods of ingress after initial compromise, detected \nremediation actions and environmental migration. They were methodical in \ntheir choice of staging systems, basing the system utilized on:\n\u2022  a critical function of lateral access (such as systems BRAVO and DELTA) or\n\n\u2022   responder detection and investigation (such as system CHARLIE)\n\nThey chose key systems based on their needs rather than systems the \norganization would consider \u2018key\u2019 assets. They ensured the toolsets they \nwould interact with most often contained very similar functions and \ncommands across environments in order to limit mistakes made at the \n\n52\n\nWHITE PAPER\fkeyboard. They included a method, whether manually or automatically, to \nremove records of their activities. They operated with purpose, patience, \nplanning and, most significantly, persistence.\n\nThis intrusion was successfully discovered, investigated, contained, \neradicated and remediated only due to the following reasons:\n\n1. The organization invested in the necessary visibility at a host and network \nlevel to allow analysts to rapidly and effectively hunt for and investigate \nthese types of threats.\n\n2. The organization had invested and empowered their personnel to \n\ncreatively and proactively hunt for, understand, investigate and learn from \nthreats within their environment.\n\n3. The organization had maintained a relationship with a proven and trusted \nadvisory practice and had worked to recreate and implement a solid and \nproven Threat Hunting and Incident Response methodology within their \nown organization.\n\n4. The organization had a solid top-down understanding of what role \n\nThreat Hunting and Incident Response held during daily operations and \nsecurity incidents, and provided the necessary support and enablement to \nsubordinate units and analysts.\n\nWhile a first look at the tools used in this engagement may appear simplistic, \nupon review of the entire intrusion it becomes quickly apparent that each \nof them was purpose-chosen with an overall operationalized capability in \nmind. CARBANAK has shown themselves to be a coordinated and extremely \npersistent group of actors that are consistently moving towards more agile \nmethods of intrusion and standardization of processes across heterogeneous \nenvironments. They have proven their capability to use that persistence \nand agility to defeat or bypass organizational security controls. Even with \nthe least advanced of their capabilities, they can be a difficult adversary to \ntrack within an environment due to their speed, efficiency, adaptability and \ncare in leaving little trace of any activity. However, this difficulty compounds \nexponentially for organizations without the necessary visibility, practices, \nmethodologies or trusted partner relationships necessary to effectively \ndetect and respond to these types of threats. This case study shows that \nwith the necessary visibility, planning, methodology and analyst enablement, \norganizations can be successful against these types of threats. \n\nDisclaimer: This white paper and related graphics are provided for \ninformational and/or educational purposes. RSA is not responsible for errors, \nomissions or for results obtained from the use of this information. This \nwhite paper is being provided \u201cas-is,\u201d with no guarantee of completeness, \ntimeliness or accuracy, and without warranty of any kind. This white paper \nis not intended to be a substitute for legal or other professional advice, and \nconstitutes the opinions of the author(s).\n\n53\n\nWHITE PAPER\f6.  INDICATORS OF COMPROMISE\n6.1 ATOMIC INDICATORS OF COMPROMISE\n\nHost Indicators\n\nNetwork Indicators\n\nE3C061FA0450056E30285FD44A74CD2A\n\nslpar.org\n\n370D420948672E04BA8EAC10BFE6FC9C\n\ncentos-repo.org\n\n90D4CC6D4B81B8C462F5AA7166FEE6FB\n\n95.215.46.116\n\nF9766140642C24D422E19E9CF35F2827\n\n185.61.148.145\n\nEB87856732236E1AC7E168FE264F1B43\n\n185.61.148.96\n\nB57DC2BC16DFDB3DE55923AEF9A98401\n\n107.181.246.146\n\nB3135736BCFDAB27F891DBE4009A8C80\n\n192.99.14.211\n\n0F1C4A2A795FB58BD3C5724AF6F1F71A\n\n95.215.47.122\n\n209BC26396E838E4B665FE3D1CCF7787\n\n95.215.61.192\n\n6499863D47B68030F0C5FFAFAFFB1344\n\n5.45.179.173\n\n752D245F1026482A967A763DAE184569\n\n185.86.151.174\n\n8B3A91038ECB2F57DE5BBD29848B6DC4\n\n185.165.29.27\n\nAB8BED25F9FF64A4B07BE5D3BC34F26B\n\n185.117.88.97\n\n7393CB0F409F8F51B7745981AC30B8B6\n\n95.215.44.129\n\nC4D746B8E5E8E12A50A18C9D61E01864\n\n185.165.29.26\n\nBD126A7B59D5D1F97BA89A3E71425731\n\n6499863D47B68030F0C5FFAFAFFB1344\n\n752D245F1026482A967A763DAE184569\n\n1BD7D0C3023C55B5DF0201CC5D7BBCE1\n\nC01FD758ABB423C8336EE1BD5035A6C7\n\nBD126A7B59D5D1F97BA89A3E71425731\n\n771FA63231FB42EE97AA17818A53F432\n\nEDCE844A219C7534E6A1E7C77C3CB020\n\n0810D239169A13FC0E2E53FC72D2E5F0\n\nD66E31794836DFD2C344D0BE435C6D12\n\nE3C061FA0450056E30285FD44A74CD2A\n\nA365FD9076AF4D841C84ACCD58287801\n\n9E2E4DF27698615DF92822646DC9E16B\n\n5DDF9683692154986494CA9DD74B588F\n\nF9766140642C24D422E19E9CF35F2827\n\nD406E037F034B89C85758AF1A98110BE\n\nD825FBD90087D2350E89CBF205A1B71C\n\n54\n\nWHITE PAPER \n\f6.2 Behavioral Indicators of Compromise \n\nHost Indicators\n\nNetwork Indicators\n\nC:\\Windows\\SysWOW64\\zh-TW \nDirectory Usage\n\nCommand Line Arguments \nContaining \u201c-getfiles,\u201d \u201c-copyfiles,\u201d \n\u201c-copyself,\u201d \u201c-cleanup\u201d or \u201chttp://[0-9]\n{1,3}\\.\u201d\n\ncmd.exe -> qwinsta.exe\n\nOutbound SSH over TCP/443\n\nOutbound HTTP over TCP/443, \nDirect to IP Address, User-Agent \nBeginning with \u201cwget\u201d or \u201cgo-\u201c\n\nOutbound SSH where Client \nApplication and Server Application = \n\u201copenssh_5.3\u201d or Client Application = \nServer Application\n\nWindowsCtlMonitor Windows \nService\n\nPSEXESVC.EXE, WINEXESVC.EXE in \nC:\\Windows\n\n/usr/share/man/mann Directory \nUsage\n\n\u201cssh,\u201d \u201csshd,\u201d \u201cauditd\u201d in Non-\nStandard Directories\n\nLinux System Binary Names Not \nAssociated With RPM Package\n\nLinux Child Processes with a Parent \nof systemd Not Associated With \nRPM Package\n\nHKLM\\SYSTEM\\ControlSet001\\\nservices\\PSEXESVC Registry Entries\n\nHKLM\\SYSTEM\\ControlSet001\\\nservices\\WINEXESVC Registry \nEntries\n\nCommand Line Arguments Ending in \n\u201ccmd\u201d\n\nCommand Line Arguments \nContaining \u201c\\\\[a-zA-Z0-9]{3,}\u201d \n\n55\n\nWHITE PAPER\f7.  DIGITAL APPENDIX\nBelow is a list of the files and folders contained within the RSA_IR_\nCARBANAK_Digital_Appendix. While specifically created for RSA \ntechnologies, this Digital Appendix also contains traditional IOCs and \ndescriptive content that can be integrated into third-party technologies, \nsuch as OSQuery, Moloch and SOF-ELK. For RSA NetWitness Suite users, \nthe supplied content is currently available in RSA Live but provided here \nfor custom content creation purposes. All content should be tested before \nfull integration into RSA NetWitness Endpoint, RSA NetWitness Logs and \nPackets, or third-party tools to prevent any adverse effects from unknown \nenvironmental variables.\n\nRSA_IR_Digital_Appendix.zip File Hash: \nAD4B3B859FA85957B479D824E19C9957\n\nRSA_IR_Digital_Appendix.zip Contents:\n\n\u2022  NetWitness_Endpoint\n\n o tinyp_unique_command_line_arguments.sql\n\n o  psexec_winexe_remote_service_creation.sql\n\n\u2022  NetWitness_Packets\n\n o RSA_IR_Carbanak_Domain.csv\n\n \u25a0 List of Carbanak domains referenced in report\n\n o RSA_IR_Carbanak_Domain.xml\n\n o  RSA_IR_Carbanak_IP.csv\n\n \u25a0  List of Carbanak IPs referenced in report\n\n o  RSA_IR_Carbanak_IP.xml\n\n o  auditunnel_init.lua\n\n \u25a0  AUDITUNNEL traffic pattern identification with comments\n\n o  gotroj_beacon_parser.lua\n\n \u25a0  GOTROJ traffic pattern identification with comments\n\n\u2022  CARBANAK_Hashset.md5\n\n \u25a0  List of Carbanak file hashes referenced in report\n\nRSA and the RSA logo, are registered trademarks or trademarks of Dell Technologies in  \nthe United States and other countries. \u00a9 Copyright 2017 Dell Technologies. All rights reserved. \nPublished in the USA. 10/17 White Paper H16777. \n\n56\n\nRSA believes the information in this document is accurate as of its publication date.  \nThe information is subject to change without notice.\n\nWHITE PAPER\f"], "URLs": ["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5638", "https://blogs.forcepoint.com/security-labs/carbanak-group-uses-google-malware-command-", "https://krebsonsecurity.com/2017/03/payments-giant-verifone-investigating-breach/", "http://185.61.148.145:443/TINYP2.bmp", "https://struts.apache.org/docs/s2-046.html", "https://krebsonsecurity.com/tag/carbanak/", "https://www.symantec.com/security_response/writeup.jsp?docid=2013-012808-1032-99", "https://www.proofpoint.com/us/threat-insight/post/fin7carbanak-threat-actor-unleashes-", "https://www.symantec.com/security_response/writeup.jsp?docid=2013-", "https://krebsonsecurity.com/2017/10/hyatt-hotels-suffers-2nd-card-breach-in-2-years/", "https://community.rsa.com/docs/DOC-72935", "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-5195", "http://[0-9]", "https://www.bankinfosecurity.com/sophisticated-carbanak-banking-malware-returns-", "https://www.fireeye.com/blog/threat-research/2017/03/fin7_spear_phishing.html", "https://github.com/dirtycow/dirtycow.github.io/wiki/Patched-Kernel-Versions", "https://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html", "http://blog.trendmicro.com/trendlabs-security-intelligence/signed-pos-malware-used-in-pre-", "https://cve.mitre.org/cgi-", "https://www.welivesecurity.com/2013/01/24/linux-sshdoor-a-backdoored-ssh-daemon-that-"], "weight": 0.0}