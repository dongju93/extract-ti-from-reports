{"rule_id": 129, "name": "Project_Cobra_Analysis", "description": "-", "references": [], "File_Names": ["C_56743.NLS", "CARBON.dll", "jucheafrica.com", "msimghlp.dll", "vndkrmn.dic", "Agent.BTZ", "mozilla.exe", "a67ncodc.ax", "edit.php", "kmsvc.dll", "decrypt.py", "ipvpn.dll", "netscape.exe", "soheylistore.ir", "www.bing", "adobeupdater.exe", "srsvc.dll", "feed.php", "carbon_system.pdb", "61paris.fr", "set.php", "msimn.exe", "bootmisc.sdi", "comments.php", "msximl.dll", "miniport.dat", "MUTEX.zRX", "tazohor.com", "qavsrc.dat", "asmcerts.rs", "b9s3coff.ax", "carbon_system.dll", "getcert.rs"], "MD5_Hashes": ["cb1b68d9971c2353c2d6a8119c49b51f", "e6d1dcc6c2601e592f2b03f35b06fa8f", "554450c1ecb925693fedbb9e56702646"], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKLM\\SYSTEM\\CurrentControlSet\\Service\\).\n\nThe service name depends on the chosen stage 1 file name:\n\nFile\nName\n\nService\nName\n\nDisplay\nName\n\nDescription\n(Copy&Paste from the binary)\n\nipvpn.dll\n\nipvpn\n\nsrsvc.dll\n\nsrservice\n\nkmsvc.dll hkmsvc\n\nVirtual\nPrivate\nNetwork\nRouting\nService\n\nSystem\nRestore\nService\n\nHealth Key\nand\nCertificate\nManagement\nService\n\nProvides enchanced network management while active VPN connection\nestablished. Support All necessary functions and maintain dynamic table\nrules. Enforcement technologies that use virtual networks may not\nfunction properly without this service\n\nPerforms system restore functions. To stop service, turn off System\nRestore from the System Restore tab in My Computer.\n\nProvides X.509 certificate and key management services for the Network\nAccess Protection Agent (NAPAgent). Enforcement technologies that use\nX.509 certificates may not function properly without this service\n\nThe descriptions reveal spelling mistakes and the sentence structure may indicate that the texts have been\n\nwritten by non-native speakers.\n\nStage 1 is always installed in %SystemRoot%\\system32\\ To install something into %SystemRoot%, the\n\nattackers have to have gained administration privileges before they executed the dropper. The three other\n\ndropped files are stored in an existing directory in %ProgramFiles%, randomly chosen.\n\nDuring the installation, executed in a command line, the dropper displays the following information:\n\nThe screenshot shows the string \u201cLUCKY STRIKE!!!\u201d, displayed in case the installation was carried out\n\n \n\fsuccessfully and \u201cIdioten???\u201d in case of any installation error. To be able to find the random installation\n\npath, the dropper modifies a legitimate .inf file (also chosen randomly) in %SystemRoot%\\inf\\ to add the\n\nfollowing information to the end of the file:\n\n[B8744A58]root=C:\\Program Files\\Windows NT\\Accessoiries\\en-US\n\nThe ID between the brackets is a unique ID and the root variable contains the path in which the three\n\nadditional files are installed.\n\nThe tricks put in place by the authors \u2013 random file names and random installation paths \u2013 are used to\n\nlimit the detection possible with Indicators of Compromise. Generally, security researchers use these\n\nkinds of artifacts in order to detect the compromise of systems.\n\nStage 1: loader\n\nMD5: 43e896ede6fe025ee90f7f27c6d376a4G DATA security solutions detect this as\n\nBackdoor.TurlaCarbon.A (Engine A) and     Win32.Trojan.Cobra.A (Engine B).\n\nThe first stage is rather small as the number of instructions and actions is rather small. Simply spoken, its\n\npurpose is to load the second stage. To perform this task, the first stage checks all of the files in\n\n%SystemRoot%\\inf\\ in order to find the entry with the unique ID previously mentioned and therefore to\n\ndetermine the path for stage 2. After that, the library of the second stage is loaded and, subsequently, the\n\nexported function ModuleStart() is executed:\n\n \n\fStage 2: the orchestrator\n\nMd5: e6d1dcc6c2601e592f2b03f35b06fa8f\n\nVersion: 3.71\n\nG DATA security solutions detect this threat as Backdoor.TurlaCarbon.A (Engine A) and\n\nWin32.Trojan.Cobra.B (Engine B).\n\nThe second stage is called \u201csystem\u201d by the authors of the malware. The internal name of the library is\n\ncarbon_system.dll.\n\nThe purpose of this code is to stay in background and orchestrate several requests and tasks made by the\n\nother .dlls or named pipe connections.\n\nMutex creation\n\nThe orchestrator creates several mutexes. These mutexes are used for two reasons:\n\nused by the third stage in order to detect whether the orchestrator has been launched correctly on\n\nthe infected system;\n\nused to execute the orchestrator only once.\n\nHere are the created mutexes:\n\nGlobal\\MSCTF.Shared.MUTEX.zRX\n\nGlobal\\DBWindowsBase\n\nGlobal\\IEFrame.LockDefaultBrowser\n\nGlobal\\WinSta0_DesktopSessionMut\n\nGlobal\\{5FA3BC02-920F-D42A-68BC-04F2A75BE158}\n\nGlobal\\SENS.LockStarterCacheResource\n\nGlobal\\ShimSharedMemoryLock\n\nWorking files and directories\n\nHere are the working files and directories used by the orchestrator. The orchestrator creates one single\n\nrandom path and then stores all necessary folders mentioned under this one randomly generated path:\n\n%randompath%\\Nls\\: directory related to the tasks to be executed\n\n%randompath%\\0208\\: directory related to the temporary files\n\n%randompath%\\System\\: directory related to the additional plugins\n\n%randompath%\\System\\bootmisc.sdi: seems not to be used\n\n%randompath%\\0208\\C_56743.NLS: files related to the tasks to be executed and the plugins\n\n\f%randompath%\\Nls\\b9s3coff.ax: files related to the tasks to be executed and the named pipe\n\n%randompath%\\Nls\\a67ncodc.ax: file related to the tasks to be executed\n\n%randompath%\\vndkrmn.dic: log file\n\n%randompath%\\qavsrc.dat: log file\n\n%randompath%\\miniport.dat: configuration file\n\n%randompath%\\asmcerts.rs: purpose currently unknown\n\n%randompath%\\getcert.rs: purpose currently unknown\n\nThe files are not automatically created during the startup of the malware. The files are created only if the\n\norchestrator needs them.\n\nConfiguration file\n\nThe configuration file (miniport.dat) is used by the second and the third stage. The file is encrypted with\n\nthe CAST-128 algorithm, the same algorithm that has been used by Uroburos to encrypt the file systems.\n\nThe encryption key is: \n\n{ 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc, 0xde, 0xf0, 0xfe, 0xfc,  0xba, 0x98, 0x76, 0x54, 0x32, 0x10 }\n\nNote: following the logic, 0xfc would be expected to be 0xdc.\n\nHere is an example of the configuration file:\n\npaul@gdata:~/Carbon/$ ./decrypt.py miniport.dat\n\n[NAME]\n\nobject_id=acce6511-ba11-fa11-f0047d1\n\niproc = iexplore.exe,outlook.exe,msimn.exe,firefox.exe,opera.exe,chrome.exe\n\nex = #,netscape.exe,mozilla.exe,adobeupdater.exe,chrome.exe\n\n[TIME]\n\nuser_winmin = 1800000\n\nuser_winmax = 3600000\n\nsys_winmin = 3600000\n\nsys_winmax = 3700000\n\ntask_min = 20000\n\ntask_max = 30000\n\ncheckmin = 60000\n\ncheckmax = 70000\n\nlogmin =  60000\n\nlogmax = 120000\n\nlastconnect=1419925298\n\n\ftimestop=\n\nactive_con = 900000\n\ntime2task=3600000\n\ncheck_lastconnect=1419925298\n\n[CW_LOCAL]\n\nquantity = 0\n\n[CW_INET]\n\nquantity = 4\n\naddress1 = soheylistore.ir:80:/modules/mod_feed/feed.php\n\naddress2 = tazohor.com:80:/wp-includes/feed-rss-comments.php\n\naddress3 = jucheafrica.com:80:/wp-includes/class-wp-edit.php\n\naddress4 = 61paris.fr:80:/wp-includes/ms-set.php\n\n[CW_INET_RESULTS]\n\nquantity = 4\n\naddress1 = soheylistore.ir:80:/modules/mod_feed/feed.php\n\naddress2 = tazohor.com:80:/wp-includes/feed-rss-comments.php\n\naddress3 = jucheafrica.com:80:/wp-includes/class-wp-edit.php\n\naddress4 = 61paris.fr:80:/wp-includes/ms-set.php\n\n[TRANSPORT]\n\nsystem_pipe = comnap\n\nspstatus = yes\n\nadaptable = no\n\n[DHCP]\n\nserver = 135\n\n[LOG]\n\nlogperiod = 7200\n\nlastsend=1419924312\n\n[WORKDATA]\n\nrun_task=\n\n\frun_task_system=\n\n[VERSION]\n\nSystem=3/71\n\nUser=3/62\n\nThe websites listed in [CW_INET] and [CW_INET_RESULTS] are all compromised legitimate WordPress\n\nwebsites. By the time of writing this article, all websites have been cleaned and patched.\n\nThe file format is the same as the .ini file format from Windows. The authors use the Windows API to\n\nparse the configuration (GetPrivateProfileStringA()).The file contains:\n\nA unique ID to identify the infected machine (object_id);\n\nThe command and control server used by stage 3 (addressX);\n\nThe version of the \u201csystem\u201d and the \u201cuser\u201d library (in [VERSION]);\n\nThe frequency and time of execution of several internal tasks ([TIME]);\n\nThe name of the named pipe used as communication channel between the \u201csystem\u201d and the \u201cuser\u201d\n\n(system_pipe);\n\nThe process name where stage 3 will be injected (iproc);\n\n\u2026\n\nCommunication via named pipes\n\nThe orchestrator creates two named pipes in order to communicate with stage 3 or to receive messages\n\nfrom an external machine:\n\n\\\\.\\\\pipe\\sdlrpc\n\n\\\\.\\\\pipe\\comnap (the name in the configuration file)\n\nFeatures\n\nThe orchestrator creates nine threads in order to handle the different features. We will now have a look at\n\nthe most interesting threads.\n\nOne thread is used to check if the parameters in the configuration file have changed.\n\nA second thread is used to check the available hard disk space. If the HDD space is low, the orchestrator\n\ngenerates an entry in the log file:\n\n\fThe preceding screenshot reveals a rather interesting use of English, again. From what we can conclude,\n\nwe believe \u201cSurvive me\u201d is supposed to mean something like \u201cRescue me\u201d in the sense of \u201chelp me to\n\nsurvive\u201d.\n\nA third thread is created in order to handle the tasks. A task is a command sent from the C&C that is to be\n\nexecuted. The code to be executed is stored locally on the infected machine. The orchestrator is able to\n\nexecute libraries (by executing the export start()) or to execute Windows\u2019 command line. The command\n\nline can be execute with the current user privilege or with the privilege of another user (via\n\nCreateProcessA() or CreateProcessAsUserA()):\n\nA fourth thread is used to handle the log rotation file (vndkrmn.dic).\n\nA fifth thread is used to create and read the data sent to the named pipes.\n\nA sixth thread is used to load plugins. For the orchestrator a module is a library file with a specific export\n\ncalled ModuleStart(). The plugin list is stored in the configuration file ([PLUGINS]). This thread is very\n\nsimilar to the third thread, but is bares some minor differences. The function to execute the plugins is not\n\nthe same.\n\nFinally a seventh thread is used to inject stage 3 (msximl.dll) into the browsers and email clients. The list\n\nof the targeted processes is stored in the configuration file:\n\niproc = iexplore.exe,outlook.exe,msimn.exe,firefox.exe,opera.exe,chrome.exe\n\n \n \n\fAs usual, the injected library is executed via the ModuleStart() exports.\n\nLog file\n\nThe orchestrator and stage 3 generate a shared log file. The file is encrypted with the same algorithm and\n\nthe same key as the configuration file. Here is an example of the content:\n\npaul@gdata:~/Carbon$ ./decrypt.py infected/vndkrmn.dic\n\n[LOG]\n\nstart=1\n\n30/12/14|08:28:44|acce6511-ba11-fa11-f0047d1|s|ST|3/71|0|\n\n30/12/14|08:29:50|acce6511-ba11-fa11-f0047d1|s|INJ|C:\\Program Files\\Windows Mail\\en-\n\nUS\\msximl.dll|\n\n30/12/14|08:30:28|acce6511-ba11-fa11-f0047d1|s|INJ|0|2204|\n\n30/12/14|08:30:28|acce6511-ba11-fa11-f0047d1|u|ST|3/62|"], "URLs": [], "weight": 0.0}