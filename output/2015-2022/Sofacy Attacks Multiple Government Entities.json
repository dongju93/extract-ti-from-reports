{"rule_id": 672, "name": "Sofacy Attacks Multiple Government Entities", "description": "-", "references": [], "File_Names": ["ihsmarkit.com", "hot\ufb01xmsupload.com", "part1.pdf", "CarvedDLL_decrypted.dat", "2018.xls", "cdnver.bat", "fp.read", "shellntel.com", "radisys.msml", "Cdnver.dll", "Cdnver.bat", "carvedDLL.dat", "cdnver.dll", "vnd.wmc", "luckystrike_di\ufb00.png", "WindowsApp.lib", "cdnverify.net", "uncompressed.raw"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": ["cb85072e6ca66a29cb0b73659a0fe5ba2456d9ba0b52e3a4c89e86549bc6e2c7", "23411bb30042c9357ac4928dc6fca6955390361e660fec7ac238bbdcc8b83701", "12e6642cf6413bdf5388bee663080fa299591b2ba023d069286f3be9647547c8"], "Registry_Entries": ["HKCU\\Environment\\UserInitMprLogonScript\n\nThe cdnver.dll payload installed by the loader executable is a variant of the SofacyCarberp\n(https://researchcenter.paloaltonetworks.com/tag/carberp/) payload, which is used extensively by the\nSofacy threat group. Overall, SofacyCarberp does initial reconnaissance by gathering system information\n\n\u00a0\n\u00a0\n\fand sending it to the C2 server prior to downloading additional tools to the system. This variant of\nSofacyCarberp was con\ufb01gured to use the following domain as its C2 server:\n\ncdnverify[.]net\n\nThe loader and the SofacyCarberp sample delivered in this attack is similar to samples we have analyzed\nin the past but contains marked di\ufb00erences. These di\ufb00erences include a new hashing algorithm to resolve\nAPI functions and to \ufb01nd running browser processes for injection, as well as changes to the C2\ncommunication mechanisms as explained in detail within the appendix.\n\nOpen-source Delivery Document Generator\n\nIt appears that Sofacy may have used an open-source tool called Luckystrike\n(https://github.com/curi0usJack/luckystrike) to generate the delivery document and/or the macro used in\nthis attack. Luckystrike, which was presented at DerbyCon 6 in September 2016\n(https://www.shellntel.com/blog/2016/9/13/luckystrike-a-database-backed-evil-macro-generator), is a\nMicrosoft PowerShell-based tool that generates malicious delivery documents by allowing a user to add a\nmacro to an Excel or Word document to execute an embedded payload. We believe Sofacy used this tool,\nas the macro within their delivery document closely resembles the macros found within Luckystrike.\n\nTo con\ufb01rm our suspicions, we generated a malicious Excel \ufb01le with Luckystrike and compared its macro\nto the macro found within Sofacy\u2019s delivery document. We found that there was only one di\ufb00erence\nbetween the macros besides the random function name and random cell values that the Luckystrike tool\ngenerates for each created payload. The one non-random string di\ufb00erence was the path to the \u201c.txt\u201d and\n\u201c.exe\u201d \ufb01les within the command \u201ccertutil -decode\u201d, as the Sofacy document used \u201cC:\u29f5Programdata\u29f5\u201d for\nthe path whereas the Luckystrike document used the path stored in the Application.UserLibraryPath\nenvironment variable. Figure 3 below shows a di\ufb00 with the LuckyStrike macro on the left and Sofacy\nmacro on the right, where everything except the \ufb01le path and randomly generated values in the macro are\nexactly the same, including the obfuscation attempts that use concatenation to build strings.\n\n(https://researchcenter.paloaltonetworks.com/wp-content/uploads/2018/02/luckystrike_di\ufb00.png)\n\nFigure 4 Di\ufb00 of macros in Luckystrike generated document (left) and Sofacy\u2019s delivery document (right)\n\nDiscovery and relationships\n\nWith much of our research, our initial direction and discovery of emerging threats is generally some\ncombination of previously observed behavioral rulesets or relationships. In this case, we had observed a\nstrange pattern emerging from the Sofacy group over the past year within their command and control\ninfrastructure. Patterning such as reuse of WHOIS artifacts, IP reuse, or even domain name themes are\ncommon and regularly used to group attacks to speci\ufb01c campaigns. In this case, we had observed the\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\fSofacy group registering new domains, then placing a default landing page which they then used\nrepeatedly over the course of the year. No other parts of the C2 infrastructure amongst these domains\ncontained any overlapping artifacts. Instead, the actual content within the body of the websites was an\nexact match in each instance. Speci\ufb01cally, the strings 866\u00ad593\u00ad54352 (notice it is one digit too long),\n403\u00ad965\u00ad2341, or the address 522\u00a0Clematis.\u00a0Suite\u00a03000 was repeatedly found in each instance.\nThreatConnect (https://www.threatconnect.com/blog/track-to-the-future/) had made the same\nobservation regarding this patterning in September 2017.\n\nFigure 5 Default landing page for cdnverify.net domain\n\nFigure 6 Default landing page for hot\ufb01xmsupload.com domain\n\nHotfixmsupload[.]com is particularly interesting as it has been identi\ufb01ed as a Sofacy C2 domain\nrepeatedly, and was also brought forth by Microsoft in a legal complaint against STRONTIUM (Sofacy) as\ndocumented here (https://noticeofpleadings.com/strontium/).\n\n\u00a0\n\fLeveraging this intelligence allowed us to begin predicting potential C2 domains that would eventually be\nused by the Sofacy group. In this scenario, the domain cdnverify[.]net was registered on January 30,\n2018 and just two days later, an attack was launched using this domain as a C2.\n\nConclusion\n\nThe Sofacy group should no longer be an unfamiliar threat at this stage. They have been well documented\nand well researched with much of their attack methodologies exposed. They continue to be persistent in\ntheir attack campaigns and continue to use similar tooling as in the past. This leads us to believe that their\nattack attempts are likely still succeeding, even with the wealth of threat intelligence available in the public\ndomain. Application of the data remains challenging, and so to continue our initiative of establishing\nplaybooks for adversary groups, we have added this attack campaign as the next playbook (https://pan-\nunit42.github.io/playbook_viewer/) in our dataset.\n\nPalo Alto Networks customers are protected from this threat by:\n\n1. WildFire detects all SofacyCarberp payloads with malicious verdicts.\n2. AutoFocus customers can track these tools with the Sofacy\n\n(https://autofocus.paloaltonetworks.com/#/tag/Unit42.Sofacy), SofacyMacro\n(https://autofocus.paloaltonetworks.com/#/tag/Unit42.SofacyMacroDoc) and SofacyCarberp\n(https://autofocus.paloaltonetworks.com/#/tag/Unit42.SofacyCarberp)\n\n3. Traps blocks the Sofacy delivery documents and the SofacyCarberp payload.\n\nIOCs\n\nSHA256\n\n\ufb00808d0a12676bfac88fd26f955154f8884f2bb7c534b9936510fd6296c543e8\n\n12e6642cf6413bdf5388bee663080fa299591b2ba023d069286f3be9647547c8\n\ncb85072e6ca66a29cb0b73659a0fe5ba2456d9ba0b52e3a4c89e86549bc6e2c7\n\n23411bb30042c9357ac4928dc6fca6955390361e660fec7ac238bbdcc8b83701\n\nDomains\n\nCdnverify[.]net\n\nEmail Subject\n\nUpcoming Defense events February 2018\n\nFilename\n\nUpcoming Events February 2018.xls\n\nAppendix\n\nLoader Trojan\n\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\u00a0\n\fThe payload dropped to the system by the macro is an executable that is responsible for installing and\nexecuting a dynamic link library (DLL) to the system. This executable contains the same decryption\nalgorithm as the loader we analyzed in the DealersChoice attacks in late 2016\n(https://researchcenter.paloaltonetworks.com/2016/10/unit42-dealerschoice-sofacys-\ufb02ash-player-exploit-\nplatform/).\n\nThe loader has several coding features that make it interesting.\u00a0 For example, upon execution, the loader\nattempts to load the following library:\u00a0 api\u00adms\u00adwin\u00adcore\u00adsynch\u00adl1\u00ad2\u00ad0.dll.\u00a0 This DLL is part of the\nUniversal Windows Platform app to Windows 10. Typically, a developer would not link directly to this \ufb01le,\nbut to WindowsApp.lib, which gives access to the underlying APIs.\u00a0 It appears the loader included\nde\ufb01nitions of wrappers for Windows API functions that cannot be called directly because they are not\nsupported on all operating systems.\n\nUpon execution, the loader will decrypt the embedded payload (DLL) using a custom algorithm followed\nby decompressing it using the RtlDecompressBuffer API.\u00a0 This API is normally used for Windows\ndrivers, but there is nothing to prevent a userland process from using it, and the parameters are\ndocumented (https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-\nrtldecompressbu\ufb00er) on MSDN.\u00a0 The compression algorithm used is LZNT1 with maximum compression\nlevel.\u00a0 The payload is decrypted using a starting 10-byte XOR key of: 0x3950BE2CD37B2C7CCBF8.\u00a0 Once\ndecrypted, the data is then passed to the decompression routine.\u00a0 The payload is in the loader at \ufb01le\no\ufb00set:\u00a0\u00a00x19880\u00a0\u2013\u00a00x1F23C size of 0x59BD.\u00a0 The payload can be decrypted and decompressed with\nthe following Python script:\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n\nimport ctypes\nnt\u00a0\u00a0 =\u00a0\u00a0ctypes.windll.ntdll\n\ndef decompress_buffer(data):\n\u00a0\u00a0\u00a0\u00a0final_size = ctypes.c_ulong(0)\n\u00a0\u00a0\u00a0\u00a0uncompressed =ctypes.c_buffer(0x7c00)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0nt.RtlDecompressBuffer(0x102,uncompressed,0x7C00,ctypes.c_char_p(data),0x59BD,ctypes.byref(fi\n\u00a0\u00a0\u00a0\u00a0return uncompressed.raw\n\ndef main():\n\u00a0\u00a0\u00a0\u00a0Startkey="], "URLs": ["https://researchcenter.paloaltonetworks.com/tag/carberp/)", "https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/content/ntifs/nf-ntifs-", "https://researchcenter.paloaltonetworks.com/tag/sofacy/),", "https://researchcenter.paloaltonetworks.com/2016/10/unit42-", "https://researchcenter.paloaltonetworks.com/tag/luckystrike/),", "https://researchcenter.paloaltonetworks.com/tag/apt28/),", "https://researchcenter.paloaltonetworks.com/2016/10/unit42-dealerschoice-sofacys-", "https://www.shellntel.com/blog/2016/9/13/luckystrike-a-database-backed-evil-macro-generator),", "https://noticeofpleadings.com/strontium/).", "https://pan-", "https://researchcenter.paloaltonetworks.com/author/bryan-lee/),", "https://researchcenter.paloaltonetworks.com/tag/ministry-of-foreign-a", "http://www.janes.com/)", "https://researchcenter.paloaltonetworks.com/wp-content/uploads/2018/02/luckystrike_di", "https://researchcenter.paloaltonetworks.com/tag/powershell/),", "https://researchcenter.paloaltonetworks.com/tag/carberp/),", "https://isc.sans.edu/forums/diary/Simple+but+E", "https://researchcenter.paloaltonetworks.com/tag/trojan/)", "https://github.com/curi0usJack/luckystrike)", "https://www.welivesecurity.com/wp-content/uploads/2016/10/eset-sednit-part1.pdf).", "https://researchcenter.paloaltonetworks.com/author/mike-harbison/)", "https://www.threatconnect.com/blog/track-to-the-future/)", "https://researchcenter.paloaltonetworks.com/2016/06/unit42-new-sofacy-attacks-against-us-"], "weight": 0.0}