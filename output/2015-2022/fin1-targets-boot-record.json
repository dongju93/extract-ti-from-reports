{"rule_id": 787, "name": "fin1-targets-boot-record", "description": "-", "references": [], "File_Names": ["nemesis.sys", "cc976797.aspx", "bootldr.sys", "core.sys", "malwaretech.com", "injproxy.dll", "vbs.bin", "nmscfg.dat", "beginners.html", "vfs.sys", "vbr.bin", "loader.dll", "nemesis.dll"], "MD5_Hashes": ["76b6dc622264e3ad822a691a7ec68865", "073a2998a6f1ccf0ea89fe60ce4bdeaf", "dd366fcb810594e0620fdf672b03f4d5", "d0b9f9bccbc3725bfcc9546986982ff3", "1c17c92519523a129e9abd298bb78521", "15de35de527ebe2115746b4fd4f1ba1d", "012e6f3ee70d6558f8002d0efce5c9e0", "472926fe51fc6a4fdf687e8a4de64d78", "21cd4a30ac322bfc9bd2401ea17acfc0", "fed12e07499e8cd3a5a47f1f7a8db0be", "ac64ef80f8209ae7b67be0be9ea6400e", "c145624f148980ad026ea7b79e61212d", "efbff3b08b5d368976eb4675bb4c000f", "372f1e4d2d5108bbffc750bb0909fc49"], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\.Default\\Identities registry keys. These components are\nresponsible for the primary C2 functionality of the Nemesis ecosystem that includes: file transfer, screen\ncapture, keystroke logging, process injection, process manipulation, and task scheduling.\n\nTable 1 details the associated registry keys.\n\nRegistry Value Name\n\nFile Content\n\nHKCU\\.Default\\Identities\\{3D04DDFA-AE6F-4BC2-\n9AE6-4A76A471147A}\n\ncore.sys\n\nHKCU\\.Default\\Identities\\{424D9649-5B57-4C9B-A55A-\n00D6CD382092}\n\nvfs.sys\n\nHKCU\\.Default\\Identities\\{AA1F2588-670C-450E-833B-\nC8CAAF26DA5E}\n\nnemesis.sys\n\nHKCU\\.Default\\Identities\\{95E4F335-E152-4778-B3B0-\n3422B37B3A3D}\n\ninjproxy.dll\n\nHKCU\\.Default\\Identities\\{C34C01DC-8E9D-40AF-\n82FF-79DB2735C333}\n\nloader.dll\n\nHKCU\\.Default\\Identities\\{4EED1600-54C9-471E-B74F-\n2A88BAC188B4}\n\nnemesis.dll\n\nHKCU\\.Default\\Identities\\{36203264-DFF1-43AC-\n94AD-096592297776}\n\nnmscfg.dat\n\nTable 1: Nemesis components optionally saved as registry values\n\nStep 5: Hijacked Boot Process\n\nAs previously discussed, during a normal boot process the MBR loads the VBR, which loads the operating\nsystem code. However, during the hijacked boot process, the compromised system\u2019s MBR will attempt to load\nthe boot partition\u2019s VBR, which has been overwritten with the malicious BOOTRASH bootstrap code. This\ncode loads the Nemesis bootkit components from the custom virtual file system. The bootkit then passes\ncontrol to the original boot sector, which was saved to a different location on disk during the installation\nprocess. From this point the boot process continues with the loading and executing of the operating system\nsoftware. Figure 2 illustrates the hijacked boot process.\n\n\fFigure 2. Simplified hijacked boot process\n\nThe bootkit intercepts several system interrupts to assist with the injection of the primary Nemesis\ncomponents during the boot process. The bootkit hijacks the BIOS interrupt[6] responsible for miscellaneous\nsystem services and patches the associated Interrupt Vector Table entry so it can intercept memory queries\nonce the operating system loader gains control. The bootkit then passes control to the original VBR to allow\nthe boot process to continue. While the operating system is being loaded, the bootkit also intercepts the\ninterrupt and scans the operating system loader memory for a specific instruction that transfers the CPU from\nreal mode to protected mode.[7] This allows the bootkit to patch the Interrupt Descriptor Table each time the\nCPU changes from real mode to protected mode. This patch involves a modified interrupt handler that\nredirects control to the bootkit every time a specific address is executed. This is what allows the bootkit to\ndetect and intercept specific points of the operating system loader execution and inject Nemesis components\nas part of the normal kernel loading.\n\nUninstall Option\n\nBOOTRASH has a built in option for restoring the original boot sector, in the event that the threat actors wish\nto remove the hijacking process. This option only restores the original boot sector \u2013 it does not remove the\ncustom virtual file system or the backup VBR that was created by BOOTRASH.\n\nOther Bootkits\n\nMalware that persists by compromising the MBR or VBR is unusual, but not unknown. ESET documented\ntheir technical research into bootkit malware families such as \u2018TDL4\u2019 (also known as \u2018Olmarik\u2019), \u2018Necurs\u2019, and\n\u2018Rovnix\u2019 in 2011,[8] and cataloged various MBR and VBR infection vectors in 2012.[9]\n\nIn addition, there have been reports of financially motivated malware utilizing bootkits. In 2013, RSA warned\nthat a banking Trojan named \u2018KINS\u2019 had VBR bootkit functionality and was being advertised on a Russian-\nspeaking online forum[10]. There was also reporting in 2013 that the source code for another banking Trojan,\nknown as \u2018Carberp,\u2019 was publicly leaked. Reports stated the Trojan had been sold for $40,000 due to the\naddition of bootkit functionality[11].  Further reporting indicated the bootkit component might not have been\ncompletely operational[12].  Regardless, the high price commanded for the malware is indicative of the bootkit\ncode complexity, as well as the demand for banking malware with this evasive capability.\n\nNot Just a Financial Threat\n\nIn 2012, Mandiant observed a suspected China-based, Advanced Persistent Threat (APT) group utilizing a\nMBR (as opposed to VBR) bootkit that we call ROCKBOOT to establish persistence for backdoors at victim\norganizations within an industry unrelated to financial services. This group, like many of the threat groups we\ntrack, primarily uses more traditional techniques for ensuring their malware remains persistent, such as\nmodifying Windows registry keys or using techniques like DLL search order hijacking. This threat group\ndeployed the bootkit as part of the toolset used to steal intellectual property from the victim organization.\n\n\fThe selective use of bootkits for persistence suggests some threat actors may have access to more\nsophisticated toolsets. The threat actors may selectively deploy these advanced toolsets when the victim\norganization is difficult to penetrate or if the targeted data is of high value and the threat actors want to ensure\ncontinued access to the compromised environment.\n\nElevating Detection Capabilities\n\nBootkits, such as BOOTRASH, are very difficult to detect because they have the potential to be installed and\nexecuted almost completely outside of the Windows operating system.[13] Because the malicious boot loader\nexecutes before Windows itself is fully loaded, it is not subject to typical operating system integrity checks.\nThe components used to load the malware payload are not scanned by anti-virus software, because they are\nstored in a VFS outside the Windows file system. In addition, the malware components themselves are stored\neither in the VFS or the Windows registry \u2013 another location not typically scanned by anti-virus. This leaves\nlive memory as the only location where the malware is likely to be detected; and unless the bootkit and VFS\ncomponents are removed, the malware will execute and load every time the system starts. Wiping the\noperating system partition and re-installing will not remove the bootkit or VFS components written to\nunallocated space.\n\nDuring the investigation with BOOTRASH, we used Mandiant Intelligent Response (MIR), a proprietary host-\nbased technology that provides raw disk access, to look for malware persistence outside of the operating\nsystem. This tool allowed us to identify systems that had a modified VBR.\n\nConclusion\n\nThe use of malware that persists outside of the operating system requires a different approach to detection\nand eradication. Malware with bootkit functionality can be installed and executed almost completely\nindependent of the Windows operating system. As a result, incident responders will need tools that can\naccess and search raw disks at scale for evidence of bootkits. Similarly, re-installing the operating system\nafter a compromise is no longer sufficient. System administrators should perform a complete physical wipe of\nany systems compromised with a bootkit and then reload the operating system.\n\nAppendix: Associated MD5 Hashes\n\nMD5 Hash\n\nFunction\n\n372f1e4d2d5108bbffc750bb0909fc49\n\nBOOTRASH dropper\n\nac64ef80f8209ae7b67be0be9ea6400e\n\nWindows 7 and later 32-bit\nmodified VBR\n\n073a2998a6f1ccf0ea89fe60ce4bdeaf\n\nWindows 7 and later 64-bit\nmodified VBR\n\nc145624f148980ad026ea7b79e61212d\n\nWindows XP 32-bit modified\nVBR\n\n472926fe51fc6a4fdf687e8a4de64d78\n\nWindows XP 64-bit modified\nVBR\n\n1c17c92519523a129e9abd298bb78521\n\nBootstrap code for systems\nwith NTFS/MBR\n\n\f15de35de527ebe2115746b4fd4f1ba1d\n\n32-bit Boot loader driver\n\n012e6f3ee70d6558f8002d0efce5c9e0\n\n64-bit Boot loader driver\n\ndd366fcb810594e0620fdf672b03f4d5\n\n32-bit Core services driver\n\nfed12e07499e8cd3a5a47f1f7a8db0be\n\n64-bit Core services driver\n\n21cd4a30ac322bfc9bd2401ea17acfc0\n\n32-bit Nemesis driver\n\n76b6dc622264e3ad822a691a7ec68865 64-bit Nemesis driver\n\nd0b9f9bccbc3725bfcc9546986982ff3\n\n32-bit VFS driver\n\nefbff3b08b5d368976eb4675bb4c000f\n\n64-bit VFS driver\n\n[1] The name \u2018Nemesis\u2019 is referenced in several build paths for the malware.\n\n[2] https://technet.microsoft.com/en-us/library/cc976797.aspx\n\n[3] https://en.wikipedia.org/wiki/Volume_boot_record\n\n[4] http://windows.microsoft.com/en-us/windows/install-multiple-operating-system-multiboot#1TC=windows-7\n\n[5] http://www.malwaretech.com/2014/11/virtual-file-systems-for-beginners.html\n\n[6] A BIOS interrupt is a hardware or software driven condition requiring the interruption of the current code\nthe processor is executing.\n\n[7] Protected mode is an operating state that provides hardware-level protections for a system\u2019s memory. Real\nmode does not provide this protection support.\n\n[8] http://www.welivesecurity.com/2011/08/23/hasta-la-vista-bootkit-exploiting-the-vbr/\n\n[9] http://www.welivesecurity.com/2012/12/27/win32gapz-new-bootkit-technique/\n\n[10] https://blogs.rsa.com/is-cybercrime-ready-to-crown-a-new-kins-inth3wild/\n\n[11] http://threatpost.com/carberp-source-code-leaked/101070/\n\n[12] http://krebsonsecurity.com/tag/carberp-bootkit/\n\n[13] Malware with bootkit functionality still relies on the operating system to initiate installation. However, the\nactual payload (the bootkit itself) can be allocated to disk outside of the operating system.\n\nThis entry was posted on Mon Dec 07 08:00:00 EST 2015 and filed under Advanced Malware, Blog, Dimiter\nAndonov, Jay Taylor , Latest Blog Posts, Malware, Mandiant, Nalani Fraser, Threat Research, Will Matson,\nWilli Ballenthin and bootkits.\n\n\fBe the first to receive information on major cyber attacks from the industry leader!\n\nFirst Name\n\nLast Name\n\nEmail Address\n\nSubscribe\n\nCyber Security Fundamentals\n\nCareers\n\nEvents\n\nWebinars\n\nSupport\n\nPartners\n\n\fNewsroom\n\nBlog\n\nInvestor Relations\n\nIncident?\n\nContact Us\n\nCommunication Preferences\n\nReport Security Issue\n\nSupplier Documents\n\n\u0000\n\u0000\n\u0000\n\u0000\n\u0000\n\u0000\n\nFacebook\n\nLinkedIn\n\nTwitter\n\nGoogle+\n\nYouTube\n\nGlassdoor\n\nCopyright \u00a9 2015 FireEye, Inc. All rights reserved. \n\nPrivacy & Cookies Policy | Safe Harbor\n\n\f"], "URLs": ["http://www.malwaretech.com/2014/11/virtual-file-systems-for-beginners.html", "http://krebsonsecurity.com/tag/carberp-bootkit/", "https://blogs.rsa.com/is-cybercrime-ready-to-crown-a-new-kins-inth3wild/", "http://www.welivesecurity.com/2011/08/23/hasta-la-vista-bootkit-exploiting-the-vbr/", "http://windows.microsoft.com/en-us/windows/install-multiple-operating-system-multiboot", "http://www.welivesecurity.com/2012/12/27/win32gapz-new-bootkit-technique/", "http://threatpost.com/carberp-source-code-leaked/101070/", "https://en.wikipedia.org/wiki/Volume_boot_record", "https://technet.microsoft.com/en-us/library/cc976797.aspx"], "weight": 0.0}