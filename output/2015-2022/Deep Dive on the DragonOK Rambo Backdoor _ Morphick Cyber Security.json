{"rule_id": 962, "name": "Deep Dive on the DragonOK Rambo Backdoor _ Morphick Cyber Security", "description": "-", "references": [], "File_Names": ["vmwarebase.dll", "postgres.exe", "morphick.com", "FirstBlood.tmp", "vimeo.com", "HeartDll.dll", "nginxr7.exe", "222.txt", "mancely.com", "Vmwarebase.dll", "excite.co", "vprintproxy.exe", "fp.seek", "FilterHost.exe"], "MD5_Hashes": [], "SHA1_Hashes": [], "SHA256_Hashes": ["76405617acc7fa6c51882fe49d9b059900c10fc077840df9f6a604bf4fab85ba", "5bfcd2cc01a5b930fc704a695f0fe38f1bca8bdfafd8b7d931a37428b5e86f35", "11668a0666636b3c40b61986bf132a8ca6ab448fddcaa9e4ed22f6ca7f7b8a50", "e154e62c1936f62aeaf55a41a386dbc293050acec8c4616d16f75395884c9090", "7571642ec340c4833950bb86d3ded4d4b7c2068347e8125a072c5a062a5d6b68"], "Registry_Entries": ["HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\FaultChec\nis established at the persistence key with the key value pointing at C:\\Users\\\n\n<username>\\AppData\\Local\\Temp\\<filename>\n\nRambo will then fetch its con\u0000guration by reading in the last 260 bytes of itself.\n\nThe key \u201csd\u0000popdfjkaweriopasdfnkl\u201d is loaded, which is eventually used to decrypt the buffer using\ntiny encryption algorithm (TEA).\n\nEven though the whole string is referenced as a string, only the \u0000rst 16 characters are used as the\nfunctional key.\u00a0 Perhaps this is a misunderstanding of the author, or an attempt to throw off analysts.\nThe steps of the TEA decryption can be seen below.\n\nhttp://www.morphick.com/resources/news/deep-dive-dragonok-rambo-backdoor\n\n4/27\n\n\f2/28/2017\n\nDeep Dive on the DragonOK Rambo Backdoor | Morphick Cyber Security\n\n\uf16a\n\n WATCH the MORPHICK MDR INTRO (https://vimeo.com/204217543)\n\nThe decryption of the code can be translated to python with the following snippet.\u00a0 (To get the\ndecryption working, we had to make some patches to the opensource PyTea implementation, a\nmodi\u0000ed copy of the script that is used is posted at the end of this blogpost)\n\nhttp://www.morphick.com/resources/news/deep-dive-dragonok-rambo-backdoor\n\n5/27\n\n\f2/28/2017\n\nDeep Dive on the DragonOK Rambo Backdoor | Morphick Cyber Security\n\n\uf16a\n\n WATCH the MORPHICK MDR INTRO (https://vimeo.com/204217543)\n\n#!/usr/bin/env python \n\nfrom ctypes import * \n\nfrom pprint import pprint \n\nimport sys \n\nimport tea \n\nimport re \n\nimport struct \n\ndef ascii_strings(data): \n\n    strings = [] \n\n    for match in re.finditer(r'[\\x20-\\x80\\n\\r\\t]{16,64}',data): \n\n        strings.append(match.group()[:16]) \n\n    return strings \n\ndef to_c_array(data): \n\n    ''' Converts a string to a list of c_uint32s ''' \n\n    c_array = [] \n\n    char_array = [hex(ord(char))[2:] for char in data] \n\n    for index in range(0, len(char_array), 4): \n\n        block = char_array[index:index + 4] \n\n        hex_value = '0x' + ''.join(block) \n\n        c_array.append(c_uint32(int(hex_value, 16))) \n\n    return c_array \n\nwith open(sys.argv[1], 'rb') as fp: \n\n    data = fp.read() \n\nciphertext = data[-260:] \n\npadding = len(ciphertext)%8 \n\nciphertext += '\\x00'*padding \n\nhttp://www.morphick.com/resources/news/deep-dive-dragonok-rambo-backdoor\n\n6/27\n\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\f2/28/2017\n\nDeep Dive on the DragonOK Rambo Backdoor | Morphick Cyber Security\n\nfor key in ascii_strings(data): \n\n    #print 'trying key %s' % (key) \n\n    try: \n\n\uf16a\n\n WATCH the MORPHICK MDR INTRO (https://vimeo.com/204217543)\n\n        plaintext = tea.decrypt(ciphertext, key,verbose=False) \n\n        if "], "URLs": ["http://www.morphick.com/resources/news/deep-dive-dragonok-rambo-backdoor", "https://vimeo.com/204217543)"], "weight": 0.0}