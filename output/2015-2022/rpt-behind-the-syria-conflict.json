{"rule_id": 785, "name": "rpt-behind-the-syria-conflict", "description": "-", "references": [], "File_Names": ["adobex86setup.sfx", "cvtres.exe", "_ctypes.pyd", "Suffering_cod.exe", "vpn7x32.exe", "setup.sfx", "willing.be", "Picture.pif", "Amerika.exe", "crazy.What", "Source.cpp", "passports.We", "python27.dll", "microtec.sfx", "adobe32en.sfx", "concern.exe", "adobesetupx86.exe", "execution_fdp.exe", "smuggler.He", "microtec.exe", "64x.sfx", "windows_pif_create.mspx", "leak.pen", "_hashlib.pyd", "VPN7.exe", "Yabrod.pdf", "64x.exe", "Sounds.exe", "Converter.exe", "Regime.exe", "Account.exe", "eldeeb.net", "86x.exe", "hide.vbs", "bayan09072013_pdf.exe", "ghHICmgBqfYrOcL.recv", "Turkey.We", "it.http", "9d351b9ee731d88f12fcaa64010e828d.pdf", "IslamArmyThem.exe", "_ssl.pyd", "twitter.apk", "flashplayer11.sfx", "Update.sfx", "adobeinsx86.exe", "yabrod.pdf", "blogs.msdn", "pyinstaller.org", "adobesetup32.sfx", "install_flashplayer11x32_gdrd_aih.exe", "msvcm90.dll", "unicodedata.pyd", "Mohemmeh.exe", "adobesetup.exe", "BBAG.bat", "Us.exe", "gpj.exe", "adobeflash.sfx", "KL_report_syrian_malware.pdf", "86x.sfx", "bz2.pyd", "Twitter.apk", "keys.txt", "adobeflash.exe", "Billiards.exe", "dl.apk", "reporthezbolla20072013_pdf.exe", "malware.aspx", "adobesetupx86.sfx", "78c5670e2cee9b5c3b88aa9cb27519be.pdf", "nazhin.exe", "_socket.pyd", "smuggler.We", "greenhill.png", "cannon.And", "msvcp90.dll", "ldahya12300012.exe", "alkhaleejonline.net", "Regime_gpj.exe", "vbc.exe", "select.pyd", "pictures.Call", "flashplayer11.exe", "Downloader.exe", "VC90.CRT", "flashplayer11x32_gdrd_aih.exe", "adobesetup.sfx", "update.sfx", "Pic.exe", "JetCleanSetup.exe"], "MD5_Hashes": ["6608ce246612d490f3b044627a5e6d9e", "202eb180f5faa8460941ae60cf63da63", "9491c4e0c08c9347421ae352f14a1329", "39632325327bf21f7d9cf02caf065646", "d1f817744f79dad415a526c4ce51bed9", "4bd3ea86eb7d63b1bdd001e6adbe8b89", "1328d3d4872bfe2c98fd7b672d8dff1b", "c808ef1ab997d0234ee889ecd5176c8e", "182c7b1ad894852d23f4de538e59ac2b", "e0625817eb11874d806909a8c190d45a", "508deeb6a5a37e9f94d5d4733ce0352f", "d87356940d3b15d87453ead6374691ab", "99655bacbe845ad30c6c5ed56a7e13d4", "bc167bca4ca3cf6f2f2bd7e90ecdeb29", "64eb08013399e3ac18c936d361d80e17", "b23b16b3cccba9c1ecd0c0d17cc48979", "bd4769f37de88321a9b64e5f85baf1ef", "ae1ea30e6fb834599a8fed11a9b00314", "57cbbe8e7d18b1980cfc4bc87121b2c7", "e65bdb88e606c45521ab2c04c650ed86", "4cd035012ec6015e48f6fb7001330a95", "6439ccba5b06e434953ba209b8b07107", "f7f8538d2ab0ffee878a4e512230f97d", "4e007cb87626f0093a84ed50b1d27a7f", "692265ba1d4a5b2773e596d3491ed2be", "44df02ac28d80deb45f5c7c48b56a858", "7091f135e4718586d16b56c04b21a6b7", "a1e0d40715f66f30aad44ab4c15a474a", "ff97bc797ed27b5e21e4e4a6e7443219", "b44da59fdaf10fea8bce51772f67b9a9", "d023fc719fba710b44f140deff3f83e4", "a9e5ec23ccdec9cd79af771e2dbf54d5", "a19e70ffa130a096753463b23733927d", "f893d5d351a3ffc1f89a8ec8147cd060", "24f1658f3f38245dc15b9619bc97979b", "e11aeb603cb7a31c2028976a2deed550", "78c5670e2cee9b5c3b88aa9cb27519be", "36875b44145cf20b8d3148e7f7efcea0", "dd08f85686bd48e4bab310d8fbff81a4", "6b5aabd26998568d9ca628713b53cacf", "63fb57fd90590c3c0d0d95d86b6df66d", "0cc7b05c220ecbeb52891d49f1ab41ab", "64a17f5177157bb8c4199d38c46ec93b", "d672e9789f22b806a295f0dd2122316a", "8a0a36d0d1d91b357e5ce8f84ad16346", "c421f4e12892d4ac345e7b03f6a053d2", "dc33cbf669df01302ddd124b028a4fd9", "3ffc4e4081854d04d8217c2ebabdd61d", "931bafa20756eaf8b5371222b5b81a61", "81ef5426583e1d6df4193f38402b40c1", "b91315805ef1df07bdbfa07d3a467424", "fda3816d0bac2e4791cbcfaf33416633", "29e79080b2b2de01b53223542b46d570", "9d351b9ee731d88f12fcaa64010e828d", "748b8aca1c17415648b80f0038381097", "e403972c890cf2eb0a361a91ac5ffe5e", "a577701d4b5ada66912a242a7772b48a", "5e334057856967a5d31c266c550549b0", "de65eed45ac210c66db8082f1a72db8f", "8af83d74033aded17af538e4ccf12092", "c79ad54dead0b446fe8fac60cbd133a7", "97a35a7471e0951ee4ed8581d2941601", "d620deacd018da09a69e24cb978f556d", "7576127f8bd805b30d0016d897211f54", "a691e4b629da2b37dd87e760bfb0106e", "465a0bf22cd101dbd502a2576f10ceb4", "d32aaf60744678e559db59fbe2daa938", "b9623abd519ee688e0b9d9350c83e209", "1b20ea5887775f8eddf5aecd5d220154", "980c6e7f8a10144a28730f3f0adb99d0", "163595b20debdeccdeaf4cb14fba737c", "5ae84cadc1ea5a4bcc027a19eca514c5", "b68a7e216cb0d18030048935b67e0d68", "0bf0e05247b986c484dbfe53ebb8ac48", "4d70791db506cb04e62b607e1f57699c", "4268e2a8209429155ef5df22ca17c0be", "0e24a0060493bcb85ce4a5110550f204", "7247d42b3b4632dc7ed9d8559596fff8", "e41c913327e6974730da99e7c327a2a2", "27c2b873849227de45ec10fca112f322", "e0b1caec74f31e8196a250f133f4345a", "f18dedf9f5d213deba18a2e037819ea1", "e2a624302af7a3eeb59cbb58f36b0fac", "2a456e35918700bc76f6ec1dd9ea93a1", "47702a6cdc59859ec97c99aa31148ae6", "89dda79018d6216970a274b16b3494ad", "ef56383f53b7ccb08016737c98fe2982", "0187be3ccf42c143ab96e7bbf2efbf2f", "d4b4367f874c9c8d645b1560f9d259ea"], "SHA1_Hashes": [], "SHA256_Hashes": [], "Registry_Entries": ["HKCU\\\nSOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\1).\n\nWe suspect that the malware authors used an automated tool \nto embed the DarkComet payload within the second binary and \n\nwithin the BLACKSTAR dropper. Interestingly, we observed at \nleast one case where the payload may have been run through the \npackaging tool twice; that is, the BLACKSTAR dropper contained \nan embedded REDDWARF binary, which contained another \nBLACKSTAR dropper, which contained another REDDWARF \nbinary, which contained the final DarkComet payload:\n\n\u2022\t BLACKSTAR\tbinary\t(itself\tcontained\twithin\tmultiple\tSFXRAR\tfiles):\t\nGoogleUpdate.exe,7247d42b3b4632dc7ed9d8559596fff8.\n\n\u2022\t Embedded\tREDDWARF\tbinary:\t\n\n1b20ea5887775f8eddf5aecd5d220154\n\n\u2022\t Embedded\tBLACKSTAR\tbinary:\t \n\n97a35a7471e0951ee4ed8581d2941601\n\n\u2022\t Embedded\tREDDWARF\tbinary:\t\n\ndd08f85686bd48e4bab310d8fbff81a4\n\n\u2022\t Embedded\tDarkComet\tpayload:\t\n\nae1ea30e6fb834599a8fed11a9b00314\n\nThat particular BLACKSTAR dropper \n(7247d42b3b4632dc7ed9d8559596fff8) was dropped  \nby at least four different original \u201clure\u201d files.\n\n25\n\nBehind the Syrian Conflict\u2019s Digital Front LinesI have a smuggler.He helps get [smuggle] people out. Do you know someone that can get us some identities and Passports for travel?We are not looking for a smuggler.We want identities and passports.We do not want them for Turkey.We want them for the UAE and others. [The passports]That is my brothers job, he knows about thatgoodAha\fYABROD DOWNLOADER AND CABLECAR LAUNCHER\nThis threat group deploys a set of malware consisting of an initial downloader that we call YABROD and a \nlauncher that we call CABLECAR. \n\nThe YABROD downloader contains embedded shellcode (used to download and execute a second binary) \nand an embedded, password-protected PDF stored in a PE resource named PDF. The PDF file is not \nmalicious and acts as a decoy document, displaying relevant content to its intended victim. However, the \nPDF also contains a shellcode payload, and data used to generate an XOR key to decode the shellcode.\n\nYABROD does not decode and execute the shellcode from the PDF on its own, but relies on a downloaded \nsecond-stage binary (CABLECAR) to do so. Some YABROD variants also contain an embedded, non-\nmalicious executable stored in a PE resource named EXE. The executable acts as a second decoy, installing \na valid piece of software while the YABROD downloader runs in the background.\n\nYABROD attempts to inject its embedded shellcode into a specified process on the victim computer; the \nprocess may vary depending on the YABROD sample. We identified variants that attempted to inject \ninto Skype (skype.exe); various browser processes (chrome.exe, firefox.exe, iexplore.exe); \nor specific processes associated with Microsoft .NET (e.g., cvtres.exe). Presumably the threat actors \nselected processes they expected to be running on their victims\u2019 computers. \n\nOnce loaded into its target process, the YABROD shellcode connects to a specified C2 server via HTTP to \ndownload and execute a second file. We have identified samples that use a hard-coded IP address for C2, \nas well as samples that use a URL redirect to connect to a Dropbox account.\n\nThe YABROD samples we identified download an executable launcher that we call CABLECAR; \nCABLECAR parses the password-protected PDF dropped by YABROD to identify a 16-byte key and \nthe embedded shellcode payload. The key is used with a substitution table from the CABLECAR binary \nto generate an XOR key to decode the shellcode payload from the PDF. CABLECAR then attempts to \ninject the shellcode into a specific process; similar to YABROD, the process may vary across samples but \nincludes browsers (chrome.exe, firefox.exe, iexplore.exe) and .NET processes (vbc.exe). In the \nsamples we analyzed, the shellcode payload was a Metasploit reverse shell; the shellcode is loaded only in \nto memory and never touches disk.\n\n26\n\nBehind the Syrian Conflict\u2019s Digital Front LinesSPECIAL REPORT\fFigure 16: Yabrod password-protected PDF\n\nFigure 17: Downloading the file Yabrod.pdf\n\nDETAILED ANALYSIS\nBelow is a detailed analysis of a particular YABROD sample.\n\nStep 1: The YABROD downloader (bd4769f37de88321a9b64e5f85baf1ef) attempts to launch the \n\nMicrosoft .NET process %systemroot%\\Microsoft.NET\\Framework\\v2.0.50727\\cvtres.exe \nin a suspended state and inject its embedded shellcode into the process. After that, the downloader \nsleeps for 2 minutes to allow the shellcode to execute.\n\nStep 2: The YABROD downloader checks for the existence of two PE resources, PDF #112 \nand EXE #115. YABROD extracts an embedded password-protected PDF file \n(e0625817eb11874d806909a8c190d45a) from Resource PDF #112 and writes it to %temp%\\\nYabrod.pdf.\n\nStep 3: YABROD then extracts and executes an embedded executable decoy file from resource EXE \n\n#115, vpn7x32.exe (bc167bca4ca3cf6f2f2bd7e90ecdeb29), which is a legitimate installation \nprogram for a VPN client. Note: if the EXE resource exists, YABROD uses the embedded \nexecutable as the decoy file displayed to the user. If there were no EXE resource, YABROD would \ndisplay the embedded PDF as a decoy instead, using the default application as specified in the \nWindows registry. An excerpt from the PDF\u2019s content is shown in Figure 16.\n\nStep 4: The YABROD shellcode injected into cvtres.exe downloads a file by making a HTTP request \n\nto 80.241.223.128/Yabrod.pdf using \u201cn1\u201d as the User-Agent. The downloaded file is placed \nin %temp% as GoogleUpdate.exe. A registry value GoogleUpdate is added under HKCU\\\nSoftware\\Microsoft\\Windows\\CurrentVersion\\Run and set to \u201c%temp%\\GoogleUpdate.\nexe\u201d. The %temp% environment variable is expanded prior to writing the registry value.\n\nThe download request and response are shown in Figure 17.\n\n27\n\nBehind the Syrian Conflict\u2019s Digital Front LinesSPECIAL REPORT\fFigure 18: Libraries dropped\n\n_ctypes.pyd \n_hashlib.pyd \n_socket.pyd \n_ssl.pyd \nbz2.pyd \nImo-Pic.exe.manifest \nMicrosoft.VC90.CRT.manifest \nmsvcm90.dll \nmsvcp90.dll \nmsvcr90.dll \npython27.dll \nselect.pyd \nunicodedata.pyd\n\nStep 5: The YABROD downloader attempts to start the process %temp%\\GoogleUpdate.exe without \n\nchecking if the file exists.\n\nStep 6: The downloaded executable (4e007cb87626f0093a84ed50b1d27a7f), a variant of the CABLECAR \n\nlauncher, was launched on the victim system. CABLECAR parsed the PDF from step 2, looking for \nthe second "], "URLs": ["https://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/windows_pif_create.mspx", "http://ar.wikipedia.org/wiki/9%D9%85113_%D9%83%D9%88%D9%86%D9%83%D9%88%D8%B1%D8%B3is", "http://syria-cyber-warfare-intel-leak.pen.io", "https://securelist.com/files/2014/08/KL_report_syrian_malware.pdf", "http://eldeeb.net/wrdprs/?page_id=229", "http://www.washingtonpost.com/blogs/worldviews/wp/2012/11/30/can-u-s-communication-kits-help-syrians-get-around-the-Internet-blackout/", "http://alkhaleejonline.net/", "http://www.cbsnews.com/news/to-fight-assad-syrian-opposition-logs-on-at-any-cost/", "https://www.eff.org/document/quantum-surveillance-familiar-actors-and-possible-false-flags-syrian-malware-campaigns", "https://github.com/SherifEldeeb/UniLogger/blob/master/Source.cpp", "http://www.pyinstaller.org/", "http://blogs.msdn.com/b/ericfitz/archive/2011/08/22/off-topic-unicode-right-to-left-override-character-used-by-malware.aspx", "https://citizenlab.org/2014/12/malware-attack-targeting-syrian-isis-critics/", "https://www.eff.org/document/quantum-surveillance-familiar-actors-and-possible-false-flags-syrian-malware-campaigns;", "https://securelist.com/files/2014/08/KL_report_syrian_malware.pdf;"], "weight": 0.0}